[
  {
    "instruction": "Write a Zig function similar to isBaseline from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn isBaseline(this: *const BunBuildOptions) bool {\n        return this.arch.isX86() and\n            !Target.x86.featureSetHas(this.target.result.cpu.features, .avx2);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "isBaseline",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to shouldEmbedCode from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn shouldEmbedCode(opts: *const BunBuildOptions) bool {\n        return opts.optimize != .Debug or opts.codegen_embed;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "shouldEmbedCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildOptionsModule from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn buildOptionsModule(this: *BunBuildOptions, b: *Build) *Module {\n        if (this.cached_options_module) |mod| {\n            return mod;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "buildOptionsModule",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to windowsShim from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn windowsShim(this: *BunBuildOptions, b: *Build) WindowsShim {\n        return this.windows_shim orelse {\n            this.windows_shim = WindowsShim.create(b);\n            return this.windows_shim.?;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "windowsShim",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOSVersionMin from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn getOSVersionMin(os: OperatingSystem) ?Target.Query.OsVersion {\n    return switch (os) {\n        .mac => .{\n            .semver = .{ .major = 13, .minor = 0, .patch = 0 }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "getOSVersionMin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOSGlibCVersion from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn getOSGlibCVersion(os: OperatingSystem) ?Version {\n    return switch (os) {\n        // Compiling with a newer glibc than this will break certain cloud environments.\n        .linux => .{ .major = 2, .minor = 27, .patch = 0 }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "getOSGlibCVersion",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getCpuModel from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn getCpuModel(os: OperatingSystem, arch: Arch) ?Target.Query.CpuModel {\n    // https://github.com/oven-sh/bun/issues/12076\n    if (os == .linux and arch == .aarch64) {\n        return .{ .explicit = &Target.aarch64.cpu.cortex_a35 }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "getCpuModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to build from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn build(b: *Build) !void {\n    std.log.info(\"zig compiler v{s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to resolveTarget from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn resolveTarget(desc: TargetDescription, b: *Build) std.Build.ResolvedTarget {\n        return b.resolveTargetQuery(.{\n            .os_tag = OperatingSystem.stdOSTag(desc.os),\n            .cpu_arch = desc.arch,\n            .cpu_model = getCpuModel(desc.os, desc.arch) orelse .determined_by_arch_os,\n            .os_version_min = getOSVersionMin(desc.os),\n            .glibc_version = if (desc.musl) null else getOSGlibCVersion(desc.os),\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "resolveTarget",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addMultiCheck from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn addMultiCheck(\n    b: *Build,\n    parent_step: *Step,\n    root_build_options: BunBuildOptions,\n    to_check: []const TargetDescription,\n    optimize: []const std.builtin.OptimizeMode,\n) void {\n    for (to_check) |check| {\n        for (optimize) |mode| {\n            const check_target = check.resolveTarget(b);\n            var options: BunBuildOptions = .{\n                .target = check_target,\n                .os = check.os,\n                .arch = check_target.result.cpu.arch,\n                .optimize = mode,\n\n                .canary_revision = root_build_options.canary_revision,\n                .sha = root_build_options.sha,\n                .tracy_callstack_depth = root_build_options.tracy_callstack_depth,\n                .version = root_build_options.version,\n                .reported_nodejs_version = root_build_options.reported_nodejs_version,\n                .codegen_path = root_build_options.codegen_path,\n                .no_llvm = root_build_options.no_llvm,\n                .enable_asan = root_build_options.enable_asan,\n                .enable_valgrind = root_build_options.enable_valgrind,\n                .use_mimalloc = root_build_options.use_mimalloc,\n                .override_no_export_cpp_apis = root_build_options.override_no_export_cpp_apis,\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "addMultiCheck",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getTranslateC from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn getTranslateC(b: *Build, initial_target: std.Build.ResolvedTarget, optimize: std.builtin.OptimizeMode) LazyPath {\n    const target = b.resolveTargetQuery(q: {\n        var query = initial_target.query;\n        if (query.os_tag == .windows)\n            query.abi = .gnu;\n        break :q query;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "getTranslateC",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addBunObject from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn addBunObject(b: *Build, opts: *BunBuildOptions) *Compile {\n    // Create `@import(\"bun\")`, containing most of Bun's code.\n    const bun = b.createModule(.{\n        .root_source_file = b.path(\"src/bun.zig\"),\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "addBunObject",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to enableFastBuild from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn enableFastBuild(b: *Build) bool {\n    const val = b.graph.env_map.get(\"BUN_BUILD_FAST\") orelse return false;\n    return std.mem.eql(u8, val, \"1\");\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "enableFastBuild",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to configureObj from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn configureObj(b: *Build, opts: *BunBuildOptions, obj: *Compile) void {\n    // Flags on root module get used for the compilation\n    obj.root_module.omit_frame_pointer = false;\n    obj.root_module.strip = false; // stripped at the end\n    // https://github.com/ziglang/zig/issues/17430\n    obj.root_module.pic = true;\n\n    // Object options\n    obj.use_llvm = !opts.no_llvm;\n    obj.use_lld = if (opts.os == .mac or opts.os == .linux) false else !opts.no_llvm;\n\n    if (opts.optimize == .Debug) {\n        if (@hasField(std.meta.Child(@TypeOf(obj)), \"llvm_codegen_threads\"))\n            obj.llvm_codegen_threads = opts.llvm_codegen_threads orelse 0;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "configureObj",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addInstallObjectFile from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "pub fn addInstallObjectFile(\n    b: *Build,\n    compile: *Compile,\n    name: []const u8,\n    out_mode: ObjectFormat,\n) *Step {\n    // bin always needed to be computed or else the compilation will do nothing. zig build system bug?\n    const bin = compile.getEmittedBin();\n    return &b.addInstallFile(switch (out_mode) {\n        .obj => bin,\n        .bc => compile.getEmittedLlvmBc(),\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "addInstallObjectFile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exists from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn exists(path: []const u8) bool {\n    const entry = checked_file_exists.getOrPut(std.hash.Wyhash.hash(0, path)) catch unreachable;\n    if (entry.found_existing) {\n        // It would've panicked.\n        return true;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "exists",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addInternalImports from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn addInternalImports(b: *Build, mod: *Module, opts: *BunBuildOptions) void {\n    const os = opts.os;\n\n    mod.addImport(\"build_options\", opts.buildOptionsModule(b));\n\n    const translate_c = getTranslateC(b, opts.target, opts.optimize);\n    mod.addImport(\"translated-c-headers\", b.createModule(.{ .root_source_file = translate_c }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "addInternalImports",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to propagateImports from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn propagateImports(source_mod: *Module) !void {\n    var seen = std.AutoHashMap(*Module, void).init(source_mod.owner.graph.arena);\n    defer seen.deinit();\n    var queue = std.ArrayList(*Module).init(source_mod.owner.graph.arena);\n    defer queue.deinit();\n    try queue.appendSlice(source_mod.import_table.values());\n    while (queue.pop()) |mod| {\n        if ((try seen.getOrPut(mod)).found_existing) continue;\n        try queue.appendSlice(mod.import_table.values());\n\n        for (source_mod.import_table.keys(), source_mod.import_table.values()) |k, v|\n            if (mod.import_table.get(k) == null)\n                mod.addImport(k, v);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "propagateImports",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateGeneratedPath from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn validateGeneratedPath(path: []const u8) void {\n    if (!exists(path)) {\n        std.debug.panic(\n            \\\\Generated file '{s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "validateGeneratedPath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to create from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "fn create(b: *Build) WindowsShim {\n        const target = b.resolveTargetQuery(.{\n            .cpu_model = .{ .explicit = &std.Target.x86.cpu.nehalem }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "function",
      "name": "create",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BunBuildOptions from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "const BunBuildOptions = struct {\n    target: ResolvedTarget,\n    optimize: OptimizeMode,\n    os: OperatingSystem,\n    arch: Arch,\n\n    version: Version,\n    canary_revision: ?u32,\n    sha: []const u8,\n    /// enable debug logs in release builds\n    enable_logs: bool = false,\n    enable_asan: bool,\n    enable_valgrind: bool,\n    use_mimalloc: bool,\n    tracy_callstack_depth: u16,\n    reported_nodejs_version: Version,\n    /// To make iterating on some '@embedFile's faster, we load them at runtime\n    /// instead of at compile time. This is disabled in release or if this flag\n    /// is set (to allow CI to build a portable executable). Affected files:\n    ///\n    /// - src/bake/runtime.ts (bundled)\n    /// - src/bun.js/api/FFI.h\n    ///\n    /// A similar technique is used in C++ code for JavaScript builtins\n    codegen_embed: bool = false,\n\n    /// `./build/codegen` or equivalent\n    codegen_path: []const u8,\n    no_llvm: bool,\n    override_no_export_cpp_apis: bool,\n\n    cached_options_module: ?*Module = null,\n    windows_shim: ?WindowsShim = null,\n    llvm_codegen_threads: ?u32 = null,\n\n    pub fn isBaseline(this: *const BunBuildOptions) bool {\n        return this.arch.isX86() and\n            !Target.x86.featureSetHas(this.target.result.cpu.features, .avx2);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "struct",
      "name": "BunBuildOptions",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TargetDescription from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "const TargetDescription = struct {\n    os: OperatingSystem,\n    arch: Arch,\n    musl: bool = false,\n\n    fn resolveTarget(desc: TargetDescription, b: *Build) std.Build.ResolvedTarget {\n        return b.resolveTargetQuery(.{\n            .os_tag = OperatingSystem.stdOSTag(desc.os),\n            .cpu_arch = desc.arch,\n            .cpu_model = getCpuModel(desc.os, desc.arch) orelse .determined_by_arch_os,\n            .os_version_min = getOSVersionMin(desc.os),\n            .glibc_version = if (desc.musl) null else getOSGlibCVersion(desc.os),\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "struct",
      "name": "TargetDescription",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to WindowsShim from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "const WindowsShim = struct {\n    exe: *Compile,\n    dbg: *Compile,\n\n    fn create(b: *Build) WindowsShim {\n        const target = b.resolveTargetQuery(.{\n            .cpu_model = .{ .explicit = &std.Target.x86.cpu.nehalem }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "struct",
      "name": "WindowsShim",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to os from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig",
    "response": "const os: OperatingSystem = if (arch.isWasm())\n            .wasm\n        else switch (temp_resolved.result.os.tag) {\n            .macos => .mac,\n            .linux => .linux,\n            .windows => .windows,\n            else => |t| std.debug.panic(\"Unsupported OS tag {}\", .{t}),\n        };",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "build.zig",
      "type": "const",
      "name": "os",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to load from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn load() !void {\n        handle = std.posix.darwin.dlopen(\"libcompression.dylib\", 1);\n\n        if (handle == null)\n            return error.@\"failed to load Compression.framework\";\n\n        compression_encode_scratch_buffer_size = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_encode_scratch_buffer_size\").?));\n        compression_encode_buffer = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_encode_buffer\").?));\n        compression_decode_scratch_buffer_size = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_decode_scratch_buffer_size\").?));\n        compression_decode_buffer = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_decode_buffer\").?));\n        compression_stream_init = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_stream_init\").?));\n        compression_stream_process = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_stream_process\").?));\n        compression_stream_destroy = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_stream_destroy\").?));\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "load",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromName from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn fromName(name: []const u8) ?compression_algorithm {\n            if (std.mem.endsWith(u8, name, \".br\")) {\n                return .BROTLI;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "fromName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn init(src: []const u8, operation: compression_stream_operation, algorithm: compression_algorithm) !compression_stream {\n            var stream = compression_stream{\n                .src_ptr = src.ptr,\n                .src_size = src.len,\n                .dst_ptr = null,\n                .dst_size = 0,\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to process from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn process(stream: *compression_stream, data: []const u8, is_done: bool, comptime Iterator: type, iter: *Iterator) !StreamResult {\n            stream.src_ptr = data.ptr;\n            stream.src_size = data.len;\n\n            const initial_dest = try iter.wrote(0);\n            stream.dst_ptr = initial_dest.ptr;\n            stream.dst_size = initial_dest.len;\n\n            var total_written: usize = 0;\n            while (true) {\n                var flags: c_int = 0;\n                if (stream.src_size == 0 and is_done) {\n                    flags = COMPRESSION_STREAM_FINALIZE;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "process",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to compress from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn compress(data: []const u8, algorithm: compression_algorithm, is_done: bool, writer: anytype) !StreamResult {\n        var scratch_buffer: [64 * 1024]u8 = undefined;\n\n        const scratch_buffer_size = compression_encode_scratch_buffer_size(algorithm);\n        if (scratch_buffer_size >= scratch_buffer.len) {\n            std.debug.panic(\"scratch buffer size is too small {d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "compress",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to wrote from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn wrote(this: *@This(), w: usize) ![]u8 {\n                try this.writer.writeAll(this.scratch_buffer[0..w]);\n                return this.scratch_buffer;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "wrote",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to decompress from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn decompress(data: []const u8, algorithm: compression_algorithm, is_done: bool, writer: anytype) !StreamResult {\n        var scratch_buffer: [64 * 1024]u8 = undefined;\n\n        const scratch_buffer_size = compression_decode_scratch_buffer_size(algorithm);\n        if (scratch_buffer_size >= scratch_buffer.len) {\n            std.debug.panic(\"scratch buffer size is too small {d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "decompress",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to wrote from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn wrote(this: *@This(), w: usize) ![]u8 {\n                try this.writer.writeAll(this.scratch_buffer[0..w]);\n                return this.scratch_buffer;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "wrote",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub fn main() anyerror!void {\n    try CompressionFramework.load();\n\n    var args = std.process.args();\n    const argv0 = args.next() orelse \"\";\n\n    const first = args.next() orelse \"\";\n    const second = args.next() orelse \"\";\n    var algorithm: ?CompressionFramework.compression_algorithm = null;\n    var operation: ?CompressionFramework.compression_stream_operation = null;\n\n    if (CompressionFramework.compression_algorithm.fromName(first)) |a| {\n        algorithm = a;\n        operation = .DECODE;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "function",
      "name": "main",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CompressionFramework from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "const CompressionFramework = struct {\n    var handle: ?*anyopaque = null;\n    pub fn load() !void {\n        handle = std.posix.darwin.dlopen(\"libcompression.dylib\", 1);\n\n        if (handle == null)\n            return error.@\"failed to load Compression.framework\";\n\n        compression_encode_scratch_buffer_size = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_encode_scratch_buffer_size\").?));\n        compression_encode_buffer = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_encode_buffer\").?));\n        compression_decode_scratch_buffer_size = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_decode_scratch_buffer_size\").?));\n        compression_decode_buffer = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_decode_buffer\").?));\n        compression_stream_init = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_stream_init\").?));\n        compression_stream_process = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_stream_process\").?));\n        compression_stream_destroy = @alignCast(@ptrCast(std.c.dlsym(handle, \"compression_stream_destroy\").?));\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "struct",
      "name": "CompressionFramework",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Iterator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "const Iterator = struct {\n            writer: @TypeOf(writer),\n            scratch_buffer: []u8,\n            pub fn wrote(this: *@This(), w: usize) ![]u8 {\n                try this.writer.writeAll(this.scratch_buffer[0..w]);\n                return this.scratch_buffer;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "struct",
      "name": "Iterator",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Iterator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "const Iterator = struct {\n            writer: @TypeOf(writer),\n            scratch_buffer: []u8,\n            pub fn wrote(this: *@This(), w: usize) ![]u8 {\n                try this.writer.writeAll(this.scratch_buffer[0..w]);\n                return this.scratch_buffer;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "struct",
      "name": "Iterator",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to COMPRESSION_STREAM_ENCODE from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub const COMPRESSION_STREAM_ENCODE: c_int = 0;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "const",
      "name": "COMPRESSION_STREAM_ENCODE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to COMPRESSION_STREAM_DECODE from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub const COMPRESSION_STREAM_DECODE: c_int = 1;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "const",
      "name": "COMPRESSION_STREAM_DECODE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to COMPRESSION_STREAM_FINALIZE from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig",
    "response": "pub const COMPRESSION_STREAM_FINALIZE: c_int = 1;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/compression.zig",
      "type": "const",
      "name": "COMPRESSION_STREAM_FINALIZE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/features.zig",
    "response": "pub fn main() anyerror!void {\n    var stdout_ = std.io.getStdOut();\n    var stderr_ = std.io.getStdErr();\n    var output_source = Output.Source.init(stdout_, stderr_);\n    Output.Source.set(&output_source);\n    defer Output.flush();\n\n    var writer = Output.writer();\n    try Features.Serializer.writeAll(@TypeOf(writer), writer);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/features.zig",
      "type": "function",
      "name": "main",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to noop_resolver from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/http_bench.zig",
    "response": "fn noop_resolver(in: string) !string {\n    return in;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/http_bench.zig",
      "type": "function",
      "name": "noop_resolver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/http_bench.zig",
    "response": "pub fn parse(allocator: std.mem.Allocator) !Arguments {\n        var diag = clap.Diagnostic{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/http_bench.zig",
      "type": "function",
      "name": "parse",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/http_bench.zig",
    "response": "pub fn main() anyerror!void {\n    stdout_ = std.io.getStdOut();\n    stderr_ = std.io.getStdErr();\n    var output_source = Output.Source.init(stdout_, stderr_);\n    Output.Source.set(&output_source);\n\n    defer Output.flush();\n\n    const args = try Arguments.parse(default_allocator);\n\n    var channel = try default_allocator.create(HTTP.HTTPChannel);\n    channel.* = HTTP.HTTPChannel.init();\n\n    try channel.buffer.ensureTotalCapacity(args.count);\n\n    try NetworkThread.init();\n    if (args.concurrency > 0) HTTP.AsyncHTTP.max_simultaneous_requests.store(args.concurrency, .monotonic);\n    const Group = struct {\n        response_body: MutableString = undefined,\n        context: HTTP.HTTPChannelContext = undefined,\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/http_bench.zig",
      "type": "function",
      "name": "main",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Arguments from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/http_bench.zig",
    "response": "pub const Arguments = struct {\n    url: URL,\n    method: Method,\n    verbose: bool = false,\n    headers: Headers.Entries,\n    headers_buf: string,\n    body: string = \"\",\n    turbo: bool = false,\n    count: usize = 10,\n    repeat: usize = 0,\n    concurrency: u16 = 32,\n\n    pub fn parse(allocator: std.mem.Allocator) !Arguments {\n        var diag = clap.Diagnostic{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/http_bench.zig",
      "type": "struct",
      "name": "Arguments",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Group from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/http_bench.zig",
    "response": "const Group = struct {\n        response_body: MutableString = undefined,\n        context: HTTP.HTTPChannelContext = undefined,\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/http_bench.zig",
      "type": "struct",
      "name": "Group",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to noop_resolver from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/machbench.zig",
    "response": "fn noop_resolver(in: string) !string {\n    return in;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/machbench.zig",
      "type": "function",
      "name": "noop_resolver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to spamMe from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/machbench.zig",
    "response": "fn spamMe(count: usize) void {\n    Output.Source.configureNamedThread(\"1\");\n    defer Output.flush();\n    var timer = std.time.Timer.start() catch unreachable;\n\n    var i: usize = 0;\n    while (i < count) : (i += 1) {\n        waker.wake() catch unreachable;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/machbench.zig",
      "type": "function",
      "name": "spamMe",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to machMain from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/machbench.zig",
    "response": "pub fn machMain(runs: usize) anyerror!void {\n    defer Output.flush();\n    waker = try bun.Async.Waker.init(bun.default_allocator);\n\n    var args = try std.process.argsAlloc(bun.default_allocator);\n    const count = std.fmt.parseInt(usize, args[args.len - 1], 10) catch 1024;\n    var elapsed: u64 = 0;\n\n    var remaining_runs: usize = runs;\n    while (remaining_runs > 0) : (remaining_runs -= 1) {\n        var threads: [thread_count]std.Thread = undefined;\n        var j: usize = 0;\n        while (j < thread_count) : (j += 1) {\n            threads[j] = try std.Thread.spawn(.{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/machbench.zig",
      "type": "function",
      "name": "machMain",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to spamMeUserFilter from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/machbench.zig",
    "response": "fn spamMeUserFilter(count: usize) void {\n    Output.Source.configureNamedThread(\"2\");\n    defer Output.flush();\n    var timer = std.time.Timer.start() catch unreachable;\n    var i: usize = 0;\n    while (i < count * thread_count) : (i += 1) {\n        user_waker.wake() catch unreachable;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/machbench.zig",
      "type": "function",
      "name": "spamMeUserFilter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to userMain from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/machbench.zig",
    "response": "pub fn userMain(runs: usize) anyerror!void {\n    defer Output.flush();\n    user_waker = try bun.Async.UserFilterWaker.init(bun.default_allocator);\n\n    var args = try std.process.argsAlloc(bun.default_allocator);\n    const count = std.fmt.parseInt(usize, args[args.len - 1], 10) catch 1024;\n    var remaining_runs = runs;\n    var elapsed: u64 = 0;\n\n    while (remaining_runs > 0) : (remaining_runs -= 1) {\n        var threads: [thread_count]std.Thread = undefined;\n        var j: usize = 0;\n        while (j < thread_count) : (j += 1) {\n            threads[j] = try std.Thread.spawn(.{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/machbench.zig",
      "type": "function",
      "name": "userMain",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/machbench.zig",
    "response": "pub fn main() anyerror!void {\n    var stdout_ = std.io.getStdOut();\n    var stderr_ = std.io.getStdErr();\n    var output_source = Output.Source.init(stdout_, stderr_);\n    Output.Source.set(&output_source);\n\n    var args = try std.process.argsAlloc(bun.default_allocator);\n    const count = std.fmt.parseInt(usize, args[args.len - 1], 10) catch 1024;\n    Output.prettyErrorln(\"For {d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/machbench.zig",
      "type": "function",
      "name": "main",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/readlink-getfd.zig",
    "response": "pub fn main() anyerror!void {\n    var stdout_ = std.io.getStdOut();\n    var stderr_ = std.io.getStdErr();\n    var output_source = Output.Source.init(stdout_, stderr_);\n    Output.Source.set(&output_source);\n    defer Output.flush();\n\n    var args_buffer: [8192 * 2]u8 = undefined;\n    var fixed_buffer = std.heap.FixedBufferAllocator.init(&args_buffer);\n    var allocator = fixed_buffer.allocator();\n\n    var args = std.mem.bytesAsSlice([]u8, try std.process.argsAlloc(allocator));\n\n    const to_resolve = args[args.len - 1];\n    const cwd = try bun.getcwdAlloc(allocator);\n    var path: []u8 = undefined;\n    var out_buffer: bun.PathBuffer = undefined;\n\n    var j: usize = 0;\n    while (j < 1000) : (j += 1) {\n        var parts = [1][]const u8{to_resolve}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/readlink-getfd.zig",
      "type": "function",
      "name": "main",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to joined_z from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/readlink-getfd.zig",
    "response": "const joined_z: [:0]const u8 = joined_buf[0..joined.len :0];",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/readlink-getfd.zig",
      "type": "const",
      "name": "joined_z",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/readlink-realpath.zig",
    "response": "pub fn main() anyerror!void {\n    var stdout_ = std.io.getStdOut();\n    var stderr_ = std.io.getStdErr();\n    var output_source = Output.Source.init(stdout_, stderr_);\n    Output.Source.set(&output_source);\n    defer Output.flush();\n\n    var args_buffer: [8192 * 2]u8 = undefined;\n    var fixed_buffer = std.heap.FixedBufferAllocator.init(&args_buffer);\n    var allocator = fixed_buffer.allocator();\n\n    var args = std.mem.bytesAsSlice([]u8, try std.process.argsAlloc(allocator));\n\n    const to_resolve = args[args.len - 1];\n    var out_buffer: bun.PathBuffer = undefined;\n    var path: []u8 = undefined;\n\n    var j: usize = 0;\n    while (j < 1000) : (j += 1) {\n        path = try std.posix.realpathZ(to_resolve, &out_buffer);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/readlink-realpath.zig",
      "type": "function",
      "name": "main",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/tgz.zig",
    "response": "pub fn main() anyerror!void {\n    var stdout_ = std.io.getStdOut();\n    var stderr_ = std.io.getStdErr();\n    var output_source = Output.Source.init(stdout_, stderr_);\n    Output.Source.set(&output_source);\n    defer Output.flush();\n    var args = try std.process.argsAlloc(std.heap.c_allocator);\n    if (args.len < 2) {\n        Output.prettyErrorln(\"<r><b>usage<r>: tgz ./tar.gz\", .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "misctools/tgz.zig",
      "type": "function",
      "name": "main",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getStartTime from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "fn getStartTime() i128 {\n    return bun.start_time;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "getStartTime",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SetThreadDescription from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "fn SetThreadDescription(thread: std.os.windows.HANDLE, name: [*:0]const u16) callconv(std.os.windows.WINAPI) std.os.windows.HRESULT;\n\npub fn setThreadName(name: [:0]const u8) void {\n    if (Environment.isLinux) {\n        _ = std.posix.prctl(.SET_NAME, .{@intFromPtr(name.ptr)}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "SetThreadDescription",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Bun__atexit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "fn Bun__atexit(function: ExitFn) void {\n    if (std.mem.indexOfScalar(ExitFn, on_exit_callbacks.items, function) == null) {\n        on_exit_callbacks.append(bun.default_allocator, function) catch {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "Bun__atexit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addExitCallback from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn addExitCallback(function: ExitFn) void {\n    Bun__atexit(function);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "addExitCallback",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to runExitCallbacks from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn runExitCallbacks() void {\n    for (on_exit_callbacks.items) |callback| {\n        callback();\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "runExitCallbacks",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bun_is_exiting from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "fn bun_is_exiting() c_int {\n    return @intFromBool(isExiting());\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "bun_is_exiting",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isExiting from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn isExiting() bool {\n    return is_exiting.load(.monotonic);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "isExiting",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn exit(code: u32) noreturn {\n    is_exiting.store(true, .monotonic);\n    _ = @atomicRmw(usize, &bun.analytics.Features.exited, .Add, 1, .monotonic);\n\n    // If we are crashing, allow the crash handler to finish it's work.\n    bun.crash_handler.sleepForeverIfAnotherThreadIsCrashing();\n\n    if (Environment.isDebug) {\n        bun.assert(bun.debug_allocator_data.backing.?.deinit() == .ok);\n        bun.debug_allocator_data.backing = null;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "exit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to raiseIgnoringPanicHandler from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn raiseIgnoringPanicHandler(sig: bun.SignalCode) noreturn {\n    Output.flush();\n    Output.Source.Stdio.restore();\n\n    // clear segfault handler\n    bun.crash_handler.resetSegfaultHandler();\n\n    // clear signal handler\n    if (bun.Environment.os != .windows) {\n        var sa: std.c.Sigaction = .{\n            .handler = .{ .handler = std.posix.SIG.DFL }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "raiseIgnoringPanicHandler",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mimalloc_cleanup from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "fn mimalloc_cleanup(force: bool) void {\n    if (comptime use_mimalloc) {\n        Mimalloc.mi_collect(force);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "mimalloc_cleanup",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to configureAllocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "fn configureAllocator(_: AllocatorConfiguration) void {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "configureAllocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to notimpl from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn notimpl() noreturn {\n    @branchHint(.cold);\n    Output.panic(\"Not implemented yet!!!!!\", .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "notimpl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to crash from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn crash() noreturn {\n    @branchHint(.cold);\n    Global.exit(1);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "crash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generate from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub fn generate(comptime Bundler: type, _: Bundler, allocator: std.mem.Allocator) !JSAst.Expr {\n        const info = BunInfo{\n            .bun_version = Global.package_json_version,\n            .platform = analytics.GenerateHeader.GeneratePlatform.forOS(),\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "generate",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Bun__onExit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "fn Bun__onExit() void {\n    bun.jsc.Node.FSEvents.closeAndWait();\n\n    runExitCallbacks();\n    Output.flush();\n    std.mem.doNotOptimizeAway(&Bun__atexit);\n\n    Output.Source.Stdio.restore();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "function",
      "name": "Bun__onExit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AllocatorConfiguration from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub const AllocatorConfiguration = struct {\n    verbose: bool = false,\n    long_running: bool = false,\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "struct",
      "name": "AllocatorConfiguration",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BunInfo from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "pub const BunInfo = struct {\n    bun_version: string,\n    platform: analytics.GenerateHeader.GeneratePlatform.Platform,\n\n    const analytics = bun.analytics;\n    const JSON = bun.json;\n    const JSAst = bun.ast;\n    pub fn generate(comptime Bundler: type, _: Bundler, allocator: std.mem.Allocator) !JSAst.Expr {\n        const info = BunInfo{\n            .bun_version = Global.package_json_version,\n            .platform = analytics.GenerateHeader.GeneratePlatform.forOS(),\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "struct",
      "name": "BunInfo",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to Bun__userAgent from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig",
    "response": "const Bun__userAgent: [*:0]const u8 = Global.user_agent;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Global.zig",
      "type": "const",
      "name": "Bun__userAgent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn init(allocator: std.mem.Allocator, log: *logger.Log, source: *const logger.Source) HTMLScanner {\n    return .{\n        .allocator = allocator,\n        .import_records = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn deinit(this: *HTMLScanner) void {\n    for (this.import_records.slice()) |*record| {\n        this.allocator.free(record.path.text);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createImportRecord from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "fn createImportRecord(this: *HTMLScanner, input_path: []const u8, kind: ImportKind) !void {\n    // In HTML, sometimes people do /src/index.js\n    // In that case, we don't want to use the absolute filesystem path, we want to use the path relative to the project root\n    const path_to_use = if (input_path.len > 1 and input_path[0] == '/')\n        bun.path.joinAbsString(bun.fs.FileSystem.instance.top_level_dir, &[_][]const u8{input_path[1..]}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "createImportRecord",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to onWriteHTML from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn onWriteHTML(_: *HTMLScanner, bytes: []const u8) void {\n    _ = bytes; // bytes are not written in scan phase\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "onWriteHTML",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onHTMLParseError from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn onHTMLParseError(this: *HTMLScanner, message: []const u8) void {\n    this.log.addError(\n        this.source,\n        logger.Loc.Empty,\n        message,\n    ) catch |err| bun.handleOom(err);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "onHTMLParseError",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onTag from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn onTag(this: *HTMLScanner, _: *lol.Element, path: []const u8, url_attribute: []const u8, kind: ImportKind) void {\n    _ = url_attribute;\n    this.createImportRecord(path, kind) catch {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "onTag",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to scan from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn scan(this: *HTMLScanner, input: []const u8) !void {\n    try processor.run(this, input);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "scan",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to HTMLProcessor from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn HTMLProcessor(\n    comptime T: type,\n    /// If the visitor should visit html, head, body\n    comptime visit_document_tags: bool,\n) type {\n    return struct {\n        const TagHandler = struct {\n            /// CSS selector to match elements\n            selector: []const u8,\n            /// Whether this tag can have text content that needs to be processed\n            has_content: bool = false,\n            /// The attribute to extract the URL from\n            url_attribute: []const u8,\n            /// The kind of import to create\n            kind: ImportKind,\n\n            is_head_or_html: bool = false,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "HTMLProcessor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateHandlerForTag from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "fn generateHandlerForTag(comptime tag_info: TagHandler) fn (*T, *lol.Element) bool {\n            const Handler = struct {\n                pub fn handle(this: *T, element: *lol.Element) bool {\n                    // Handle URL attribute if present\n                    if (tag_info.url_attribute.len > 0) {\n                        if (element.hasAttribute(tag_info.url_attribute) catch false) {\n                            const value = element.getAttribute(tag_info.url_attribute);\n                            defer value.deinit();\n                            if (value.len > 0) {\n                                debug(\"{s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "generateHandlerForTag",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "pub fn run(this: *T, input: []const u8) !void {\n            var builder = lol.HTMLRewriter.Builder.init();\n            defer builder.deinit();\n\n            var selectors: bun.BoundedArray(*lol.HTMLSelector, tag_handlers.len + if (visit_document_tags) 3 else 0) = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TagHandler from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "const TagHandler = struct {\n            /// CSS selector to match elements\n            selector: []const u8,\n            /// Whether this tag can have text content that needs to be processed\n            has_content: bool = false,\n            /// The attribute to extract the URL from\n            url_attribute: []const u8,\n            /// The kind of import to create\n            kind: ImportKind,\n\n            is_head_or_html: bool = false,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "struct",
      "name": "TagHandler",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Handler from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "const Handler = struct {\n                pub fn handle(this: *T, element: *lol.Element) bool {\n                    // Handle URL attribute if present\n                    if (tag_info.url_attribute.len > 0) {\n                        if (element.hasAttribute(tag_info.url_attribute) catch false) {\n                            const value = element.getAttribute(tag_info.url_attribute);\n                            defer value.deinit();\n                            if (value.len > 0) {\n                                debug(\"{s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "struct",
      "name": "Handler",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to dirname from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig",
    "response": "const dirname: []const u8 = std.fs.path.dirname(this.source.path.text) orelse break :blk input_path;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/HTMLScanner.zig",
      "type": "const",
      "name": "dirname",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn deinit(this: *OutputFile) void {\n    this.value.deinit();\n\n    bun.default_allocator.free(this.src_path.text);\n    bun.default_allocator.free(this.dest_path);\n    bun.default_allocator.free(this.referenced_css_chunks);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromFile from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn fromFile(fd: bun.FD, pathname: string) FileOperation {\n        return .{\n            .fd = fd,\n            .pathname = pathname,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "fromFile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getPathname from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn getPathname(file: *const FileOperation) string {\n        if (file.is_tmpdir) {\n            return resolve_path.joinAbs(@TypeOf(Fs.FileSystem.instance.fs).tmpdir_path, .auto, file.pathname);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "getPathname",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn deinit(this: *Value) void {\n        switch (this.*) {\n            .buffer => |buf| {\n                buf.allocator.free(buf.bytes);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to asSlice from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn asSlice(v: Value) []const u8 {\n        return switch (v) {\n            .buffer => |buf| buf.bytes,\n            else => \"\",\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "asSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toBunString from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn toBunString(v: Value) bun.String {\n        return switch (v) {\n            .noop => bun.String.empty,\n            .buffer => |buf| {\n                // Use ExternalStringImpl to avoid cloning the string, at\n                // the cost of allocating space to remember the allocator.\n                const FreeContext = struct {\n                    allocator: std.mem.Allocator,\n\n                    fn onFree(ctx: *@This(), buffer: *anyopaque, len: u32) callconv(.C) void {\n                        ctx.allocator.free(@as([*]u8, @ptrCast(buffer))[0..len]);\n                        bun.destroy(ctx);\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "toBunString",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to toJS from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn toJS(\n        globalThis: *jsc.JSGlobalObject,\n        path: []const u8,\n        byte_size: usize,\n    ) jsc.JSValue {\n        const mime_type = globalThis.bunVM().mimeType(path);\n        const store = jsc.WebCore.Blob.Store.initFile(\n            jsc.Node.PathOrFileDescriptor{\n                .path = jsc.Node.PathLike{\n                    .string = bun.PathString.init(path),\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "toJS",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initPending from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn initPending(loader: Loader, pending: resolver.Result) OutputFile {\n    return .{\n        .loader = loader,\n        .src_path = pending.pathConst().?.*,\n        .size = 0,\n        .value = .{ .pending = pending }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "initPending",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initFile from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn initFile(file: std.fs.File, pathname: string, size: usize) OutputFile {\n    return .{\n        .loader = .file,\n        .src_path = Fs.Path.init(pathname),\n        .size = size,\n        .value = .{ .copy = FileOperation.fromFile(file.handle, pathname) }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "initFile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initFileWithDir from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn initFileWithDir(file: std.fs.File, pathname: string, size: usize, dir: std.fs.Dir) OutputFile {\n    var res = initFile(file, pathname, size);\n    res.value.copy.dir_handle = .fromStdDir(dir);\n    return res;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "initFileWithDir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn init(options: Options) OutputFile {\n    return .{\n        .loader = options.loader,\n        .input_loader = options.input_loader,\n        .src_path = Fs.Path.init(options.input_path),\n        .dest_path = options.output_path,\n        .source_index = options.source_index,\n        .size = options.size orelse switch (options.data) {\n            .buffer => |buf| buf.data.len,\n            .file => |file| file.size,\n            .saved => 0,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writeToDisk from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn writeToDisk(f: OutputFile, root_dir: std.fs.Dir, root_dir_path: []const u8) !void {\n    switch (f.value) {\n        .noop => {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "writeToDisk",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to moveTo from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn moveTo(file: *const OutputFile, _: string, rel_path: []const u8, dir: FileDescriptorType) !void {\n    try bun.sys.moveFileZ(file.value.move.dir, bun.sliceTo(&(try std.posix.toPosixPath(file.value.move.getPathname())), 0), dir, bun.sliceTo(&(try std.posix.toPosixPath(rel_path)), 0));\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "moveTo",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to copyTo from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn copyTo(file: *const OutputFile, _: string, rel_path: []const u8, dir: FileDescriptorType) !void {\n    const fd_out = bun.FD.fromStdFile(try dir.stdDir().createFile(rel_path, .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "copyTo",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to toJS from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn toJS(\n    this: *OutputFile,\n    owned_pathname: ?[]const u8,\n    globalObject: *jsc.JSGlobalObject,\n) bun.jsc.JSValue {\n    return switch (this.value) {\n        .move, .pending => @panic(\"Unexpected pending output file\"),\n        .noop => .js_undefined,\n        .copy => |copy| brk: {\n            const file_blob = jsc.WebCore.Blob.Store.initFile(\n                if (copy.fd.isValid())\n                    jsc.Node.PathOrFileDescriptor{\n                        .fd = copy.fd,\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "toJS",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toBlob from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub fn toBlob(\n    this: *OutputFile,\n    allocator: std.mem.Allocator,\n    globalThis: *jsc.JSGlobalObject,\n) !jsc.WebCore.Blob {\n    return switch (this.value) {\n        .move, .pending => @panic(\"Unexpected pending output file\"),\n        .noop => @panic(\"Cannot convert noop output file to blob\"),\n        .copy => |copy| brk: {\n            const file_blob = try jsc.WebCore.Blob.Store.initFile(\n                if (copy.fd.isValid())\n                    jsc.Node.PathOrFileDescriptor{\n                        .fd = copy.fd,\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "function",
      "name": "toBlob",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BakeExtra from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub const BakeExtra = struct {\n    is_route: bool = false,\n    fully_static: bool = false,\n    bake_is_runtime: bool = false,\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "struct",
      "name": "BakeExtra",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to FileOperation from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub const FileOperation = struct {\n    pathname: string,\n    fd: FileDescriptorType = bun.invalid_fd,\n    dir: FileDescriptorType = bun.invalid_fd,\n    is_tmpdir: bool = false,\n    is_outdir: bool = false,\n    close_handle_on_complete: bool = false,\n    autowatch: bool = true,\n\n    pub fn fromFile(fd: bun.FD, pathname: string) FileOperation {\n        return .{\n            .fd = fd,\n            .pathname = pathname,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "struct",
      "name": "FileOperation",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to FreeContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "const FreeContext = struct {\n                    allocator: std.mem.Allocator,\n\n                    fn onFree(ctx: *@This(), buffer: *anyopaque, len: u32) callconv(.C) void {\n                        ctx.allocator.free(@as([*]u8, @ptrCast(buffer))[0..len]);\n                        bun.destroy(ctx);\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "struct",
      "name": "FreeContext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SavedFile from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub const SavedFile = struct {\n    pub fn toJS(\n        globalThis: *jsc.JSGlobalObject,\n        path: []const u8,\n        byte_size: usize,\n    ) jsc.JSValue {\n        const mime_type = globalThis.bunVM().mimeType(path);\n        const store = jsc.WebCore.Blob.Store.initFile(\n            jsc.Node.PathOrFileDescriptor{\n                .path = jsc.Node.PathLike{\n                    .string = bun.PathString.init(path),\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "struct",
      "name": "SavedFile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Options from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig",
    "response": "pub const Options = struct {\n    loader: Loader,\n    input_loader: Loader,\n    hash: ?u64 = null,\n    source_map_index: ?u32 = null,\n    bytecode_index: ?u32 = null,\n    output_path: string,\n    source_index: Index.Optional = .none,\n    size: ?usize = null,\n    input_path: []const u8 = \"\",\n    display_size: u32 = 0,\n    output_kind: jsc.API.BuildArtifact.OutputKind,\n    is_executable: bool,\n    data: union(enum) {\n        buffer: struct {\n            allocator: std.mem.Allocator,\n            data: []const u8,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/OutputFile.zig",
      "type": "struct",
      "name": "Options",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to start from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn start(self: *Node, name: []const u8, estimated_total_items: usize) Node {\n        return Node{\n            .context = self.context,\n            .parent = self,\n            .name = name,\n            .unprotected_estimated_total_items = estimated_total_items,\n            .unprotected_completed_items = 0,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to completeOne from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn completeOne(self: *Node) void {\n        if (self.parent) |parent| {\n            @atomicStore(?*Node, &parent.recently_updated_child, self, .release);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "completeOne",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to end from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn end(self: *Node) void {\n        self.context.maybeRefresh();\n        if (self.parent) |parent| {\n            {\n                self.context.update_mutex.lock();\n                defer self.context.update_mutex.unlock();\n                _ = @cmpxchgStrong(?*Node, &parent.recently_updated_child, self, null, .monotonic, .monotonic);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "end",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to activate from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn activate(self: *Node) void {\n        if (self.parent) |parent| {\n            @atomicStore(?*Node, &parent.recently_updated_child, self, .release);\n            self.context.maybeRefresh();\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "activate",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setName from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn setName(self: *Node, name: []const u8) void {\n        const progress = self.context;\n        progress.update_mutex.lock();\n        defer progress.update_mutex.unlock();\n        self.name = name;\n        if (self.parent) |parent| {\n            @atomicStore(?*Node, &parent.recently_updated_child, self, .release);\n            if (parent.parent) |grand_parent| {\n                @atomicStore(?*Node, &grand_parent.recently_updated_child, parent, .release);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "setName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setUnit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn setUnit(self: *Node, unit: []const u8) void {\n        const progress = self.context;\n        progress.update_mutex.lock();\n        defer progress.update_mutex.unlock();\n        self.unit = unit;\n        if (self.parent) |parent| {\n            @atomicStore(?*Node, &parent.recently_updated_child, self, .release);\n            if (parent.parent) |grand_parent| {\n                @atomicStore(?*Node, &grand_parent.recently_updated_child, parent, .release);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "setUnit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setEstimatedTotalItems from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn setEstimatedTotalItems(self: *Node, count: usize) void {\n        @atomicStore(usize, &self.unprotected_estimated_total_items, count, .monotonic);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "setEstimatedTotalItems",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setCompletedItems from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn setCompletedItems(self: *Node, completed_items: usize) void {\n        @atomicStore(usize, &self.unprotected_completed_items, completed_items, .monotonic);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "setCompletedItems",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to start from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn start(self: *Progress, name: []const u8, estimated_total_items: usize) *Node {\n    const stderr = std.io.getStdErr();\n    self.terminal = null;\n    if (stderr.supportsAnsiEscapeCodes()) {\n        self.terminal = stderr;\n        self.supports_ansi_escape_codes = true;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to maybeRefresh from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn maybeRefresh(self: *Progress) void {\n    if (self.timer) |*timer| {\n        if (!self.update_mutex.tryLock()) return;\n        defer self.update_mutex.unlock();\n        maybeRefreshWithHeldLock(self, timer);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "maybeRefresh",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to maybeRefreshWithHeldLock from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "fn maybeRefreshWithHeldLock(self: *Progress, timer: *std.time.Timer) void {\n    const now = timer.read();\n    if (now < self.initial_delay_ns) return;\n    // TODO I have observed this to happen sometimes. I think we need to follow Rust's\n    // lead and guarantee monotonically increasing times in the std lib itself.\n    if (now < self.prev_refresh_timestamp) return;\n    if (now - self.prev_refresh_timestamp < self.refresh_rate_ns) return;\n    return self.refreshWithHeldLock();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "maybeRefreshWithHeldLock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to refresh from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn refresh(self: *Progress) void {\n    if (!self.update_mutex.tryLock()) return;\n    defer self.update_mutex.unlock();\n\n    return self.refreshWithHeldLock();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "refresh",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clearWithHeldLock from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "fn clearWithHeldLock(p: *Progress, end_ptr: *usize) void {\n    const file = p.terminal orelse return;\n    var end = end_ptr.*;\n    if (p.columns_written > 0) {\n        // restore the cursor position by moving the cursor\n        // `columns_written` cells to the left, then clear the rest of the\n        // line\n        if (p.supports_ansi_escape_codes) {\n            end += (std.fmt.bufPrint(p.output_buffer[end..], \"\\x1b[{d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "clearWithHeldLock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to refreshWithHeldLock from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "fn refreshWithHeldLock(self: *Progress) void {\n    const is_dumb = !self.supports_ansi_escape_codes and !self.is_windows_terminal;\n    if (is_dumb and self.dont_print_on_dumb) return;\n\n    const file = self.terminal orelse return;\n\n    var end: usize = 0;\n    clearWithHeldLock(self, &end);\n\n    if (!self.done) {\n        var need_ellipse = false;\n        var maybe_node: ?*Node = &self.root;\n        while (maybe_node) |node| {\n            if (need_ellipse) {\n                self.bufWrite(&end, \"... \", .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "refreshWithHeldLock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to log from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn log(self: *Progress, comptime format: []const u8, args: anytype) void {\n    const file = self.terminal orelse {\n        (std.debug).print(format, args);\n        return;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "log",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to lock_stderr from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn lock_stderr(p: *Progress) void {\n    p.update_mutex.lock();\n    if (p.terminal) |file| {\n        var end: usize = 0;\n        clearWithHeldLock(p, &end);\n        _ = file.write(p.output_buffer[0..end]) catch {\n            // stop trying to write to this file\n            p.terminal = null;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "lock_stderr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unlock_stderr from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub fn unlock_stderr(p: *Progress) void {\n    std.debug.getStderrMutex().unlock();\n    p.update_mutex.unlock();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "unlock_stderr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bufWrite from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "fn bufWrite(self: *Progress, end: *usize, comptime format: []const u8, args: anytype) void {\n    if (std.fmt.bufPrint(self.output_buffer[end.*..], format, args)) |written| {\n        const amt = written.len;\n        end.* += amt;\n        self.columns_written += amt;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "function",
      "name": "bufWrite",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Node from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig",
    "response": "pub const Node = struct {\n    context: *Progress,\n    parent: ?*Node,\n    name: []const u8,\n    unit: []const u8 = \"\",\n    /// Must be handled atomically to be thread-safe.\n    recently_updated_child: ?*Node = null,\n    /// Must be handled atomically to be thread-safe. 0 means null.\n    unprotected_estimated_total_items: usize,\n    /// Must be handled atomically to be thread-safe.\n    unprotected_completed_items: usize,\n\n    /// Create a new child progress node. Thread-safe.\n    /// Call `Node.end` when done.\n    /// TODO solve https://github.com/ziglang/zig/issues/2765 and then change this\n    /// API to set `self.parent.recently_updated_child` with the return value.\n    /// Until that is fixed you probably want to call `activate` on the return value.\n    /// Passing 0 for `estimated_total_items` means unknown.\n    pub fn start(self: *Node, name: []const u8, estimated_total_items: usize) Node {\n        return Node{\n            .context = self.context,\n            .parent = self,\n            .name = name,\n            .unprotected_estimated_total_items = estimated_total_items,\n            .unprotected_completed_items = 0,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Progress.zig",
      "type": "struct",
      "name": "Node",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn get() ?*StandaloneModuleGraph {\n        return Instance.instance;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn set(instance: *StandaloneModuleGraph) void {\n        Instance.instance = instance;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "set",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to targetBasePublicPath from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn targetBasePublicPath(target: Environment.OperatingSystem, comptime suffix: [:0]const u8) [:0]const u8 {\n        return switch (target) {\n            .windows => \"B:/~BUN/\" ++ suffix,\n            else => \"/$bunfs/\" ++ suffix,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "targetBasePublicPath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isBunStandaloneFilePathCanonicalized from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn isBunStandaloneFilePathCanonicalized(str: []const u8) bool {\n        return bun.strings.hasPrefixComptime(str, base_path) or\n            (Environment.isWindows and bun.strings.hasPrefixComptime(str, base_public_path));\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "isBunStandaloneFilePathCanonicalized",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isBunStandaloneFilePath from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn isBunStandaloneFilePath(str: []const u8) bool {\n        if (Environment.isWindows) {\n            // On Windows, remove NT path prefixes before checking\n            const canonicalized = strings.withoutNTPrefix(u8, str);\n            return isBunStandaloneFilePathCanonicalized(canonicalized);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "isBunStandaloneFilePath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to entryPoint from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn entryPoint(this: *const StandaloneModuleGraph) *File {\n        return &this.files.values()[this.entry_point_id];\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "entryPoint",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to find from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn find(this: *const StandaloneModuleGraph, name: []const u8) ?*File {\n        if (!isBunStandaloneFilePath(name)) {\n            return null;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "find",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stat from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn stat(this: *const StandaloneModuleGraph, name: []const u8) ?bun.Stat {\n        const file = this.find(name) orelse return null;\n        return file.stat();\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "stat",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to findAssumeStandalonePath from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn findAssumeStandalonePath(this: *const StandaloneModuleGraph, name: []const u8) ?*File {\n        if (Environment.isWindows) {\n            var normalized_buf: bun.PathBuffer = undefined;\n            const input = strings.withoutNTPrefix(u8, name);\n            const normalized = bun.path.platformToPosixBuf(u8, input, &normalized_buf);\n            return this.files.getPtr(normalized);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "findAssumeStandalonePath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Bun__getStandaloneModuleGraphMachoLength from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "fn Bun__getStandaloneModuleGraphMachoLength() ?*align(1) u32;\n\n        pub fn getData() ?[]const u8 {\n            if (Bun__getStandaloneModuleGraphMachoLength()) |length| {\n                if (length.* < 8) {\n                    return null;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "Bun__getStandaloneModuleGraphMachoLength",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Bun__getStandaloneModuleGraphPELength from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "fn Bun__getStandaloneModuleGraphPELength() u32;\n        pub extern \"C\" fn Bun__getStandaloneModuleGraphPEData() ?[*]u8;\n\n        pub fn getData() ?[]const u8 {\n            const length = Bun__getStandaloneModuleGraphPELength();\n            if (length == 0) return null;\n\n            const data_ptr = Bun__getStandaloneModuleGraphPEData() orelse return null;\n            return data_ptr[0..length];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "Bun__getStandaloneModuleGraphPELength",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to appearsInEmbeddedFilesArray from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn appearsInEmbeddedFilesArray(this: *const File) bool {\n            return this.side == .client or !this.loader.isJavaScriptLike();\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "appearsInEmbeddedFilesArray",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stat from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn stat(this: *const File) bun.Stat {\n            var result = std.mem.zeroes(bun.Stat);\n            result.size = @intCast(this.contents.len);\n            result.mode = bun.S.IFREG | 0o644;\n            return result;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "stat",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to lessThanByIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn lessThanByIndex(ctx: []const File, lhs_i: u32, rhs_i: u32) bool {\n            const lhs = ctx[lhs_i];\n            const rhs = ctx[rhs_i];\n            return bun.strings.cmpStringsAsc({}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "lessThanByIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toWTFString from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn toWTFString(this: *File) bun.String {\n            if (this.wtf_string.isEmpty()) {\n                switch (this.encoding) {\n                    .binary, .utf8 => {\n                        this.wtf_string = bun.String.cloneUTF8(this.contents);\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "toWTFString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blob from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn blob(this: *File, globalObject: *bun.jsc.JSGlobalObject) *bun.webcore.Blob {\n            if (this.cached_blob == null) {\n                const store = bun.webcore.Blob.Store.init(@constCast(this.contents), bun.default_allocator);\n                // make it never free\n                store.ref();\n\n                const b = bun.webcore.Blob.initWithStore(store, globalObject).new();\n\n                if (bun.http.MimeType.byExtensionNoDefault(bun.strings.trimLeadingChar(std.fs.path.extension(this.name), '.'))) |mime| {\n                    store.mime_type = mime;\n                    b.content_type = mime.value;\n                    b.content_type_was_set = true;\n                    b.content_type_allocated = false;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "blob",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to load from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn load(this: *LazySourceMap) ?*SourceMap.ParsedSourceMap {\n            init_lock.lock();\n            defer init_lock.unlock();\n\n            return switch (this.*) {\n                .none => null,\n                .parsed => |map| map,\n                .serialized => |serialized| {\n                    var stored = switch (SourceMap.Mapping.parse(\n                        bun.default_allocator,\n                        serialized.mappingVLQ(),\n                        null,\n                        std.math.maxInt(i32),\n                        std.math.maxInt(i32),\n                        .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "load",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromBytes from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn fromBytes(allocator: std.mem.Allocator, raw_bytes: []u8, offsets: Offsets) !StandaloneModuleGraph {\n        if (raw_bytes.len == 0) return StandaloneModuleGraph{\n            .files = bun.StringArrayHashMap(File).init(allocator),\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "fromBytes",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to sliceTo from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "fn sliceTo(bytes: []const u8, ptr: bun.StringPointer) []const u8 {\n        if (ptr.length == 0) return \"\";\n\n        return bytes[ptr.offset..][0..ptr.length];\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "sliceTo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sliceToZ from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "fn sliceToZ(bytes: []const u8, ptr: bun.StringPointer) [:0]const u8 {\n        if (ptr.length == 0) return \"\";\n\n        return bytes[ptr.offset..][0..ptr.length :0];\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "sliceToZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toBytes from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn toBytes(allocator: std.mem.Allocator, prefix: []const u8, output_files: []const bun.options.OutputFile, output_format: bun.options.Format, compile_exec_argv: []const u8) ![]u8 {\n        var serialize_trace = bun.perf.trace(\"StandaloneModuleGraph.serialize\");\n        defer serialize_trace.end();\n\n        var entry_point_id: ?usize = null;\n        var string_builder = bun.StringBuilder{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "toBytes",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to message from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn message(this: Reason) []const u8 {\n                    return switch (this) {\n                        .no_entry_point => \"No entry point found for compilation\",\n                        .no_output_files => \"No output files to bundle\",\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "message",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to slice from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn slice(this: *const Error) []const u8 {\n                return switch (this.*) {\n                    .message => this.message,\n                    .reason => this.reason.message(),\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "slice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fail from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn fail(reason: Error.Reason) CompileResult {\n            return .{ .err = .{ .reason = reason }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "fail",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to failFmt from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn failFmt(comptime fmt: []const u8, args: anytype) CompileResult {\n            return .{ .err = .{ .message = bun.handleOom(std.fmt.allocPrint(bun.default_allocator, fmt, args)) }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "failFmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn deinit(this: *const @This()) void {\n            switch (this.*) {\n                .success => {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to inject from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn inject(bytes: []const u8, self_exe: [:0]const u8, inject_options: InjectOptions, target: *const CompileTarget) bun.FileDescriptor {\n        var buf: bun.PathBuffer = undefined;\n        var zname: [:0]const u8 = bun.fs.FileSystem.tmpname(\"bun-build\", &buf, @as(u64, @bitCast(std.time.milliTimestamp()))) catch |err| {\n            Output.prettyErrorln(\"<r><red>error<r><d>:<r> failed to get temporary file name: {s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "inject",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to toClean from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn toClean(name: [:0]const u8, fd: bun.FileDescriptor) void {\n                // Ensure we own the file\n                if (Environment.isPosix) {\n                    // Make the file writable so we can delete it\n                    _ = Syscall.fchmod(fd, 0o777);\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "toClean",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to download from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn download(allocator: std.mem.Allocator, target: *const CompileTarget, env: *bun.DotEnv.Loader) ![:0]const u8 {\n        var exe_path_buf: bun.PathBuffer = undefined;\n        var version_str_buf: [1024]u8 = undefined;\n        const version_str = try std.fmt.bufPrintZ(&version_str_buf, \"{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "download",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to toExecutable from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn toExecutable(\n        target: *const CompileTarget,\n        allocator: std.mem.Allocator,\n        output_files: []const bun.options.OutputFile,\n        root_dir: std.fs.Dir,\n        module_prefix: []const u8,\n        outfile: []const u8,\n        env: *bun.DotEnv.Loader,\n        output_format: bun.options.Format,\n        windows_options: bun.options.WindowsOptions,\n        compile_exec_argv: []const u8,\n        self_exe_path: ?[]const u8,\n    ) !CompileResult {\n        const bytes = toBytes(allocator, module_prefix, output_files, output_format, compile_exec_argv) catch |err| {\n            return CompileResult.failFmt(\"failed to generate module graph bytes: {s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "toExecutable",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromExecutable from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn fromExecutable(allocator: std.mem.Allocator) !?StandaloneModuleGraph {\n        if (comptime Environment.isMac) {\n            const macho_bytes = Macho.getData() orelse return null;\n            if (macho_bytes.len < @sizeOf(Offsets) + trailer.len) {\n                Output.debugWarn(\"bun standalone module graph is too small to be valid\", .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "fromExecutable",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to isBuiltInExe from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "fn isBuiltInExe(comptime T: type, argv0: []const T) bool {\n        if (argv0.len == 0) return false;\n\n        if (argv0.len == 3) {\n            if (bun.strings.eqlComptimeCheckLenWithType(T, argv0, bun.strings.literal(T, \"bun\"), false)) {\n                return true;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "isBuiltInExe",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to openSelf from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "fn openSelf() std.fs.OpenSelfExeError!bun.FileDescriptor {\n        if (!Environment.isWindows) {\n            const argv = bun.argv;\n            if (argv.len > 0) {\n                if (isBuiltInExe(u8, argv[0])) {\n                    return error.FileNotFound;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "openSelf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to header from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn header(map: SerializedSourceMap) *align(1) const Header {\n            return @ptrCast(map.bytes.ptr);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "header",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mappingVLQ from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn mappingVLQ(map: SerializedSourceMap) []const u8 {\n            const head = map.header();\n            const start = @sizeOf(Header) + head.source_files_count * @sizeOf(StringPointer) * 2;\n            return map.bytes[start..][0..head.map_bytes_length];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "mappingVLQ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sourceFileNames from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn sourceFileNames(map: SerializedSourceMap) []align(1) const StringPointer {\n            const head = map.header();\n            return @as([*]align(1) const StringPointer, @ptrCast(map.bytes[@sizeOf(Header)..]))[0..head.source_files_count];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "sourceFileNames",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to compressedSourceFiles from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "fn compressedSourceFiles(map: SerializedSourceMap) []align(1) const StringPointer {\n            const head = map.header();\n            return @as([*]align(1) const StringPointer, @ptrCast(map.bytes[@sizeOf(Header)..]))[head.source_files_count..][0..head.source_files_count];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "compressedSourceFiles",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sourceFileContents from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn sourceFileContents(this: Loaded, index: usize) ?[]const u8 {\n                if (this.decompressed_files[index]) |decompressed| {\n                    return if (decompressed.len == 0) null else decompressed;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "sourceFileContents",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serializeJsonSourceMapForStandalone from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub fn serializeJsonSourceMapForStandalone(\n        header_list: *std.ArrayList(u8),\n        string_payload: *std.ArrayList(u8),\n        arena: std.mem.Allocator,\n        json_source: []const u8,\n    ) !void {\n        const out = header_list.writer();\n        const json_src = bun.logger.Source.initPathString(\"sourcemap.json\", json_source);\n        var log = bun.logger.Log.init(arena);\n        defer log.deinit();\n\n        // the allocator given to the JS parser is not respected for all parts\n        // of the parse, so we need to remember to reset the ast store\n        bun.ast.Expr.Data.Store.reset();\n        bun.ast.Stmt.Data.Store.reset();\n        defer {\n            bun.ast.Expr.Data.Store.reset();\n            bun.ast.Stmt.Data.Store.reset();\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "function",
      "name": "serializeJsonSourceMapForStandalone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to StandaloneModuleGraph from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub const StandaloneModuleGraph = struct {\n    bytes: []const u8 = \"\",\n    files: bun.StringArrayHashMap(File),\n    entry_point_id: u32 = 0,\n    compile_exec_argv: []const u8 = \"\",\n\n    // We never want to hit the filesystem for these files\n    // We use the `/$bunfs/` prefix to indicate that it's a virtual path\n    // It is `/$bunfs/` because:\n    //\n    // - `$` makes it unlikely to collide with a real path\n    // - `/$bunfs/` is 8 characters which is fast to compare for 64-bit CPUs\n    pub const base_path = switch (Environment.os) {\n        else => \"/$bunfs/\",\n        // Special case for windows because of file URLs being invalid\n        // if they do not have a drive letter. B drive because 'bun' but\n        // also because it's more unlikely to collide with a real path.\n        .windows => \"B:\\\\~BUN\\\\\",\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "StandaloneModuleGraph",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Instance from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const Instance = struct {\n        pub var instance: ?*StandaloneModuleGraph = null;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "Instance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CompiledModuleGraphFile from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub const CompiledModuleGraphFile = struct {\n        name: Schema.StringPointer = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "CompiledModuleGraphFile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Macho from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const Macho = struct {\n        pub extern \"C\" fn Bun__getStandaloneModuleGraphMachoLength() ?*align(1) u32;\n\n        pub fn getData() ?[]const u8 {\n            if (Bun__getStandaloneModuleGraphMachoLength()) |length| {\n                if (length.* < 8) {\n                    return null;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "Macho",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to PE from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const PE = struct {\n        pub extern \"C\" fn Bun__getStandaloneModuleGraphPELength() u32;\n        pub extern \"C\" fn Bun__getStandaloneModuleGraphPEData() ?[*]u8;\n\n        pub fn getData() ?[]const u8 {\n            const length = Bun__getStandaloneModuleGraphPELength();\n            if (length == 0) return null;\n\n            const data_ptr = Bun__getStandaloneModuleGraphPEData() orelse return null;\n            return data_ptr[0..length];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "PE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to File from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub const File = struct {\n        name: []const u8 = \"\",\n        loader: bun.options.Loader,\n        contents: [:0]const u8 = \"\",\n        sourcemap: LazySourceMap,\n        cached_blob: ?*bun.webcore.Blob = null,\n        encoding: Encoding = .binary,\n        wtf_string: bun.String = bun.String.empty,\n        bytecode: []u8 = \"\",\n        module_format: ModuleFormat = .none,\n        side: FileSide = .server,\n\n        pub fn appearsInEmbeddedFilesArray(this: *const File) bool {\n            return this.side == .client or !this.loader.isJavaScriptLike();\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "File",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to cleanup from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const cleanup = struct {\n            pub fn toClean(name: [:0]const u8, fd: bun.FileDescriptor) void {\n                // Ensure we own the file\n                if (Environment.isPosix) {\n                    // Make the file writable so we can delete it\n                    _ = Syscall.fchmod(fd, 0o777);\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "cleanup",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SerializedSourceMap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub const SerializedSourceMap = struct {\n        bytes: []const u8,\n\n        /// Following the header bytes:\n        /// - source_files_count number of StringPointer, file names\n        /// - source_files_count number of StringPointer, zstd compressed contents\n        /// - the mapping data, `map_vlq_length` bytes\n        /// - all the StringPointer contents\n        pub const Header = extern struct {\n            source_files_count: u32,\n            map_bytes_length: u32,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "SerializedSourceMap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Loaded from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "pub const Loaded = struct {\n            map: SerializedSourceMap,\n\n            /// Only decompress source code once! Once a file is decompressed,\n            /// it is stored here. Decompression failures are stored as an empty\n            /// string, which will be treated as \"no contents\".\n            decompressed_files: []?[]u8,\n\n            pub fn sourceFileContents(this: Loaded, index: usize) ?[]const u8 {\n                if (this.decompressed_files[index]) |decompressed| {\n                    return if (decompressed.len == 0) null else decompressed;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "struct",
      "name": "Loaded",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to slice_ptr from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const slice_ptr: [*]const u8 = @ptrCast(length);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "slice_ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to file_names from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const file_names: [][]const u8 = @ptrCast(slices[0..source_files.len]);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "file_names",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to modules_list from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const modules_list: []align(1) const CompiledModuleGraphFile = std.mem.bytesAsSlice(CompiledModuleGraphFile, modules_list_bytes);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "modules_list",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to bytecode from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const bytecode: StringPointer = brk: {\n                if (output_file.bytecode_index != std.math.maxInt(u32)) {\n                    // Use up to 256 byte alignment for bytecode\n                    // Not aligning it correctly will cause a runtime assertion error, or a segfault.\n                    const bytecode = output_files[output_file.bytecode_index].value.buffer.bytes;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "bytecode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cloned_executable_fd from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const cloned_executable_fd: bun.FileDescriptor = brk: {\n            if (comptime Environment.isWindows) {\n                // copy self and then open it for writing\n\n                var in_buf: bun.WPathBuffer = undefined;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "cloned_executable_fd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to total_byte_count from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const total_byte_count: usize = @as(usize, @bitCast(end[0..8].*));",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "total_byte_count",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to offsets from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const offsets: Offsets = std.mem.bytesAsValue(Offsets, end[0..@sizeOf(Offsets)]).*;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "offsets",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to map_vlq from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig",
    "response": "const map_vlq: []const u8 = mappings_str.data.e_string.slice(arena);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StandaloneModuleGraph.zig",
      "type": "const",
      "name": "map_vlq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to AutoHashMap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn AutoHashMap(comptime K: type, comptime V: type, comptime max_load_percentage: comptime_int) type {\n    return HashMap(K, V, std.hash_map.AutoContext(K), max_load_percentage);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "AutoHashMap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to AutoStaticHashMap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn AutoStaticHashMap(comptime K: type, comptime V: type, comptime capacity: comptime_int) type {\n    return StaticHashMap(K, V, std.hash_map.AutoContext(K), capacity);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "AutoStaticHashMap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to StaticHashMap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn StaticHashMap(comptime K: type, comptime V: type, comptime Context: type, comptime capacity: usize) type {\n    assert(math.isPowerOfTwo(capacity));\n\n    const shift = 63 - math.log2_int(u64, capacity) + 1;\n    const overflow = capacity / 10 + (63 - @as(u64, shift) + 1) << 1;\n\n    return struct {\n        const empty_hash = math.maxInt(u64);\n\n        pub const Entry = struct {\n            hash: u64 = empty_hash,\n            key: K = std.mem.zeroes(K),\n            value: V = std.mem.zeroes(V),\n\n            pub fn isEmpty(self: Entry) bool {\n                return self.hash == empty_hash;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "StaticHashMap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn format(self: Entry, comptime layout: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n                _ = layout;\n                _ = options;\n                try std.fmt.format(writer, \"(hash: {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "format",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to HashMap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn HashMap(comptime K: type, comptime V: type, comptime Context: type, comptime max_load_percentage: comptime_int) type {\n    return struct {\n        const empty_hash = math.maxInt(u64);\n\n        pub const Entry = struct {\n            hash: u64 = empty_hash,\n            key: K = undefined,\n            value: V = undefined,\n\n            pub fn isEmpty(self: Entry) bool {\n                return self.hash == empty_hash;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "HashMap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn format(self: Entry, comptime layout: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n                _ = layout;\n                _ = options;\n                try std.fmt.format(writer, \"(hash: {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "format",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to initCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn initCapacity(gpa: mem.Allocator, capacity: u64) !Self {\n            assert(math.isPowerOfTwo(capacity));\n\n            const shift = 63 - math.log2_int(u64, capacity) + 1;\n            const overflow = capacity / 10 + (63 - @as(u64, shift) + 1) << 1;\n\n            const entries = try gpa.alloc(Entry, @as(usize, @intCast(capacity + overflow)));\n            @memset(entries, .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "initCapacity",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn deinit(self: *Self, gpa: mem.Allocator) void {\n            gpa.free(self.slice());\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ensureUnusedCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn ensureUnusedCapacity(self: *Self, gpa: mem.Allocator, count: usize) !void {\n            try self.ensureTotalCapacity(gpa, self.len + count);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "ensureUnusedCapacity",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ensureTotalCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn ensureTotalCapacity(self: *Self, gpa: mem.Allocator, count: usize) !void {\n            while (true) {\n                const capacity = @as(u64, 1) << (63 - self.shift + 1);\n                if (count <= capacity * max_load_percentage / 100) {\n                    break;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "ensureTotalCapacity",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to grow from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "fn grow(self: *Self, gpa: mem.Allocator) !void {\n            const capacity = @as(u64, 1) << (63 - self.shift + 1);\n            const overflow = capacity / 10 + (63 - @as(usize, self.shift) + 1) << 1;\n            const end = self.entries + @as(usize, @intCast(capacity + overflow));\n\n            const map = try Self.initCapacity(gpa, @as(usize, @intCast(capacity * 2)));\n            var src = self.entries;\n            var dst = map.entries;\n\n            while (src != end) {\n                const entry = src[0];\n\n                const i = if (!entry.isEmpty()) entry.hash >> map.shift else 0;\n                const p = map.entries + i;\n\n                dst = if (@intFromPtr(p) >= @intFromPtr(dst)) p else dst;\n                dst[0] = entry;\n\n                src += 1;\n                dst += 1;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "grow",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to put from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn put(self: *Self, gpa: mem.Allocator, key: K, value: V) !void {\n            try self.putContext(gpa, key, value, undefined);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "put",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to putContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn putContext(self: *Self, gpa: mem.Allocator, key: K, value: V, ctx: Context) !void {\n            try self.ensureUnusedCapacity(gpa, 1);\n            self.putAssumeCapacityContext(key, value, ctx);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "putContext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPut from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn getOrPut(self: *Self, gpa: mem.Allocator, key: K) !GetOrPutResult {\n            return try self.getOrPutContext(gpa, key, undefined);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "getOrPut",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPutContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn getOrPutContext(self: *Self, gpa: mem.Allocator, key: K, ctx: Context) !GetOrPutResult {\n            try self.ensureUnusedCapacity(gpa, 1);\n            return self.getOrPutAssumeCapacityContext(key, ctx);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "getOrPutContext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to HashMapMixin from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "fn HashMapMixin(\n    comptime Self: type,\n    comptime K: type,\n    comptime V: type,\n    comptime Context: type,\n) type {\n    return struct {\n        pub fn clearRetainingCapacity(self: *Self) void {\n            @memset(self.slice(), .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "HashMapMixin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to slice from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn slice(self: *Self) []Self.Entry {\n            const capacity = @as(u64, 1) << (63 - self.shift + 1);\n            const overflow = capacity / 10 + (63 - @as(usize, self.shift) + 1) << 1;\n            return self.entries[0..@as(usize, @intCast(capacity + overflow))];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "slice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to putAssumeCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn putAssumeCapacity(self: *Self, key: K, value: V) void {\n            self.putAssumeCapacityContext(key, value, undefined);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "putAssumeCapacity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to putAssumeCapacityContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn putAssumeCapacityContext(self: *Self, key: K, value: V, ctx: Context) void {\n            const result = self.getOrPutAssumeCapacityContext(key, ctx);\n            if (!result.found_existing) result.value_ptr.* = value;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "putAssumeCapacityContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPutAssumeCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn getOrPutAssumeCapacity(self: *Self, key: K) Self.GetOrPutResult {\n            return self.getOrPutAssumeCapacityContext(key, undefined);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "getOrPutAssumeCapacity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPutAssumeCapacityContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn getOrPutAssumeCapacityContext(self: *Self, key: K, ctx: Context) Self.GetOrPutResult {\n            var it: Self.Entry = .{ .hash = ctx.hash(key), .key = key, .value = undefined }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "getOrPutAssumeCapacityContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn get(self: *const Self, key: K) ?V {\n            return self.getContext(key, undefined);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn getContext(self: *const Self, key: K, ctx: Context) ?V {\n            const hash = ctx.hash(key);\n            assert(hash != Self.empty_hash);\n\n            for (self.entries[hash >> self.shift ..]) |entry| {\n                if (entry.hash >= hash) {\n                    if (!ctx.eql(entry.key, key)) {\n                        return null;\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "getContext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to has from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn has(self: *const Self, key: K) bool {\n            return self.hasContext(key, undefined);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "has",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasWithHash from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn hasWithHash(self: *const Self, key_hash: u64) bool {\n            assert(key_hash != Self.empty_hash);\n\n            for (self.entries[key_hash >> self.shift ..]) |entry| {\n                if (entry.hash >= key_hash) {\n                    return entry.hash == key_hash;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "hasWithHash",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn hasContext(self: *const Self, key: K, ctx: Context) bool {\n            const hash = ctx.hash(key);\n            assert(hash != Self.empty_hash);\n\n            for (self.entries[hash >> self.shift ..]) |entry| {\n                if (entry.hash >= hash) {\n                    if (!ctx.eql(entry.key, key)) {\n                        return false;\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "hasContext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to delete from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn delete(self: *Self, key: K) ?V {\n            return self.deleteContext(key, undefined);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "delete",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deleteContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn deleteContext(self: *Self, key: K, ctx: Context) ?V {\n            const hash = ctx.hash(key);\n            assert(hash != Self.empty_hash);\n\n            var i = hash >> self.shift;\n            while (true) : (i += 1) {\n                const entry = self.entries[i];\n                if (entry.hash >= hash) {\n                    if (!ctx.eql(entry.key, key)) {\n                        return null;\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "deleteContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SortedHashMap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn SortedHashMap(comptime V: type, comptime max_load_percentage: comptime_int) type {\n    return struct {\n        const empty_hash: [32]u8 = [_]u8{0xFF}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "SortedHashMap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to isEmpty from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn isEmpty(self: Entry) bool {\n                return cmp(self.hash, empty_hash) == .eq;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "isEmpty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn format(self: Entry, comptime layout: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void {\n                _ = layout;\n                _ = options;\n                try std.fmt.format(writer, \"(hash: {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "format",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn init(gpa: mem.Allocator) !Self {\n            return Self.initCapacity(gpa, 16);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to initCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn initCapacity(gpa: mem.Allocator, capacity: u64) !Self {\n            assert(math.isPowerOfTwo(capacity));\n\n            const shift = 63 - math.log2_int(u64, capacity) + 1;\n            const overflow = capacity / 10 + (63 - @as(u64, shift) + 1) << 1;\n\n            const entries = try gpa.alloc(Entry, @as(usize, @intCast(capacity + overflow)));\n            @memset(entries, Entry{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "initCapacity",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn deinit(self: *Self, gpa: mem.Allocator) void {\n            gpa.free(self.slice());\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cmp from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "fn cmp(a: [32]u8, b: [32]u8) math.Order {\n            const msa = @as(u64, @bitCast(a[0..8].*));\n            const msb = @as(u64, @bitCast(b[0..8].*));\n            if (msa != msb) {\n                return if (mem.bigToNative(u64, msa) < mem.bigToNative(u64, msb)) .lt else .gt;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "cmp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to idx from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "fn idx(a: [32]u8, shift: u6) usize {\n            return @as(usize, @intCast(mem.readIntBig(u64, a[0..8]) >> shift));\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clearRetainingCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn clearRetainingCapacity(self: *Self) void {\n            @memset(self.slice(), Entry{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "clearRetainingCapacity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to slice from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn slice(self: *Self) []Entry {\n            const capacity = @as(u64, 1) << (63 - self.shift + 1);\n            const overflow = capacity / 10 + (63 - @as(usize, self.shift) + 1) << 1;\n            return self.entries[0..@as(usize, @intCast(capacity + overflow))];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "slice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ensureUnusedCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn ensureUnusedCapacity(self: *Self, gpa: mem.Allocator, count: usize) !void {\n            try self.ensureTotalCapacity(gpa, self.len + count);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "ensureUnusedCapacity",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ensureTotalCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn ensureTotalCapacity(self: *Self, gpa: mem.Allocator, count: usize) !void {\n            while (true) {\n                const capacity = @as(u64, 1) << (63 - self.shift + 1);\n                if (count <= capacity * max_load_percentage / 100) {\n                    break;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "ensureTotalCapacity",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to grow from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "fn grow(self: *Self, gpa: mem.Allocator) !void {\n            const capacity = @as(u64, 1) << (63 - self.shift + 1);\n            const overflow = capacity / 10 + (63 - @as(usize, self.shift) + 1) << 1;\n            const end = self.entries + @as(usize, @intCast(capacity + overflow));\n\n            const map = try Self.initCapacity(gpa, @as(usize, @intCast(capacity * 2)));\n            var src = self.entries;\n            var dst = map.entries;\n\n            while (src != end) {\n                const entry = src[0];\n\n                const i = if (!entry.isEmpty()) idx(entry.hash, map.shift) else 0;\n                const p = map.entries + i;\n\n                dst = if (@intFromPtr(p) >= @intFromPtr(dst)) p else dst;\n                dst[0] = entry;\n\n                src += 1;\n                dst += 1;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "grow",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to put from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn put(self: *Self, gpa: mem.Allocator, key: [32]u8, value: V) !void {\n            try self.ensureUnusedCapacity(gpa, 1);\n            self.putAssumeCapacity(key, value);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "put",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to putAssumeCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn putAssumeCapacity(self: *Self, key: [32]u8, value: V) void {\n            const result = self.getOrPutAssumeCapacity(key);\n            if (!result.found_existing) result.value_ptr.* = value;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "putAssumeCapacity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPut from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn getOrPut(self: *Self, gpa: mem.Allocator, key: [32]u8) !GetOrPutResult {\n            try self.ensureUnusedCapacity(gpa, 1);\n            return self.getOrPutAssumeCapacity(key);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "getOrPut",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPutAssumeCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn getOrPutAssumeCapacity(self: *Self, key: [32]u8) GetOrPutResult {\n            assert(self.len < (@as(u64, 1) << (63 - self.shift + 1)));\n            assert(cmp(key, empty_hash) != .eq);\n\n            var it: Entry = .{ .hash = key, .value = undefined }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "getOrPutAssumeCapacity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn get(self: *Self, key: [32]u8) ?V {\n            assert(cmp(key, empty_hash) != .eq);\n\n            for (self.entries[idx(key, self.shift)..]) |entry| {\n                if (cmp(entry.hash, key).compare(.gte)) {\n                    if (cmp(entry.hash, key) != .eq) {\n                        return null;\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to delete from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub fn delete(self: *Self, key: [32]u8) ?V {\n            assert(cmp(key, empty_hash) != .eq);\n\n            var i = idx(key, self.shift);\n            while (true) : (i += 1) {\n                const entry = self.entries[i];\n                if (cmp(entry.hash, key).compare(.gte)) {\n                    if (cmp(entry.hash, key) != .eq) {\n                        return null;\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "function",
      "name": "delete",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Entry from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub const Entry = struct {\n            hash: u64 = empty_hash,\n            key: K = std.mem.zeroes(K),\n            value: V = std.mem.zeroes(V),\n\n            pub fn isEmpty(self: Entry) bool {\n                return self.hash == empty_hash;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "struct",
      "name": "Entry",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to GetOrPutResult from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub const GetOrPutResult = struct {\n            value_ptr: *V,\n            found_existing: bool,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "struct",
      "name": "GetOrPutResult",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Entry from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub const Entry = struct {\n            hash: u64 = empty_hash,\n            key: K = undefined,\n            value: V = undefined,\n\n            pub fn isEmpty(self: Entry) bool {\n                return self.hash == empty_hash;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "struct",
      "name": "Entry",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to GetOrPutResult from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub const GetOrPutResult = struct {\n            value_ptr: *V,\n            found_existing: bool,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "struct",
      "name": "GetOrPutResult",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Entry from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub const Entry = struct {\n            hash: [32]u8 = empty_hash,\n            value: V = undefined,\n\n            pub fn isEmpty(self: Entry) bool {\n                return cmp(self.hash, empty_hash) == .eq;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "struct",
      "name": "Entry",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to GetOrPutResult from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "pub const GetOrPutResult = struct {\n            value_ptr: *V,\n            found_existing: bool,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "struct",
      "name": "GetOrPutResult",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to empty_hash from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig",
    "response": "const empty_hash: [32]u8 = [_]u8{0xFF} ** 32;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/StaticHashMap.zig",
      "type": "const",
      "name": "empty_hash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn init(comptime T: type, ctx: *T, fs: *bun.fs.FileSystem, allocator: std.mem.Allocator) !*Watcher {\n    const wrapped = struct {\n        fn onFileUpdateWrapped(ctx_opaque: *anyopaque, events: []WatchEvent, changed_files: []?[:0]u8, watchlist: WatchList) void {\n            T.onFileUpdate(@alignCast(@ptrCast(ctx_opaque)), events, changed_files, watchlist);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to onErrorWrapped from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "fn onErrorWrapped(ctx_opaque: *anyopaque, err: bun.sys.Error) void {\n            if (@hasDecl(T, \"onWatchError\")) {\n                T.onWatchError(@alignCast(@ptrCast(ctx_opaque)), err);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "onErrorWrapped",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writeTraceEvents from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn writeTraceEvents(this: *Watcher, events: []WatchEvent, changed_files: []?[:0]u8) void {\n    WatcherTrace.writeEvents(this, events, changed_files);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "writeTraceEvents",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to start from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn start(this: *Watcher) !void {\n    bun.assert(this.watchloop_handle == null);\n    this.thread = try std.Thread.spawn(.{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn deinit(this: *Watcher, close_descriptors: bool) void {\n    if (this.watchloop_handle != null) {\n        this.mutex.lock();\n        defer this.mutex.unlock();\n        this.close_descriptors = close_descriptors;\n        this.running = false;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getHash from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn getHash(filepath: string) HashType {\n    return @as(HashType, @truncate(bun.hash(filepath)));\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "getHash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to names from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn names(this: WatchEvent, buf: []?[:0]u8) []?[:0]u8 {\n        if (this.name_len == 0) return &[_]?[:0]u8{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "names",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sortByIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn sortByIndex(_: Sorter, event: WatchEvent, rhs: WatchEvent) bool {\n        return event.index < rhs.index;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "sortByIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to merge from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn merge(this: *WatchEvent, other: WatchEvent) void {\n        this.name_len += other.name_len;\n        this.op = Op{\n            .delete = this.op.delete or other.op.delete,\n            .metadata = this.op.metadata or other.op.metadata,\n            .rename = this.op.rename or other.op.rename,\n            .write = this.op.write or other.op.write,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "merge",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to merge from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn merge(before: Op, after: Op) Op {\n            return .{\n                .delete = before.delete or after.delete,\n                .write = before.write or after.write,\n                .metadata = before.metadata or after.metadata,\n                .rename = before.rename or after.rename,\n                .move_to = before.move_to or after.move_to,\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "merge",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn format(op: Op, comptime _: []const u8, _: std.fmt.FormatOptions, w: anytype) !void {\n            try w.writeAll(\"{\");\n            var first = true;\n            inline for (comptime std.meta.fieldNames(Op)) |name| {\n                if (comptime std.mem.eql(u8, name, \"_padding\")) continue;\n                if (@field(op, name)) {\n                    if (!first) {\n                        try w.writeAll(\",\");\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "format",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to threadMain from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "fn threadMain(this: *Watcher) !void {\n    this.watchloop_handle = std.Thread.getCurrentId();\n    this.thread_lock.lock();\n    Output.Source.configureNamedThread(\"File Watcher\");\n\n    defer Output.flush();\n    log(\"Watcher started\", .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "threadMain",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to flushEvictions from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn flushEvictions(this: *Watcher) void {\n    if (this.evict_list_i == 0) return;\n    defer this.evict_list_i = 0;\n\n    // swapRemove messes up the order\n    // But, it only messes up the order if any elements in the list appear after the item being removed\n    // So if we just sort the list by the biggest index first, that should be fine\n    std.sort.insertion(\n        WatchItemIndex,\n        this.evict_list[0..this.evict_list_i],\n        {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "flushEvictions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to watchLoop from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "fn watchLoop(this: *Watcher) bun.sys.Maybe(void) {\n    while (this.running) {\n        // individual platform implementation will call onFileUpdate\n        switch (Platform.watchLoopCycle(this)) {\n            .err => |err| return .{ .err = err }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "watchLoop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addFileDescriptorToKQueueWithoutChecks from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn addFileDescriptorToKQueueWithoutChecks(this: *Watcher, fd: bun.FileDescriptor, watchlist_id: usize) void {\n    const KEvent = std.c.Kevent;\n\n    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/kqueue.2.html\n    var event = std.mem.zeroes(KEvent);\n\n    event.flags = std.c.EV.ADD | std.c.EV.CLEAR | std.c.EV.ENABLE;\n    // we want to know about the vnode\n    event.filter = std.c.EVFILT.VNODE;\n\n    event.fflags = std.c.NOTE.WRITE | std.c.NOTE.RENAME | std.c.NOTE.DELETE;\n\n    // id\n    event.ident = @intCast(fd.native());\n\n    // Store the index for fast filtering later\n    event.udata = @as(usize, @intCast(watchlist_id));\n    var events: [1]KEvent = .{event}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "addFileDescriptorToKQueueWithoutChecks",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to appendFileAssumeCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "fn appendFileAssumeCapacity(\n    this: *Watcher,\n    fd: bun.FileDescriptor,\n    file_path: string,\n    hash: HashType,\n    loader: options.Loader,\n    parent_hash: HashType,\n    package_json: ?*PackageJSON,\n    comptime clone_file_path: bool,\n) bun.sys.Maybe(void) {\n    if (comptime Environment.isWindows) {\n        // on windows we can only watch items that are in the directory tree of the top level dir\n        const rel = bun.path.isParentOrEqual(this.fs.top_level_dir, file_path);\n        if (rel == .unrelated) {\n            Output.warn(\"File {s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "appendFileAssumeCapacity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to appendDirectoryAssumeCapacity from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "fn appendDirectoryAssumeCapacity(\n    this: *Watcher,\n    stored_fd: bun.FileDescriptor,\n    file_path: string,\n    hash: HashType,\n    comptime clone_file_path: bool,\n) bun.sys.Maybe(WatchItemIndex) {\n    if (comptime Environment.isWindows) {\n        // on windows we can only watch items that are in the directory tree of the top level dir\n        const rel = bun.path.isParentOrEqual(this.fs.top_level_dir, file_path);\n        if (rel == .unrelated) {\n            Output.warn(\"Directory {s}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "appendDirectoryAssumeCapacity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to appendFileMaybeLock from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn appendFileMaybeLock(\n    this: *Watcher,\n    fd: bun.FileDescriptor,\n    file_path: string,\n    hash: HashType,\n    loader: options.Loader,\n    dir_fd: bun.FileDescriptor,\n    package_json: ?*PackageJSON,\n    comptime clone_file_path: bool,\n    comptime lock: bool,\n) bun.sys.Maybe(void) {\n    if (comptime lock) this.mutex.lock();\n    defer if (comptime lock) this.mutex.unlock();\n    bun.assert(file_path.len > 1);\n    const pathname = bun.fs.PathName.init(file_path);\n\n    const parent_dir = pathname.dirWithTrailingSlash();\n    const parent_dir_hash: HashType = getHash(parent_dir);\n\n    var parent_watch_item: ?WatchItemIndex = null;\n    const autowatch_parent_dir = (comptime FeatureFlags.watch_directories) and this.isEligibleDirectory(parent_dir);\n    if (autowatch_parent_dir) {\n        var watchlist_slice = this.watchlist.slice();\n\n        if (dir_fd.isValid()) {\n            const fds = watchlist_slice.items(.fd);\n            if (std.mem.indexOfScalar(bun.FileDescriptor, fds, dir_fd)) |i| {\n                parent_watch_item = @as(WatchItemIndex, @truncate(i));\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "appendFileMaybeLock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isEligibleDirectory from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "fn isEligibleDirectory(this: *Watcher, dir: string) bool {\n    return strings.contains(dir, this.fs.top_level_dir) and !strings.contains(dir, \"node_modules\");\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "isEligibleDirectory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to appendFile from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn appendFile(\n    this: *Watcher,\n    fd: bun.FileDescriptor,\n    file_path: string,\n    hash: HashType,\n    loader: options.Loader,\n    dir_fd: bun.FileDescriptor,\n    package_json: ?*PackageJSON,\n    comptime clone_file_path: bool,\n) bun.sys.Maybe(void) {\n    return appendFileMaybeLock(this, fd, file_path, hash, loader, dir_fd, package_json, clone_file_path, true);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "appendFile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addDirectory from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn addDirectory(\n    this: *Watcher,\n    fd: bun.FileDescriptor,\n    file_path: string,\n    hash: HashType,\n    comptime clone_file_path: bool,\n) bun.sys.Maybe(WatchItemIndex) {\n    this.mutex.lock();\n    defer this.mutex.unlock();\n\n    if (this.indexOf(hash)) |idx| {\n        return .{ .result = @truncate(idx) }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "addDirectory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addFileByPathSlow from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn addFileByPathSlow(\n    this: *Watcher,\n    file_path: string,\n    loader: options.Loader,\n) bool {\n    if (file_path.len == 0) return false;\n    const hash = getHash(file_path);\n\n    // Check if already watched (with lock to avoid race with removal)\n    {\n        this.mutex.lock();\n        const already_watched = this.indexOf(hash) != null;\n        this.mutex.unlock();\n\n        if (already_watched) {\n            return true;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "addFileByPathSlow",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addFile from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn addFile(\n    this: *Watcher,\n    fd: bun.FileDescriptor,\n    file_path: string,\n    hash: HashType,\n    loader: options.Loader,\n    dir_fd: bun.FileDescriptor,\n    package_json: ?*PackageJSON,\n    comptime clone_file_path: bool,\n) bun.sys.Maybe(void) {\n    // This must lock due to concurrent transpiler\n    this.mutex.lock();\n    defer this.mutex.unlock();\n\n    if (this.indexOf(hash)) |index| {\n        if (comptime FeatureFlags.atomic_file_watcher) {\n            // On Linux, the file descriptor might be out of date.\n            if (fd.isValid()) {\n                var fds = this.watchlist.items(.fd);\n                fds[index] = fd;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "addFile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to indexOf from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn indexOf(this: *Watcher, hash: HashType) ?u32 {\n    for (this.watchlist.items(.hash), 0..) |other, i| {\n        if (hash == other) {\n            return @as(u32, @truncate(i));\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "indexOf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to remove from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn remove(this: *Watcher, hash: HashType) void {\n    this.mutex.lock();\n    defer this.mutex.unlock();\n    if (this.indexOf(hash)) |index| {\n        this.removeAtIndex(@truncate(index), hash, &[_]HashType{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "remove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to removeAtIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn removeAtIndex(this: *Watcher, index: WatchItemIndex, hash: HashType, parents: []HashType, comptime kind: WatchItem.Kind) void {\n    bun.assert(index != no_watch_item);\n\n    this.evict_list[this.evict_list_i] = index;\n    this.evict_list_i += 1;\n\n    if (comptime kind == .directory) {\n        for (parents) |parent| {\n            if (parent == hash) {\n                this.evict_list[this.evict_list_i] = @as(WatchItemIndex, @truncate(parent));\n                this.evict_list_i += 1;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "removeAtIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getResolveWatcher from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn getResolveWatcher(watcher: *Watcher) bun.resolver.AnyResolveWatcher {\n    return bun.resolver.ResolveWatcher(*@This(), onMaybeWatchDirectory).init(watcher);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "getResolveWatcher",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onMaybeWatchDirectory from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub fn onMaybeWatchDirectory(watch: *Watcher, file_path: string, dir_fd: bun.StoredFileDescriptorType) void {\n    // We don't want to watch:\n    // - Directories outside the root directory\n    // - Directories inside node_modules\n    if (std.mem.indexOf(u8, file_path, \"node_modules\") == null and std.mem.indexOf(u8, file_path, watch.fs.top_level_dir) != null) {\n        _ = watch.addDirectory(dir_fd, file_path, getHash(file_path), false);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "function",
      "name": "onMaybeWatchDirectory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to wrapped from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "const wrapped = struct {\n        fn onFileUpdateWrapped(ctx_opaque: *anyopaque, events: []WatchEvent, changed_files: []?[:0]u8, watchlist: WatchList) void {\n            T.onFileUpdate(@alignCast(@ptrCast(ctx_opaque)), events, changed_files, watchlist);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "struct",
      "name": "wrapped",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to WatchEvent from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub const WatchEvent = struct {\n    index: WatchItemIndex,\n    op: Op,\n    name_off: u8 = 0,\n    name_len: u8 = 0,\n\n    pub fn names(this: WatchEvent, buf: []?[:0]u8) []?[:0]u8 {\n        if (this.name_len == 0) return &[_]?[:0]u8{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "struct",
      "name": "WatchEvent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to WatchItem from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "pub const WatchItem = struct {\n    file_path: string,\n    // filepath hash for quick comparison\n    hash: u32,\n    loader: options.Loader,\n    fd: bun.FileDescriptor,\n    count: u32,\n    parent_hash: u32,\n    kind: Kind,\n    package_json: ?*PackageJSON,\n    eventlist_index: if (Environment.isLinux) Platform.EventListIndex else u0 = 0,\n\n    pub const Kind = enum { file, directory }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "struct",
      "name": "WatchItem",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to no_watch_item from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "const no_watch_item: WatchItemIndex = std.math.maxInt(WatchItemIndex);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "const",
      "name": "no_watch_item",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to file_path_ from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "const file_path_: string = if (comptime clone_file_path)\n        bun.asByteSlice(bun.handleOom(this.allocator.dupeZ(u8, file_path)))\n    else\n        file_path;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "const",
      "name": "file_path_",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to slice from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "const slice: [:0]const u8 = buf[0..file_path_.len :0];",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "const",
      "name": "slice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to file_path_ from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "const file_path_: string = if (comptime clone_file_path)\n        bun.asByteSlice(bun.handleOom(this.allocator.dupeZ(u8, file_path)))\n    else\n        file_path;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "const",
      "name": "file_path_",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to path from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "const path: [:0]const u8 = if (clone_file_path and file_path_.len > 0 and file_path_[file_path_.len - 1] == 0)\n            file_path_[0 .. file_path_.len - 1 :0]\n        else brk: {\n            const trailing_slash = if (file_path_.len > 1) std.mem.trimRight(u8, file_path_, &.{ 0, '/' }) else file_path_;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "const",
      "name": "path",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to parent_dir_hash from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/Watcher.zig",
    "response": "const parent_dir_hash: HashType = getHash(parent_dir);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/Watcher.zig",
      "type": "const",
      "name": "parent_dir_hash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isSliceInBufferT from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isSliceInBufferT(comptime T: type, slice: []const T, buffer: []const T) bool {\n    return (@intFromPtr(buffer.ptr) <= @intFromPtr(slice.ptr) and\n        (@intFromPtr(slice.ptr) + slice.len * @sizeOf(T)) <= (@intFromPtr(buffer.ptr) + buffer.len * @sizeOf(T)));\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isSliceInBufferT",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isSliceInBuffer from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isSliceInBuffer(slice: []const u8, buffer: []const u8) bool {\n    return isSliceInBufferT(u8, slice, buffer);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isSliceInBuffer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sliceRange from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn sliceRange(slice: []const u8, buffer: []const u8) ?[2]u32 {\n    return if (@intFromPtr(buffer.ptr) <= @intFromPtr(slice.ptr) and\n        (@intFromPtr(slice.ptr) + slice.len) <= (@intFromPtr(buffer.ptr) + buffer.len))\n        [2]u32{\n            @as(u32, @truncate(@intFromPtr(slice.ptr) - @intFromPtr(buffer.ptr))),\n            @as(u32, @truncate(slice.len)),\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "sliceRange",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hash from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn hash(_: @This(), key: HashKeyType) HashKeyType {\n        return key;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "hash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eql from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn eql(_: @This(), a: HashKeyType, b: HashKeyType) bool {\n        return a == b;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasCheckedIfExists from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn hasCheckedIfExists(r: *const Result) bool {\n        return r.index.index != Unassigned.index;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "hasCheckedIfExists",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isOverflowing from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isOverflowing(r: *const Result, comptime count: usize) bool {\n        return r.index >= count;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isOverflowing",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to OverflowGroup from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn OverflowGroup(comptime Block: type) type {\n    return struct {\n        const Overflow = @This();\n        // 16 million files should be good enough for anyone\n        // ...right?\n        const max = 4095;\n        const UsedSize = std.math.IntFittingRange(0, max + 1);\n        const default_allocator = bun.default_allocator;\n        used: UsedSize,\n        allocated: UsedSize,\n        ptrs: [max]*Block,\n\n        pub inline fn zero(this: *Overflow) void {\n            this.used = 0;\n            this.allocated = 0;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "OverflowGroup",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to tail from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn tail(this: *Overflow) *Block {\n            if (this.allocated > 0 and this.ptrs[this.used].isFull()) {\n                this.used +%= 1;\n                if (this.allocated > this.used) {\n                    this.ptrs[this.used].used = 0;\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "tail",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to slice from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn slice(this: *Overflow) []*Block {\n            return this.ptrs[0..this.used];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "slice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to OverflowList from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn OverflowList(comptime ValueType: type, comptime count: comptime_int) type {\n    return struct {\n        const This = @This();\n        const SizeType = std.math.IntFittingRange(0, count);\n\n        const Block = struct {\n            used: SizeType,\n            items: [count]ValueType,\n\n            pub inline fn zero(this: *Block) void {\n                this.used = 0;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "OverflowList",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isFull from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn isFull(block: *const Block) bool {\n                return block.used >= @as(SizeType, count);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isFull",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to append from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn append(block: *Block, value: ValueType) *ValueType {\n                if (comptime Environment.allow_assert) bun.assert(block.used < count);\n                const index = block.used;\n                block.items[index] = value;\n                block.used +%= 1;\n                return &block.items[index];\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "append",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to zero from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn zero(this: *This) void {\n            this.list.zero();\n            this.count = 0;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "zero",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to len from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn len(this: *const This) u31 {\n            return this.count;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to append from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn append(this: *This, value: ValueType) *ValueType {\n            this.count += 1;\n            return this.list.tail().append(value);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "append",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn reset(this: *This) void {\n            for (this.list.slice()) |block| {\n                block.used = 0;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to atIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn atIndex(this: *const This, index: IndexType) *const ValueType {\n            const block_id = if (index.index > 0)\n                index.index / count\n            else\n                0;\n\n            if (comptime Environment.allow_assert) bun.assert(index.is_overflow);\n            if (comptime Environment.allow_assert) bun.assert(this.list.used >= block_id);\n            if (comptime Environment.allow_assert) bun.assert(this.list.ptrs[block_id].used > (index.index % count));\n\n            return &this.list.ptrs[block_id].items[index.index % count];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "atIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to atIndexMut from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn atIndexMut(this: *This, index: IndexType) *ValueType {\n            const block_id = if (index.index > 0)\n                index.index / count\n            else\n                0;\n\n            if (comptime Environment.allow_assert) bun.assert(index.is_overflow);\n            if (comptime Environment.allow_assert) bun.assert(this.list.used >= block_id);\n            if (comptime Environment.allow_assert) bun.assert(this.list.ptrs[block_id].used > (index.index % count));\n\n            return &this.list.ptrs[block_id].items[index.index % count];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "atIndexMut",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to BSSList from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn BSSList(comptime ValueType: type, comptime _count: anytype) type {\n    const count = _count * 2;\n    const max_index = count - 1;\n    return struct {\n        const ChunkSize = 256;\n        const OverflowBlock = struct {\n            used: std.atomic.Value(u16),\n            data: [ChunkSize]ValueType,\n            prev: ?*OverflowBlock,\n\n            pub inline fn zero(this: *OverflowBlock) void {\n                // Avoid struct initialization syntax.\n                // This makes Bun start about 1ms faster.\n                // https://github.com/ziglang/zig/issues/24313\n                this.used = std.atomic.Value(u16).init(0);\n                this.prev = null;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "BSSList",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to append from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn append(this: *OverflowBlock, item: ValueType) !*ValueType {\n                const index = this.used.fetchAdd(1, .acq_rel);\n                if (index >= ChunkSize) return error.OutOfMemory;\n                this.data[index] = item;\n                return &this.data[index];\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "append",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn deinit(this: *OverflowBlock) void {\n                if (this.prev) |p| p.deinit();\n                bun.default_allocator.destroy(this);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn blockIndex(index: u31) usize {\n            return index / ChunkSize;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "blockIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn init(allocator: std.mem.Allocator) *Self {\n            if (!loaded) {\n                instance = bun.handleOom(bun.default_allocator.create(Self));\n                // Avoid struct initialization syntax.\n                // This makes Bun start about 1ms faster.\n                // https://github.com/ziglang/zig/issues/24313\n                instance.allocator = allocator;\n                instance.mutex = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn deinit(self: *Self) void {\n            self.head.deinit();\n            bun.default_allocator.destroy(instance);\n            loaded = false;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isOverflowing from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isOverflowing() bool {\n            return instance.used >= @as(u16, count);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isOverflowing",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exists from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn exists(_: *Self, value: ValueType) bool {\n            return isSliceInBuffer(value, instance.backing_buf);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "exists",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to appendOverflow from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn appendOverflow(self: *Self, value: ValueType) !*ValueType {\n            instance.used += 1;\n            return self.head.append(value) catch brk: {\n                var new_block = try self.allocator.create(OverflowBlock);\n                new_block.zero();\n                new_block.prev = self.head;\n                self.head = new_block;\n                break :brk self.head.append(value);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "appendOverflow",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to append from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn append(self: *Self, value: ValueType) !*ValueType {\n            self.mutex.lock();\n            defer self.mutex.unlock();\n            if (instance.used > max_index) {\n                return self.appendOverflow(value);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "append",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to BSSStringList from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn BSSStringList(comptime _count: usize, comptime _item_length: usize) type {\n    // I experimented with string interning here and it was around...maybe 1% when generating a .bun?\n    // I tried:\n    // - arraybacked list\n    // - hashmap list\n\n    // + 1 for sentinel\n    const item_length = _item_length + 1;\n    const count = _count * 2;\n    const max_index = count - 1;\n    const ValueType = []const u8;\n\n    return struct {\n        pub const Overflow = OverflowList([]const u8, count / 4);\n        const Self = @This();\n\n        backing_buf: [count * item_length]u8,\n        backing_buf_used: u64,\n        overflow_list: Overflow,\n        allocator: std.mem.Allocator,\n        slice_buf: [count][]const u8,\n        slice_buf_used: u16,\n        mutex: Mutex = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "BSSStringList",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn init(allocator: std.mem.Allocator) *Self {\n            if (!loaded) {\n                instance = bun.handleOom(bun.default_allocator.create(Self));\n                // Avoid struct initialization syntax.\n                // This makes Bun start about 1ms faster.\n                // https://github.com/ziglang/zig/issues/24313\n                instance.allocator = allocator;\n                instance.backing_buf_used = 0;\n                instance.slice_buf_used = 0;\n                instance.overflow_list.zero();\n                instance.mutex = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn deinit(self: *Self) void {\n            _ = self;\n            bun.default_allocator.destroy(instance);\n            loaded = false;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isOverflowing from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn isOverflowing() bool {\n            return instance.slice_buf_used >= @as(u16, count);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isOverflowing",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exists from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn exists(self: *const Self, value: ValueType) bool {\n            return isSliceInBuffer(value, &self.backing_buf);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "exists",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to editableSlice from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn editableSlice(slice: []const u8) []u8 {\n            return @constCast(slice);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "editableSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to appendMutable from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn appendMutable(self: *Self, comptime AppendType: type, _value: AppendType) OOM![]u8 {\n            const appended = try @call(bun.callmod_inline, append, .{ self, AppendType, _value }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "appendMutable",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getMutable from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn getMutable(self: *Self, len: usize) ![]u8 {\n            return try self.appendMutable(EmptyType, EmptyType{ .len = len }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "getMutable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to printWithType from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn printWithType(self: *Self, comptime fmt: []const u8, comptime Args: type, args: Args) OOM![]const u8 {\n            var buf = try self.appendMutable(EmptyType, EmptyType{ .len = std.fmt.count(fmt, args) + 1 }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "printWithType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to print from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn print(self: *Self, comptime fmt: []const u8, args: anytype) OOM![]const u8 {\n            return try printWithType(self, fmt, @TypeOf(args), args);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "print",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to append from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn append(self: *Self, comptime AppendType: type, _value: AppendType) OOM![]const u8 {\n            self.mutex.lock();\n            defer self.mutex.unlock();\n\n            return try self.doAppend(AppendType, _value);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "append",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to appendLowerCase from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn appendLowerCase(self: *Self, comptime AppendType: type, _value: AppendType) OOM![]const u8 {\n            self.mutex.lock();\n            defer self.mutex.unlock();\n\n            for (_value, 0..) |c, i| {\n                lowercase_append_buf[i] = std.ascii.toLower(c);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "appendLowerCase",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to doAppend from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "fn doAppend(\n            self: *Self,\n            comptime AppendType: type,\n            _value: AppendType,\n        ) OOM![]const u8 {\n            const value_len: usize = brk: {\n                switch (comptime AppendType) {\n                    EmptyType, []const u8, []u8, [:0]const u8, [:0]u8 => {\n                        break :brk _value.len;\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "doAppend",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to BSSMap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn BSSMap(comptime ValueType: type, comptime count: anytype, comptime store_keys: bool, comptime estimated_key_length: usize, comptime remove_trailing_slashes: bool) type {\n    const max_index = count - 1;\n    const BSSMapType = struct {\n        const Self = @This();\n        const Overflow = OverflowList(ValueType, count / 4);\n\n        index: IndexMap,\n        overflow_list: Overflow,\n        allocator: std.mem.Allocator,\n        mutex: Mutex = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "BSSMap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn init(allocator: std.mem.Allocator) *Self {\n            if (!loaded) {\n                // Avoid struct initialization syntax.\n                // This makes Bun start about 1ms faster.\n                // https://github.com/ziglang/zig/issues/24313\n                instance = bun.handleOom(bun.default_allocator.create(Self));\n                instance.index = IndexMap{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn deinit(self: *Self) void {\n            self.index.deinit(self.allocator);\n            bun.default_allocator.destroy(instance);\n            loaded = false;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isOverflowing from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isOverflowing() bool {\n            return instance.backing_buf_used >= @as(u16, count);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isOverflowing",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPut from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn getOrPut(self: *Self, denormalized_key: []const u8) !Result {\n            const key = if (comptime remove_trailing_slashes) std.mem.trimRight(u8, denormalized_key, std.fs.path.sep_str) else denormalized_key;\n            const _key = bun.hash(key);\n\n            self.mutex.lock();\n            defer self.mutex.unlock();\n            const index = try self.index.getOrPut(self.allocator, _key);\n\n            if (index.found_existing) {\n                return Result{\n                    .hash = _key,\n                    .index = index.value_ptr.*,\n                    .status = switch (index.value_ptr.index) {\n                        NotFound.index => .not_found,\n                        Unassigned.index => .unknown,\n                        else => .exists,\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "getOrPut",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn get(self: *Self, denormalized_key: []const u8) ?*ValueType {\n            const key = if (comptime remove_trailing_slashes) std.mem.trimRight(u8, denormalized_key, std.fs.path.sep_str) else denormalized_key;\n            const _key = bun.hash(key);\n            self.mutex.lock();\n            defer self.mutex.unlock();\n            const index = self.index.get(_key) orelse return null;\n            return self.atIndex(index);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to markNotFound from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn markNotFound(self: *Self, result: Result) void {\n            self.mutex.lock();\n            defer self.mutex.unlock();\n\n            self.index.put(self.allocator, result.hash, NotFound) catch unreachable;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "markNotFound",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to atIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn atIndex(self: *Self, index: IndexType) ?*ValueType {\n            if (index.index == NotFound.index or index.index == Unassigned.index) return null;\n\n            if (index.is_overflow) {\n                return self.overflow_list.atIndexMut(index);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "atIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to put from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn put(self: *Self, result: *Result, value: ValueType) !*ValueType {\n            self.mutex.lock();\n            defer self.mutex.unlock();\n\n            if (result.index.index == NotFound.index or result.index.index == Unassigned.index) {\n                result.index.is_overflow = instance.backing_buf_used > max_index;\n                if (result.index.is_overflow) {\n                    result.index.index = self.overflow_list.len();\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "put",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to remove from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn remove(self: *Self, denormalized_key: []const u8) bool {\n            self.mutex.lock();\n            defer self.mutex.unlock();\n\n            const key = if (comptime remove_trailing_slashes)\n                std.mem.trimRight(u8, denormalized_key, std.fs.path.sep_str)\n            else\n                denormalized_key;\n\n            const _key = bun.hash(key);\n            return self.index.remove(_key);\n            // const index = self.index.get(_key) orelse return;\n            // switch (index) {\n            //     Unassigned.index, NotFound.index => {\n            //         self.index.remove(_key);\n            //     }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "remove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to values from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn values(self: *Self) []ValueType {\n            return (&self.backing_buf)[0..self.backing_buf_used];\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "values",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn init(allocator: std.mem.Allocator) *Self {\n            if (!instance_loaded) {\n                instance = bun.handleOom(bun.default_allocator.create(Self));\n                // Avoid struct initialization syntax.\n                // This makes Bun start about 1ms faster.\n                // https://github.com/ziglang/zig/issues/24313\n                instance.map = BSSMapType.init(allocator);\n                instance.key_list_buffer_used = 0;\n                instance.key_list_overflow.zero();\n                instance_loaded = true;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn deinit(self: *Self) void {\n            self.map.deinit();\n            bun.default_allocator.destroy(instance);\n            instance_loaded = false;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isOverflowing from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isOverflowing() bool {\n            return instance.map.backing_buf_used >= count;\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isOverflowing",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPut from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn getOrPut(self: *Self, key: []const u8) !Result {\n            return try self.map.getOrPut(key);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "getOrPut",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn get(self: *Self, key: []const u8) ?*ValueType {\n            return @call(bun.callmod_inline, BSSMapType.get, .{ self.map, key }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to atIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn atIndex(self: *Self, index: IndexType) ?*ValueType {\n            return @call(bun.callmod_inline, BSSMapType.atIndex, .{ self.map, index }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "atIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to keyAtIndex from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn keyAtIndex(_: *Self, index: IndexType) ?[]const u8 {\n            return switch (index.index) {\n                Unassigned.index, NotFound.index => null,\n                else => {\n                    if (!index.is_overflow) {\n                        return instance.key_list_slices[index.index];\n                    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "keyAtIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to put from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn put(self: *Self, key: anytype, comptime store_key: bool, result: *Result, value: ValueType) !*ValueType {\n            const ptr = try self.map.put(result, value);\n            if (store_key) {\n                try self.putKey(key, result);\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "put",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to isKeyStaticallyAllocated from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isKeyStaticallyAllocated(key: anytype) bool {\n            return isSliceInBuffer(key, &instance.key_list_buffer);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isKeyStaticallyAllocated",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to putKey from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn putKey(self: *Self, key: anytype, result: *Result) !void {\n            self.map.mutex.lock();\n            defer self.map.mutex.unlock();\n            var slice: []u8 = undefined;\n\n            // Is this actually a slice into the map? Don't free it.\n            if (isKeyStaticallyAllocated(key)) {\n                slice = key;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "putKey",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to markNotFound from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn markNotFound(self: *Self, result: Result) void {\n            self.map.markNotFound(result);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "markNotFound",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to remove from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn remove(self: *Self, key: []const u8) bool {\n            return self.map.remove(key);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "remove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isDefault from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn isDefault(allocator: std.mem.Allocator) bool {\n    return allocator.vtable == c_allocator.vtable;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "isDefault",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn allocator(self: Self) std.mem.Allocator;\n//\n//     // Optional, to allow default-initialization. `.{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn init() Self;\n//\n//     // Optional, if this allocator owns auxiliary resources that need to be deinitialized.\n//     pub fn deinit(self: *Self) void;\n//\n//     // Optional. Defining a borrowed type makes it clear who owns the allocator and prevents\n//     // `deinit` from being called twice.\n//     pub const Borrowed: type;\n//     pub fn borrow(self: Self) Borrowed;\n// };\n// ```\n//\n// Generic allocators must support being moved. They cannot contain self-references, and they cannot\n// serve allocations from a buffer that exists within the allocator itself (have your allocator type\n// contain a pointer to the buffer instead).\n//\n// As an exception, `std.mem.Allocator` is also treated as a generic allocator, and receives\n// special handling in the following functions to achieve this.\n\n/// Gets the `std.mem.Allocator` for a given generic allocator.\npub fn asStd(allocator: anytype) std.mem.Allocator {\n    return if (comptime @TypeOf(allocator) == std.mem.Allocator)\n        allocator\n    else\n        allocator.allocator();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Borrowed from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn Borrowed(comptime Allocator: type) type {\n    return if (comptime @hasDecl(Allocator, \"Borrowed\"))\n        Allocator.Borrowed\n    else\n        Allocator;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "Borrowed",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to borrow from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn borrow(allocator: anytype) Borrowed(@TypeOf(allocator)) {\n    return if (comptime @hasDecl(@TypeOf(allocator), \"Borrowed\"))\n        allocator.borrow()\n    else\n        allocator;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "borrow",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Nullable from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn Nullable(comptime Allocator: type) type {\n    return if (comptime Allocator == std.mem.Allocator)\n        NullableAllocator\n    else if (comptime @hasDecl(Allocator, \"Nullable\"))\n        Allocator.Nullable\n    else\n        ?Allocator;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "Nullable",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to initNullable from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn initNullable(comptime Allocator: type, allocator: ?Allocator) Nullable(Allocator) {\n    return if (comptime Allocator == std.mem.Allocator or @hasDecl(Allocator, \"Nullable\"))\n        .init(allocator)\n    else\n        allocator;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "initNullable",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to unpackNullable from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn unpackNullable(comptime Allocator: type, allocator: Nullable(Allocator)) ?Allocator {\n    return if (comptime Allocator == std.mem.Allocator or @hasDecl(Allocator, \"Nullable\"))\n        .get()\n    else\n        allocator;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "unpackNullable",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub fn allocator(self: Default) std.mem.Allocator {\n        _ = self;\n        return c_allocator;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to IndexMapContext from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "const IndexMapContext = struct {\n    pub fn hash(_: @This(), key: HashKeyType) HashKeyType {\n        return key;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "IndexMapContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Result from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub const Result = struct {\n    hash: HashKeyType,\n    index: IndexType,\n    status: ItemStatus,\n\n    pub fn hasCheckedIfExists(r: *const Result) bool {\n        return r.index.index != Unassigned.index;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "Result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Block from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "const Block = struct {\n            used: SizeType,\n            items: [count]ValueType,\n\n            pub inline fn zero(this: *Block) void {\n                this.used = 0;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "Block",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to OverflowBlock from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "const OverflowBlock = struct {\n            used: std.atomic.Value(u16),\n            data: [ChunkSize]ValueType,\n            prev: ?*OverflowBlock,\n\n            pub inline fn zero(this: *OverflowBlock) void {\n                // Avoid struct initialization syntax.\n                // This makes Bun start about 1ms faster.\n                // https://github.com/ziglang/zig/issues/24313\n                this.used = std.atomic.Value(u16).init(0);\n                this.prev = null;\n            }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "OverflowBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Pair from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub const Pair = struct { index: IndexType, value: *ValueType }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "Pair",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to EmptyType from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "const EmptyType = struct {\n            len: usize = 0,\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "EmptyType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BSSMapType from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "const BSSMapType = struct {\n        const Self = @This();\n        const Overflow = OverflowList(ValueType, count / 4);\n\n        index: IndexMap,\n        overflow_list: Overflow,\n        allocator: std.mem.Allocator,\n        mutex: Mutex = .{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "BSSMapType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to GenericAllocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "const GenericAllocator = struct {\n//     // Required.\n//     pub fn allocator(self: Self) std.mem.Allocator;\n//\n//     // Optional, to allow default-initialization. `.{}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "GenericAllocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Default from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "pub const Default = struct {\n    pub fn allocator(self: Default) std.mem.Allocator {\n        _ = self;\n        return c_allocator;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "struct",
      "name": "Default",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to value_len from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig",
    "response": "const value_len: usize = brk: {\n                switch (comptime AppendType) {\n                    EmptyType, []const u8, []u8, [:0]const u8, [:0]u8 => {\n                        break :brk _value.len;",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators.zig",
      "type": "const",
      "name": "value_len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "fn deinit(self: *Self) void {\n    self.fd.close();\n    bun.destroy(self);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "pub fn allocator(self: *Self) std.mem.Allocator {\n    return .{\n        .ptr = self,\n        .vtable = AllocatorInterface.VTable,\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "pub fn from(allocator_: std.mem.Allocator) ?*Self {\n    if (allocator_.vtable == AllocatorInterface.VTable) {\n        return @alignCast(@ptrCast(allocator_.ptr));\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "from",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to alloc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "fn alloc(_: *anyopaque, _: usize, _: std.mem.Alignment, _: usize) ?[*]u8 {\n        // it should perform no allocations or resizes\n        return null;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "alloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "fn free(\n        ptr: *anyopaque,\n        buf: []u8,\n        _: std.mem.Alignment,\n        _: usize,\n    ) void {\n        var self: *Self = @alignCast(@ptrCast(ptr));\n        defer self.deref();\n        bun.sys.munmap(@alignCast(@ptrCast(buf))).unwrap() catch |err| {\n            bun.Output.debugWarn(\"Failed to munmap memfd: {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to alloc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "pub fn alloc(self: *Self, len: usize, offset: usize, flags: std.posix.MAP) bun.sys.Maybe(bun.webcore.Blob.Store.Bytes) {\n    var size = len;\n\n    // size rounded up to nearest page\n    size = std.mem.alignForward(usize, size, std.heap.pageSize());\n\n    var flags_mut = flags;\n    flags_mut.TYPE = .SHARED;\n\n    switch (bun.sys.mmap(\n        null,\n        @min(size, self.size),\n        std.posix.PROT.READ | std.posix.PROT.WRITE,\n        flags_mut,\n        self.fd,\n        offset,\n    )) {\n        .result => |slice| {\n            return .{\n                .result = bun.webcore.Blob.Store.Bytes{\n                    .cap = @truncate(slice.len),\n                    .ptr = slice.ptr,\n                    .len = @truncate(len),\n                    .allocator = self.allocator(),\n                }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "alloc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to shouldUse from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "pub fn shouldUse(bytes: []const u8) bool {\n    if (comptime !bun.Environment.isLinux) {\n        return false;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "shouldUse",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to create from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "pub fn create(bytes: []const u8) bun.sys.Maybe(bun.webcore.Blob.Store.Bytes) {\n    if (comptime !bun.Environment.isLinux) {\n        unreachable;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "create",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to isInstance from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "pub fn isInstance(allocator_: std.mem.Allocator) bool {\n    return allocator_.vtable == AllocatorInterface.VTable;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "function",
      "name": "isInstance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AllocatorInterface from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig",
    "response": "const AllocatorInterface = struct {\n    fn alloc(_: *anyopaque, _: usize, _: std.mem.Alignment, _: usize) ?[*]u8 {\n        // it should perform no allocations or resizes\n        return null;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/LinuxMemFdAllocator.zig",
      "type": "struct",
      "name": "AllocatorInterface",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to alloc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MaxHeapAllocator.zig",
    "response": "fn alloc(ptr: *anyopaque, len: usize, alignment: std.mem.Alignment, _: usize) ?[*]u8 {\n    bun.assert(alignment.toByteUnits() <= @alignOf(std.c.max_align_t));\n    var self = bun.cast(*Self, ptr);\n    self.array_list.items.len = 0;\n    self.array_list.ensureTotalCapacity(len) catch return null;\n    self.array_list.items.len = len;\n    return self.array_list.items.ptr;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MaxHeapAllocator.zig",
      "type": "function",
      "name": "alloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to resize from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MaxHeapAllocator.zig",
    "response": "fn resize(_: *anyopaque, buf: []u8, _: std.mem.Alignment, new_len: usize, _: usize) bool {\n    _ = new_len;\n    _ = buf;\n    @panic(\"not implemented\");\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MaxHeapAllocator.zig",
      "type": "function",
      "name": "resize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MaxHeapAllocator.zig",
    "response": "fn free(\n    _: *anyopaque,\n    _: []u8,\n    _: std.mem.Alignment,\n    _: usize,\n) void {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MaxHeapAllocator.zig",
      "type": "function",
      "name": "free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MaxHeapAllocator.zig",
    "response": "pub fn reset(self: *Self) void {\n    self.array_list.items.len = 0;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MaxHeapAllocator.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MaxHeapAllocator.zig",
    "response": "pub fn deinit(self: *Self) void {\n    self.array_list.deinit();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MaxHeapAllocator.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MaxHeapAllocator.zig",
    "response": "pub fn init(self: *Self, allocator: std.mem.Allocator) std.mem.Allocator {\n    self.array_list = .init(allocator);\n\n    return std.mem.Allocator{\n        .ptr = self,\n        .vtable = &vtable,\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MaxHeapAllocator.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isInstance from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MaxHeapAllocator.zig",
    "response": "pub fn isInstance(allocator: std.mem.Allocator) bool {\n    return allocator.vtable == &vtable;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MaxHeapAllocator.zig",
      "type": "function",
      "name": "isInstance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to alloc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "fn alloc(context: *anyopaque, n: usize, alignment: std.mem.Alignment, return_address: usize) ?[*]u8 {\n    const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));\n    const result = this.child_allocator.rawAlloc(n, alignment, return_address) orelse return null;\n    _ = this.memory_cost.fetchAdd(n, .monotonic);\n    if (comptime Environment.allow_assert)\n        log(\"malloc({d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "alloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to discard from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "pub fn discard(this: *MemoryReportingAllocator, buf: []const u8) void {\n    _ = this.memory_cost.fetchSub(buf.len, .monotonic);\n    if (comptime Environment.allow_assert)\n        log(\"discard({d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "discard",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to resize from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "fn resize(context: *anyopaque, buf: []u8, alignment: std.mem.Alignment, new_len: usize, ret_addr: usize) bool {\n    const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));\n    if (this.child_allocator.rawResize(buf, alignment, new_len, ret_addr)) {\n        _ = this.memory_cost.fetchAdd(new_len -| buf.len, .monotonic);\n        if (comptime Environment.allow_assert)\n            log(\"resize() = {d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "resize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "fn free(context: *anyopaque, buf: []u8, alignment: std.mem.Alignment, ret_addr: usize) void {\n    const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));\n    this.child_allocator.rawFree(buf, alignment, ret_addr);\n\n    if (comptime Environment.allow_assert) {\n        _ = this.memory_cost.fetchSub(buf.len, .monotonic);\n        log(\"free({d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to wrap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "pub fn wrap(this: *MemoryReportingAllocator, allocator_: std.mem.Allocator) std.mem.Allocator {\n    this.* = .{\n        .child_allocator = allocator_,\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "wrap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "pub fn allocator(this: *MemoryReportingAllocator) std.mem.Allocator {\n    return std.mem.Allocator{\n        .ptr = this,\n        .vtable = &MemoryReportingAllocator.VTable,\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to report from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "pub fn report(this: *MemoryReportingAllocator, vm: *jsc.VM) void {\n    const mem = this.memory_cost.load(.monotonic);\n    if (mem > 0) {\n        vm.reportExtraMemory(mem);\n        if (comptime Environment.allow_assert)\n            log(\"report({d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "report",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to assert from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "fn assert(this: *const MemoryReportingAllocator) void {\n    if (comptime !Environment.allow_assert) {\n        return;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "assert",
      "difficulty": "hard"
    }
  },
  {
    "instruction": "Write a Zig function similar to isInstance from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "pub fn isInstance(allocator_: std.mem.Allocator) bool {\n    return allocator_.vtable == &VTable;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "function",
      "name": "isInstance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to this from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "const",
      "name": "this",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to this from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "const",
      "name": "this",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to this from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig",
    "response": "const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MemoryReportingAllocator.zig",
      "type": "const",
      "name": "this",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn allocator(self: Default) std.mem.Allocator {\n        _ = self;\n        return Borrowed.getDefault().allocator();\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn allocator(self: Borrowed) std.mem.Allocator {\n        return .{ .ptr = self.#heap, .vtable = &c_allocator_vtable }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getDefault from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn getDefault() Borrowed {\n        return .{ .#heap = getThreadHeap() }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "getDefault",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn gc(self: Borrowed) void {\n        mimalloc.mi_heap_collect(self.getMimallocHeap(), false);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "gc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to helpCatchMemoryIssues from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn helpCatchMemoryIssues(self: Borrowed) void {\n        if (comptime bun.FeatureFlags.help_catch_memory_issues) {\n            self.gc();\n            bun.mimalloc.mi_collect(false);\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "helpCatchMemoryIssues",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ownsPtr from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn ownsPtr(self: Borrowed, ptr: *const anyopaque) bool {\n        return mimalloc.mi_heap_check_owned(self.getMimallocHeap(), ptr);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "ownsPtr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromOpaque from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn fromOpaque(ptr: *anyopaque) Borrowed {\n        return .{ .#heap = @ptrCast(@alignCast(ptr)) }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "fromOpaque",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getMimallocHeap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn getMimallocHeap(self: Borrowed) *mimalloc.Heap {\n        return if (comptime safety_checks) self.#heap.inner else self.#heap;\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "getMimallocHeap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to assertThreadLock from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn assertThreadLock(self: Borrowed) void {\n        if (comptime safety_checks) self.#heap.thread_lock.assertLocked();\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "assertThreadLock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to alignedAlloc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn alignedAlloc(self: Borrowed, len: usize, alignment: Alignment) ?[*]u8 {\n        log(\"Malloc: {d}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "alignedAlloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to downcast from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn downcast(std_alloc: std.mem.Allocator) Borrowed {\n        bun.assertf(\n            isInstance(std_alloc),\n            \"not a MimallocArena (vtable is {*}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "downcast",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getThreadHeap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn getThreadHeap() BorrowedHeap {\n    if (comptime !safety_checks) return mimalloc.mi_heap_get_default();\n    if (thread_heap == null) {\n        thread_heap = .{\n            .inner = mimalloc.mi_heap_get_default(),\n            .thread_lock = .initLocked(),\n        }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "getThreadHeap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn allocator(self: Self) std.mem.Allocator {\n    return self.borrow().allocator();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to borrow from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn borrow(self: Self) Borrowed {\n    return .{ .#heap = if (comptime safety_checks) self.#heap.get() else self.#heap }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "borrow",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getThreadLocalDefault from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn getThreadLocalDefault() std.mem.Allocator {\n    if (bun.Environment.enable_asan) return bun.default_allocator;\n    return Borrowed.getDefault().allocator();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "getThreadLocalDefault",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to backingAllocator from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn backingAllocator(_: Self) std.mem.Allocator {\n    return getThreadLocalDefault();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "backingAllocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dumpThreadStats from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn dumpThreadStats(_: Self) void {\n    const dump_fn = struct {\n        pub fn dump(textZ: [*:0]const u8, _: ?*anyopaque) callconv(.C) void {\n            const text = bun.span(textZ);\n            bun.Output.errorWriter().writeAll(text) catch {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "dumpThreadStats",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to dumpStats from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn dumpStats(_: Self) void {\n    const dump_fn = struct {\n        pub fn dump(textZ: [*:0]const u8, _: ?*anyopaque) callconv(.C) void {\n            const text = bun.span(textZ);\n            bun.Output.errorWriter().writeAll(text) catch {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "dumpStats",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn deinit(self: *Self) void {\n    const mimalloc_heap = self.borrow().getMimallocHeap();\n    if (comptime safety_checks) {\n        self.#heap.deinit();\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn init() Self {\n    const mimalloc_heap = mimalloc.mi_heap_new() orelse bun.outOfMemory();\n    if (comptime !safety_checks) return .{ .#heap = mimalloc_heap }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to gc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn gc(self: Self) void {\n    self.borrow().gc();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "gc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to helpCatchMemoryIssues from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn helpCatchMemoryIssues(self: Self) void {\n    self.borrow().helpCatchMemoryIssues();\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "helpCatchMemoryIssues",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ownsPtr from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn ownsPtr(self: Self, ptr: *const anyopaque) bool {\n    return self.borrow().ownsPtr(ptr);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "ownsPtr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to alignedAllocSize from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn alignedAllocSize(ptr: [*]u8) usize {\n    return mimalloc.mi_malloc_usable_size(ptr);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "alignedAllocSize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to vtable_alloc from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn vtable_alloc(ptr: *anyopaque, len: usize, alignment: Alignment, _: usize) ?[*]u8 {\n    const self: Borrowed = .fromOpaque(ptr);\n    self.assertThreadLock();\n    return self.alignedAlloc(len, alignment);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "vtable_alloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to vtable_resize from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn vtable_resize(ptr: *anyopaque, buf: []u8, _: Alignment, new_len: usize, _: usize) bool {\n    const self: Borrowed = .fromOpaque(ptr);\n    self.assertThreadLock();\n    return mimalloc.mi_expand(buf.ptr, new_len) != null;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "vtable_resize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to vtable_free from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn vtable_free(\n    _: *anyopaque,\n    buf: []u8,\n    alignment: Alignment,\n    _: usize,\n) void {\n    // mi_free_size internally just asserts the size\n    // so it's faster if we don't pass that value through\n    // but its good to have that assertion\n    if (comptime bun.Environment.isDebug) {\n        assert(mimalloc.mi_is_in_heap_region(buf.ptr));\n        if (mimalloc.mustUseAlignedAlloc(alignment))\n            mimalloc.mi_free_size_aligned(buf.ptr, buf.len, alignment.toByteUnits())\n        else\n            mimalloc.mi_free_size(buf.ptr, buf.len);\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "vtable_free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to vtable_remap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "fn vtable_remap(ptr: *anyopaque, buf: []u8, alignment: Alignment, new_len: usize, _: usize) ?[*]u8 {\n    const self: Borrowed = .fromOpaque(ptr);\n    self.assertThreadLock();\n    const heap = self.getMimallocHeap();\n    const aligned_size = alignment.toByteUnits();\n    const value = mimalloc.mi_heap_realloc_aligned(heap, buf.ptr, new_len, aligned_size);\n    return @ptrCast(value);\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "vtable_remap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to isInstance from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub fn isInstance(alloc: std.mem.Allocator) bool {\n    return alloc.vtable == &c_allocator_vtable;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "function",
      "name": "isInstance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Default from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub const Default = struct {\n    pub fn allocator(self: Default) std.mem.Allocator {\n        _ = self;\n        return Borrowed.getDefault().allocator();\n    }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "struct",
      "name": "Default",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Borrowed from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "pub const Borrowed = struct {\n    #heap: BorrowedHeap,\n\n    pub fn allocator(self: Borrowed) std.mem.Allocator {\n        return .{ .ptr = self.#heap, .vtable = &c_allocator_vtable }",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "struct",
      "name": "Borrowed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DebugHeap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const DebugHeap = struct {\n    inner: *mimalloc.Heap,\n    thread_lock: bun.safety.ThreadLock,\n\n    pub const deinit = void;\n}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "struct",
      "name": "DebugHeap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to dump_fn from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const dump_fn = struct {\n        pub fn dump(textZ: [*:0]const u8, _: ?*anyopaque) callconv(.C) void {\n            const text = bun.span(textZ);\n            bun.Output.errorWriter().writeAll(text) catch {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "struct",
      "name": "dump_fn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to dump_fn from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const dump_fn = struct {\n        pub fn dump(textZ: [*:0]const u8, _: ?*anyopaque) callconv(.C) void {\n            const text = bun.span(textZ);\n            bun.Output.errorWriter().writeAll(text) catch {}",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "struct",
      "name": "dump_fn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to ptr from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const ptr: ?*anyopaque = if (mimalloc.mustUseAlignedAlloc(alignment))\n            mimalloc.mi_heap_malloc_aligned(heap, len, alignment.toByteUnits())\n        else\n            mimalloc.mi_heap_malloc(heap, len);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "const",
      "name": "ptr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to heap from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const heap: Owned(*DebugHeap) = .new(.{\n        .inner = mimalloc_heap,\n        .thread_lock = .initLocked(),\n    });",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "const",
      "name": "heap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to self from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const self: Borrowed = .fromOpaque(ptr);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "const",
      "name": "self",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to self from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const self: Borrowed = .fromOpaque(ptr);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "const",
      "name": "self",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to self from oven-sh/bun",
    "context": "Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig",
    "response": "const self: Borrowed = .fromOpaque(ptr);",
    "metadata": {
      "repo": "oven-sh/bun",
      "stars": 81759,
      "file": "src/allocators/MimallocArena.zig",
      "type": "const",
      "name": "self",
      "difficulty": "easy"
    }
  }
]