{"instruction":"Write a Zig function similar to OP_GET_UPVALUE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_GET_UPVALUE(self: *Self, location: Ast.TokenIndex, slot: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_GET_UPVALUE,\n        slot,\n    );\n}"}
{"instruction":"Write a Zig struct similar to RmsNorm from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"const RmsNorm = struct {\n    weight: zml.Tensor,\n    eps: f32 = 1e-6,\n\n    /// L2 normalization of input tensor along `.d` axis.\n    pub fn forward(self: RmsNorm, input: zml.Tensor) zml.Tensor {\n        const x = if (input.shape().isFullyTagged()) input else input.withPartialTags(.{.d}"}
{"instruction":"Write a Zig function similar to transfer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn transfer(self: *@This(), ep_addr: u8, data: []u8) void {\n        return self.fn_transfer(self.ptr, ep_addr, data);\n    }"}
{"instruction":"Write a Zig struct similar to Context from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"const Context = struct {\n        index: usize,\n        allocator: std.mem.Allocator,\n        nodes: std.ArrayList(Ast.Node.Index) = .empty,\n\n        pub fn append(self: *@This(), ast: Ast, node: Ast.Node.Index) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to EndOfStack from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"const EndOfStack = struct {\n                address: ?usize = null,\n                symbol_name: ?[]const u8 = null,\n            }"}
{"instruction":"Write a Zig function similar to _init from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn _init(allocator: NeverFailingAllocator, _size: usize, _type: Type, source: Source, side: Side, callbacks: Callbacks) Inventory {\n\tif(_type == .workbench) std.debug.assert(_size == 26);\n\tconst self = Inventory{\n\t\t.type = _type,\n\t\t._items = allocator.alloc(ItemStack, _size),\n\t\t.id = switch(side) {\n\t\t\t.client => Sync.ClientSide.nextId(),\n\t\t\t.server => Sync.ServerSide.nextId(),\n\t\t}"}
{"instruction":"Write a Zig function similar to __lshift__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __lshift__(self: *const Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        return py.init(root, Self, .{ .num_ = self.num_ << @as(u6, @intCast(other.num_)) }"}
{"instruction":"Write a Zig function similar to matchShiftedCodepoint from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub fn matchShiftedCodepoint(self: Key, cp: u21, mods: Modifiers) bool {\n    if (self.shifted_codepoint == null) return false;\n    if (!self.mods.shift) return false;\n    var self_mods = self.mods;\n    self_mods.shift = false;\n    self_mods.caps_lock = false;\n    self_mods.num_lock = false;\n    var tgt_mods = mods;\n    tgt_mods.caps_lock = false;\n    tgt_mods.num_lock = false;\n    return cp == self.shifted_codepoint.? and std.meta.eql(self_mods, mods);\n}"}
{"instruction":"Write a Zig function similar to deserialize from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !FillFromCreative {\n\t\t\tconst dest = try InventoryAndSlot.read(reader, side, user);\n\t\t\tconst amount = try reader.readInt(u16);\n\t\t\tvar item: ?Item = null;\n\t\t\tif(reader.remaining.len != 0) {\n\t\t\t\tconst zon = ZonElement.parseFromString(main.stackAllocator, null, reader.remaining);\n\t\t\t\tdefer zon.deinit(main.stackAllocator);\n\t\t\t\titem = try Item.init(zon);\n\t\t\t}"}
{"instruction":"Write a Zig function similar to next from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"pub fn next(dis: *Disassembler) Error!?Instruction {\n    const prefixes = dis.parsePrefixes() catch |err| switch (err) {\n        error.EndOfStream => return null,\n        else => |e| return e,\n    }"}
{"instruction":"Write a Zig function similar to walk from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn walk(self: Slice, allocator: std.mem.Allocator, ctx: anytype, root: Node.Index) !void {\n        const tags = self.nodes.items(.tag);\n        const components = self.nodes.items(.components);\n\n        // Hold previous node's leaves\n        var node_queue = std.ArrayList(Node.Index){}"}
{"instruction":"Write a Zig const similar to heap from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"const heap: Owned(*DebugHeap) = .new(.{\n        .inner = mimalloc_heap,\n        .thread_lock = .initLocked(),\n    });"}
{"instruction":"Write a Zig struct similar to UsageTable from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const UsageTable = struct {\n    pub const desktop: [1]u8 = \"\\x01\".*;\n    pub const keyboard: [1]u8 = \"\\x07\".*;\n    pub const led: [1]u8 = \"\\x08\".*;\n    pub const fido: [2]u8 = \"\\xD0\\xF1\".*;\n    pub const vendor: [2]u8 = \"\\x00\\xFF\".*;\n}"}
{"instruction":"Write a Zig function similar to remap from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn remap(ctx: *anyopaque, memory: []u8, alignment: std.mem.Alignment, new_len: usize, ret_addr: usize) ?[*]u8 {\n        if (resize(ctx, memory, alignment, new_len, ret_addr)) {\n            return memory.ptr;\n        }"}
{"instruction":"Write a Zig function similar to sleep from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn sleep(self: Backend, ns: u64) void {\n    return self.impl.sleep(ns);\n}"}
{"instruction":"Write a Zig function similar to append from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn append(self: *Self, inst: m.MIR_insn_t) void {\n    m.MIR_append_insn(\n        self.ctx,\n        self.state.?.function.?,\n        inst,\n    );\n}"}
{"instruction":"Write a Zig struct similar to Command from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig","output":"const Command = struct {\n    syntax_only: bool = false,\n\n    fn parse(args: []const []const u8) Command {\n        if (args.len == 0) return .{}"}
{"instruction":"Write a Zig function similar to OP_OBJECT from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_OBJECT(self: *Self, location: Ast.TokenIndex, constant: Value) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_OBJECT,\n        try self.makeConstant(constant),\n    );\n}"}
{"instruction":"Write a Zig function similar to forceUnwrap from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn forceUnwrap(self: *Self, _: bool, unwrapped: Ast.Node.Index) Error!Ast.Node.Index {\n    return self.unwrap(true, unwrapped);\n}"}
{"instruction":"Write a Zig const similar to native_paths from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"const native_paths: std.zig.system.NativePaths = try .detect(arena_allocator.allocator(), &target_info);"}
{"instruction":"Write a Zig struct similar to Sib from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub const Sib = struct {\n            ptr_size: PtrSize,\n            base: Base,\n            scale_index: ScaleIndex,\n            disp: i32,\n        }"}
{"instruction":"Write a Zig function similar to eql from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn eql(a: Key, b: Key, ip: *InternPool) bool {\n        return eqlCustom(a, b, ip, true);\n    }"}
{"instruction":"Write a Zig function similar to init from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub fn init(config: Config) InitError!Self {\n            return Self{\n                .internal = try SystemI2CController.init(config),\n            }"}
{"instruction":"Write a Zig function similar to sampleTokens from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"pub fn sampleTokens(\n        self: LlamaLM,\n        lm_head_: ?zml.nn.Linear,\n        out_: Tensor,\n        rng: Tensor.Rng,\n        opts: zml.nn.SamplingStrategy,\n    ) struct { Tensor, Tensor.Rng }"}
{"instruction":"Write a Zig function similar to setUserName from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub fn setUserName(self: *ChildProcess, name: []const u8) !void {\n    const user_info = try process.getUserInfo(name);\n    self.uid = user_info.uid;\n    self.gid = user_info.gid;\n}"}
{"instruction":"Write a Zig function similar to nodeChildrenAlloc from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn nodeChildrenAlloc(allocator: std.mem.Allocator, tree: Ast, node: Ast.Node.Index) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to write from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn write(ctx: *Ctx, bytes: []const u8) std.Io.Writer.Error!usize {\n                var input = bytes;\n                while (true) {\n                    const input_consume_size = @min(ctx.buf.len - ctx.rest.len, input.len);\n                    @memcpy(ctx.buf[ctx.rest.len .. ctx.rest.len + input_consume_size], input[0..input_consume_size]);\n                    ctx.rest = ctx.buf[0 .. ctx.rest.len + input_consume_size];\n                    input = input[input_consume_size..];\n\n                    if (ctx.rest.len < ctx.pattern.len)\n                        return bytes.len - input.len;\n\n                    var i: usize = 0;\n                    const end = ctx.rest.len - ctx.pattern.len;\n\n                    while (i <= end) {\n                        if (std.mem.eql(u8, ctx.rest[i .. i + ctx.pattern.len], ctx.pattern)) {\n                            const begin_row = ctx.line + 1;\n                            const begin_pos = ctx.pos;\n                            ctx.skip(&i, ctx.pattern.len);\n                            const end_row = ctx.line + 1;\n                            const end_pos = ctx.pos;\n                            ctx.callback(ctx.data, begin_row, begin_pos, end_row, end_pos) catch return error.WriteFailed;\n                        }"}
{"instruction":"Write a Zig function similar to init from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig","output":"pub fn init(self: *Allocator) void {\n        self.* = .{\n            .dummy = false,\n        }"}
{"instruction":"Write a Zig struct similar to ArgStruct from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/args_types.zig","output":"const ArgStruct = struct {\n    foo: i32,\n    bar: bool,\n}"}
{"instruction":"Write a Zig function similar to getOSGlibCVersion from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig","output":"pub fn getOSGlibCVersion(os: OperatingSystem) ?Version {\n    return switch (os) {\n        // Compiling with a newer glibc than this will break certain cloud environments.\n        .linux => .{ .major = 2, .minor = 27, .patch = 0 }"}
{"instruction":"Write a Zig function similar to warn from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn warn(self: *Self, error_type: Error, location: Token, end_location: Token, message: []const u8) void {\n    const items = [_]ReportItem{\n        .{\n            .kind = .warning,\n            .location = location,\n            .end_location = end_location,\n            .message = message,\n        }"}
{"instruction":"Write a Zig function similar to _replace from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleSheet.zig","output":"pub fn _replace(self: *CSSStyleSheet, text: []const u8, page: *Page) !js.Promise {\n    _ = self;\n    _ = text;\n    // TODO: clear self.css_rules\n    // parse text and re-populate self.css_rules\n\n    return page.js.resolvePromise({}"}
{"instruction":"Write a Zig function similar to currentIndent from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"fn currentIndent(self: *Self) usize {\n            var indent_current: usize = 0;\n            if (self.indent_count > 0) {\n                const indent_count = self.indent_count - self.indent_next_line;\n                indent_current = indent_count * self.indent_delta;\n            }"}
{"instruction":"Write Zig 0.13.0 code for: comptime §","input":"Zig places importance on the concept of whether an expression is known at compile-time. There are a few different places this concept is used, and these building blocks are used to keep the language small, readable, and powerful. Introducing the Compile-Time Concept § Compile-Time Parameters § Compile-time parameters is how Zig implements generics. It is compile-time duck typing. compile-time_duck_typing.zig In Zig, types are first-class citizens. They can be assigned to variables, passed as par","output":"<span class=\"tok-kw\">const</span> Node = <span class=\"tok-kw\">struct</span> {\n    next: ?*Node,\n    name: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>,\n};\n\n<span class=\"tok-kw\">var</span> node_a = Node{\n    .next = <span class=\"tok-null\">null</span>,\n    .name = <span class=\"tok-str\">\"Node A\"</span>,\n};\n\n<span class=\"tok-kw\">var</span> node_b = Node{\n    .next = &node_a,\n    .name = <span class=\"tok-str\">\"Node B\"</span>,\n};"}
{"instruction":"Write a Zig function similar to Api from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend.zig","output":"pub fn Api(comptime self: Backend) type {\n        return switch (self) {\n            .io_uring => @import(\"main.zig\").IO_Uring,\n            .epoll => @import(\"main.zig\").Epoll,\n            .kqueue => @import(\"main.zig\").Kqueue,\n            .wasi_poll => @import(\"main.zig\").WasiPoll,\n            .iocp => @import(\"main.zig\").IOCP,\n        }"}
{"instruction":"Write a Zig function similar to receive from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn receive(self_: @This(), response: tp.message) !void {\n            var result: []const u8 = undefined;\n            if (try cbor.match(response.buf, .{ \"child\", tp.string, \"result\", tp.null_ }"}
{"instruction":"Write a Zig function similar to elemType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn elemType(ip: *InternPool, ty: Index) Index {\n    return switch (ip.indexToKey(ty)) {\n        .pointer_type => |pointer_info| switch (pointer_info.flags.size) {\n            .one => ip.childType(pointer_info.elem_type),\n            .many, .c, .slice => pointer_info.elem_type,\n        }"}
{"instruction":"Write a Zig function similar to result from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/git.zig","output":"fn result(context: usize, parent: tp.pid_ref, output: []const u8) void {\n            var it = std.mem.splitScalar(u8, output, '\\n');\n            while (it.next()) |value| if (value.len > 0)\n                parent.send(.{ module_name, context, fn_name, value }"}
{"instruction":"Write a Zig function similar to append from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/circularBuffer.zig","output":"pub fn append(self: *Self, item: T) void {\n            self.items[self.write_ndx] = item;\n\n            if (self.len > 0 and self.write_ndx <= self.read_ndx) {\n                self.read_ndx += 1;\n            }"}
{"instruction":"Write a Zig const similar to rhs_val from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const rhs_val: Value = .{ .ref = unwrapped };"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn init(id: CoroId) @This() {\n            _ = id;\n            return .{}"}
{"instruction":"Write a Zig struct similar to GetOrPutResult from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"pub const GetOrPutResult = struct {\n    key_ptr: **const Value,\n    value_ptr: **Value,\n    found_existing: bool,\n    index: u32,\n}"}
{"instruction":"Write a Zig function similar to prepareRenameHandler from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"fn prepareRenameHandler(server: *Server, request: types.PrepareRenameParams) ?types.PrepareRenameResult {\n    const handle = server.document_store.getHandle(request.textDocument.uri) orelse return null;\n    const source_index = offsets.positionToIndex(handle.tree.source, request.position, server.offset_encoding);\n    const name_loc = Analyser.identifierLocFromIndex(handle.tree, source_index) orelse return null;\n    const name = offsets.locToSlice(handle.tree.source, name_loc);\n    return .{\n        .literal_1 = .{\n            .range = offsets.locToRange(handle.tree.source, name_loc, server.offset_encoding),\n            .placeholder = name,\n        }"}
{"instruction":"Write a Zig const similar to cursor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const cursor: *Cursor = @fieldParentPtr(\"touch_frame\", listener);"}
{"instruction":"Write a Zig const similar to DENTRY_USER from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"const DENTRY_USER: u32 = 0x4;"}
{"instruction":"Write a Zig function similar to unescape from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn unescape(arena: Allocator, text: []const u8) ![]const u8 {\n    const unescaped = try arena.alloc(u8, text.len);\n\n    var j: usize = 0;\n    var i: usize = 0;\n    while (i < text.len) : (j += 1) {\n        if (text[i] == '&') {\n            const entity_end = 1 + (mem.indexOfScalarPos(u8, text, i, ';') orelse return error.InvalidEntity);\n            unescaped[j] = try unescapeEntity(text[i..entity_end]);\n            i = entity_end;\n        }"}
{"instruction":"Write a Zig function similar to updatePlayer from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/2d_camera_platformer.zig","output":"fn updatePlayer(player: *Player, env_items: []EnvItem, delta: f32) void {\n    if (rl.isKeyDown(.left)) player.position.x -= PLAYER_HOR_SPD * delta;\n    if (rl.isKeyDown(.right)) player.position.x += PLAYER_HOR_SPD * delta;\n    if (rl.isKeyDown(.space) and player.can_jump) {\n        player.speed = -PLAYER_JUMP_SPD;\n        player.can_jump = false;\n    }"}
{"instruction":"Write a Zig function similar to next from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/progress.zig","output":"pub fn next(self: *Self) void {\n        self.frame_idx = (self.frame_idx + 1) % frame_count;\n    }"}
{"instruction":"Write a Zig struct similar to MoeOpts from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"const MoeOpts = struct {\n    experts_per_token: u32,\n    tokens_per_expert_ratio: ?f32 = 0.0,\n    normalization: Normalization,\n\n    pub const Normalization = enum { linear, softmax }"}
{"instruction":"Write a Zig struct similar to OpenedFile from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/fs.zig","output":"pub const OpenedFile = struct {\n    inner: *RegularFile,\n    pos: usize = 0,\n\n    const Self = @This();\n    const Error = error{Failed}"}
{"instruction":"Write a Zig function similar to intToString from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/main.zig","output":"fn intToString(allocator: Allocator, v: i64) ![]u8 {\n    return std.fmt.allocPrint(allocator, \"{}"}
{"instruction":"Write a Zig function similar to isKnownKeyword from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"fn isKnownKeyword(value: []const u8) bool {\n    return CSSKeywords.isKnownKeyword(value);\n}"}
{"instruction":"Write a Zig function similar to GrayscaleToGrayscale from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn GrayscaleToGrayscale(comptime source_format: PixelFormat, comptime destination_format: PixelFormat) type {\n    return struct {\n        pub fn convert(source: *const color.PixelStorage, destination: *color.PixelStorage) void {\n            const source_grayscale = @field(source, getFieldNameFromPixelFormat(source_format));\n            var destination_pixels = @field(destination, getFieldNameFromPixelFormat(destination_format));\n            const destination_type = @TypeOf(destination_pixels[0]);\n\n            for (0..source_grayscale.len) |index| {\n                destination_pixels[index] = grayscaleToGrayscale(destination_type, source_grayscale[index]);\n            }"}
{"instruction":"Write a Zig function similar to retire from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Manager.zig","output":"pub fn retire(_: *Self, buffer: *Buffer, meta: ?[]const u8) void {\n    if (meta) |buf| buffer.set_meta(buf) catch {}"}
{"instruction":"Write a Zig function similar to put from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/channel.zig","output":"pub fn put(self: *Self, item: T) void {\n            self.lock.lock();\n            defer {\n                self.lock.unlock();\n                self.readable.signal();\n            }"}
{"instruction":"Write a Zig function similar to shouldSkipInlinedFunctionStatement from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn shouldSkipInlinedFunctionStatement(\n            _: *const types.CompileUnit,\n            _: *const types.SourceStatement,\n            _: types.FunctionNdx,\n        ) !bool {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            // @TODO (jrc): This needs to be re-implemented. We don't parse\n            // inlined functions from DWARF correctly yet, so we need to\n            // do that first.\n\n            return false;\n\n            // const inline_sym = try cu.symbolAt(inlined_ndx);\n            // const inlined_func = switch (inline_sym) {\n            //     .inlined_function => |f| f,\n            //     else => {\n            //         log.errf(\"symbol at ndx {d}"}
{"instruction":"Write a Zig function similar to markFiber from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn markFiber(self: *GC, fiber: *v.Fiber) !void {\n    var current_fiber: ?*v.Fiber = fiber;\n    while (current_fiber) |ufiber| {\n        try self.markObj(@constCast(ufiber.type_def.toObj()));\n        // Mark main fiber\n        if (BuildOptions.gc_debug) {\n            std.log.info(\"MARKING STACK OF FIBER @{}"}
{"instruction":"Write a Zig function similar to pread from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn pread(self: File, buf: []u8, offset: u64) !usize {\n        // NOTE(Corentin): Early return is required to avoid error with xev on Linux with io_uring backend.\n        if (buf.len == 0) {\n            return 0;\n        }"}
{"instruction":"Write a Zig function similar to callback from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"fn callback(\n            userdata: ?*@This(),\n            _: *xev.Loop,\n            _: *xev.Completion,\n            result: ResultT,\n        ) xev.CallbackAction {\n            const data = userdata.?;\n            data.result = result;\n            if (data.frame != null) libcoro.xresume(data.frame.?);\n            return .disarm;\n        }"}
{"instruction":"Write a Zig struct similar to Chip from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig","output":"pub const Chip = struct {\n    /// The display name of the controller.\n    name: []const u8,\n\n    /// (optional) link to the documentation/vendor page of the controller.\n    url: ?[]const u8 = null,\n\n    /// The provider for register definitions.\n    register_definition: union(enum) {\n        /// Use `regz` to create a json file from a SVD schema.\n        svd: LazyPath,\n\n        /// Use `regz` to create a zig file from an ATDF schema.\n        atdf: LazyPath,\n\n        /// Use the provided file directly as the chip file.\n        zig: LazyPath,\n\n        /// Path to embassy stm32-data directory\n        embassy: LazyPath,\n    }"}
{"instruction":"Write a Zig function similar to allocator from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"pub fn allocator(self: Self) std.mem.Allocator;\n//\n//     // Optional, to allow default-initialization. `.{}"}
{"instruction":"Write a Zig function similar to isReadyRead from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn isReadyRead(self: Self, sock: Socket) bool {\n        if (self.read_fd_set.getSelectPointer()) |ptr| {\n            return windows.funcs.__WSAFDIsSet(sock.internal, ptr) != 0;\n        }"}
{"instruction":"Write a Zig function similar to deinit from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn deinit(this: *Value) void {\n        switch (this.*) {\n            .buffer => |buf| {\n                buf.allocator.free(buf.bytes);\n            }"}
{"instruction":"Write a Zig function similar to create from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: build.zig","output":"pub fn create(builder: *Builder, options: Fat32.Options, out_file_path: []const u8) *Fat32BuilderStep {\n        const fat32_builder_step = builder.allocator.create(Fat32BuilderStep) catch unreachable;\n        fat32_builder_step.* = .{\n            .step = Step.init(.custom, builder.fmt(\"Fat32BuilderStep\", .{}"}
{"instruction":"Write a Zig function similar to __bos from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {\n    _ = &ptr;\n    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));\n}"}
{"instruction":"Write a Zig struct similar to Tokenizer from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"pub const Tokenizer = struct {\n    input: []const u8,\n    pos: usize = 0,\n    space_before: bool = false,\n    semi_before: bool = false,\n\n    pub const Error = error{ Eof, InvalidCharacter }"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn decode(decoder: *Decoder) Decoder.Error!@This() {\n            const consumer_tag = try decoder.read_short_string();\n            const delivery_tag = try decoder.read_int(u64);\n            const bitset_1: stdx.BitSetType(8) = .{ .bits = try decoder.read_int(u8) }"}
{"instruction":"Write a Zig struct similar to Proc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub const Proc = struct {\n    type: ProcType,\n\n    /// Index into `Chunk.procs`.\n    id: u32,\n\n    /// Whether codegen should create an ending that returns 1 arg.\n    /// Otherwise `ret0` is generated.\n    requiresEndingRet1: bool,\n\n    /// If the function body belongs to a closure, this local\n    /// contains the closure's value which is then used to perform captured var lookup.\n    closureLocal: u8,\n\n    /// Starts after the prelude registers.\n    startLocalReg: u8,\n\n    irLocalMapStart: u32,\n\n    num_pre_slots: u32,\n    slot_start: u32,\n\n    /// Track the max number of slots used to know the stack size required by the block.\n    max_slots: u8,\n\n    debugNode: *ast.Node,\n\n    block_depth: u32,\n\n    /// If the last stmt is an expr stmt, return the local instead of releasing it. (Only for main block.)\n    endLocal: u8 = cy.NullU8,\n\n    /// LLVM\n    // funcRef: if (cy.hasJIT) llvm.ValueRef else void = undefined,\n\n    fn init(btype: ProcType, id: usize) Proc {\n        return .{\n            .id = @intCast(id),\n            .type = btype,\n            .requiresEndingRet1 = false,\n            .closureLocal = cy.NullU8,\n            .irLocalMapStart = 0,\n            .slot_start = 0,\n            .num_pre_slots = 0,\n            .max_slots = 0,\n            .startLocalReg = 0,\n            .debugNode = undefined,\n            .block_depth = 0,\n        }"}
{"instruction":"Write a Zig function similar to toggleBreakpoint from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn toggleBreakpoint(\n            self: *Self,\n            scratch: Allocator,\n            req: proto.ToggleBreakpointRequest,\n        ) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            defer self.stateUpdated();\n\n            self.data.mu.lock();\n            defer self.data.mu.unlock();\n\n            if (self.data.subordinate == null) return;\n\n            const bp = blk: {\n                for (self.data.state.breakpoints.items) |*bp| {\n                    if (req.id != bp.bid) continue;\n\n                    bp.flags.active = !bp.flags.active;\n                    break :blk bp;\n                }"}
{"instruction":"Write a Zig const similar to fit_y from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Image.zig","output":"const fit_y: bool = if (win_height_pix >= self.height) true else false;"}
{"instruction":"Write a Zig function similar to allocated from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn allocated(self: *Self, ptr: *o.Obj, at: ?Token, what: o.ObjType) void {\n        std.debug.assert(self.tracker.get(ptr) == null);\n        self.tracker.put(\n            self.allocator,\n            ptr,\n            Ptr{\n                .what = what,\n                .allocated_at = at,\n            }"}
{"instruction":"Write a Zig function similar to StyleRule from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_rule.zig","output":"pub fn StyleRule(comptime StyleDeclaration: type) type {\n    return struct {\n        selector: Selector,\n        style: StyleDeclaration,\n\n        const Self = @This();\n\n        pub fn parseWith(parser: *Parser) !Self {\n            return .{\n                .selector = try parser.parse(Selector),\n                .style = try parser.parse(StyleDeclaration),\n            }"}
{"instruction":"Write a Zig function similar to init from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/ioapic.zig","output":"pub fn init() void {\n    const maxintr = (ioapic.read(REG_VER) >> 16) & 0xff;\n\n    // Mark all interrupts edge-triggered, active high, disabled,\n    // and not routed to any CPUs.\n    var i: u32 = 0;\n    while (i <= maxintr) : (i += 1) {\n        ioapic.write(REG_TABLE + 2 * i, INT_DISABLED | (interrupt.T_IRQ0 + i));\n        ioapic.write(REG_TABLE + 2 * i + 1, 0);\n    }"}
{"instruction":"Write a Zig function similar to closestRay from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"fn closestRay(comptime typ: enum {bit, intersection}, block: Block, relativePlayerPos: Vec3f, playerDir: Vec3f) if(typ == .intersection) ?RayIntersectionResult else u16 {\n\tvar result: ?RayIntersectionResult = null;\n\tvar resultBit: u16 = 0;\n\tfor([_]u16{1, 2, 4, 8, 16, 32, 64, 128}"}
{"instruction":"Write a Zig function similar to property_flags from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"fn property_flags(self: *const BasicProperties) u16 {\n            var bitset: stdx.BitSetType(16) = .{}"}
{"instruction":"Write a Zig function similar to SliceIterator from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig","output":"fn SliceIterator(comptime T: type) type {\n    return struct {\n        slice: []const T, // ptr + len\n        pos: usize = 0, // next pos\n\n        const Self = @This();\n\n        fn init(comptime slice: []const T) Self {\n            return .{ .slice = slice }"}
{"instruction":"Write a Zig function similar to OP_YIELD from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_YIELD(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_YIELD);\n}"}
{"instruction":"Write a Zig function similar to printSymbolInfoAt from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"fn printSymbolInfoAt(st_index: usize, maybe_debug_info: ?*std.debug.DebugInfo, int_addr: usize) void {\n    var symbol_name_buffer: [1024]u8 = undefined;\n    var symbol_name: ?[]const u8 = null;\n\n    if (maybe_debug_info) |di| {\n        if (di.getModuleForAddress(int_addr)) |module| {\n            var symbol_buffer: [1024]u8 = undefined;\n            var fba = std.heap.FixedBufferAllocator.init(&symbol_buffer);\n\n            if (module.getSymbolAtAddress(fba.allocator(), int_addr)) |symbol| {\n\n                // symbol_name_buffer\n\n                symbol_name = std.fmt.bufPrint(\n                    &symbol_name_buffer,\n                    \"{s}"}
{"instruction":"Write a Zig function similar to writeChunks from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/wav.zig","output":"fn writeChunks(writer: Writer, config: EncoderConfig, opt_data: ?[]const u8) !void {\n            // Chunk configuration.\n            const bytes_per_sample = config.format.getNumBytes();\n            const num_channels: u16 = @intCast(config.num_channels);\n            const sample_rate: u32 = @intCast(config.sample_rate);\n            const byte_rate = sample_rate * @as(u32, num_channels) * bytes_per_sample;\n            const block_align: u16 = num_channels * bytes_per_sample;\n            const bits_per_sample: u16 = bytes_per_sample * 8;\n            const data_len: u32 = if (opt_data) |data| @intCast(data.len) else 0;\n            const endian = std.builtin.Endian.little;\n            // Write the file header.\n            try writer.writeAll(&RIFF);\n            if (opt_data != null) {\n                try writer.writeInt(u32, data_chunk_pos + 8 + data_len - 8, endian);\n            }"}
{"instruction":"Write a Zig struct similar to ServerList from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"const ServerList = struct {\n    const Self = @This();\n\n    allocator: std.mem.Allocator,\n    list: std.ArrayList(Server),\n    mutex: std.Thread.Mutex,\n\n    pub fn init(allocator: std.mem.Allocator) Self {\n        return Self{\n            .allocator = allocator,\n            .list = .empty,\n            .mutex = std.Thread.Mutex{}"}
{"instruction":"Write a Zig function similar to to_string_alloc from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: src/http/cookie.zig","output":"pub fn to_string_alloc(self: Cookie, allocator: std.mem.Allocator) ![]const u8 {\n        var list = try std.ArrayListUnmanaged(u8).initCapacity(allocator, 128);\n        errdefer list.deinit(allocator);\n        const writer = list.writer(allocator);\n\n        try writer.print(\"{s}"}
{"instruction":"Write a Zig function similar to direction from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn direction(n: Node) Direction {\n        switch (n.kind) {\n            .root => {\n                std.debug.assert(n.first_child_idx == 0);\n                return .in;\n            }"}
{"instruction":"Write a Zig const similar to win from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/dx11-ontop.zig","output":"const win: *dvui.Window = backend.getWindow();"}
{"instruction":"Write a Zig function similar to clearAndFreeWatchExpressions from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn clearAndFreeWatchExpressions(self: *Self, alloc: Allocator) void {\n        const z = trace.zone(@src());\n        defer z.end();\n\n        for (self.watch_expressions.items) |e| alloc.free(e);\n        self.watch_expressions.clearAndFree(alloc);\n    }"}
{"instruction":"Write a Zig function similar to dupe from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Gc.zig","output":"pub fn dupe(gc: *Gc, val: *const Value) !*Value {\n    // no need to copy always memoized values\n    if (val == Value.Null) return Value.Null;\n    if (val == Value.True) return Value.True;\n    if (val == Value.False) return Value.False;\n\n    const new = try gc.alloc(val.*);\n    switch (val.*) {\n        .list => |*l| {\n            new.* = .{ .list = .{}"}
{"instruction":"Write a Zig function similar to anonymousObjectInit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn anonymousObjectInit(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n    try self.consume(.LeftBrace, \"Expected `{` after `.`\");\n\n    const qualifier = try std.mem.replaceOwned(u8, self.gc.allocator, self.script_name, \"/\", \".\");\n    defer self.gc.allocator.free(qualifier);\n    var qualified_name = std.ArrayList(u8).empty;\n    defer qualified_name.deinit(self.gc.allocator);\n    try qualified_name.writer(self.gc.allocator).print(\"{s}"}
{"instruction":"Write a Zig function similar to findIdentifier from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"fn findIdentifier(\n        comptime root: type,\n        comptime definition: type,\n    ) ?Identifier {\n        if (@typeInfo(definition) != .@\"struct\") {\n            return null;\n        }"}
{"instruction":"Write a Zig function similar to modRm_indirectDisp8 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn modRm_indirectDisp8(self: Self, reg_or_opx: u3, rm: u3) !void {\n            assert(rm != 4);\n            try self.modRm(0b01, reg_or_opx, rm);\n        }"}
{"instruction":"Write a Zig function similar to fromLuvAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn fromLuvAlpha(self: RgbColorspace, luv: CIELuvAlpha, post_conversion_behavior: PostConversionBehavior) Colorf32 {\n        const xyza = luv.toXYZAlpha(self.white);\n        var result = self.fromXYZAlpha(xyza);\n\n        switch (post_conversion_behavior) {\n            .none => {}"}
{"instruction":"Write a Zig const similar to pcPtr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"const pcPtr: [*]cy.Inst = @ptrFromInt(@as(usize, @intCast(@as(*const align(1) u48, @ptrCast(pc + 6)).*)));"}
{"instruction":"Write a Zig const similar to my_window from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const my_window: usize = webui_get_new_window_id();"}
{"instruction":"Write a Zig function similar to isSourceFile from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: build.zig","output":"fn isSourceFile(b: *std.Build, path: []const u8) !bool {\n    const dir = try std.fs.openDirAbsolute(b.build_root.path.?, .{}"}
{"instruction":"Write a Zig function similar to init from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn init(allocator: mem.Allocator, argv: []const []const u8) WindowsCommandLineCache {\n        return .{\n            .allocator = allocator,\n            .argv = argv,\n        }"}
{"instruction":"Write a Zig function similar to matchAll from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/css.zig","output":"pub fn matchAll(s: *const Selector, node: anytype, m: anytype) !void {\n    var child = node.firstChild();\n    while (child) |c| {\n        if (try s.match(c)) try m.match(c);\n        try matchAll(s, c, m);\n        child = c.nextSibling();\n    }"}
{"instruction":"Write a Zig function similar to do_resume from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig","output":"pub fn do_resume(frame: anyframe) void {\n    resume frame;\n    check_terminated();\n}"}
{"instruction":"Write a Zig function similar to __invert__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __invert__(self: *Self) !*Self {\n        return py.init(root, Self, .{ .num_ = ~self.num_ }"}
{"instruction":"Write a Zig function similar to dispatch from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn dispatch(self: *TestHandlerDispatchContext, action: Action(*ActionContext), req: *Request, res: *Response) !void {\n        res.header(\"dstate\", try std.fmt.allocPrint(res.arena, \"{d}"}
{"instruction":"Write a Zig function similar to serveWebSocket from zigcc/zig-cookbook","input":"Repository: zigcc/zig-cookbook (1019 ⭐)\nFile: assets/src/05-03.zig","output":"fn serveWebSocket(ws: *std.http.Server.WebSocket) !void {\n    try ws.writeMessage(\"Hello from Zig WebSocket server\", .text);\n    while (true) {\n        const msg = try ws.readSmallMessage();\n        if (msg.opcode == .connection_close) {\n            log.info(\"Client closed the WebSocket\", .{}"}
{"instruction":"Write a Zig function similar to reader from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn reader(self: File) Reader {\n            return .{ .context = self }"}
{"instruction":"Write a Zig const similar to ctx from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: examples/table.zig","output":"const ctx: *const RowContext = @ptrCast(@alignCast(ctx_raw));"}
{"instruction":"Write a Zig function similar to pointerSet from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn pointerSet(vm: *cy.VM) anyerror!Value {\n    const ptr = vm.getPointer(0);\n    const idx: usize = @intCast(vm.getInt(1));\n    const ctype = try std.meta.intToEnum(Symbol, vm.getSymbol(2));\n    const val = vm.getValue(3);\n    const valT = val.getTypeId();\n    switch (ctype) {\n        .int => {\n            switch (valT) {\n                bt.Integer => {\n                    const addr: usize = @intFromPtr(ptr) + idx;\n                    @as(*i32, @ptrFromInt(addr)).* = @intCast(val.asBoxInt());\n                    return Value.Void;\n                }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn forward(self: Mlp, x: zml.Tensor) zml.Tensor {\n        const dt = x.dtype();\n        var gate, var up = zml.nn.splitRealImg(self.gate_up_proj.forward(x), .interleaved);\n        gate = .minimum(gate, .scalar(7, dt));\n        up = .clamp(up, .scalar(-7, dt), .scalar(7, dt));\n\n        const out = gate.quickGelu().mul(up.addConstant(1));\n        return zml.call(self.down_proj, .forward, .{out}"}
{"instruction":"Write a Zig function similar to writeCode from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BlockWriter.zig","output":"fn writeCode(self: *BlockWriter, c: hc.HuffCode) Error!void {\n    try self.bit_writer.writeBits(c.code, c.len);\n}"}
{"instruction":"Write a Zig function similar to generateTry from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateTry(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const components = self.ast.nodes.items(.components)[node].Try;\n    const type_defs = self.ast.nodes.items(.type_def);\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n    const location = locations[node];\n\n    self.current.?.try_should_handle = .{}"}
{"instruction":"Write a Zig function similar to setBroadcast from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn setBroadcast(self: *Self, enable: bool) !void {\n        std.debug.assert(self.family == .ipv4);\n\n        const val: u32 = if (enable) 1 else 0;\n        try std.posix.setsockopt(self.internal, std.posix.SOL.SOCKET, std.posix.SO.BROADCAST, std.mem.asBytes(&val));\n    }"}
{"instruction":"Write a Zig function similar to renderReturnStruct from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderReturnStruct(self: *Self, command_name: []const u8, returns: []const ReturnValue) !void {\n        try self.writer.writeAll(\"pub const \");\n        try self.renderReturnStructName(command_name);\n        try self.writer.writeAll(\" = struct {\\n\");\n        for (returns) |ret| {\n            try self.writeIdentifierWithCase(.snake, ret.name);\n            try self.writer.writeAll(\": \");\n            try self.renderTypeInfo(ret.return_value_type);\n            try self.writer.writeAll(\", \");\n        }"}
{"instruction":"Write a Zig function similar to sys_seek from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_seek(file: *const fs.Seek) isize {\n    return call(.SYS_SEEK, file);\n}"}
{"instruction":"Write a Zig function similar to freeId from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn freeId(id: InventoryId) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tfreeIdList.append(id);\n\t\t}"}
{"instruction":"Write a Zig function similar to get_mapped_type_name from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/dotnet_bindings.zig","output":"fn get_mapped_type_name(comptime Type: type) ?[]const u8 {\n    inline for (type_mappings) |type_mapping| {\n        if (Type == type_mapping[0]) {\n            return type_mapping[1].name;\n        }"}
{"instruction":"Write a Zig struct similar to Response from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/config.zig","output":"pub const Response = struct {\n        max_header_count: ?usize = null,\n    }"}
{"instruction":"Write a Zig function similar to traceRetains from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn traceRetains(vm: *cy.VM) Value {\n    return Value.initInt(vm.c.trace.numRetains);\n}"}
{"instruction":"Write a Zig function similar to resolveBindingOfNode from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveBindingOfNode(analyser: *Analyser, options: ResolveOptions) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to equals from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn equals(self: CIExyY, right: CIExyY) bool {\n        return self.x == right.x and self.y == right.y;\n    }"}
{"instruction":"Write a Zig function similar to err_exit from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn err_exit(comptime format: []const u8, args: anytype) noreturn {\n    print_err(format, args);\n    newline();\n    std.os.exit(1);\n}"}
{"instruction":"Write a Zig function similar to gimmeTheBiggerInteger from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/compile-time_duck_typing.zig","output":"fn gimmeTheBiggerInteger(a: u64, b: u64) u64 {\n    return max(u64, a, b);\n}"}
{"instruction":"Write a Zig function similar to free from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn free(self: *TCP) void {\n        if (self.flags.freed) return;\n        self.flags.freed = true;\n\n        if (!self.is_idle())\n            self.session_node.on_idle();\n\n        if (self.upstream.session_eql(self))\n            self.upstream.session = null;\n\n        self.send_list.cancel_wait();\n\n        if (self.fdobj) |fdobj| {\n            fdobj.cancel();\n            fdobj.free();\n            self.fdobj = null;\n        }"}
{"instruction":"Write a Zig struct similar to Allocator from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig","output":"pub const Allocator = struct {\n    dummy: bool,\n\n    const vtable = std.mem.Allocator.VTable{\n        .alloc = alloc,\n        .resize = resize,\n        .remap = remap,\n        .free = free,\n    }"}
{"instruction":"Write a Zig struct similar to c_float_or_double from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig","output":"const c_float_or_double = struct {}"}
{"instruction":"Write a Zig function similar to pushReleaseVals from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushReleaseVals(c: *Chunk, vals: []const GenValue, debugNode: *ast.Node) !void {\n    if (vals.len > 1) {\n        try c.pushOptionalDebugSym(debugNode);\n        try c.buf.pushOp1(.releaseN, @intCast(vals.len));\n\n        const start = c.buf.ops.items.len;\n        try c.buf.ops.resize(c.alloc, c.buf.ops.items.len + vals.len);\n        for (vals, 0..) |val, i| {\n            c.buf.ops.items[start+i] = .{ .val = val.reg }"}
{"instruction":"Write a Zig function similar to contains from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/selector.zig","output":"fn contains(haystack: []const u8, needle: []const u8, ci: bool) bool {\n        if (ci) return std.ascii.indexOfIgnoreCase(haystack, needle) != null;\n        return std.mem.indexOf(u8, haystack, needle) != null;\n    }"}
{"instruction":"Write a Zig function similar to byte_offset_to_line_and_col from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn byte_offset_to_line_and_col(self: *const Node, pos: usize, metrics: Metrics, eol_mode: EolMode) Cursor {\n        const ctx_ = struct {\n            pos: usize,\n            line: usize = 0,\n            col: usize = 0,\n            eol_mode: EolMode,\n            fn walker(ctx_: *anyopaque, egc: []const u8, wcwidth: usize, _: Metrics) Walker {\n                const ctx = @as(*@This(), @ptrCast(@alignCast(ctx_)));\n                if (egc[0] == '\\n') {\n                    ctx.pos -= switch (ctx.eol_mode) {\n                        .lf => 1,\n                        .crlf => @min(2, ctx.pos),\n                    }"}
{"instruction":"Write a Zig function similar to parse from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig","output":"fn parse(args: []const []const u8) Command {\n        var mode: ?Mode = null;\n        var syntax_only: ?bool = null;\n\n        var idx: usize = 0;\n        while (idx < args.len) : (idx += 1) {\n            const arg = args[idx];\n            if (std.mem.eql(u8, arg, \"--help\") or\n                std.mem.eql(u8, arg, \"-h\"))\n            {\n                fatalHelp();\n            }"}
{"instruction":"Write a Zig function similar to addExtra from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn addExtra(ip: *InternPool, gpa: Allocator, comptime T: type, extra: T) Allocator.Error!u32 {\n    comptime if (@sizeOf(T) <= 4) {\n        @compileError(@typeName(T) ++ \" fits into a u32! Consider directly storing this extra in Item's data field\");\n    }"}
{"instruction":"Write a Zig const similar to source from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"const source: []const u8 = batched.slice();"}
{"instruction":"Write a Zig function similar to allocateQueues from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/graphics_context.zig","output":"fn allocateQueues(instance: Instance, pdev: vk.PhysicalDevice, allocator: Allocator, surface: vk.SurfaceKHR) !?QueueAllocation {\n    const families = try instance.getPhysicalDeviceQueueFamilyPropertiesAlloc(pdev, allocator);\n    defer allocator.free(families);\n\n    var graphics_family: ?u32 = null;\n    var present_family: ?u32 = null;\n\n    for (families, 0..) |properties, i| {\n        const family: u32 = @intCast(i);\n\n        if (graphics_family == null and properties.queue_flags.graphics_bit) {\n            graphics_family = family;\n        }"}
{"instruction":"Write a Zig const similar to ptr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const ptr: [*]const u8 = @ptrCast(vm.getPointer(0));"}
{"instruction":"Write a Zig function similar to lines from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn lines(self: *const Node) usize {\n        return self.weights_sum().bols;\n    }"}
{"instruction":"Write a Zig function similar to kevent_syscall from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn kevent_syscall(\n    kq: i32,\n    changelist: []const Kevent,\n    eventlist: []Kevent,\n    timeout: ?*const posix.timespec,\n) posix.KEventError!usize {\n    // Normaly Kevent? Just use the normal posix.kevent call.\n    if (Kevent == posix.Kevent) return try posix.kevent(\n        kq,\n        changelist,\n        eventlist,\n        timeout,\n    );\n\n    // Otherwise, we have to call the kevent64 variant.\n    while (true) {\n        const rc = posix.system.kevent64(\n            kq,\n            changelist.ptr,\n            std.math.cast(c_int, changelist.len) orelse return error.Overflow,\n            eventlist.ptr,\n            std.math.cast(c_int, eventlist.len) orelse return error.Overflow,\n            0,\n            timeout,\n        );\n        switch (posix.errno(rc)) {\n            .SUCCESS => return @intCast(rc),\n            .ACCES => return error.AccessDenied,\n            .FAULT => unreachable,\n            .BADF => unreachable, // Always a race condition.\n            .INTR => continue,\n            .INVAL => unreachable,\n            .NOENT => return error.EventNotFound,\n            .NOMEM => return error.SystemResources,\n            .SRCH => return error.ProcessNotFound,\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig function similar to windowsMakePipeIn from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn windowsMakePipeIn(rd: *?windows.HANDLE, wr: *?windows.HANDLE, sattr: *const windows.SECURITY_ATTRIBUTES) !void {\n    var rd_h: windows.HANDLE = undefined;\n    var wr_h: windows.HANDLE = undefined;\n    try windows.CreatePipe(&rd_h, &wr_h, sattr);\n    errdefer windowsDestroyPipe(rd_h, wr_h);\n    try windows.SetHandleInformation(wr_h, windows.HANDLE_FLAG_INHERIT, 0);\n    rd.* = rd_h;\n    wr.* = wr_h;\n}"}
{"instruction":"Write a Zig struct similar to Options from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub const Options = struct { allow_frame_locs: bool = false, allow_symbols: bool = false }"}
{"instruction":"Explain Variables § in Zig 0.13.0","input":"","output":"A variable is a unit of Memory storage. It is generally preferable to use const rather than var when declaring a variable. This causes less work for both humans and computers to do when reading code, and creates more optimization opportunities. The extern keyword or @extern builtin function can be used to link against a variable that is exported from another object. The export keyword or @export builtin function can be used to make a variable available to other objects at link time. In both cases, the type of the variable must be C ABI compatible. See also: Exporting a C Library Identifiers § Variable identifiers are never allowed to shadow identifiers from an outer scope. Identifiers must start with an alphabetic character or underscore and may be followed by any number of alphanumeric characters or underscores. They must not overlap with any keywords. See Keyword Reference . If a name that does not fit these requirements is needed, such as for linking with external libraries, the @&q"}
{"instruction":"Write a Zig function similar to hash64 from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn hash64(self: Type) u64 {\n        var hasher: std.hash.Wyhash = .init(0);\n        self.hashWithHasher(&hasher);\n        return hasher.final();\n    }"}
{"instruction":"Write a Zig function similar to floatSub from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn floatSub(vm: *cy.VM) Value {\n    return Value.initF64(vm.getFloat(0) - vm.getFloat(1));\n}"}
{"instruction":"Write a Zig function similar to callFloatMethod from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/jni.zig","output":"fn callFloatMethod(class: Class, object: android.jobject, name: [:0]const u8, signature: [:0]const u8, args: anytype) Error!android.jfloat {\n            const method_id = try class.jni.invokeJni(.GetMethodID, .{ class.class, name, signature }"}
{"instruction":"Write a Zig function similar to debug from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn debug(n: Node, src: []const u8) void {\n        std.debug.print(\"{s}"}
{"instruction":"Write a Zig function similar to insert_chars from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn insert_chars(\n        self_: *const Node,\n        line_: usize,\n        col_: usize,\n        chars: []const u8,\n        allocator: Allocator,\n        metrics_: Metrics,\n    ) !struct { usize, usize, Root }"}
{"instruction":"Write a Zig struct similar to Sentinel from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const Sentinel = struct {\n        // Index.none indicates no sentinel\n        actual: Index, // value\n        wanted: Index, // value\n        ty: Index,\n    }"}
{"instruction":"Write a Zig struct similar to DrawOptions from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Image.zig","output":"pub const DrawOptions = struct {\n    /// an offset into the top left cell, in pixels, with where to place the\n    /// origin of the image. These must be less than the pixel size of a single\n    /// cell\n    pixel_offset: ?struct {\n        x: u16,\n        y: u16,\n    }"}
{"instruction":"Write a Zig function similar to renderString from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/Zig.zig","output":"fn renderString(\n    params: *const encoding.Params,\n    len: u64,\n) encoding.EncodeVariableError!encoding.RenderStringResult {\n    const addr = types.Address.from(mem.readInt(u64, @ptrCast(params.val), encoding.endian));\n\n    var str: ArrayListUnmanaged(u8) = .empty;\n    const max_str_len = math.pow(usize, 2, 12);\n    for (0..max_str_len) |ndx| {\n        var buf = [_]u8{0}"}
{"instruction":"Write a Zig function similar to parse from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub fn parse(\n        gpa: Allocator,\n        args: []const []const u8,\n    ) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to to_cursor_bottom from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/View.zig","output":"fn to_cursor_bottom(self: *const Self, root: Buffer.Root) Cursor {\n    const bottom = @min(root.lines(), self.row + self.rows + 1);\n    return .{ .row = bottom, .col = 0 }"}
{"instruction":"Write a Zig function similar to addGlobal from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn addGlobal(\n    self: *Self,\n    node: Ast.Node.Index,\n    name: Ast.TokenIndex,\n    global_type: *obj.ObjTypeDef,\n    final: bool,\n    mutable: bool,\n) Error!usize {\n    const lexemes = self.ast.tokens.items(.lexeme);\n    // Search for an existing placeholder global with the same name\n    for (self.globals.items, 0..) |*global, index| {\n        if (global.type_def.def_type == .Placeholder and\n            (self.namespace == null or global.matchNamespace(self.ast, self.namespace.?)) and\n            std.mem.eql(u8, lexemes[global.name[global.name.len - 1]], lexemes[name]))\n        {\n            global.exported = self.exporting;\n\n            if (global_type.def_type != .Placeholder) {\n                try self.resolvePlaceholder(global.type_def, global_type, final);\n\n                if (self.flavor == .Ast) {\n                    for (global.placeholder_referrers.items) |referrer| {\n                        try self.resolveReferrer(referrer, node);\n                    }"}
{"instruction":"Write a Zig function similar to newNodeErase from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn newNodeErase(self: *Ast, comptime node_t: NodeType, data: NodeData(node_t)) !*Node {\n        const n = try self.newEmptyNode(node_t);\n        n.* = data;\n        return @ptrCast(n);\n    }"}
{"instruction":"Write a Zig function similar to dataCallback from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn dataCallback(self: *PendingScript, transfer: *Http.Transfer, data: []const u8) !void {\n        _ = transfer;\n        // too verbose\n        // log.debug(.http, \"script data chunk\", .{\n        //     .req = transfer,\n        //     .len = data.len,\n        // }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@bitSizeOf</span>(<span class=\"tok-kw\">comptime</span> T: <span class=\"tok-type\">type</span>) <span class=\"tok-type\">comptime_int</span>"}
{"instruction":"Write a Zig function similar to createTextEditLoc from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"pub fn createTextEditLoc(self: *Builder, loc: offsets.Loc, new_text: []const u8) types.TextEdit {\n        const range = offsets.locToRange(self.handle.tree.source, loc, self.offset_encoding);\n        return .{ .range = range, .newText = new_text }"}
{"instruction":"Write a Zig function similar to deinit from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/aaudio.zig","output":"pub fn deinit(output_stream: *@This()) void {\n            checkResult(c.AAudioStream_close(output_stream.stream)) catch |e| {\n                audio_log.err(\"Error deiniting stream {s}"}
{"instruction":"Write a Zig function similar to on_send_msg from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn on_send_msg(self: *TCP, qmsg: *RcMsg) void {\n        const qid = dns.get_id(qmsg.msg());\n        if (self.ack_list.fetchPut(g.allocator, qid, qmsg) catch unreachable) |old| {\n            old.value.unref();\n            self.pending_n -= 1;\n            assert(self.pending_n > 0);\n            log.warn(@src(), \"duplicated qid:%u to %s\", .{ cc.to_uint(qid), self.upstream.url }"}
{"instruction":"Write Zig 0.13.0 code for: Blocks §","input":"Blocks are used to limit the scope of variable declarations: test_blocks.zig Shell Blocks are expressions. When labeled, break can be used to return a value from the block: test_labeled_break.zig Shell Here, blk can be any name. See also: Labeled while Labeled for Shadowing § Identifiers are never allowed to \"hide\" other identifiers by using the same name: test_shadowing.zig Shell Because of this, when you read Zig code you can always rely on an identifier to consistently mean the same thing wit","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"access variable after block scope\"</span> {\n    {\n        <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">i32</span> = <span class=\"tok-number\">1</span>;\n        _ = &x;\n    }\n    x += <span class=\"tok-number\">1</span>;\n}"}
{"instruction":"Write a Zig function similar to identifier from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/FFI.zig","output":"fn identifier(self: *Self, decl_index: Ast.Node.Index) anyerror!*Zdef {\n    const id = self.state.?.ast.tokenSlice(self.state.?.ast.nodeMainToken(decl_index));\n\n    var type_def = if (basic_types.get(id)) |basic_type|\n        basic_type\n    else\n        null;\n    var zig_type = if (zig_basic_types.get(id)) |zig_basic_type|\n        zig_basic_type\n    else\n        null;\n\n    if ((type_def == null or zig_type == null) and self.state.?.parser != null) {\n        // FIXME: should this account for the current namespace?\n        const global_idx = glb: {\n            for (self.state.?.parser.?.globals.items, 0..) |global, idx| {\n                if (std.mem.eql(\n                    u8,\n                    id,\n                    self.state.?.parser.?.ast.tokens.items(.lexeme)[global.name[global.name.len - 1]],\n                )) {\n                    break :glb idx;\n                }"}
{"instruction":"Write a Zig struct similar to ImportStmt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const ImportStmt = struct {\n    name: *Node align(8),\n    spec: ?*Node,\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to set from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig","output":"pub fn set(self: *DynStr, str: []const u8) void {\n    return self.set_x(&.{str}"}
{"instruction":"Write a Zig function similar to updateCameraPlayerBoundsPush from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/2d_camera_platformer.zig","output":"fn updateCameraPlayerBoundsPush(\n    camera: *Camera2D,\n    player: *Player,\n    _: []EnvItem,\n    _: f32,\n    width: i32,\n    height: i32,\n) void {\n    const bbox = Vec2.init(0.2, 0.2);\n\n    const widthf: f32 = @floatFromInt(width);\n    const heightf: f32 = @floatFromInt(height);\n\n    const bbox_world_min = rl.getScreenToWorld2D(Vec2.init((1 - bbox.x) * 0.5 * widthf, (1 - bbox.y) * 0.5 * heightf), camera.*);\n    const bbox_world_max = rl.getScreenToWorld2D(Vec2.init((1 + bbox.x) * 0.5 * widthf, (1 + bbox.y) * 0.5 * heightf), camera.*);\n    camera.offset = Vec2.init((1 - bbox.x) * 0.5 * widthf, (1 - bbox.y) * 0.5 * heightf);\n\n    if (player.position.x < bbox_world_min.x) camera.target.x = player.position.x;\n    if (player.position.y < bbox_world_min.y) camera.target.y = player.position.y;\n    if (player.position.x > bbox_world_max.x) camera.target.x = bbox_world_min.x + (player.position.x - bbox_world_max.x);\n    if (player.position.y > bbox_world_max.y) camera.target.y = bbox_world_min.y + (player.position.y - bbox_world_max.y);\n}"}
{"instruction":"Write a Zig function similar to gui_frame from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/sdl-standalone.zig","output":"fn gui_frame() bool {\n    const backend = g_backend orelse return false;\n\n    {\n        var hbox = dvui.box(@src(), .{ .dir = .horizontal }"}
{"instruction":"Write a Zig function similar to generateOut from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateOut(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    _ = try self.generateNode(self.ast.nodes.items(.components)[node].Out, breaks);\n\n    try self.patchOptJumps(node);\n    try self.endScope(node);\n\n    return null;\n}"}
{"instruction":"Write a Zig function similar to resizePalette from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn resizePalette(self: *PixelStorage, new_palette_size: usize) void {\n        switch (self.*) {\n            .indexed1 => |*data| data.resizePalette(new_palette_size),\n            .indexed2 => |*data| data.resizePalette(new_palette_size),\n            .indexed4 => |*data| data.resizePalette(new_palette_size),\n            .indexed8 => |*data| data.resizePalette(new_palette_size),\n            .indexed16 => |*data| data.resizePalette(new_palette_size),\n            else => {}"}
{"instruction":"Write a Zig function similar to waitForCompletionOutsideCoro from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn waitForCompletionOutsideCoro(exec: *Executor, c: *xev.Completion) !void {\n    @branchHint(.unlikely);\n    while (c.state() != .dead) {\n        try exec.tick();\n    }"}
{"instruction":"Write a Zig struct similar to persistent from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const persistent = struct {}"}
{"instruction":"Write a Zig struct similar to LevelArgs from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"const LevelArgs = struct {\n    good: u16, // Do less lookups if we already have match of this length.\n    nice: u16, // Stop looking for better match if we found match with at least this length.\n    lazy: u16, // Don't do lazy match find if got match with at least this length.\n    chain: u16, // How many lookups for previous match to perform.\n\n    pub fn get(level: Level) LevelArgs {\n        // zig fmt: off\n        return switch (level) {\n            .fast,    .level_4 => .{ .good =  4, .lazy =   4, .nice =  16, .chain =   16 }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@shlWithOverflow</span>(a: <span class=\"tok-kw\">anytype</span>, shift_amt: Log2T) <span class=\"tok-kw\">struct</span> { <span class=\"tok-builtin\">@TypeOf</span>(a), <span class=\"tok-type\">u1</span> }"}
{"instruction":"Write a Zig function similar to interfaceGetIntAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn interfaceGetIntAt(self: webui, event_number: usize, index: usize) i64 {\n    // TODO: Error handling here\n    return c.webui_interface_get_int_at(self.window_handle, event_number, index);\n}"}
{"instruction":"Write a Zig function similar to toNativeAddressFamily from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn toNativeAddressFamily(af: Self) u32 {\n        return switch (af) {\n            .ipv4 => std.posix.AF.INET,\n            .ipv6 => std.posix.AF.INET6,\n        }"}
{"instruction":"Write a Zig function similar to wait from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn wait(self: *ResetEventSingle) void {\n            var waiter: Waiter = .{\n                .frame = coro.xframe(),\n                .thread = AsyncThread.current,\n            }"}
{"instruction":"Write a Zig function similar to processActions from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"fn processActions(self: *AccessKit) void {\n    const window: *dvui.Window = @alignCast(@fieldParentPtr(\"accesskit\", self));\n    for (self.action_requests.items) |request| {\n        switch (request.action) {\n            Action.click => {\n                const ak_node = self.nodes.get(@enumFromInt(request.target)) orelse {\n                    log.debug(\"Action {d}"}
{"instruction":"Write a Zig const similar to code from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"const code: Chunk.OpCode = @enumFromInt(instruction);"}
{"instruction":"Write a Zig function similar to addImport from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/tcc/lib.zig","output":"pub fn addImport(root: *std.Build.Module, b: *std.Build, name: []const u8, mod: *std.Build.Module) void {\n    root.addImport(name, mod);\n    root.addIncludePath(b.path(\"lib/tcc/vendor\"));\n}"}
{"instruction":"Write a Zig function similar to setConfiguration from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/configuration.zig","output":"pub fn setConfiguration(\n        manager: *Manager,\n        tag: Tag,\n        config: *const UnresolvedConfig,\n    ) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to resolveOptionalUnwrap from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveOptionalUnwrap(analyser: *Analyser, optional: Type) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to exit_jump from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"const exit_jump: usize = try self.OP_JUMP_IF_FALSE(locations[node]);"}
{"instruction":"Write a Zig const similar to typ from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const typ: Type = switch(typeEnum) {\n\t\t\t\tinline .normal, .creative, .crafting => |tag| tag,\n\t\t\t\t.workbench => .{.workbench = ToolTypeIndex.fromId(reader.remaining) orelse return error.Invalid},\n\t\t\t};"}
{"instruction":"Write a Zig struct similar to Slice from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const Slice = struct {\n    tokens: TokenList.Slice,\n    nodes: NodeList.Slice,\n    root: ?Node.Index,\n\n    /// Do a breadth first walk of the AST, calling a callback for each node that can stop the walking from going deeper by returning true\n    /// ctx should have:\n    /// - `fn processNode(ctx: @TypeOf(ctx), allocator: std.mem.Allocator, ast: Ast.Slice, node: Node.Index) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to rule_desc from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/ip6_filter.zig","output":"pub fn rule_desc(filter: IP6Filter) ?cc.ConstStr {\n        if (filter.china_ip and filter.non_china_ip)\n            return \"all_query\";\n        if (filter.china_ip)\n            return \"china_ip\";\n        if (filter.non_china_ip)\n            return \"non_china_ip\";\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to virtToTableEntryIdx from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"fn virtToTableEntryIdx(virt: usize) usize {\n    return (virt / PAGE_SIZE_4KB) % ENTRIES_PER_TABLE;\n}"}
{"instruction":"Write a Zig function similar to lock from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn lock(self: *Mutex) void {\n        self.inner.send({}"}
{"instruction":"Write a Zig function similar to sleepThread from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigmultithread/main.zig","output":"fn sleepThread(wg: *WaitGroup, sleep_secs: u64) void {\n    defer wg.finish();\n\n    print(\"sleeping for {d}"}
{"instruction":"Write a Zig function similar to fromLCHabAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn fromLCHabAlpha(self: RgbColorspace, lch_ab_alpha: CIELCHabAlpha, post_conversion_behavior: PostConversionBehavior) Colorf32 {\n        return self.fromLabAlpha(lch_ab_alpha.toLabAlpha(), post_conversion_behavior);\n    }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/mnist/mnist.zig","output":"pub fn forward(self: Layer, input: zml.Tensor) zml.Tensor {\n            return self.weight.matmul(input).add(self.bias).relu();\n        }"}
{"instruction":"Write a Zig function similar to workspace_files from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/git.zig","output":"pub fn workspace_files(context: usize) Error!void {\n    return git_line_output(\n        context,\n        @src().fn_name,\n        .{ \"ls-files\", \"--cached\", \"--others\", \"--exclude-standard\" }"}
{"instruction":"Write a Zig function similar to deleteTreeAbsolute from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: fixdeletetree.zig","output":"pub fn deleteTreeAbsolute(dir_absolute: []const u8) !void {\n    if (builtin.os.tag != .windows) {\n        return std.fs.deleteTreeAbsolute(dir_absolute);\n    }"}
{"instruction":"Write a Zig function similar to destroyPipe from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn destroyPipe(pipe: [2]posix.fd_t) void {\n    if (pipe[0] != -1) posix.close(pipe[0]);\n    if (pipe[0] != pipe[1]) posix.close(pipe[1]);\n}"}
{"instruction":"Write a Zig struct similar to aarch64_vector_pcs from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const aarch64_vector_pcs = struct {}"}
{"instruction":"Write a Zig function similar to genUnbox from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genUnbox(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .unbox);\n    const ret_t = c.ir.getExprType(idx).id;\n    if (c.sema.isUnboxedType(ret_t)) {\n        const inst = try bc.selectForDstInst(c, cstr, ret_t, false, node);\n        const childv = try genExpr(c, data.expr, Cstr.simple);\n        try initTempValue(c, childv, node);\n\n        const pc = c.buf.len();\n        try c.pushFCode(.unbox, &.{ childv.reg, 0, 0, inst.dst }"}
{"instruction":"Write a Zig function similar to asyncMain from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/mnist/mnist.zig","output":"pub fn asyncMain() !void {\n    const allocator = std.heap.c_allocator;\n\n    // // Create ZML context\n    var context = try zml.Context.init();\n    defer context.deinit();\n\n    // log.info(\"\\n===========================\\n==   ZML MNIST Example   ==\\n===========================\\n\\n\", .{}"}
{"instruction":"Write a Zig function similar to indexedToRgba32 from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn indexedToRgba32(comptime source_format: PixelFormat, source: *const color.PixelStorage, destination: *color.PixelStorage) void {\n    const source_indexed = @field(source, getFieldNameFromPixelFormat(source_format));\n\n    for (0..source_indexed.indices.len) |index| {\n        destination.rgba32[index] = source_indexed.palette[source_indexed.indices[index]];\n    }"}
{"instruction":"Write a Zig const similar to example_opts from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: build.zig","output":"const example_opts: ExampleOptions = .{\n                    .dvui_mod = dvui_web_wasm,\n                    .backend_name = \"web-backend\",\n                    .backend_mod = web_mod_wasm,\n                };"}
{"instruction":"Write a Zig function similar to uncaughtError from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn uncaughtError(h: *TestHandlerDefaultDispatch, _: *Request, res: *Response, err: anyerror) void {\n        res.status = 500;\n        res.header(\"state\", std.fmt.allocPrint(res.arena, \"{d}"}
{"instruction":"Write a Zig const similar to led from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const led: [1]u8 = \"\\x08\".*;"}
{"instruction":"Write a Zig function similar to reportParseErrors from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/main.zig","output":"fn reportParseErrors(tree: std.zig.Ast) !void {\n    var buf: [1024]u8 = undefined;\n    var stderr = std.fs.File.stderr().writer(&buf);\n    const w = &stderr.interface;\n    for (tree.errors) |err| {\n        const loc = tree.tokenLocation(0, err.token);\n        try w.print(\"(vulkan-zig error):{}"}
{"instruction":"Write a Zig function similar to fnProto from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/FFI.zig","output":"fn fnProto(self: *Self, tag: Ast.Node.Tag, decl_index: Ast.Node.Index) anyerror!*Zdef {\n    var buffer = [1]Ast.Node.Index{undefined}"}
{"instruction":"Write a Zig const similar to NUMBER_OF_ENTRIES from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"const NUMBER_OF_ENTRIES: u8 = 32;"}
{"instruction":"Write a Zig function similar to subtract from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"pub fn subtract(lhs: FlagsType, rhs: FlagsType) FlagsType {\n    \\\\            return fromInt(toInt(lhs) & toInt(rhs.complement()));\n    \\\\        }"}
{"instruction":"Write a Zig function similar to generateConditional from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateConditional(self: *Self, binary: Ast.Binary) Error!?m.MIR_op_t {\n    const value = m.MIR_new_reg_op(\n        self.ctx,\n        try self.REG(\"value\", m.MIR_T_I64),\n    );\n\n    self.MOV(\n        value,\n        (try self.generateNode(binary.left)).?,\n    );\n\n    const out_label = m.MIR_new_label(self.ctx);\n\n    self.BNE(\n        out_label,\n        value,\n        m.MIR_new_uint_op(\n            self.ctx,\n            switch (binary.operator) {\n                .QuestionQuestion => Value.Null.val,\n                .And => Value.True.val,\n                .Or => Value.False.val,\n                else => unreachable,\n            }"}
{"instruction":"Write a Zig function similar to nextId from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn nextId() InventoryId {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tif(freeIdList.popOrNull()) |id| {\n\t\t\t\treturn id;\n\t\t\t}"}
{"instruction":"Write a Zig function similar to dot from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn dot(self: *Self, can_assign: bool, callee: Ast.Node.Index) Error!Ast.Node.Index {\n    const start_location = self.ast.nodes.items(.location)[callee];\n\n    try self.consume(.Identifier, \"Expected property name after `.`\");\n    const member_name_token = self.current_token.? - 1;\n    const member_name = self.ast.tokens.items(.lexeme)[member_name_token];\n\n    const dot_node = try self.ast.appendNode(\n        .{\n            .tag = .Dot,\n            .location = start_location,\n            .end_location = undefined,\n            .components = .{\n                .Dot = .{\n                    .callee = callee,\n                    .identifier = member_name_token,\n                    .value_or_call_or_enum = undefined,\n                    .generic_resolve = null,\n                    .member_type_def = undefined,\n                    .member_kind = undefined,\n                }"}
{"instruction":"Write a Zig function similar to make from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: build.zig","output":"fn make(step: *Step) Error!void {\n        const self = @fieldParentPtr(RamdiskStep, \"step\", step);\n        switch (self.target.getCpuArch()) {\n            .i386 => try writeRamdisk(u32, self),\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig function similar to less from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn less(_: void, a: *const Timer, b: *const Timer) bool {\n            return a.ns() < b.ns();\n        }"}
{"instruction":"Write a Zig function similar to start from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"pub fn start(watcher: *LinuxWatcher) !void {\n    const t = try std.Thread.spawn(.{}"}
{"instruction":"Write a Zig const similar to PRIVILEGE_RING_3 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/idt.zig","output":"const PRIVILEGE_RING_3: u2 = 0x3;"}
{"instruction":"Write a Zig const similar to set_ptr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const set_ptr: [*]u8 = @ptrFromInt(@as(usize, @intCast(set_slice.getValue(0).val)));"}
{"instruction":"Write a Zig const similar to llama_options from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/main.zig","output":"const llama_options: llama.LlamaLM.Options = .{\n        .max_seq_len = seq_len,\n        .sampling_strategy = .{\n            .topk = 1,\n            .temperature = 1.0,\n        },\n    };"}
{"instruction":"Write a Zig function similar to requiredByApi from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn requiredByApi(elem: *xml.Element, api: registry.Api) bool {\n    const apis = elem.getAttribute(\"api\") orelse return true; // If the 'api' element is not present, assume required.\n\n    var it = mem.splitScalar(u8, apis, ',');\n    while (it.next()) |required_by_api| {\n        if (std.mem.eql(u8, @tagName(api), required_by_api)) return true;\n    }"}
{"instruction":"Write a Zig struct similar to ParseRule from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"const ParseRule = struct {\n    prefix: ?ParseFn = null,\n    infix: ?InfixParseFn = null,\n    precedence: Precedence = .None,\n}"}
{"instruction":"Write a Zig function similar to printEngineExtensions from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/opensl.zig","output":"fn printEngineExtensions() !void {\n        var extension_count: c.SLuint32 = undefined;\n        try checkResult(engine.*.*.QueryNumSupportedExtensions.?(engine, &extension_count));\n        {\n            var i: c.SLuint32 = 0;\n            while (i < extension_count) : (i += 1) {\n                var extension_ptr: [4096]u8 = undefined;\n                var extension_size: c.SLint16 = 4096;\n                try checkResult(engine.*.*.QuerySupportedExtension.?(engine, i, &extension_ptr, &extension_size));\n                var extension_name = extension_ptr[0..@as(usize, @intCast(extension_size))];\n                audio_log.info(\"OpenSL engine extension {}"}
{"instruction":"Write a Zig function similar to rotateQuad from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"fn rotateQuad(originalCorners: [4]Vec2f, pattern: Pattern, min: f32, max: f32, side: Neighbor, textureSlotOffset: u32) main.models.QuadInfo {\n\tvar corners: [4]Vec2f = originalCorners;\n\n\tswitch(pattern) {\n\t\t.dot, .cross => {}"}
{"instruction":"Write a Zig function similar to request from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/metrics.zig","output":"pub fn request() void {\n    metrics.requests.incr();\n}"}
{"instruction":"Write a Zig const similar to switch_device from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputDevice.zig","output":"const switch_device: *Switch = @fieldParentPtr(\"device\", device);"}
{"instruction":"Write a Zig function similar to run from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"pub fn run(allocator: Allocator, argv: []const []const u8) !std.process.Child.Term {\n    try logRun(allocator, argv);\n    var proc = std.process.Child.init(argv, allocator);\n    return proc.spawnAndWait();\n}"}
{"instruction":"Write a Zig const similar to timeout from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"const timeout: ?windows.DWORD = timeout: {\n                // If we have a timer, we want to set the timeout to our next timer value. If we\n                // have no timer, we wait forever.\n                const t = self.timers.peek() orelse break :timeout null;"}
{"instruction":"Write a Zig function similar to Array from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn Array(comptime N: comptime_int) type {\n        // it is currently not possible to directly return an array type with the align attribute\n        // https://github.com/ziglang/zig/issues/7465\n        return struct {\n            buf: [N * SIZE]u8 align(ALIGN),\n\n            // ======================= for Array =======================\n\n            const Self = @This();\n\n            pub inline fn at(self: *Self, i: usize) *Ev {\n                return from(&self.buf[i * SIZE]);\n            }"}
{"instruction":"Write a Zig function similar to length from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/Token.zig","output":"pub fn length(t: Token) u16 {\n    return @as(u16, t.len_lit) + consts.base_length;\n}"}
{"instruction":"Write a Zig function similar to targetBasePublicPath from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn targetBasePublicPath(target: Environment.OperatingSystem, comptime suffix: [:0]const u8) [:0]const u8 {\n        return switch (target) {\n            .windows => \"B:/~BUN/\" ++ suffix,\n            else => \"/$bunfs/\" ++ suffix,\n        }"}
{"instruction":"Write a Zig const similar to am from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const am: bool = true;"}
{"instruction":"Write a Zig function similar to exit from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn exit(code: usize) void {\n        panic(.ApplicationExit, code);\n    }"}
{"instruction":"Write a Zig function similar to cleanupAllContexts from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/event_handling/main.zig","output":"fn cleanupAllContexts() void {\n    // In a real application, you would maintain a list of all contexts\n    // and clean them up here\n    // Clean up all remaining user contexts\n    if (global_user_contexts) |*contexts| {\n        var iterator = contexts.iterator();\n        while (iterator.next()) |entry| {\n            entry.value_ptr.*.destroy();\n        }"}
{"instruction":"Write a Zig function similar to optionsEditor from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn optionsEditor(self: *Options, wd: *const dvui.WidgetData) bool {\n    var changed = false;\n\n    var vbox = dvui.box(@src(), .{}"}
{"instruction":"Write a Zig function similar to SetDllDirectoryA from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn SetDllDirectoryA(path: [*:0]const u8) callconv(.c) std.os.windows.BOOL;\n\nfn print_or_install(b: *std.Build, compile: *std.Build.Step.Compile, print: bool) *std.Build.Step {\n    const PrintStep = struct {\n        step: std.Build.Step,\n        compile: *std.Build.Step.Compile,\n\n        fn make(step: *std.Build.Step, _: std.Build.Step.MakeOptions) !void {\n            const print_step: *@This() = @fieldParentPtr(\"step\", step);\n            const path = print_step.compile.getEmittedBin().getPath2(step.owner, step);\n            try std.io.getStdOut().writer().print(\"{s}"}
{"instruction":"Write a Zig function similar to delete_task from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn delete_task(self: *Self, command: []const u8) error{}"}
{"instruction":"Write a Zig const similar to ly from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const ly: f64 = @floatFromInt(target_box.y + @divTrunc(target_box.height, 2));"}
{"instruction":"Write a Zig function similar to applyInternalBreakpoints from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn applyInternalBreakpoints(\n            self: *Self,\n            scratch: Allocator,\n            pid: types.PID,\n            addrs: []types.Address,\n            call_frame_addr: ?types.Address,\n            max_stack_frames: ?usize,\n        ) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            assert(self.data.subordinate != null);\n            assert(self.data.subordinate.?.paused != null);\n\n            var bps = try ArrayList(types.Breakpoint).initCapacity(scratch, addrs.len);\n            var tbps = try ArrayList(types.ThreadBreakpoint).initCapacity(scratch, addrs.len);\n            for (addrs) |addr| {\n                var bp = types.Breakpoint{\n                    .flags = .{\n                        .active = true,\n                        .internal = true,\n                    }"}
{"instruction":"Write a Zig function similar to registerVoidBlock from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"pub fn registerVoidBlock(block: Block) void {\n\tvoidType = block.typ;\n\tstd.debug.assert(voidType != 0);\n}"}
{"instruction":"Write a Zig function similar to start from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"pub fn start(self: *Self) !void {\n        self.thread = try std.Thread.spawn(.{}"}
{"instruction":"Write a Zig function similar to funcE from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigbacktrace/main.zig","output":"fn funcE() void {\n    std.debug.print(\"funcE\\n\", .{}"}
{"instruction":"Write a Zig function similar to span from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: build/generate_def.zig","output":"pub fn span(self: *const NameBuf) []const u8 {\n        \\\\        return self.buf[0..self.len];\n        \\\\    }"}
{"instruction":"Write a Zig function similar to SortedHashMap from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn SortedHashMap(comptime V: type, comptime max_load_percentage: comptime_int) type {\n    return struct {\n        const empty_hash: [32]u8 = [_]u8{0xFF}"}
{"instruction":"Write a Zig const similar to other_bg from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: examples/table.zig","output":"const other_bg: vaxis.Cell.Color = .{ .rgb = .{ 32, 32, 48 } };"}
{"instruction":"Write a Zig function similar to sliceToLuvAlphaInPlace from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn sliceToLuvAlphaInPlace(self: RgbColorspace, colors: []Colorf32) []CIELuvAlpha {\n        const slice_luv: []CIELuvAlpha = @ptrCast(colors);\n\n        const white_point_xyz = self.white.toXYZ(1.0);\n\n        for (slice_luv) |*luv_alpha| {\n            const xyza = CIEXYZAlpha.fromFloat4(self.rgba_to_xyza.mulVector(luv_alpha.toFloat4()));\n\n            luv_alpha.* = CIELuvAlpha.fromXYZAlphaPrecomputedWhitePoint(xyza, white_point_xyz);\n        }"}
{"instruction":"Write a Zig function similar to scanToken from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Scanner.zig","output":"pub fn scanToken(self: *Self) Allocator.Error!Token {\n    self.skipWhitespaces();\n\n    self.current.start = self.current.offset;\n    self.current.start_line = self.current.line;\n    self.current.start_column = self.current.column;\n\n    if (self.isEOF()) {\n        return self.makeToken(.Eof, Token.NoLiteral);\n    }"}
{"instruction":"Write a Zig function similar to parseFunctionType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseFunctionType(self: *Self, parent_generic_types: ?std.AutoArrayHashMapUnmanaged(*obj.ObjString, *obj.ObjTypeDef)) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n    const tag = self.ast.tokens.items(.tag)[start_location];\n\n    std.debug.assert(tag == .Fun or tag == .Extern);\n\n    const is_extern = tag == .Extern;\n\n    if (is_extern) {\n        try self.consume(.Fun, \"Expected `fun` after `extern`.\");\n    }"}
{"instruction":"Write a Zig function similar to matchesAny from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub fn matchesAny(self: Key, cps: []const u21, mods: Modifiers) bool {\n    for (cps) |cp| {\n        if (self.matches(cp, mods)) return true;\n    }"}
{"instruction":"Write a Zig struct similar to Report from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Cell.zig","output":"pub const Report = struct {\n        kind: Kind,\n        value: [3]u8,\n    }"}
{"instruction":"Write a Zig function similar to cancel from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/fiber.zig","output":"pub fn cancel(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjFiber.cast(ctx.vm.peek(0).obj()).?;\n\n    // Main fiber can't be cancelled\n    if (self.fiber.parent_fiber == null) {\n        return 0;\n    }"}
{"instruction":"Write a Zig function similar to renderDecl from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderDecl(self: *Self, decl: reg.Declaration) !void {\n        if (try self.renderSpecial(decl.name)) {\n            return;\n        }"}
{"instruction":"Write a Zig const similar to REGISTER_MONTH from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/cmos.zig","output":"const REGISTER_MONTH: u8 = 0x08;"}
{"instruction":"Write a Zig function similar to pushFiberBlock from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushFiberBlock(c: *Chunk, numArgs: u8, node: *ast.Node) !void {\n    log.tracev(\"push fiber block: {}"}
{"instruction":"Write a Zig function similar to callBlocking from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn callBlocking(comptime func: anytype, args: anytype) stdx.meta.FnSignature(func, @TypeOf(args)).ReturnT {\n    const Signature = stdx.meta.FnSignature(func, @TypeOf(args));\n\n    const TaskT = struct {\n        const Self = @This();\n\n        _task: XevThreadPool.Task = .{ .callback = &Self.run }"}
{"instruction":"Write a Zig function similar to getStack from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn getStack(self: Inventory, slot: usize) ItemStack {\n\treturn self._items[slot];\n}"}
{"instruction":"Write a Zig function similar to end from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dragging.zig","output":"pub fn end(self: *Dragging) void {\n    self.state = .none;\n    self.name = null;\n}"}
{"instruction":"Write a Zig function similar to seek from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/tiff.zig","output":"pub fn seek(self_ptr: c.thandle_t, offset: c.toff_t, whence: c_int) callconv(.c) c.toff_t {\n        const self: *TIFFClient = @ptrCast(@alignCast(self_ptr orelse return 0));\n        switch (whence) {\n            c.SEEK_SET => self.offset = @as(usize, @intCast(offset)),\n            c.SEEK_CUR => self.offset += @as(usize, @intCast(offset)),\n            c.SEEK_END => self.offset = self.buf.len + @as(usize, @intCast(offset)),\n            else => return 0,\n        }"}
{"instruction":"Write a Zig const similar to dirname from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig","output":"const dirname: []const u8 = std.fs.path.dirname(this.source.path.text) orelse break :blk input_path;"}
{"instruction":"Write a Zig function similar to findByMnemonic from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn findByMnemonic(\n    prefix: Instruction.Prefix,\n    mnemonic: Mnemonic,\n    ops: []const Instruction.Operand,\n) !?Encoding {\n    var input_ops = [1]Op{.none}"}
{"instruction":"Write a Zig const similar to unlocked from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"const unlocked: u32 = 0b00;"}
{"instruction":"Write a Zig function similar to hashCode from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"pub fn hashCode(self: *const AudioData) u32 {\n\t\tvar result: u32 = 0;\n\t\tfor(self.musicId) |char| {\n\t\t\tresult = result + char;\n\t\t}"}
{"instruction":"Write a Zig function similar to get_rcode from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn get_rcode(msg: []const u8) u8 {\n    return c.dns_get_rcode(msg.ptr);\n}"}
{"instruction":"Write a Zig function similar to hello from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/modules.zig","output":"pub fn hello(\n    self: *const Self,\n    args: struct { name: py.PyString }, // (5)!\n) !py.PyString {\n    return py.PyString.createFmt(\n        \"Hello, {s}"}
{"instruction":"Write a Zig const similar to message_count from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/auth.zig","output":"const message_count: u32 = @intCast(num_msg);"}
{"instruction":"Write a Zig function similar to available from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"pub fn available() bool {\n    return switch (builtin.os.tag) {\n        // macOS uses kqueue\n        .ios, .macos => true,\n\n        // BSDs use kqueue, but we only test on FreeBSD for now.\n        // kqueue isn't exactly the same here as it is on Apple platforms.\n        .freebsd => true,\n\n        // Technically other BSDs support kqueue but our implementation\n        // below hard requires mach ports currently. That's not a fundamental\n        // requirement but until someone makes this implementation work\n        // on other BSDs we'll just say it isn't available.\n        else => false,\n    }"}
{"instruction":"Write a Zig const similar to pixels from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const pixels: @Vector(SIMD_SIZE, u32) = self.data[i .. i + SIMD_SIZE][0..SIMD_SIZE].*;"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn forward(self: MoE, input: zml.Tensor) zml.Tensor {\n        log.warn(\"compiling moe with {f}"}
{"instruction":"Write a Zig function similar to resolveTarget from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig","output":"fn resolveTarget(desc: TargetDescription, b: *Build) std.Build.ResolvedTarget {\n        return b.resolveTargetQuery(.{\n            .os_tag = OperatingSystem.stdOSTag(desc.os),\n            .cpu_arch = desc.arch,\n            .cpu_model = getCpuModel(desc.os, desc.arch) orelse .determined_by_arch_os,\n            .os_version_min = getOSVersionMin(desc.os),\n            .glibc_version = if (desc.musl) null else getOSGlibCVersion(desc.os),\n        }"}
{"instruction":"Write a Zig function similar to eql from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Cell.zig","output":"pub fn eql(a: Style, b: Style) bool {\n        const SGRBits = packed struct {\n            bold: bool,\n            dim: bool,\n            italic: bool,\n            blink: bool,\n            reverse: bool,\n            invisible: bool,\n            strikethrough: bool,\n        }"}
{"instruction":"Write a Zig function similar to wrap from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn wrap(self: *Self, def_type: o.ObjTypeDef.Type, value: m.MIR_op_t, dest: m.MIR_op_t) !void {\n    return switch (def_type) {\n        .Bool => self.buildValueFromBoolean(value, dest),\n        .Integer => self.buildValueFromInteger(value, dest),\n        .Double => try self.buildValueFromDouble(value, dest),\n        .Void => self.MOV(dest, m.MIR_new_uint_op(self.ctx, Value.Void.val)),\n        .String,\n        .Pattern,\n        .ObjectInstance,\n        .Object,\n        .Protocol,\n        .ProtocolInstance,\n        .Enum,\n        .EnumInstance,\n        .List,\n        .Map,\n        .Function,\n        .Type,\n        .Fiber,\n        .UserData,\n        .Range,\n        => self.buildValueFromObj(value, dest),\n        .ForeignContainer,\n        .Placeholder,\n        .Generic,\n        .Any,\n        => unreachable,\n    }"}
{"instruction":"Write a Zig function similar to receiveFailure from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn receiveFailure() void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tvar tempData = main.List(Command).init(main.stackAllocator);\n\t\t\tdefer tempData.deinit();\n\t\t\twhile(commands.popBack()) |_cmd| {\n\t\t\t\tvar cmd = _cmd;\n\t\t\t\tcmd.undo();\n\t\t\t\ttempData.append(cmd);\n\t\t\t}"}
{"instruction":"Write a Zig function similar to line_width from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn line_width(self: *const Node, line: usize, metrics_: Metrics) !usize {\n        const do = struct {\n            result: usize = 0,\n            fn walker(ctx: *anyopaque, leaf: *const Leaf, metrics: Metrics) Walker {\n                const do = @as(*@This(), @ptrCast(@alignCast(ctx)));\n                do.result += leaf.width(do.result, metrics);\n                return if (!leaf.eol) Walker.keep_walking else Walker.stop;\n            }"}
{"instruction":"Write a Zig function similar to exportAssets from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Project.zig","output":"pub fn exportAssets(project: *Project) !void {\n    if (project.packed_atlas_output) |packed_atlas_output| {\n        try pixi.editor.atlas.save(packed_atlas_output, .data);\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@typeInfo</span>(<span class=\"tok-kw\">comptime</span> T: <span class=\"tok-type\">type</span>) std.builtin.Type"}
{"instruction":"Write a Zig function similar to get from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"fn get(e: ErrHandlers) ?Handler {\n        return if (e.short.len == 0)\n            null\n        else if (e.short.capacity == 4)\n            e.short.arr[e.short.len - 1]\n        else\n            e.long.ptr[e.long.len - 1];\n    }"}
{"instruction":"Write a Zig struct similar to Error from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"const Error = struct {\n    kind: union(enum) {\n        bad_attr,\n        else_must_be_first_attr,\n        missing_attribute_value,\n        loop_no_value,\n        block_cannot_be_inlined,\n        block_missing_id,\n        already_branching,\n        id_under_loop,\n        extend_without_template_attr,\n        top_level_super,\n        super_wants_no_attributes,\n        block_with_scripted_id,\n        super_parent_element_missing_id,\n        template_interface_id_collision,\n        missing_template_value,\n        unexpected_extend,\n        unscripted_attr,\n        two_supers_one_id,\n        super_under_branching,\n\n        one_branching_attribute_per_element,\n        ctx_attrs_must_be_scripted,\n        else_with_value,\n        no_ifs_after_loop,\n        text_and_html_are_mutually_exclusive,\n        text_and_html_require_an_empty_element,\n        duplicate_block: Span,\n        scripty: scripty.Parser.Node.Tag,\n\n        pub fn message(k: @This()) []const u8 {\n            return switch (k) {\n                else => @tagName(k),\n                .scripty => |s| s.errorMessage(),\n            }"}
{"instruction":"Write a Zig function similar to main from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/extract_squashfs.zig","output":"pub fn main() !void {\n    var args = std.process.args();\n    assert(args.skip());\n\n    if (args.next()) |dockercGeneratedBinary| {\n        if (args.next()) |squashfsOutput| {\n            const offset = (try common.getFooter(dockercGeneratedBinary)).offset;\n\n            const readFile = try std.fs.cwd().openFile(dockercGeneratedBinary, .{}"}
{"instruction":"Write a Zig const similar to public_win_url from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/public_network_access/main.zig","output":"const public_win_url: [:0]const u8 = public_window.getUrl() catch return;"}
{"instruction":"Write a Zig function similar to Type from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn Type(comptime self: CharUnitSize) type {\n        return switch (self) {\n            .@\"1\" => u8,\n            .@\"2\" => u16,\n            .@\"4\" => u32,\n        }"}
{"instruction":"Write a Zig function similar to init from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/keyboard.zig","output":"pub fn init(allocator: Allocator) Allocator.Error!*Keyboard {\n    irq.registerIrq(pic.IRQ_KEYBOARD, onKeyEvent) catch |e| {\n        panic(@errorReturnTrace(), \"Failed to register keyboard IRQ: {}"}
{"instruction":"Write a Zig function similar to genAddressOf from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genAddressOf(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .address_of);\n    return genAddressOf2(c, data.expr, cstr, node);\n}"}
{"instruction":"Write a Zig function similar to less from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"fn less(ctx_: *LessContext, a: Value, b: Value) bool {\n            const res = ctx_.vm.callFunc(ctx_.newFramePtr, ctx_.lessFn, &.{a, b}"}
{"instruction":"Write a Zig function similar to coroInner from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn coroInner(x: *usize) void {\n    //         x.* += 1;\n    //         xsuspend();\n    //         x.* += 3;\n    //     }"}
{"instruction":"Write a Zig function similar to IndexedToRgbaColor from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn IndexedToRgbaColor(comptime source_format: PixelFormat, comptime destination_format: PixelFormat) type {\n    return struct {\n        pub fn convert(source: *const color.PixelStorage, destination: *color.PixelStorage) void {\n            const source_indexed = @field(source, getFieldNameFromPixelFormat(source_format));\n            var destination_pixels = @field(destination, getFieldNameFromPixelFormat(destination_format));\n            const destination_type = @TypeOf(destination_pixels[0]);\n\n            for (0..source_indexed.indices.len) |index| {\n                destination_pixels[index] = rgbaToRgba(destination_type, source_indexed.palette[source_indexed.indices[index]]);\n            }"}
{"instruction":"Write Zig 0.13.0 code for: C §","input":"Although Zig is independent of C, and, unlike most other languages, does not depend on libc, Zig acknowledges the importance of interacting with existing C code. There are a few ways that Zig facilitates C interop. C Type Primitives § These have guaranteed C ABI compatibility and can be used like any other type. c_char c_short c_ushort c_int c_uint c_long c_ulong c_longlong c_ulonglong c_longdouble To interop with the C void type, use anyopaque . See also: Primitive Types Import from C Header Fi","output":"// This header is generated by zig from base64.zig\n#include \"base64.h\"\n\n#include <string.h>\n#include <stdio.h>\n\nint main(int argc, char **argv) {\n    const char *encoded = \"YWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz\";\n    char buf[200];\n\n    size_t len = decode_base_64(buf, 200, encoded, strlen(encoded));\n    buf[len] = 0;\n    puts(buf);\n\n    return 0;\n}"}
{"instruction":"Write a Zig function similar to setWriteTimeout from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn setWriteTimeout(self: *Self, write: ?u32) !void {\n        std.debug.assert(write == null or write.? != 0);\n        const micros = write orelse 0;\n        var opt = if (is_windows) @as(u32, @divTrunc(micros, 1000)) else std.posix.timeval{\n            .sec = @intCast(@divTrunc(micros, std.time.us_per_s)),\n            .usec = @intCast(@mod(micros, std.time.us_per_s)),\n        }"}
{"instruction":"Write a Zig function similar to orOp from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn orOp(c: *Chunk, data: ir.BinOp, cstr: Cstr, node: *ast.Node) !GenValue {\n    const merged_cstr = try toMergedDst(c, cstr, bt.Boolean);\n    const cond = try reserveTemp(c, bt.Boolean);\n    try initSlot(c, cond, false, node);\n\n    const leftv = try genExpr(c, data.left, Cstr.toTemp(cond));\n    const jump_false = try c.pushEmptyJumpNotCond(cond);\n    _ = try genToExact(c, leftv, merged_cstr, node);\n    try popTemp(c, cond, node);\n    const jump_end = try c.pushEmptyJump();\n\n    c.patchJumpCondToCurPc(jump_false);\n    _ = try genExpr(c, data.right, merged_cstr);\n    c.patchJumpToCurPc(jump_end);\n\n    return merged_cstr.toMergedValue(c, bt.Boolean);\n}"}
{"instruction":"Write a Zig function similar to handle from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn handle(ctx: *arch.CpuState) usize {\n    // The syscall number is put in eax\n    const syscall = ctx.eax;\n    if (isValidSyscall(syscall)) {\n        if (handlers[syscall]) |handler| {\n            const result = handler(ctx, syscallArg(ctx, 0), syscallArg(ctx, 1), syscallArg(ctx, 2), syscallArg(ctx, 3), syscallArg(ctx, 4));\n            if (result) |res| {\n                ctx.eax = res;\n                ctx.ebx = 0;\n            }"}
{"instruction":"Write a Zig function similar to main from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: example/subcommands.zig","output":"pub fn main() !void {\n    var gpa_state = std.heap.DebugAllocator(.{}"}
{"instruction":"Write a Zig function similar to printInterfaces from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/opensl.zig","output":"fn printInterfaces() !void {\n        var interface_count: c.SLuint32 = undefined;\n        try checkResult(c.slQueryNumSupportedEngineInterfaces(&interface_count));\n        {\n            var i: c.SLuint32 = 0;\n            while (i < interface_count) : (i += 1) {\n                var interface_id: c.SLInterfaceID = undefined;\n                try checkResult(c.slQuerySupportedEngineInterfaces(i, &interface_id));\n                const interface_tag = InterfaceID.fromIid(interface_id);\n                if (interface_tag) |tag| {\n                    audio_log.info(\"OpenSL engine interface id: {s}"}
{"instruction":"Write a Zig function similar to read_register from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig","output":"pub fn read_register(self: SelfSpiDevice, register_address: u8) ReadError!u8 {\n                    var buffer: [1]u8 = undefined;\n                    try self.read_registers(register_address, &buffer);\n                    return buffer[0];\n                }"}
{"instruction":"Write a Zig function similar to create_undo from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn create_undo(self: *const Self, root: Root, meta_: []const u8) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to close from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/tiff.zig","output":"pub fn close(self_ptr: c.thandle_t) callconv(.c) c_int {\n        _ = self_ptr;\n        return 0;\n    }"}
{"instruction":"Write a Zig struct similar to Event from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/platform.zig","output":"pub const Event = struct {\n    kind: enum { close, mouse_move, scroll, mouse_down, mouse_up, click, key_down, key_press, key_up }"}
{"instruction":"Write a Zig function similar to listFill from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn listFill(vm: *cy.VM) Value {\n    const list_t: cy.TypeId = @intCast(vm.getInt(0));\n    const val_t: cy.TypeId = @intCast(vm.getInt(1));\n    return vm.allocListFill(list_t, val_t, vm.getValue(2), @intCast(vm.getInt(3))) catch cy.fatal();\n}"}
{"instruction":"Write a Zig function similar to genAwait from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genAwait(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .await_expr);\n    const ret_t = c.ir.getExprType(idx).id;\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n    const childv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, childv, node);\n\n    try c.pushCode(.await_op, &.{childv.reg}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn callback(\n            ud: ?*anyopaque,\n            l: *Loop,\n            _: *Completion,\n            r: Result,\n        ) CallbackAction {\n            _ = l;\n            const v = @as(*?TimerTrigger, @ptrCast(ud.?));\n            v.* = r.timer catch unreachable;\n            return .disarm;\n        }"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn bind(fd: c_int, addr: *const anyopaque, addrlen: c.socklen_t) c_int;\n    }"}
{"instruction":"Write a Zig function similar to sliceToLabAlphaInPlace from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn sliceToLabAlphaInPlace(self: RgbColorspace, colors: []Colorf32) []CIELabAlpha {\n        const slice_lab: []CIELabAlpha = @ptrCast(colors);\n\n        const white_point_xyz = self.white.toXYZ(1.0);\n\n        for (slice_lab) |*lab_alpha| {\n            const xyza = CIEXYZAlpha.fromFloat4(self.rgba_to_xyza.mulVector(lab_alpha.toFloat4()));\n\n            lab_alpha.* = CIELabAlpha.fromXYZAlphaPrecomputedWhitePoint(xyza, white_point_xyz);\n        }"}
{"instruction":"Write a Zig function similar to readIntFd from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn readIntFd(fd: i32) !ErrInt {\n    const file: File = .{ .handle = fd }"}
{"instruction":"Write a Zig const similar to compression from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"const compression: std.zip.CompressionMethod = .deflate;"}
{"instruction":"Write a Zig const similar to expr_loop from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"const expr_loop: usize = self.currentCode();"}
{"instruction":"Write a Zig function similar to generateGrouping from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateGrouping(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const components = self.ast.nodes.items(.components);\n    const expr = components[node].Grouping;\n\n    _ = try self.generateNode(expr, breaks);\n\n    try self.patchOptJumps(node);\n    try self.endScope(node);\n\n    return null;\n}"}
{"instruction":"Write a Zig function similar to interfaceGetWindowId from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn interfaceGetWindowId(self: webui) usize {\n    const window_id = c.webui_interface_get_window_id(self.window_handle);\n    return window_id;\n}"}
{"instruction":"Write a Zig function similar to writeBootSector from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: mkfat32.zig","output":"fn writeBootSector(stream: anytype, fat32_header: Header) ErrorSet(@TypeOf(stream))!void {\n        const seekable_stream = stream.seekableStream();\n        const writer = stream.writer();\n\n        var boot_sector: [512]u8 = undefined;\n        std.mem.copy(u8, &boot_sector, &bootsector_boot_code);\n\n        // Write the header into the boot sector variable\n        var fat32_header_stream = std.io.fixedBufferStream(boot_sector[3..90]);\n        inline for (std.meta.fields(Header)) |item| {\n            switch (@typeInfo(item.field_type)) {\n                .Array => |info| switch (info.child) {\n                    u8 => try fat32_header_stream.writer().writeAll(&@field(fat32_header, item.name)),\n                    else => @compileError(\"Unexpected field type: \" ++ @typeName(info.child)),\n                }"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/drop_files.zig","output":"pub fn main() anyerror!void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const screenWidth = 800;\n    const screenHeight = 450;\n\n    rl.initWindow(screenWidth, screenHeight, \"raylib-zig [core] example - drop files\");\n    defer rl.closeWindow(); // Close window and OpenGL context\n\n    var filePathCounter: usize = 0;\n    var filePaths: [MAX_FILEPATH_RECORDED][MAX_FILEPATH_SIZE]u8 = std.mem.zeroes([MAX_FILEPATH_RECORDED][MAX_FILEPATH_SIZE]u8);\n\n    rl.setTargetFPS(60);\n\n    // Main game loop\n    while (!rl.windowShouldClose()) {\n        // Update\n        //----------------------------------------------------------------------------------\n        if (rl.isFileDropped()) {\n            const droppedFiles: rl.FilePathList = rl.loadDroppedFiles();\n\n            for (0..droppedFiles.count) |i| {\n                const offset: usize = @as(usize, @intCast(filePathCounter));\n                const droppedFilePathLength: usize = std.mem.len(droppedFiles.paths[i]);\n\n                if (filePathCounter < (MAX_FILEPATH_RECORDED - 1)) {\n                    _ = rl.textCopy(\n                        @ptrCast(@constCast(&filePaths[offset])),\n                        droppedFiles.paths[i][0..droppedFilePathLength :0],\n                    );\n                    filePathCounter += 1;\n                }"}
{"instruction":"Write a Zig function similar to downloadToString from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn downloadToString(allocator: Allocator, url: []const u8) DownloadStringResult {\n    var response_array_list = ArrayList(u8).initCapacity(allocator, 50 * 1024) catch |e| oom(e); // 50 KB (modify if response is expected to be bigger)\n    defer response_array_list.deinit();\n    switch (download(allocator, url, response_array_list.writer())) {\n        .ok => return .{ .ok = response_array_list.toOwnedSlice() catch |e| oom(e) }"}
{"instruction":"Write a Zig function similar to enterMode from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn enterMode(cursor: *Cursor, mode: Mode, view: *View, xcursor: [*:0]const u8) void {\n    assert(cursor.mode == .passthrough or cursor.mode == .down);\n    assert(mode == .move or mode == .resize);\n\n    log.debug(\"enter {s}"}
{"instruction":"Write a Zig function similar to genToExactDesc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genToExactDesc(c: *Chunk, src: GenValue, dst: Cstr, node: *ast.Node, extraIdx: ?u32) !GenValue {\n    switch (dst.type) {\n        .localReg,\n        .tempReg => {\n            const data = dst.data.slot;\n\n            if (src.reg != data.dst) {\n                const retain = shouldRetain(c, src.reg, data.dst, dst.data.slot.retain);\n                if (data.releaseDst) {\n                    if (retain) {\n                        try c.pushCodeExt(.copyRetainRelease, &.{ src.reg, data.dst }"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn mmap(addr: ?*const anyopaque, len: usize, prot: c_int, flags: c_int, fd: c_int, offset: c.off_t) [*]u8;\n    }"}
{"instruction":"Write a Zig function similar to loadBuffers from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn loadBuffers(self: GptOss, allocator: std.mem.Allocator, store: zml.aio.BufferStore, platform: zml.Platform) !zml.Bufferized(GptOss) {\n    var prefix: zml.aio.PrefixBuilder = try .initCapacity(allocator, 256);\n    defer prefix.deinit(allocator);\n\n    const noalloc = stdx.noalloc;\n    const loaded: zml.Bufferized(GptOss) = .{\n        .model = .{\n            .embed_tokens = try store.loadModelById(zml.nn.TokenEmbedding, noalloc, self.model.embed_tokens, platform),\n            .layers = try allocator.alloc(zml.Bufferized(TransformerLayer), self.model.layers.len),\n            .norm = try store.loadModelById(RmsNorm, noalloc, self.model.norm, platform),\n        }"}
{"instruction":"Write a Zig function similar to ifSimple from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn ifSimple(tree: Ast, node: Node.Index) full.If {\n    std.debug.assert(tree.nodeTag(node) == .if_simple);\n    const cond_expr, const then_expr = tree.nodeData(node).node_and_node;\n    return fullIfComponents(tree, .{\n        .cond_expr = cond_expr,\n        .then_expr = then_expr,\n        .else_expr = .none,\n        .if_token = tree.nodeMainToken(node),\n    }"}
{"instruction":"Write a Zig function similar to read_registers from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig","output":"pub fn read_registers(self: SelfSpiDevice, register_address: u8, buffer: []u8) ReadError!void {\n                    var transfer = try self.begin_transfer();\n                    defer transfer.end();\n                    // read auto-increment, starting at given register\n                    try transfer.writer().writeByte(0b11_000000 | register_address);\n                    try transfer.reader().readNoEof(buffer);\n                }"}
{"instruction":"Write a Zig function similar to wait from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn wait(self: Self) !void {\n        const Data = XCallback(WaitResult);\n\n        const loop = self.exec.loop;\n        var c: xev.Completion = .{}"}
{"instruction":"Write a Zig function similar to insertNewline from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"pub fn insertNewline(self: *Self) Error!void {\n            _ = try self.writeNoIndent(\"\\n\");\n        }"}
{"instruction":"Write a Zig function similar to xreturned from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn xreturned(self: Self) Sig.ReturnT {\n                const storage = self._frame.getStorage(InnerStorage);\n                return storage.retval;\n            }"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"pub fn init(exec: *Executor) Condition {\n        return .{ .exec = exec }"}
{"instruction":"Write a Zig function similar to fromCondition from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Mir.zig","output":"pub fn fromCondition(cc: bits.Condition) Fixes {\n            return switch (cc) {\n                inline else => |cc_tag| @field(Fixes, \"_\" ++ @tagName(cc_tag)),\n                .z_and_np, .nz_or_p => unreachable,\n            }"}
{"instruction":"Write a Zig const similar to STACK_SEGMENT_FAULT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const STACK_SEGMENT_FAULT: u8 = 12;"}
{"instruction":"Write a Zig struct similar to WalkerMut from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub const WalkerMut = struct {\n    keep_walking_: bool = false,\n    found_: bool = false,\n    replace: ?Root = null,\n    err: ?anyerror = null,\n\n    pub const keep_walking = WalkerMut{ .keep_walking_ = true }"}
{"instruction":"Write a Zig function similar to setupTestFixtures from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/taxonomy.zig","output":"fn setupTestFixtures(testDir: []const u8) !Taxonomy {\n    const a = std.testing.allocator;\n    const tests_path = try getTestsPath(a, testDir);\n\n    defer a.free(tests_path);\n\n    var db = Taxonomy.init(a);\n    try db.load(tests_path, null);\n\n    return db;\n}"}
{"instruction":"Write a Zig const similar to slice_lab from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const slice_lab: []OklabAlpha = try allocator.alloc(OklabAlpha, colors.len);"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"foo\"</span> {\n    <span class=\"tok-kw\">comptime</span> {\n        <span class=\"tok-builtin\">@setEvalBranchQuota</span>(<span class=\"tok-number\">1001</span>);\n        <span class=\"tok-kw\">var</span> i = <span class=\"tok-number\">0</span>;\n        <span class=\"tok-kw\">while</span> (i < <span class=\"tok-number\">1001</span>) : (i += <span class=\"tok-number\">1</span>) {}\n    }\n}"}
{"instruction":"Write a Zig function similar to printDigit from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/mnist/mnist.zig","output":"fn printDigit(digit: [28 * 28]u8) void {\n    var buffer: [28][30][2]u8 = undefined;\n    for (0..28) |y| {\n        buffer[y][0] = .{ '|', ' ' }"}
{"instruction":"Write a Zig function similar to deleteTree from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: build.zig","output":"fn deleteTree(\n    allocator: std.mem.Allocator,\n    prefix: []const u8,\n    directory: []const u8,\n    warning: []const u8,\n) !void {\n    const path = try std.fs.path.join(allocator, &[_][]const u8{ dest_directory, prefix, directory }"}
{"instruction":"Write a Zig function similar to mkdtemp from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/common.zig","output":"pub fn mkdtemp(in: []u8) !void {\n    try std.posix.getrandom(in[in.len - 6 ..]);\n    for (in[in.len - 6 ..]) |*v| {\n        v.* = letters[v.* % letters.len];\n    }"}
{"instruction":"Write a Zig function similar to parseDeclaration from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"fn parseDeclaration(allocator: Allocator, xctok: *XmlCTokenizer, ptrs_optional: bool) ParseError!Declaration {\n    // Parse declaration constness\n    var tok = try xctok.nextNoEof();\n    const inner_is_const = tok.kind == .kw_const;\n    if (inner_is_const) {\n        tok = try xctok.nextNoEof();\n    }"}
{"instruction":"Write a Zig function similar to confirmationData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn confirmationData(self: Open, allocator: NeverFailingAllocator) []const u8 {\n\t\t\tvar writer = utils.BinaryWriter.initCapacity(allocator, 4);\n\t\t\twriter.writeEnum(InventoryId, self.inv.id);\n\t\t\treturn writer.data.toOwnedSlice();\n\t\t}"}
{"instruction":"Write a Zig function similar to move_buffer_last from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"fn move_buffer_last(self: *Self, root: Buffer.Root, metrics: Metrics) void {\n    self.row = root.lines() - 1;\n    self.follow_target(root, metrics);\n}"}
{"instruction":"Write a Zig function similar to configureObj from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig","output":"fn configureObj(b: *Build, opts: *BunBuildOptions, obj: *Compile) void {\n    // Flags on root module get used for the compilation\n    obj.root_module.omit_frame_pointer = false;\n    obj.root_module.strip = false; // stripped at the end\n    // https://github.com/ziglang/zig/issues/17430\n    obj.root_module.pic = true;\n\n    // Object options\n    obj.use_llvm = !opts.no_llvm;\n    obj.use_lld = if (opts.os == .mac or opts.os == .linux) false else !opts.no_llvm;\n\n    if (opts.optimize == .Debug) {\n        if (@hasField(std.meta.Child(@TypeOf(obj)), \"llvm_codegen_threads\"))\n            obj.llvm_codegen_threads = opts.llvm_codegen_threads orelse 0;\n    }"}
{"instruction":"Write a Zig function similar to manyInts from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigsimple/main.zig","output":"fn manyInts(comptime T: type, num: usize) ![]T {\n    const arr = try alloc.alloc(T, num);\n    for (arr, 0..) |*item, ndx| {\n        if (T == f32) {\n            item.* = @floatFromInt(ndx);\n        }"}
{"instruction":"Write a Zig function similar to zigu128 from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/result_types.zig","output":"pub fn zigu128() u128 {\n//     return 9223372036854775809;\n// }"}
{"instruction":"Explain usingnamespace § in Zig 0.13.0","input":"","output":"usingnamespace is a declaration that mixes all the public declarations of the operand, which must be a struct , union , enum , or opaque , into the namespace: test_usingnamespace.zig Shell usingnamespace has an important use case when organizing the public API of a file or package. For example, one might have c.zig with all of the C imports : c.zig The above example demonstrates using pub to qualify the usingnamespace additionally makes the imported declarations pub . This can be used to forward declarations, giving precise control over what declarations a given file exposes."}
{"instruction":"Write a Zig function similar to message from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub fn message(k: @This()) []const u8 {\n            return switch (k) {\n                else => @tagName(k),\n                .scripty => |s| s.errorMessage(),\n            }"}
{"instruction":"Write a Zig function similar to release from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/release.zig","output":"pub fn release(gpa: Allocator, args: []const []const u8) bool {\n    errdefer |err| switch (err) {\n        error.OutOfMemory => fatal.oom(),\n    }"}
{"instruction":"Write a Zig function similar to syscall1 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn syscall1(syscall: usize, arg: usize) anyerror!usize {\n    const res = asm volatile (\n        \\\\int $0x80\n        : [ret] \"={eax}"}
{"instruction":"Write a Zig function similar to deinit from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn deinit(self: *TCP) void {\n            self.inner.shutdown();\n        }"}
{"instruction":"Write a Zig function similar to append from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn append(self: *Self, allocator: Allocator, item: T) Allocator.Error!void {\n            const new_item_ptr = try self.addOne(allocator);\n            new_item_ptr.* = item;\n        }"}
{"instruction":"Write a Zig struct similar to Env from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/configuration.zig","output":"pub const Env = struct {\n    zig_exe: []const u8,\n    lib_dir: ?[]const u8,\n    std_dir: []const u8,\n    global_cache_dir: []const u8,\n    version: []const u8,\n    target: ?[]const u8 = null,\n}"}
{"instruction":"Write a Zig function similar to log from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn log(self: *Assets, typ: enum {common, world}) void {\n\t\tstd.log.info(\n\t\t\t\"Finished {s}"}
{"instruction":"Write a Zig function similar to init from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/invocationhandler/main.zig","output":"pub fn init(allocator: std.mem.Allocator, activity: *android.ANativeActivity, stored_state: ?[]const u8) !AndroidApp {\n        _ = stored_state;\n\n        return AndroidApp{\n            .allocator = allocator,\n            .activity = activity,\n        }"}
{"instruction":"Write a Zig struct similar to Line from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const Line = struct {\n        a: f32 = 0.0,\n        b: f32 = 0.0,\n\n        pub fn intersect(left: Line, right: Line) f32 {\n            return (left.b - right.b) / (right.a - left.a);\n        }"}
{"instruction":"Write a Zig const similar to rune from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const rune: u21 = @intCast(num);"}
{"instruction":"Write a Zig const similar to kind from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const kind: BracketAccess = try .fromSlice(analyser, handle, slice);"}
{"instruction":"Write a Zig function similar to sib_scaleIndexBaseDisp8 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn sib_scaleIndexBaseDisp8(self: Self, scale: u2, index: u3, base: u3) !void {\n            try self.sib(scale, index, base);\n        }"}
{"instruction":"Write a Zig const similar to indexEndX from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"const indexEndX: i32 = @min(@as(i32, chunk.super.width) - pos[0], @as(i32, @intCast(self.blocks.width)));"}
{"instruction":"Write a Zig function similar to isValidPropertyName from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"fn isValidPropertyName(name: []const u8) bool {\n    if (name.len == 0) return false;\n\n    if (std.mem.startsWith(u8, name, \"--\")) {\n        if (name.len == 2) return false;\n        for (name[2..]) |c| {\n            if (!std.ascii.isAlphanumeric(c) and c != '-' and c != '_') {\n                return false;\n            }"}
{"instruction":"Write a Zig struct similar to TagHandler from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig","output":"const TagHandler = struct {\n            /// CSS selector to match elements\n            selector: []const u8,\n            /// Whether this tag can have text content that needs to be processed\n            has_content: bool = false,\n            /// The attribute to extract the URL from\n            url_attribute: []const u8,\n            /// The kind of import to create\n            kind: ImportKind,\n\n            is_head_or_html: bool = false,\n        }"}
{"instruction":"Write a Zig function similar to launchSubordinate from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn launchSubordinate(\n            self: *Self,\n            scratch: Allocator,\n            req: proto.LaunchSubordinateRequest,\n        ) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            defer log.flush();\n            defer self.stateUpdated();\n\n            self.data.mu.lock();\n            defer self.data.mu.unlock();\n\n            if (self.data.subordinate != null) {\n                self.sendMessage(.warning, \"not launching subordinate because it is already running\", .{}"}
{"instruction":"Write a Zig function similar to isReadyWrite from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn isReadyWrite(self: Self, sock: Socket) bool {\n        return self.checkMaskAnyBit(sock, std.posix.POLL.OUT);\n    }"}
{"instruction":"Write a Zig function similar to init from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn init(conn: *websocket.Conn, ctx: u32) !WebsocketHandler {\n            return .{\n                .ctx = ctx,\n                .conn = conn,\n            }"}
{"instruction":"Write a Zig function similar to deinit from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"pub fn deinit(self: *Self) void {\n            self.properties.deinit();\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> spartan_count: <span class=\"tok-type\">u16</span> = <span class=\"tok-number\">300</span>; <span class=\"tok-comment\">// runtime-known</span>\n    _ = &spartan_count;\n    <span class=\"tok-kw\">const</span> byte: <span class=\"tok-type\">u8</span> = <span class=\"tok-builtin\">@intCast</span>(spartan_count);\n    std.debug.print(<span class=\"tok-str\">\"value: {}\\n\"</span>, .{byte});\n}"}
{"instruction":"Write a Zig function similar to renderSpecial from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderSpecial(self: *Self, name: []const u8) !bool {\n        const maybe_author = self.id_renderer.getAuthorTag(name);\n        const basename = self.id_renderer.stripAuthorTag(name);\n        if (std.mem.eql(u8, basename, \"VkBool32\")) {\n            try self.renderAssign(name);\n            try self.writer.writeAll(\n                \\\\enum(i32) {\n                \\\\    false,\n                \\\\    true,\n                \\\\    _,\n                \\\\}"}
{"instruction":"Write a Zig function similar to logEvents from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn logEvents(self: *Debug, val: ?bool) bool {\n    self.toggle_mutex.lock();\n    defer self.toggle_mutex.unlock();\n\n    const previous = self.log_events;\n    if (val) |v| {\n        self.log_events = v;\n    }"}
{"instruction":"Write a Zig function similar to loadFromZon from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub fn loadFromZon(zon: ZonElement) ?TickEvent {\n\t\tconst functionName = zon.get(?[]const u8, \"name\", null) orelse return null;\n\n\t\tconst function = tickFunctions.getFunctionPointer(functionName) orelse {\n\t\t\tstd.log.err(\"Could not find TickFunction {s}"}
{"instruction":"Write a Zig function similar to byFreq from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/huffman_encoder.zig","output":"fn byFreq(context: void, a: LiteralNode, b: LiteralNode) bool {\n    _ = context;\n    if (a.freq == b.freq) {\n        return a.literal < b.literal;\n    }"}
{"instruction":"Write a Zig function similar to renderWrapperAlloc from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderWrapperAlloc(self: *Self, wrapped_name: []const u8, command: reg.Command) !void {\n        const returns_vk_result = command.return_type.* == .name and mem.eql(u8, command.return_type.name, \"VkResult\");\n\n        const name = try self.makeAllocWrapperName(wrapped_name);\n        defer self.allocator.free(name);\n\n        if (command.params.len < 2) {\n            return error.InvalidRegistry;\n        }"}
{"instruction":"Write a Zig function similar to getVersion from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: build.zig","output":"fn getVersion(b: *std.Build) Version {\n    const git_path = b.findProgram(&.{\"git\"}"}
{"instruction":"Write a Zig function similar to deinit from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn deinit(self: *Ast, alloc: std.mem.Allocator) void {\n        self.node_alloc_handle.deinit();\n        self.srcGen.deinit(alloc);\n        for (self.strs.items) |str| {\n            alloc.free(str);\n        }"}
{"instruction":"Write a Zig const similar to val_t from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const val_t: cy.TypeId = @intCast(vm.getInt(1));"}
{"instruction":"Write a Zig function similar to __init__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __init__(self: *Self, args: struct { name: py.PyString }) void {\n        args.name.obj.incref();\n        self.name = args.name;\n    }"}
{"instruction":"Write a Zig function similar to isinstance from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"pub fn isinstance(comptime root: type, object: anytype, cls: anytype) !bool {\n    const pyobj = py.object(root, object);\n    const pycls = py.object(root, cls);\n\n    const result = ffi.PyObject_IsInstance(pyobj.py, pycls.py);\n    if (result < 0) return PyError.PyRaised;\n    return result == 1;\n}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn callback(ud: ?*anyopaque, l: *Loop, _: *Completion, r: Result) CallbackAction {\n            _ = l;\n            const b = @as(*?TimerTrigger, @ptrCast(ud.?));\n            b.* = r.timer catch unreachable;\n            return .disarm;\n        }"}
{"instruction":"Write a Zig function similar to handleBuiltinMapping from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Keyboard.zig","output":"fn handleBuiltinMapping(keysym: xkb.Keysym) bool {\n    switch (@intFromEnum(keysym)) {\n        xkb.Keysym.XF86Switch_VT_1...xkb.Keysym.XF86Switch_VT_12 => {\n            log.debug(\"switch VT keysym received\", .{}"}
{"instruction":"Write a Zig function similar to deinit from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/EventHandler.zig","output":"pub fn deinit(self: Self) void {\n    return self.vtable.deinit(self.ptr);\n}"}
{"instruction":"Write a Zig function similar to zigToMIRRegType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn zigToMIRRegType(zig_type: ZigType) m.MIR_type_t {\n    return switch (zig_type) {\n        .Int, .Bool, .Pointer => m.MIR_T_I64,\n        .Double => switch (zig_type.Double.bits) {\n            32 => m.MIR_T_F,\n            64 => m.MIR_T_D,\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig function similar to format from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn format(self: BlockScaledLinear, writer: *std.Io.Writer) !void {\n        try writer.print(\"BlockScaledLinear(blocks={f}"}
{"instruction":"Write a Zig function similar to isReadyRead from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn isReadyRead(self: Self, sock: Socket) bool {\n        return self.internal.isReadyRead(sock);\n    }"}
{"instruction":"Write a Zig function similar to stop from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn stop(self: *TCP) void {\n        if (self.flags.in_sender) {\n            self.flags.stopping = true;\n            return;\n        }"}
{"instruction":"Write a Zig struct similar to Diagnostic from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub const Diagnostic = struct {\n    arg: []const u8 = \"\",\n    name: Names = Names{}"}
{"instruction":"Write a Zig function similar to push from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn push(self: *MsgQueue, msg: *RcMsg) void {\n            return self.do_push(msg, .back);\n        }"}
{"instruction":"Write a Zig function similar to validateGeneratedPath from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig","output":"fn validateGeneratedPath(path: []const u8) void {\n    if (!exists(path)) {\n        std.debug.panic(\n            \\\\Generated file '{s}"}
{"instruction":"Write a Zig struct similar to ctx from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"const ctx = struct {\n        fn inner(ctx: *const anyopaque, t: Ast, n: Ast.Node.Index) anyerror!void {\n            return callback(@as(*const @TypeOf(context), @ptrCast(@alignCast(ctx))).*, t, n);\n        }"}
{"instruction":"Write a Zig function similar to closestRay from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"fn closestRay(block: Block, relativePlayerPos: Vec3f, playerDir: Vec3f) ?u16 {\n\tvar closestIntersectionDistance: f64 = std.math.inf(f64);\n\tvar resultBitMask: ?u16 = null;\n\t{\n\t\tconst modelIndex = blocks.meshes.modelIndexStart(block);\n\t\tif(RotationMode.DefaultFunctions.rayModelIntersection(modelIndex, relativePlayerPos, playerDir)) |intersection| {\n\t\t\tclosestIntersectionDistance = intersection.distance;\n\t\t\tresultBitMask = 0;\n\t\t}"}
{"instruction":"Explain union § in Zig 0.14.1","input":"","output":"A bare union defines a set of possible types that a value can be as a list of fields. Only one field can be active at a time. The in-memory representation of bare unions is not guaranteed. Bare unions cannot be used to reinterpret memory. For that, use @ptrCast , or use an extern union or a packed union which have guaranteed in-memory layout. Accessing the non-active field is safety-checked Illegal Behavior : test_wrong_union_access.zig Shell You can activate another field by assigning the entire union: test_simple_union.zig Shell In order to use switch with a union, it must be a Tagged union . To initialize a union when the tag is a comptime -known name, see @unionInit . Tagged union § Unions can be declared with an enum tag type. This turns the union into a tagged union, which makes it eligible to use with switch expressions. Tagged unions coerce to their tag type: Type Coercion: Unions and Enums . test_tagged_union.zig Shell In order to modify the payload of a tagged union in a swit"}
{"instruction":"Write a Zig function similar to put from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn put(self: *TableEncoder, key: []const u8, value: FieldValue) void {\n            self.encoder.write_short_string(key);\n            self.encoder.write_field(value);\n        }"}
{"instruction":"Write a Zig function similar to alloc from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig","output":"pub fn alloc(self: *Self, len: usize, offset: usize, flags: std.posix.MAP) bun.sys.Maybe(bun.webcore.Blob.Store.Bytes) {\n    var size = len;\n\n    // size rounded up to nearest page\n    size = std.mem.alignForward(usize, size, std.heap.pageSize());\n\n    var flags_mut = flags;\n    flags_mut.TYPE = .SHARED;\n\n    switch (bun.sys.mmap(\n        null,\n        @min(size, self.size),\n        std.posix.PROT.READ | std.posix.PROT.WRITE,\n        flags_mut,\n        self.fd,\n        offset,\n    )) {\n        .result => |slice| {\n            return .{\n                .result = bun.webcore.Blob.Store.Bytes{\n                    .cap = @truncate(slice.len),\n                    .ptr = slice.ptr,\n                    .len = @truncate(len),\n                    .allocator = self.allocator(),\n                }"}
{"instruction":"Write a Zig function similar to legacyAsmComponents from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"fn legacyAsmComponents(tree: Ast, info: full.AsmLegacy.Components) full.AsmLegacy {\n    var result: full.AsmLegacy = .{\n        .ast = info,\n        .volatile_token = null,\n        .inputs = &.{}"}
{"instruction":"Write a Zig function similar to is_empty from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn is_empty(self: *const Node) bool {\n        return switch (self.*) {\n            .node => |*n| n.left.is_empty() and n.right.is_empty(),\n            .leaf => |*l| if (self == &empty_leaf) true else l.is_empty(),\n        }"}
{"instruction":"Write a Zig function similar to lockRegsAssumeUnused from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"pub fn lockRegsAssumeUnused(\n            self: *Self,\n            comptime count: comptime_int,\n            regs: [count]Register,\n        ) [count]RegisterLock {\n            var results: [count]RegisterLock = undefined;\n            for (&results, regs) |*result, reg| result.* = self.lockRegAssumeUnused(reg);\n            return results;\n        }"}
{"instruction":"Write a Zig function similar to buildZdefUnionSetter from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn buildZdefUnionSetter(\n    self: *Self,\n    union_name: []const u8,\n    field_name: []const u8,\n    buzz_type: *o.ObjTypeDef,\n    zig_type: *const ZigType,\n) Error!m.MIR_item_t {\n    var setter_name = std.ArrayList(u8){}"}
{"instruction":"Write a Zig function similar to executeRemoveOperation from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn executeRemoveOperation(self: *Command, allocator: NeverFailingAllocator, side: Side, inv: InventoryAndSlot, amount: u16) void {\n\t\tif(amount == 0) return;\n\t\tif(side == .server) {\n\t\t\tself.syncOperations.append(allocator, .{.delete = .{\n\t\t\t\t.inv = inv,\n\t\t\t\t.amount = amount,\n\t\t\t}"}
{"instruction":"Write a Zig const similar to naturalStandard from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig","output":"pub const naturalStandard: u16 = 1;"}
{"instruction":"Write a Zig function similar to addSeperator from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"pub fn addSeperator(lhs: ImportDecl, rhs: ImportDecl) bool {\n        const lhs_kind = @intFromEnum(lhs.getKind());\n        const rhs_kind = @intFromEnum(rhs.getKind());\n        if (rhs_kind <= @intFromEnum(Kind.build_options)) return false;\n        return lhs_kind != rhs_kind;\n    }"}
{"instruction":"Write a Zig function similar to clientMessage from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/08_websocket.zig","output":"pub fn clientMessage(self: *Client, data: []const u8) !void {\n        // echo back to client\n        return self.conn.write(data);\n    }"}
{"instruction":"Write a Zig function similar to runExitCallbacks from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"pub fn runExitCallbacks() void {\n    for (on_exit_callbacks.items) |callback| {\n        callback();\n    }"}
{"instruction":"Write a Zig function similar to isUnknown from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn isUnknown(ip: *InternPool, index: Index) bool {\n    switch (index) {\n        .unknown_type, .unknown_unknown => return true,\n        else => {\n            ip.lock.lockShared();\n            defer ip.lock.unlockShared();\n            return ip.items.items(.tag)[@intFromEnum(index)] == .unknown_value;\n        }"}
{"instruction":"Write a Zig function similar to initPositionals from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"fn initPositionals(\n    comptime Id: type,\n    comptime params: []const Param(Id),\n    comptime value_parsers: anytype,\n    comptime multi_arg_kind: MultiArgKind,\n) Positionals(Id, params, value_parsers, multi_arg_kind) {\n    var res: Positionals(Id, params, value_parsers, multi_arg_kind) = undefined;\n\n    comptime var i: usize = 0;\n    inline for (params) |param| {\n        const longest = comptime param.names.longest();\n        if (longest.kind != .positional)\n            continue;\n\n        const T = ParamType(Id, param, value_parsers);\n        res[i] = switch (param.takes_value) {\n            .none => continue,\n            .one => @as(?T, null),\n            .many => switch (multi_arg_kind) {\n                .slice => @as([]const T, &[_]T{}"}
{"instruction":"Write a Zig function similar to nameLower from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn nameLower(self: ReportKind) []const u8 {\n        return switch (self) {\n            .@\"error\" => \" error\",\n            .warning => \" warning\",\n            .hint => \" note\",\n        }"}
{"instruction":"Write a Zig function similar to OP_ADD_LIST from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_ADD_LIST(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_ADD_LIST);\n}"}
{"instruction":"Write a Zig function similar to debug_render_chunk from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn debug_render_chunk(chunk: []const u8, l: *std.Io.Writer, metrics: Metrics) !void {\n        var cols: c_int = 0;\n        var buf = chunk;\n        while (buf.len > 0) {\n            switch (buf[0]) {\n                '\\x00'...(' ' - 1) => {\n                    const control = unicode.control_code_to_unicode(buf[0]);\n                    try l.writeAll(control);\n                    buf = buf[1..];\n                }"}
{"instruction":"Write a Zig const similar to mask from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"const mask: u32 = if (is_nibble_size) 0xf else 0xff;"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn sendto(fd: c_int, buf: [*]const u8, len: usize, flags: c_int, addr: *const anyopaque, addrlen: c.socklen_t) isize;\n    }"}
{"instruction":"Write a Zig const similar to image_end from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/mem.zig","output":"const image_end: u8;\n\npub const BLOCK_SIZE = 65536;"}
{"instruction":"Write a Zig function similar to modRm from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn modRm(self: Self, mod: u2, reg_or_opx: u3, rm: u3) !void {\n            try self.writer.writeByte(@as(u8, mod) << 6 | @as(u8, reg_or_opx) << 3 | rm);\n        }"}
{"instruction":"Write a Zig function similar to init from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn init(allocator: NeverFailingAllocator, _size: usize, _type: Type, source: Source, callbacks: Callbacks) Inventory {\n\tconst self = _init(allocator, _size, _type, source, .client, callbacks);\n\tSync.ClientSide.executeCommand(.{.open = .{.inv = self, .source = source}"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">try</span> foo(<span class=\"tok-number\">12</span>);\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(x: <span class=\"tok-type\">i32</span>) !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (x >= <span class=\"tok-number\">5</span>) {\n        <span class=\"tok-kw\">try</span> bar();\n    } <span class=\"tok-kw\">else</span> {\n        <span class=\"tok-kw\">try</span> bang2();\n    }\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">bar</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (baz()) {\n        <span class=\"tok-kw\">try</span> quux();\n    } <span class=\"tok-kw\">else</span> |err| <span class=\"tok-kw\">switch</span> (err) {\n        <span class=\"tok-kw\">error</span>.FileNotFound => <span class=\"tok-kw\">try</span> hello(),\n    }\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">baz</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">try</span> bang1();\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">quux</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">try</span> bang2();\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">hello</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">try</span> bang2();\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">bang1</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">return</span> <span class=\"tok-kw\">error</span>.FileNotFound;\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">bang2</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">return</span> <span class=\"tok-kw\">error</span>.PermissionDenied;\n}"}
{"instruction":"Write a Zig function similar to __REDIRECT_NTH_LDBL from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {\n    _ = &name;\n    _ = &proto;\n    _ = &alias;\n    return __REDIRECT_NTH(name, proto, alias);\n}"}
{"instruction":"Write a Zig const similar to val from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const val: Value = .{ .null = {} };"}
{"instruction":"Write a Zig function similar to formatter from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn formatter(ast: Ast, src: []const u8) Formatter {\n    return .{ .ast = ast, .src = src }"}
{"instruction":"Write a Zig function similar to pop from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"fn pop(self: *Self) ?T {\n            switch (self.state()) {\n                .empty => return null,\n                .one => {\n                    const out = self.vals[self.head.?];\n                    self.head = null;\n                    self.tail = null;\n                    return out;\n                }"}
{"instruction":"Write a Zig function similar to glDrainErrors from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"pub fn glDrainErrors() void {\n    var res = c.glGetError();\n    while (res != c.GL_NO_ERROR) : (res = c.glGetError()) {\n        glCheckError(res);\n    }"}
{"instruction":"Write a Zig const similar to name_val from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const name_val: Value = .{ .str = part };"}
{"instruction":"Write a Zig function similar to get from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn get(ip: *InternPool, gpa: Allocator, key: Key) Allocator.Error!Index {\n    const adapter: KeyAdapter = .{\n        .ip = ip,\n        .precomputed_hash = key.hash32(ip),\n    }"}
{"instruction":"Write a Zig struct similar to Formatter from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"const Formatter = struct {\n            tag: Tag,\n            src: []const u8,\n            pub fn format(tf: Tag.Formatter, w: *std.Io.Writer) !void {\n                return switch (tf.tag) {\n                    .token => |terr| try w.print(\"syntax error: {t}"}
{"instruction":"Write a Zig const similar to first_token from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"const first_token: Ast.TokenIndex = @intCast(std.mem.indexOfPos(\n            Token.Tag,\n            tree.tokens.items(.tag),\n            i,\n            &.{ .identifier, .equal, .identifier, .semicolon },\n        ) orelse break);"}
{"instruction":"Write a Zig function similar to float from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/parsers.zig","output":"pub fn float(comptime T: type) fn ([]const u8) std.fmt.ParseFloatError!T {\n    return struct {\n        fn parse(in: []const u8) std.fmt.ParseFloatError!T {\n            return std.fmt.parseFloat(T, in);\n        }"}
{"instruction":"Write a Zig function similar to seatHandleCapabilities from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"fn seatHandleCapabilities(window_id: mach.ObjectID, seat: ?*c.struct_wl_seat, caps: c.wl_seat_capability) callconv(.C) void {\n        var core_window = core_ptr.windows.getValue(window_id);\n        const wl = &core_window.native.?.wayland;\n        var changed = false;\n\n        if ((caps & c.WL_SEAT_CAPABILITY_KEYBOARD) != 0) {\n            changed = true;\n            wl.keyboard = c.wl_seat_get_keyboard(seat);\n\n            // TODO: handle return value\n            _ = c.wl_keyboard_add_listener(wl.keyboard, &keyboard_listener.listener, @ptrFromInt(window_id));\n        }"}
{"instruction":"Write a Zig function similar to toString from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn toString(self: Permission) []const u8 {\n        @setEvalBranchQuota(10_000);\n        inline for (std.meta.fields(Permission)) |fld| {\n            if (self == @field(Permission, fld.name)) {\n                return comptime blk: {\n                    var name: [fld.name.len]u8 = undefined;\n                    break :blk \"android.permission.\" ++ std.ascii.upperString(&name, fld.name);\n                }"}
{"instruction":"Write a Zig function similar to buildNghttp2 from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: build.zig","output":"fn buildNghttp2(b: *Build, m: *Build.Module) !void {\n    const nghttp2 = b.addLibrary(.{\n        .name = \"nghttp2\",\n        .root_module = m,\n    }"}
{"instruction":"Write a Zig function similar to eql from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"fn eql(table1: *const TestingTable, table2: *const TestingTable) bool {\n        inline for (std.meta.fields(TestingTable)) |field| {\n            const both_null = @field(table1, field.name) == null and\n                @field(table2, field.name) == null;\n            if (!both_null) {\n                const value1 = @field(table1, field.name) orelse return false;\n                const value2 = @field(table2, field.name) orelse return false;\n\n                const equals = switch (std.meta.Child(field.type)) {\n                    bool => value1 == value2,\n                    []const u8 => std.mem.eql(u8, value1, value2),\n                    i64, u32, i32, u16, i16, u8, i8 => value1 == value2,\n                    *const TestingTable => eql(value1, value2),\n                    Timestamp => value1 == value2,\n                    else => comptime unreachable,\n                }"}
{"instruction":"Write a Zig function similar to continueStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn continueStatement(self: *Self, loop_scope: ?LoopScope) Error!Ast.Node.Index {\n    return self.breakContinueStatement(false, loop_scope);\n}"}
{"instruction":"Write a Zig function similar to spawnAndWait from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub fn spawnAndWait(self: *ChildProcess) SpawnError!Term {\n    try self.spawn();\n    return self.wait();\n}"}
{"instruction":"Write a Zig const similar to MASTER_STATUS_REG from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const MASTER_STATUS_REG: u16 = 0x20;"}
{"instruction":"Write a Zig const similar to ALIGNMENT_CHECK from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const ALIGNMENT_CHECK: u8 = 17;"}
{"instruction":"Write a Zig struct similar to ChildIterator from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"pub const ChildIterator = struct {\n        items: []Content,\n        i: usize,\n\n        pub fn next(self: *ChildIterator) ?*Content {\n            if (self.i < self.items.len) {\n                self.i += 1;\n                return &self.items[self.i - 1];\n            }"}
{"instruction":"Write a Zig function similar to heartbeatWorker from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"fn heartbeatWorker(self: *ThreadPool) void {\n        // We try to make sure that each worker is being heartbeat at the\n        // fixed interval by going through the workers-list one by one.\n        var i: usize = 0;\n\n        while (true) {\n            var to_sleep: u64 = self.heartbeat_interval;\n\n            {\n                self.mutex.lock();\n                defer self.mutex.unlock();\n\n                if (self.is_stopping) break;\n\n                const workers = self.workers.items;\n                if (workers.len > 0) {\n                    i %= workers.len;\n                    workers[i].heartbeat.store(true, .monotonic);\n                    i += 1;\n                    to_sleep /= workers.len;\n                }"}
{"instruction":"Write a Zig function similar to eql from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn eql(a: NodeWithHandle, b: NodeWithHandle) bool {\n        if (a.node != b.node) return false;\n        return std.mem.eql(u8, a.handle.uri, b.handle.uri);\n    }"}
{"instruction":"Write a Zig function similar to show_second_window from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/serve_a_folder/main.zig","output":"fn show_second_window(_: *webui.Event) void {\n    // This function gets called every\n    // time the user clicks on \"OpenNewWindow\"\n\n    // Show a new window, and navigate to `/second.html`\n    // if it's already open, then switch in the same window\n    MySecondWindow.show(\"second.html\") catch return;\n}"}
{"instruction":"Write a Zig const similar to diff from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"const diff: f32 = @floatFromInt(end - start);"}
{"instruction":"Write a Zig function similar to setOpArgU32 from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn setOpArgU32(self: *ByteCodeBuffer, idx: usize, arg: u32) void {\n        @as(*align(1) u32, @ptrCast(&self.ops.items[idx])).* = arg;\n    }"}
{"instruction":"Write a Zig function similar to generateResolve from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateResolve(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const fiber = self.ast.nodes.items(.components)[node].Resolve;\n    const fiber_type_def = self.ast.nodes.items(.type_def)[fiber].?;\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n\n    if (fiber_type_def.def_type == .Placeholder) {\n        self.reporter.reportPlaceholder(self.ast, fiber_type_def.resolved_type.?.Placeholder);\n\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to guess_file_type from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_type_config.zig","output":"pub fn guess_file_type(file_path: ?[]const u8, content: []const u8) ?@This() {\n    return guess(file_path, content);\n}"}
{"instruction":"Write a Zig struct similar to FormatDegibberishData from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/degibberish.zig","output":"const FormatDegibberishData = struct {\n    ip: *InternPool,\n    ty: InternPool.Index,\n}"}
{"instruction":"Write a Zig const similar to registry_path from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/build.zig","output":"const registry_path: std.Build.LazyPath = if (maybe_override_registry) |override_registry|\n        .{ .cwd_relative = override_registry }\n    else\n        registry;"}
{"instruction":"Write a Zig struct similar to Ctx from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const Ctx = struct {\n            walker_f: EgcF,\n            walker_ctx: @TypeOf(walker_ctx),\n            abs_col: usize = 0,\n            fn walker(ctx_: *anyopaque, leaf: *const Self.Leaf, metrics: Metrics) Walker {\n                const ctx = @as(*@This(), @ptrCast(@alignCast(ctx_)));\n                var buf: []const u8 = leaf.buf;\n                while (buf.len > 0) {\n                    var cols: c_int = undefined;\n                    const bytes = metrics.egc_length(metrics, buf, &cols, ctx.abs_col);\n                    const ret = ctx.walker_f(ctx.walker_ctx, buf[0..bytes], @intCast(cols), metrics);\n                    if (ret.err) |e| return .{ .err = e }"}
{"instruction":"Write a Zig function similar to onLowMemory from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"fn onLowMemory(activity: *android.ANativeActivity) callconv(.C) void {\n            invoke(activity, \"onLowMemory\", .{}"}
{"instruction":"Write a Zig function similar to from_pos from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Selection.zig","output":"pub fn from_pos(sel: Self, root: Buffer.Root, metrics: Buffer.Metrics) error{NotFound}"}
{"instruction":"Write a Zig function similar to move_to from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/View.zig","output":"pub fn move_to(self: *Self, root: Buffer.Root, row: usize) !void {\n    if (row < root.lines() - self.rows - 1) {\n        self.row = row;\n    }"}
{"instruction":"Write a Zig struct similar to Handler from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig","output":"const Handler = struct {\n                pub fn handle(this: *T, element: *lol.Element) bool {\n                    // Handle URL attribute if present\n                    if (tag_info.url_attribute.len > 0) {\n                        if (element.hasAttribute(tag_info.url_attribute) catch false) {\n                            const value = element.getAttribute(tag_info.url_attribute);\n                            defer value.deinit();\n                            if (value.len > 0) {\n                                debug(\"{s}"}
{"instruction":"Write a Zig function similar to fmtDegibberish from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/degibberish.zig","output":"pub fn fmtDegibberish(ip: *InternPool, ty: InternPool.Index) std.fmt.Alt(FormatDegibberishData, formatDegibberish) {\n    const data: FormatDegibberishData = .{ .ip = ip, .ty = ty }"}
{"instruction":"Write a Zig struct similar to Transfer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig","output":"const Transfer = struct {\n                    const SelfTransfer = @This();\n\n                    device: SelfSpiDevice,\n\n                    fn transceive_byte(self: *SelfTransfer, write_byte: u8, read_pointer: *u8) !void {\n                        try self.device.internal.transceive_byte(write_byte, read_pointer);\n                    }"}
{"instruction":"Write a Zig function similar to appendNode from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"fn appendNode(self: *Self, node: Node) !Node.Index {\n    try self.nodes.append(self.allocator, node);\n\n    return @intCast(self.nodes.len - 1);\n}"}
{"instruction":"Write a Zig function similar to getStruct from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn getStruct(ip: *InternPool, index: Struct.Index) *const Struct {\n    ip.lock.lockShared();\n    defer ip.lock.unlockShared();\n    return ip.structs.at(@intFromEnum(index));\n}"}
{"instruction":"Write a Zig struct similar to scalar_storage_order from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const scalar_storage_order = struct {\n        order: enum {\n            @\"little-endian\",\n            @\"big-endian\",\n\n            const opts = struct {\n                const enum_kind = .string;\n            }"}
{"instruction":"Write a Zig struct similar to AwaitExpr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"const AwaitExpr = struct {\n    child: *Node align(8),\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to ownsPtr from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"pub fn ownsPtr(self: Self, ptr: *const anyopaque) bool {\n    return self.borrow().ownsPtr(ptr);\n}"}
{"instruction":"Write a Zig function similar to dataCallback from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/aaudio.zig","output":"fn dataCallback(\n        stream: ?*c.AAudioStream,\n        user_data: ?*anyopaque,\n        audio_data: ?*anyopaque,\n        num_frames: i32,\n    ) callconv(.C) c.aaudio_data_callback_result_t {\n        _ = stream;\n        const output_stream = @as(*OutputStream, @ptrCast(@alignCast(@alignOf(OutputStream), user_data.?)));\n        // TODO:\n        // const audio_slice = @ptrCast([*]f32, @alignCast(@alignOf(f32), audio_data.?))[0..@intCast(usize, num_frames)];\n        const audio_slice = @as([*]i16, @ptrCast(@alignCast(@alignOf(i16), audio_data.?)))[0..@as(usize, @intCast(num_frames))];\n\n        for (audio_slice) |*frame| {\n            frame.* = 0;\n        }"}
{"instruction":"Write a Zig function similar to stop from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn stop(n: Node, nodes: []const Node) u32 {\n        var cur = n;\n        const result = while (true) {\n            if (cur.next_idx != 0) break cur.next_idx;\n            if (cur.parent_idx == 0) break nodes.len;\n            cur = nodes[cur.parent_idx];\n        }"}
{"instruction":"Write a Zig function similar to refcnt from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"pub fn refcnt(comptime root: type, object: anytype) isize {\n    const pyobj = py.object(root, object);\n    return pyobj.refcnt();\n}"}
{"instruction":"Write a Zig struct similar to SocketSet from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub const SocketSet = struct {\n    const Self = @This();\n\n    internal: OSLogic,\n\n    /// Initialize a new socket set. This can be reused for\n    /// multiple queries without having to reset the set every time.\n    /// Call `deinit()` to free the socket set.\n    pub fn init(allocator: std.mem.Allocator) !Self {\n        return Self{\n            .internal = try OSLogic.init(allocator),\n        }"}
{"instruction":"Write a Zig function similar to throwFmt from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub fn throwFmt(f: *Frame, vm: *Vm, comptime err: []const u8, args: anytype) !void {\n        if (f.err_handlers.get()) |handler| {\n            const handler_operand = try f.newRef(vm, handler.operand);\n            handler_operand.* = try vm.errorFmt(err, args);\n            f.ip = handler.offset;\n        }"}
{"instruction":"Write a Zig function similar to decode from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/packbits.zig","output":"pub fn decode(read_stream: *io.ReadStream, temp_buffer: []u8, length: u32) !void {\n    const reader = read_stream.reader();\n\n    var output_offset: u32 = 0;\n    var input_offset: u32 = 0;\n\n    while (input_offset < length - 1) {\n        const control: usize = try reader.takeByte();\n        input_offset += 1;\n        if (control < 128) {\n            for (0..control + 1) |_| {\n                if (input_offset >= length) {\n                    return;\n                }"}
{"instruction":"Write a Zig struct similar to Ctx from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const Ctx = struct {\n            allocator: Allocator,\n            map: *ArrayList(usize),\n            wcwidth: usize = 0,\n            fn walker(ctx_: *anyopaque, egc: []const u8, wcwidth: usize, _: Metrics) Walker {\n                const ctx = @as(*@This(), @ptrCast(@alignCast(ctx_)));\n                var n = egc.len;\n                while (n > 0) : (n -= 1) {\n                    const p = ctx.map.addOne(ctx.allocator) catch |e| return .{ .err = e }"}
{"instruction":"Write a Zig function similar to onceIncr from zigcc/zig-cookbook","input":"Repository: zigcc/zig-cookbook (1019 ⭐)\nFile: assets/src/07-04.zig","output":"fn onceIncr() void {\n    // The invocations of `call` are thread-safe.\n    once_incr.call();\n    once_incr.call();\n}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn callback(ud: ?*anyopaque, l: *Loop, _: *Completion, r: Result) CallbackAction {\n            _ = l;\n            _ = r;\n            const b = @as(*bool, @ptrCast(ud.?));\n            b.* = true;\n            return .disarm;\n        }"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn init(exec: *Executor, udp: xev.UDP) Self {\n        return .{ .exec = exec, .udp = udp }"}
{"instruction":"Write a Zig function similar to deinit from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/Variant.zig","output":"pub fn deinit(v: *const Variant, gpa: Allocator) void {\n    {\n        var dir = v.content_dir;\n        dir.close();\n    }"}
{"instruction":"Write a Zig function similar to get from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/classes.zig","output":"pub fn get(prop: *const Prop) ?py.PyString {\n            if (prop.e) |e| e.obj.incref();\n            return prop.e;\n        }"}
{"instruction":"Write a Zig function similar to subscript from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn subscript(self: *Self, can_assign: bool, subscripted: Ast.Node.Index) Error!Ast.Node.Index {\n    const start_location = self.ast.nodes.items(.location)[subscripted];\n\n    const subscript_type_def = self.ast.nodes.items(.type_def)[subscripted];\n    const checked = try self.match(.Question);\n    const index = try self.expression(false);\n    const index_type_def = self.ast.nodes.items(.type_def)[index];\n\n    const type_defs = self.ast.nodes.items(.type_def);\n    if (subscript_type_def.?.def_type == .Placeholder and index_type_def.?.def_type == .Placeholder) {\n        try obj.PlaceholderDef.link(\n            self.gc.allocator,\n            type_defs[subscripted].?,\n            type_defs[index].?,\n            .Key,\n        );\n    }"}
{"instruction":"Write Zig 0.13.0 code for: C §","input":"Although Zig is independent of C, and, unlike most other languages, does not depend on libc, Zig acknowledges the importance of interacting with existing C code. There are a few ways that Zig facilitates C interop. C Type Primitives § These have guaranteed C ABI compatibility and can be used like any other type. c_char c_short c_ushort c_int c_uint c_long c_ulong c_longlong c_ulonglong c_longdouble To interop with the C void type, use anyopaque . See also: Primitive Types Import from C Header Fi","output":"<span class=\"tok-kw\">const</span> base64 = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).base64;\n\n<span class=\"tok-kw\">export</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">decode_base_64</span>(\n    dest_ptr: [*]<span class=\"tok-type\">u8</span>,\n    dest_len: <span class=\"tok-type\">usize</span>,\n    source_ptr: [*]<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>,\n    source_len: <span class=\"tok-type\">usize</span>,\n) <span class=\"tok-type\">usize</span> {\n    <span class=\"tok-kw\">const</span> src = source_ptr[<span class=\"tok-number\">0</span>..source_len];\n    <span class=\"tok-kw\">const</span> dest = dest_ptr[<span class=\"tok-number\">0</span>..dest_len];\n    <span class=\"tok-kw\">const</span> base64_decoder = base64.standard.Decoder;\n    <span class=\"tok-kw\">const</span> decoded_size = base64_decoder.calcSizeForSlice(src) <span class=\"tok-kw\">catch</span> <span class=\"tok-kw\">unreachable</span>;\n    base64_decoder.decode(dest[<span class=\"tok-number\">0</span>..decoded_size], src) <span class=\"tok-kw\">catch</span> <span class=\"tok-kw\">unreachable</span>;\n    <span class=\"tok-kw\">return</span> decoded_size;\n}"}
{"instruction":"Write a Zig const similar to control from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/packbits.zig","output":"const control: usize = try reader.takeByte();"}
{"instruction":"Write a Zig struct similar to Media from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"pub const Media = struct {\n        queries: Span,\n        first_rule: ?u32,\n\n        fn renderMediaQuery(\n            query: []const u8,\n            w: *Writer,\n        ) !void {\n            var query_tokenizer: Tokenizer = .{}"}
{"instruction":"Write a Zig function similar to get from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Tree.zig","output":"pub fn get(tree: Tree, node: Node.Index) If {\n        const tokens = tree.nodes.items(.token);\n        var if_expr: If = undefined;\n        if_expr.if_tok = tokens[node];\n\n        const data = tree.nodes.items(.data);\n        switch (tree.nodes.items(.id)[node]) {\n            .if_expr => {\n                if_expr.capture = null;\n                if_expr.cond = data[node].bin.lhs;\n                if_expr.then_body = data[node].bin.rhs;\n                if_expr.else_body = null;\n            }"}
{"instruction":"Write a Zig function similar to genDecl from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genDecl(c: *Compiler, node: Node.Index) !void {\n    const data = c.tree.nodes.items(.data);\n    const init_val = init_val: {\n        const old_make_global = c.make_ident_global;\n        defer c.make_ident_global = old_make_global;\n        c.make_ident_global = false;\n\n        break :init_val try c.genNode(data[node].bin.rhs, .value);\n    }"}
{"instruction":"Write a Zig const similar to ICW2_SLAVE_REMAP_OFFSET from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const ICW2_SLAVE_REMAP_OFFSET: u8 = 0x28;"}
{"instruction":"Write a Zig function similar to OP_SET_OBJECT_PROPERTY from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_SET_OBJECT_PROPERTY(self: *Self, location: Ast.TokenIndex, property_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_SET_OBJECT_PROPERTY,\n        property_idx,\n    );\n}"}
{"instruction":"Write a Zig function similar to applyBreakpointToAllThreads from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn applyBreakpointToAllThreads(\n            self: *Self,\n            scratch: Allocator,\n            bp: *types.Breakpoint,\n            launching_subordinate: bool,\n        ) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            const sub = self.data.subordinate.?;\n            const subordinate_pid = types.PID.from(sub.child.id);\n\n            const should_continue = blk: {\n                // the subordinate has been launched but is already paused before its first instruction\n                if (launching_subordinate) break :blk false;\n\n                // execution is already paused, nothing to do\n                if (sub.paused != null) break :blk false;\n\n                // the subordinate has been started and is not already paused\n                for (sub.threads.items) |thread_pid| {\n                    self.adapter.temporarilyPauseSubordinate(subordinate_pid, thread_pid);\n                }"}
{"instruction":"Write a Zig struct similar to no_sanitize_coverage from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const no_sanitize_coverage = struct {}"}
{"instruction":"Write a Zig function similar to guess_file_type from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn guess_file_type(file_path: []const u8) struct { []const u8, []const u8, u24 }"}
{"instruction":"Write a Zig function similar to toWTFString from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn toWTFString(this: *File) bun.String {\n            if (this.wtf_string.isEmpty()) {\n                switch (this.encoding) {\n                    .binary, .utf8 => {\n                        this.wtf_string = bun.String.cloneUTF8(this.contents);\n                    }"}
{"instruction":"Write a Zig function similar to asyncMain from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/callback/main.zig","output":"pub fn asyncMain() !void {\n    var gpa = std.heap.GeneralPurposeAllocator(.{}"}
{"instruction":"Write a Zig function similar to buildZdefWrapper from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn buildZdefWrapper(self: *Self, zdef_element: Ast.Zdef.ZdefElement) Error!m.MIR_item_t {\n    var wrapper_name = std.ArrayList(u8){}"}
{"instruction":"Write a Zig function similar to add from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/StrList.zig","output":"pub fn add(self: *StrList, str: []const u8) void {\n    for (self.items()) |cstr| {\n        if (std.mem.eql(u8, cc.strslice_c(cstr), str))\n            return;\n    }"}
{"instruction":"Write a Zig function similar to rip from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"fn rip(self: ModRm) bool {\n        return self.mod == 0 and self.op2 == 0b101;\n    }"}
{"instruction":"Write a Zig function similar to dotCompletions from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/completions.zig","output":"pub fn dotCompletions(\n    arena: std.mem.Allocator,\n    completions: *std.ArrayList(types.CompletionItem),\n    ip: *InternPool,\n    index: InternPool.Index,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to initFile from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn initFile(file: std.fs.File, pathname: string, size: usize) OutputFile {\n    return .{\n        .loader = .file,\n        .src_path = Fs.Path.init(pathname),\n        .size = size,\n        .value = .{ .copy = FileOperation.fromFile(file.handle, pathname) }"}
{"instruction":"Write a Zig function similar to onConfigurationChanged from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"fn onConfigurationChanged(activity: *android.ANativeActivity) callconv(.C) void {\n            invoke(activity, \"onConfigurationChanged\", .{}"}
{"instruction":"Write a Zig struct similar to User from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: src/http/form.zig","output":"const User = struct { id: u32, name: []const u8, age: u8 }"}
{"instruction":"Write a Zig function similar to __isub__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __isub__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ -= other.num_;\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to open from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn open(self: *@This(), cfg: []const u8) !usize {\n        return self.fn_open(self.ptr, cfg);\n    }"}
{"instruction":"Write a Zig function similar to isSet from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn isSet(self: *ResetEventSingle) bool {\n            return self.waiter.load(.seq_cst) == &State.set_state;\n        }"}
{"instruction":"Write a Zig function similar to forFull from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn forFull(tree: Ast, node: Node.Index) full.For {\n    const extra_index, const extra = tree.nodeData(node).@\"for\";\n    const inputs = tree.extraDataSliceWithLen(extra_index, extra.inputs, Node.Index);\n    const then_expr: Node.Index = @enumFromInt(tree.extra_data[@intFromEnum(extra_index) + extra.inputs]);\n    const else_expr: Node.OptionalIndex = if (extra.has_else) @enumFromInt(tree.extra_data[@intFromEnum(extra_index) + extra.inputs + 1]) else .none;\n    return fullForComponents(tree, .{\n        .for_token = tree.nodeMainToken(node),\n        .inputs = inputs,\n        .then_expr = then_expr,\n        .else_expr = else_expr,\n    }"}
{"instruction":"Write a Zig function similar to manageSettings from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/comprehensive/main.zig","output":"fn manageSettings(e: *webui.Event, action: [:0]const u8, key: [:0]const u8, value: [:0]const u8) void {\n    std.debug.print(\"Settings: {s}"}
{"instruction":"Write a Zig function similar to add_c_source_file from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub fn add_c_source_file(fw: *Firmware, source: Build.Module.CSourceFile) void {\n                fw.artifact.addCSourceFile(source);\n            }"}
{"instruction":"Write a Zig function similar to init from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"pub fn init(\n    gpa: std.mem.Allocator,\n    debouncer: *Debouncer,\n    dir_paths: []const []const u8,\n) LinuxWatcher {\n    errdefer |err| fatal.msg(\"error: unable to start the file watcher: {s}"}
{"instruction":"Write a Zig function similar to lessThan from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"fn lessThan(_: void, lhs: Data, rhs: Data) bool {\n                    return lhs.alignment > rhs.alignment;\n                }"}
{"instruction":"Write a Zig function similar to fromCompareOperatorSigned from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub fn fromCompareOperatorSigned(op: std.math.CompareOperator) Condition {\n        return switch (op) {\n            .gte => .ge,\n            .gt => .g,\n            .neq => .ne,\n            .lt => .l,\n            .lte => .le,\n            .eq => .e,\n        }"}
{"instruction":"Write a Zig struct similar to Root from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const Root = struct {\n    stmts: []const *Node align(8),\n}"}
{"instruction":"Write a Zig function similar to generateCodeAction from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"pub fn generateCodeAction(\n        builder: *Builder,\n        error_bundle: std.zig.ErrorBundle,\n    ) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to checkDirEntry from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"fn checkDirEntry(entry: DirectoryEntry, virt_start: usize, virt_end: usize, phys_start: usize, attrs: vmm.Attributes, table: *Table, present: bool) !void {\n    try expectEqual(entry & DENTRY_PRESENT, if (present) DENTRY_PRESENT else 0);\n    try expectEqual(entry & DENTRY_WRITABLE, if (attrs.writable) DENTRY_WRITABLE else 0);\n    try expectEqual(entry & DENTRY_USER, if (attrs.kernel) 0 else DENTRY_USER);\n    try expectEqual(entry & DENTRY_WRITE_THROUGH, DENTRY_WRITE_THROUGH);\n    try expectEqual(entry & DENTRY_CACHE_DISABLED, if (attrs.cachable) 0 else DENTRY_CACHE_DISABLED);\n    try expectEqual(entry & DENTRY_4MB_PAGES, 0);\n    try expectEqual(entry & DENTRY_ZERO, 0);\n\n    var tentry_idx = virtToTableEntryIdx(virt_start);\n    var tentry_idx_end = virtToTableEntryIdx(virt_end);\n    var phys = phys_start;\n    while (tentry_idx < tentry_idx_end) : ({\n        tentry_idx += 1;\n        phys += PAGE_SIZE_4KB;\n    }"}
{"instruction":"Write a Zig const similar to x from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"const x: f32 = (@as(f32, @floatFromInt(i)) - 0.5)*2.0;"}
{"instruction":"Write a Zig function similar to get_modpath from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/common.zig","output":"pub fn get_modpath(cachepath: string, d: zigmod.Dep, options: *CollectOptions) !string {\n    const p = try std.fs.path.join(options.alloc, &.{ cachepath, try d.clean_path(options.alloc) }"}
{"instruction":"Write a Zig function similar to colorf32ToBgra32 from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn colorf32ToBgra32(comptime destination_format: PixelFormat, source: *const color.PixelStorage, destination: *color.PixelStorage) void {\n    const source_pixels = source.float32;\n    var source_f32: [*]f32 = @ptrCast(@alignCast(source_pixels.ptr));\n\n    var destination_pixels = @field(destination, getFieldNameFromPixelFormat(destination_format));\n    const destination_type = @TypeOf(destination_pixels[0]);\n\n    const vector_length = std.simd.suggestVectorLength(u8) orelse 4;\n    const color_count = vector_length / 4;\n    const FloatVectorType = @Vector(vector_length, f32);\n\n    const shuffle_mask: @Vector(vector_length, i32) = comptime blk: {\n        var result: @Vector(vector_length, i32) = @splat(0);\n\n        for (0..color_count) |i| {\n            const stride = i * 4;\n            result[stride + 0] = stride + 2;\n            result[stride + 1] = stride + 1;\n            result[stride + 2] = stride + 0;\n            result[stride + 3] = stride + 3;\n        }"}
{"instruction":"Write a Zig function similar to fail from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn fail(_: *Request, _: *Response) !void {\n        return error.Failure;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> print = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).debug.print;\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> byte: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">255</span>;\n\n    <span class=\"tok-kw\">const</span> ov = <span class=\"tok-builtin\">@addWithOverflow</span>(byte, <span class=\"tok-number\">10</span>);\n    <span class=\"tok-kw\">if</span> (ov[<span class=\"tok-number\">1</span>] != <span class=\"tok-number\">0</span>) {\n        print(<span class=\"tok-str\">\"overflowed result: {}\\n\"</span>, .{ov[<span class=\"tok-number\">0</span>]});\n    } <span class=\"tok-kw\">else</span> {\n        print(<span class=\"tok-str\">\"result: {}\\n\"</span>, .{ov[<span class=\"tok-number\">0</span>]});\n    }\n}"}
{"instruction":"Write a Zig function similar to nodesOverlappingIndex from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn nodesOverlappingIndex(allocator: std.mem.Allocator, tree: Ast, index: usize) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to GENERAL_PROTECTION_FAULT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const GENERAL_PROTECTION_FAULT: u8 = 13;"}
{"instruction":"Write a Zig function similar to clearList from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn clearList(_: *const ScriptManager, list: *OrderList) void {\n    while (list.first) |node| {\n        const pending_script: *PendingScript = @fieldParentPtr(\"node\", node);\n        // this removes it from the list\n        pending_script.deinit();\n    }"}
{"instruction":"Write a Zig struct similar to IndexMapContext from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"const IndexMapContext = struct {\n    pub fn hash(_: @This(), key: HashKeyType) HashKeyType {\n        return key;\n    }"}
{"instruction":"Write a Zig function similar to main from zigcc/zig-cookbook","input":"Repository: zigcc/zig-cookbook (1019 ⭐)\nFile: assets/src/04-01.zig","output":"pub fn main() !void {\n    const loopback = try net.Ip4Address.parse(\"127.0.0.1\", 0);\n    const localhost = net.Address{ .in = loopback }"}
{"instruction":"Write a Zig function similar to consumeNumber from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"fn consumeNumber(self: *Tokenizer) ?f32 {\n        const prev = self.pos;\n        const s = self.consume(isNumStart, isNumeric) orelse return null;\n        return std.fmt.parseFloat(f32, s) catch {\n            self.pos = prev;\n            return null;\n        }"}
{"instruction":"Write a Zig function similar to OP_GET_ENUM_CASE_FROM_VALUE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_GET_ENUM_CASE_FROM_VALUE(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_GET_ENUM_CASE_FROM_VALUE);\n}"}
{"instruction":"Write a Zig function similar to write_int from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn write_int(self: *Encoder, comptime T: type, value: T) void {\n        comptime assert(@typeInfo(T) == .int);\n        comptime assert(@sizeOf(T) == 1 or @sizeOf(T) == 2 or @sizeOf(T) == 4 or @sizeOf(T) == 8);\n        assert(self.index + @sizeOf(T) <= self.buffer.len);\n        std.mem.writeInt(T, self.buffer[self.index..][0..@sizeOf(T)], value, .big);\n        self.index += @sizeOf(T);\n        assert(self.index <= self.buffer.len);\n    }"}
{"instruction":"Write a Zig function similar to startPythonWebServer from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/custom_spa_server_on_free_port/main.zig","output":"fn startPythonWebServer() void {\n    if (python_running == false) { // a better check would be a test for the process itself\n        if (python_server_proc.spawn()) |_| {\n            python_running = true;\n            std.debug.print(\"Spawned python server process PID={}"}
{"instruction":"Write a Zig struct similar to GammaFunctionsParameters from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub const GammaFunctionsParameters = struct {\n    alpha: f32 = 0.0,\n    beta: f32 = 0.0,\n    delta: f32 = 0.0,\n    gamma: f32 = 1.0,\n    transition_point: f32 = 0.0,\n    display_gamma: f32 = 1.0,\n}"}
{"instruction":"Write a Zig function similar to genUnwrapOr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genUnwrapOr(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(loc, .unwrap_or);\n    const ret_t = c.ir.getExprType(loc).id;\n\n    const merged_cstr = try toMergedDst(c, cstr, ret_t);\n\n    const optv = try genExpr(c, data.opt, Cstr.simple);\n    try initTempValue(c, optv, node);\n\n    const cond = try bc.reserveTemp(c, bt.Boolean);\n    try c.pushCode(.none, &.{optv.reg, cond}"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data & 255);\n}"}
{"instruction":"Write a Zig function similar to pwrite from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn pwrite(self: File, buf: []const u8, offset: u64) !usize {\n        return self.inner.pwrite(.{ .slice = buf }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = l;\n                _ = c;\n                _ = r.connect catch unreachable;\n                const b = @as(*bool, @ptrCast(ud.?));\n                b.* = true;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to updatecameraCenterInsideMap from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/2d_camera_platformer.zig","output":"fn updatecameraCenterInsideMap(\n    camera: *Camera2D,\n    player: *Player,\n    env_items: []EnvItem,\n    _: f32,\n    width: i32,\n    height: i32,\n) void {\n    const widthf: f32 = @floatFromInt(width);\n    const heightf: f32 = @floatFromInt(height);\n    camera.offset = Vec2.init(widthf / 2, heightf / 2);\n    camera.target = player.position;\n\n    var min_x: f32 = 1000;\n    var min_y: f32 = 1000;\n    var max_x: f32 = -1000;\n    var max_y: f32 = -1000;\n\n    for (env_items) |ei| {\n        min_x = @min(ei.rect.x, min_x);\n        min_y = @min(ei.rect.y, min_y);\n        max_x = @max(ei.rect.x + ei.rect.width, max_x);\n        max_y = @max(ei.rect.y + ei.rect.height, max_y);\n    }"}
{"instruction":"Write a Zig struct similar to FuncDecl from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const FuncDecl = struct {\n    name: *Node align(8),\n    attrs: []*Attribute,\n    params: []const *FuncParam,\n    ret: ?*Node,\n    hidden: bool,\n    stmts: []*Node,\n    sig_t: FuncSigType,\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to toBigNumber from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/bigclock.zig","output":"fn toBigNumber(char: u8, bigclock: Bigclock) [SIZE]u21 {\n    const locale_chars = switch (bigclock) {\n        .fa => fa.locale_chars,\n        .en => en.locale_chars,\n        .none => unreachable,\n    }"}
{"instruction":"Write a Zig function similar to findSurfaceFormat from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/swapchain.zig","output":"fn findSurfaceFormat(gc: *const GraphicsContext, allocator: Allocator) !vk.SurfaceFormatKHR {\n    const preferred = vk.SurfaceFormatKHR{\n        .format = .b8g8r8a8_srgb,\n        .color_space = .srgb_nonlinear_khr,\n    }"}
{"instruction":"Write a Zig function similar to writerfn from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn writerfn(_: void, data: []const u8) std.Io.Writer.Error!usize {\n        const len = data.len;\n        if (len == 0) return 0;\n\n        if (len != 1) {\n            const tmp_c = data[len - 1]; //check if last char is a sentinel\n            if (tmp_c != 0) {\n                // Temporarily change last char to null byte\n                var tmp_data: []u8 = @constCast(data);\n                tmp_data[len - 1] = 0;\n                write0(@ptrCast(tmp_data.ptr));\n                tmp_data[len - 1] = tmp_c;\n                // Write the last character separately\n                write_byte(tmp_c);\n                return len;\n            }"}
{"instruction":"Write a Zig const similar to test_filter from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: build.zig","output":"const test_filter: ?[]const u8 = b.option([]const u8, \"filter\", \"Filter running tests down to just the given name (default: null)\") orelse null;"}
{"instruction":"Write a Zig function similar to accessed from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn accessed(self: *Self, ptr: *o.Obj, at: ?Token) void {\n        if (self.invoking_collector) return;\n\n        if (self.tracker.getPtr(ptr)) |tracked| {\n            if (tracked.collected_at) |collected_at| {\n                var items = std.ArrayList(Reporter.ReportItem).empty;\n                defer items.deinit(self.allocator);\n\n                var message = std.ArrayList(u8).empty;\n                defer message.deinit(self.allocator);\n\n                message.writer(self.allocator).print(\n                    \"Access to already collected {}"}
{"instruction":"Write a Zig function similar to sleep from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn sleep(exec: *Executor, ms: u64) !void {\n    const loop = exec.loop;\n    const Data = XCallback(SleepResult);\n\n    var data = Data.init();\n    var w = try xev.Timer.init();\n    defer w.deinit();\n    var c: xev.Completion = .{}"}
{"instruction":"Write a Zig const similar to expanded from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins.zig","output":"const expanded: Expanded = .{\n        .tag = builtin.tag,\n        .qt = try createBuiltin(comp, builtin.param_str),\n        .attributes = builtin.attributes,\n        .header = builtin.header,\n        .language = builtin.language,\n    };"}
{"instruction":"Write a Zig struct similar to UpValue from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub const UpValue = struct {\n    index: u8,\n    is_local: bool,\n    node: Ast.Node.Index,\n}"}
{"instruction":"Write a Zig function similar to pushDebugFuncStart from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn pushDebugFuncStart(self: *ByteCodeBuffer, func: *cy.Func, chunkId: u32) !void {\n        try self.debugMarkers.append(self.alloc, .{\n            .type = @intFromEnum(DebugMarkerType.funcStart),\n            .pc = @intCast(self.ops.items.len),\n            .data = .{\n                .funcStart = .{\n                    .func = func,\n                    .chunkId = chunkId,\n                }"}
{"instruction":"Write a Zig function similar to next from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dialogs.zig","output":"pub fn next(self: *Iterator) ?Dialog {\n        self.dialogs.mutex.lock();\n        defer self.dialogs.mutex.unlock();\n\n        // have to deal with toasts possibly removing themselves inbetween\n        // calls to next()\n\n        const items = self.dialogs.stack.items;\n        if (self.i < items.len and self.last_id == items[self.i].id) {\n            // we already did this one, move to the next\n            self.i += 1;\n        }"}
{"instruction":"Write a Zig function similar to releaseTempValue2 from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn releaseTempValue2(c: *Chunk, a: GenValue, b: GenValue, debugId: *ast.Node) !void {\n    const releaseA = a.isRetainedTemp();\n    const releaseB = b.isRetainedTemp();\n    if (releaseA and releaseB) {\n        try pushReleases(c, &.{ a.reg, b.reg }"}
{"instruction":"Write a Zig function similar to setAttribute from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/element.zig","output":"pub fn setAttribute(self: *Element, name: []const u8, value: []const u8) !void {\n        try self.attributes.put(name, value);\n        self.node.markDirty();\n    }"}
{"instruction":"Write a Zig function similar to OP_FIBER_FOREACH from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_FIBER_FOREACH(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_FIBER_FOREACH);\n}"}
{"instruction":"Write a Zig function similar to next from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig","output":"pub fn next(\n        vait: *ValidatingIterator,\n        gpa: Allocator,\n        src: []const u8,\n    ) !?Tokenizer.Attr {\n        while (vait.it.next(src[0..vait.end])) |maybe_attr| {\n            switch (maybe_attr) {\n                else => unreachable,\n                .tag_name => {}"}
{"instruction":"Write a Zig function similar to insertAllEntriesIntoNewHeader from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"fn insertAllEntriesIntoNewHeader(self: *Map, header: *IndexHeader) void {\n    switch (header.capacityIndexType()) {\n        .u8 => return self.insertAllEntriesIntoNewHeaderGeneric(header, u8),\n        .u16 => return self.insertAllEntriesIntoNewHeaderGeneric(header, u16),\n        .u32 => return self.insertAllEntriesIntoNewHeaderGeneric(header, u32),\n    }"}
{"instruction":"Write a Zig function similar to StringNone from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn StringNone(vm: *cy.VM) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionString, &.{ Value.initInt(0), Value.initInt(0) }"}
{"instruction":"Write a Zig function similar to asyncMain from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/main.zig","output":"pub fn asyncMain() !void {\n    log.info(\"   GptOss was compiled with {}"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn inet_ntop(family: c_int, net_ip: *const anyopaque, str_buf: [*]u8, str_bufsz: c.socklen_t) ?ConstStr;\n    }"}
{"instruction":"Write a Zig function similar to fromOkLChAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn fromOkLChAlpha(self: RgbColorspace, lch: OkLChAlpha, post_conversion_behavior: PostConversionBehavior) Colorf32 {\n        return self.fromOkLabAlpha(lch.toOkLabAlpha(), post_conversion_behavior);\n    }"}
{"instruction":"Write a Zig function similar to getServerToClientData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn getServerToClientData(_: Vec3i, _: *Chunk, _: *BinaryWriter) void {}"}
{"instruction":"Write a Zig function similar to markNotFound from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"pub fn markNotFound(self: *Self, result: Result) void {\n            self.map.markNotFound(result);\n        }"}
{"instruction":"Write a Zig function similar to renderWrapperLoader from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderWrapperLoader(self: *Self, dispatch_type: CommandDispatchType) !void {\n        const params = switch (dispatch_type) {\n            .base => \"loader: anytype\",\n            .instance => \"instance: Instance, loader: anytype\",\n            .device => \"device: Device, loader: anytype\",\n        }"}
{"instruction":"Write a Zig function similar to save from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/web_app_multi_client/main.zig","output":"fn save(e: *webui.Event) void {\n    // Get input value\n    const privateInput = e.getString();\n\n    // free previous memory\n    if (private_input_arr[e.client_id]) |val|\n        allocator.free(val);\n\n    // allocate new memory, to save new private input\n    private_input_arr[e.client_id] = allocator.dupe(u8, privateInput) catch unreachable;\n}"}
{"instruction":"Write a Zig function similar to getDocComments from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn getDocComments(allocator: std.mem.Allocator, tree: Ast, node: Ast.Node.Index) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to references from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn references(self: *Self, from: tp.pid_ref, file_path: []const u8, row: usize, col: usize) SendGotoRequestError!void {\n    const lsp = try self.get_language_server(file_path);\n    const uri = try self.make_URI(file_path);\n    defer self.allocator.free(uri);\n    self.logger_lsp.print(\"finding references...\", .{}"}
{"instruction":"Write a Zig function similar to try_send from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn try_send(self: *Self, val: T) bool {\n            return self.inner.try_send(val);\n        }"}
{"instruction":"Write a Zig function similar to cos from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn cos(vm: *cy.VM) Value {\n    return Value.initF64(std.math.cos(vm.getFloat(0)));\n}"}
{"instruction":"Write Zig 0.13.0 code for: Compile Variables §","input":"Compile variables are accessible by importing the &quot;builtin&quot; package, which the compiler makes available to every Zig source file. It contains compile-time constants such as the current target, endianness, and release mode. compile_variables.zig Example of what is imported with @import ( &quot;builtin&quot; ) : @import(\"builtin\") See also: Build Mode","output":"<span class=\"tok-kw\">const</span> builtin = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"builtin\"</span>);\n<span class=\"tok-kw\">const</span> separator = <span class=\"tok-kw\">if</span> (builtin.os.tag == .windows) <span class=\"tok-str\">'\\\\'</span> <span class=\"tok-kw\">else</span> <span class=\"tok-str\">'/'</span>;"}
{"instruction":"Write a Zig function similar to get_id_cache from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub fn get_id_cache(name: []const u8, id: *?ID) ?ID {\n    for (commands.items) |cmd| {\n        if (cmd) |p|\n            if (std.mem.eql(u8, p.name, name)) {\n                id.* = p.id;\n                return p.id;\n            }"}
{"instruction":"Write Zig 0.13.0 code for: Operators §","input":"There is no operator overloading. When you see an operator in Zig, you know that it is doing something from this table, and nothing else. Table of Operators § Name Syntax Types Remarks Example Addition Integers Floats Can cause overflow for integers. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Wrapping Addition Integers Twos-complement wrapping behavior. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Saturating Addition Integers Invokes","output":"<span class=\"tok-kw\">const</span> A = <span class=\"tok-kw\">error</span>{One};\n<span class=\"tok-kw\">const</span> B = <span class=\"tok-kw\">error</span>{Two};\n(A || B) == <span class=\"tok-kw\">error</span>{One, Two}"}
{"instruction":"Write a Zig function similar to hasFloat128 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn hasFloat128(comp: *const Compilation) bool {\n    return target_util.hasFloat128(comp.target);\n}"}
{"instruction":"Write a Zig function similar to runtimeTests from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"pub fn runtimeTests() void {\n    rt_picAllMasked();\n}"}
{"instruction":"Write a Zig function similar to find_binary_in_path_posix from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/bin_path.zig","output":"fn find_binary_in_path_posix(allocator: std.mem.Allocator, binary_name: []const u8) std.mem.Allocator.Error!?[:0]const u8 {\n    const bin_paths = std.process.getEnvVarOwned(allocator, \"PATH\") catch |err| switch (err) {\n        error.OutOfMemory => return error.OutOfMemory,\n        error.EnvironmentVariableNotFound, error.InvalidWtf8 => &.{}"}
{"instruction":"Write a Zig struct similar to NameVar from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"const NameVar = struct { []const u8, cy.Value }"}
{"instruction":"Write a Zig function similar to writeError from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/SharedError.zig","output":"pub fn writeError(self: SharedError, err: anyerror) void {\n    var buf_stream = std.io.fixedBufferStream(self.data);\n    const writer = buf_stream.writer();\n    writer.writeStruct(ErrorHandler{ .has_error = true, .err_int = @intFromError(err) }"}
{"instruction":"Write a Zig function similar to getFile from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn getFile(editor: *Editor, index: usize) ?*pixi.Internal.File {\n    if (editor.open_files.values().len == 0) return null;\n    if (index >= editor.open_files.values().len) return null;\n\n    return &editor.open_files.values()[index];\n}"}
{"instruction":"Write a Zig function similar to tryAllocRegs from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"pub fn tryAllocRegs(\n            self: *Self,\n            comptime count: comptime_int,\n            insts: [count]?Inst,\n            register_class: RegisterBitSet,\n        ) ?[count]Register {\n            comptime assert(count > 0 and count <= tracked_registers.len);\n\n            var free_and_not_locked_registers = self.free_registers;\n            free_and_not_locked_registers.setIntersection(register_class);\n\n            var unlocked_registers = self.locked_registers;\n            unlocked_registers.toggleAll();\n\n            free_and_not_locked_registers.setIntersection(unlocked_registers);\n\n            if (free_and_not_locked_registers.count() < count) return null;\n\n            var regs: [count]Register = undefined;\n            var i: usize = 0;\n            for (tracked_registers) |reg| {\n                if (i >= count) break;\n                if (excludeRegister(reg, register_class)) continue;\n                if (self.isRegLocked(reg)) continue;\n                if (!self.isRegFree(reg)) continue;\n\n                regs[i] = reg;\n                i += 1;\n            }"}
{"instruction":"Write a Zig function similar to finishJump from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn finishJump(c: *Compiler, jump_index: u32) void {\n    const offset: u32 = @intCast(c.code.items.len);\n    const data = c.instructions.items(.data);\n    const ops = c.instructions.items(.op);\n    if (ops[jump_index] == .jump or ops[jump_index] == .pop_err_handler) {\n        data[jump_index] = .{ .jump = offset }"}
{"instruction":"Write a Zig function similar to reportErrorFmt from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn reportErrorFmt(self: *Self, error_type: Error, location: Token, end_location: Token, comptime fmt: []const u8, args: anytype) void {\n    @branchHint(.cold);\n\n    var message = std.ArrayList(u8).empty;\n    defer {\n        if (!self.collect) {\n            message.deinit(self.allocator);\n        }"}
{"instruction":"Write a Zig function similar to getClientToServerData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"fn getClientToServerData(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void {\n\t\treturn self.vtable.getClientToServerData(pos, chunk, writer);\n\t}"}
{"instruction":"Write a Zig function similar to getBlockData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub fn getBlockData(idLikeString: []const u8) !?u16 {\n\tconst addonNameSeparatorIndex = std.mem.indexOfScalar(u8, idLikeString, ':') orelse return error.MissingAddonNameSeparator;\n\tconst blockIdEndIndex = std.mem.indexOfScalarPos(u8, idLikeString, 1 + addonNameSeparatorIndex, ':') orelse return null;\n\tconst dataString = idLikeString[blockIdEndIndex + 1 ..];\n\tif(dataString.len == 0) return error.EmptyDataString;\n\treturn std.fmt.parseInt(u16, dataString, 0) catch return error.InvalidData;\n}"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">doAnotherThing</span>(str: []<span class=\"tok-type\">u8</span>) <span class=\"tok-kw\">error</span>{InvalidChar}!<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (parseU64(str, <span class=\"tok-number\">10</span>)) |number| {\n        doSomethingWithNumber(number);\n    } <span class=\"tok-kw\">else</span> |err| <span class=\"tok-kw\">switch</span> (err) {\n        <span class=\"tok-kw\">error</span>.Overflow => {\n            <span class=\"tok-comment\">// handle overflow...</span>\n        },\n        <span class=\"tok-kw\">else</span> => |leftover_err| <span class=\"tok-kw\">return</span> leftover_err,\n    }\n}"}
{"instruction":"Write a Zig function similar to statusToTerm from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn statusToTerm(status: u32) Term {\n    return if (posix.W.IFEXITED(status))\n        Term{ .Exited = posix.W.EXITSTATUS(status) }"}
{"instruction":"Write a Zig function similar to unwindStackWithFramePointer from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn unwindStackWithFramePointer(\n            self: *Self,\n            scratch: Allocator,\n            pid: types.PID,\n            registers: *const arch.Registers,\n        ) !types.UnwindResult {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            const endianness = builtin.cpu.arch.endian();\n            const data_size = self.data.target.?.addr_size.bytes();\n\n            const sub = self.data.subordinate.?;\n\n            var frame_addr = registers.bp();\n            var return_addr = registers.pc();\n\n            var stack = ArrayList(types.Address).init(scratch);\n            errdefer stack.deinit();\n            try stack.append(return_addr);\n\n            const max = math.pow(usize, 2, 12);\n            for (0..max) |ndx| {\n                const buf = try scratch.alloc(u8, data_size);\n\n                // find the previous frame's PC\n                try self.adapter.peekData(\n                    pid,\n                    sub.load_addr,\n                    frame_addr.add(types.Address.from(data_size)),\n                    buf,\n                );\n                return_addr = types.Address.from(mem.readInt(u64, @ptrCast(buf), endianness));\n                try stack.append(return_addr);\n\n                // find the address of the next stack frame to search for\n                try self.adapter.peekData(pid, sub.load_addr, frame_addr, buf);\n                frame_addr = types.Address.from(mem.readInt(u64, @ptrCast(buf), endianness));\n\n                // we're at the top of the stack\n                if (frame_addr.int() == 0) break;\n\n                assert(ndx < max - 1);\n            }"}
{"instruction":"Write a Zig struct similar to DeclarationLookup from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub const DeclarationLookup = struct {\n    pub const Kind = enum { field, other, label }"}
{"instruction":"Write a Zig function similar to get from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/PathTable.zig","output":"pub fn get(pt: *const PathTable, components: []const String) ?Path {\n    return pt.path_map.getKeyAdapted(\n        mem.sliceAsBytes(components),\n        @as(Path.MapIndexAdapter, .{ .components = pt.path_components.items }"}
{"instruction":"Write a Zig function similar to print from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/AnsiRenderer.zig","output":"fn print(style: Style, out: *Writer, open: bool) !void {\n        comptime var fields: [std.meta.fields(Style).len]std.builtin.Type.StructField = undefined;\n        @memcpy(&fields, std.meta.fields(Style));\n        comptime std.mem.reverse(std.builtin.Type.StructField, &fields);\n        const FieldEnum = std.meta.FieldEnum(Style);\n        inline for (fields) |field| {\n            const value = @field(style, field.name);\n            const tag: ?std.meta.Tuple(&.{ []const u8, ?[]const u8 }"}
{"instruction":"Write a Zig function similar to refresh from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig","output":"pub fn refresh(self: *Progress) void {\n    if (!self.update_mutex.tryLock()) return;\n    defer self.update_mutex.unlock();\n\n    return self.refreshWithHeldLock();\n}"}
{"instruction":"Write a Zig function similar to checkActive from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/IdleInhibitManager.zig","output":"pub fn checkActive(inhibit_manager: *IdleInhibitManager) void {\n    var inhibited = false;\n    var it = inhibit_manager.inhibitors.first;\n    while (it) |node| : (it = node.next) {\n        const node_data = SceneNodeData.fromSurface(node.data.wlr_inhibitor.surface) orelse continue;\n        switch (node_data.data) {\n            .view => |view| {\n                if (view.current.output != null and\n                    view.current.tags & view.current.output.?.current.tags != 0)\n                {\n                    inhibited = true;\n                    break;\n                }"}
{"instruction":"Write a Zig function similar to writeToFile from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/Image.zig","output":"pub fn writeToFile(self: Image, allocator: std.mem.Allocator, file: std.fs.File, write_buffer: []u8, encoder_options: EncoderOptions) WriteError!void {\n    var write_stream = io.WriteStream.initFile(file, write_buffer);\n\n    try self.internalWrite(allocator, &write_stream, encoder_options);\n}"}
{"instruction":"Write a Zig struct similar to CreateFirmwareOptions from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub const CreateFirmwareOptions = struct {\n            /// The name of the firmware file.\n            name: []const u8,\n\n            /// The MicroZig target that the firmware is built for. Either a board or a chip.\n            target: *const Target,\n\n            /// The optimization level that should be used. Usually `ReleaseSmall` or `Debug` is a good choice.\n            /// Also using `std.Build.standardOptimizeOption` is a good idea.\n            optimize: std.builtin.OptimizeMode,\n\n            /// The root source file for the application. This is your `src/main.zig` file.\n            root_source_file: LazyPath,\n\n            /// Imports for the application.\n            imports: []const Build.Module.Import = &.{}"}
{"instruction":"Write a Zig function similar to move_page_up from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn move_page_up(self: *Self, root: Buffer.Root, view: *const View, metrics: Metrics) void {\n    self.row = if (self.row > view.rows) self.row - view.rows else 0;\n    self.follow_target(root, metrics);\n    self.move_left_no_target(root, metrics) catch return;\n    self.move_right_no_target(root, metrics) catch return;\n}"}
{"instruction":"Write a Zig function similar to createAllModule from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"fn createAllModule(b: *std.Build, build_options: *std.Build.Module, stdx: *std.Build.Module, opts: Options) !*std.Build.Module {\n    const mod = b.createModule(.{\n        .root_source_file = b.path(\"src/all.zig\"),\n        .target = rtarget,\n    }"}
{"instruction":"Write a Zig function similar to add from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig","output":"pub fn add(msg: []u8, qnamelen: c_int, p_ttl: *i32) bool {\n    if (!enabled())\n        return false;\n\n    if (!dns.is_good(msg))\n        return false;\n\n    if (cache_ignore.is_ignored(msg, qnamelen))\n        return false;\n\n    const ttl = dns.get_ttl(msg, qnamelen, g.cache_nodata_ttl, g.cache_min_ttl, g.cache_max_ttl) orelse return false;\n    p_ttl.* = ttl;\n\n    const cache_msg = b: {\n        const question = dns.question(msg, qnamelen);\n        const hashv = cc.calc_hashv(question);\n        if (map.get(question, hashv)) |old| {\n            // avoid duplicate add\n            const old_ttl = old.get_ttl();\n            if (std.math.absCast(ttl - old_ttl) <= 2) return false;\n            del_nofree(old);\n            break :b old.reuse(msg, qnamelen, ttl, hashv);\n        }"}
{"instruction":"Write a Zig function similar to getOrCreate from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins.zig","output":"pub fn getOrCreate(b: *Builtins, comp: *Compilation, name: []const u8) !?Expanded {\n    if (b._name_to_type_map.get(name)) |expanded| return expanded;\n\n    const builtin = fromName(comp, name) orelse return null;\n    if (builtin.features) |_| {\n        // TODO check features\n    }"}
{"instruction":"Write a Zig function similar to getSizeAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getSizeAt(e: *Event, index: usize) !usize {\n        const size = c.webui_get_size_at(e, index);\n        if (size == 0) return WebUIError.GenericError;\n        return size;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">comptime</span> {\n    <span class=\"tok-kw\">const</span> value: <span class=\"tok-type\">i32</span> = -<span class=\"tok-number\">1</span>;\n    <span class=\"tok-kw\">const</span> unsigned: <span class=\"tok-type\">u32</span> = <span class=\"tok-builtin\">@intCast</span>(value);\n    _ = unsigned;\n}"}
{"instruction":"Write a Zig function similar to deinit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn deinit(self: *GC) void {\n    self.gray_stack.deinit(self.allocator);\n    self.strings.deinit(self.allocator);\n    self.active_vms.deinit(self.allocator);\n    if (BuildOptions.gc_debug_access) {\n        self.debugger.?.deinit();\n    }"}
{"instruction":"Write a Zig function similar to CORE_TYPE from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"fn CORE_TYPE(type_id: Type) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_CORE_CUSTOM,\n        .data = .{ .core_custom = .{\n            .type_id = type_id,\n            .get_children = null,\n            .finalizer = null,\n        }"}
{"instruction":"Write a Zig function similar to modelIndexStart from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn modelIndexStart(block: Block) ModelIndex {\n\t\treturn _modelIndex[block.typ];\n\t}"}
{"instruction":"Write a Zig function similar to read_method_header from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn read_method_header(self: *Decoder) Error!MethodHeader {\n        return .{\n            .class = try self.read_int(u16),\n            .method = try self.read_int(u16),\n        }"}
{"instruction":"Write a Zig function similar to coerce from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn coerce(\n    ip: *InternPool,\n    gpa: Allocator,\n    arena: Allocator,\n    dest_ty: Index,\n    inst: Index,\n    target: std.Target,\n    /// TODO make this a return value instead of out pointer\n    /// see `CoercionResult`\n    err_msg: *ErrorMsg,\n) Allocator.Error!Index {\n    assert(ip.isType(dest_ty));\n    if (dest_ty == .unknown_type) return .unknown_unknown;\n    switch (ip.typeOf(dest_ty)) {\n        .unknown_type => return .unknown_unknown,\n        .type_type => {}"}
{"instruction":"Write a Zig function similar to set from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/Lookup.zig","output":"fn set(self: *Self, h: u32, pos: u16) u16 {\n    const p = self.head[h];\n    self.head[h] = pos;\n    self.chain[pos] = p;\n    return p;\n}"}
{"instruction":"Write a Zig function similar to release from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/buffer.zig","output":"pub fn release(self: *Pool, buffer: Buffer) void {\n        switch (buffer.type) {\n            .static, .arena => {}"}
{"instruction":"Write a Zig function similar to emit_struct from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_header.zig","output":"fn emit_struct(\n    buffer: *std.ArrayList(u8),\n    comptime type_info: anytype,\n    comptime c_name: []const u8,\n) !void {\n    try buffer.writer().print(\"typedef struct {s}"}
{"instruction":"Write a Zig function similar to init from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn init(alloc: std.mem.Allocator, vm: *cy.VM) !ByteCodeBuffer {\n        var new = ByteCodeBuffer{\n            .alloc = alloc,\n            .mainStackSize = 0,\n            .main_pc = 0,\n            .ops = .{}"}
{"instruction":"Write a Zig function similar to isEmptyText from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/selector.zig","output":"pub fn isEmptyText(_: *const NodeTest) bool {\n        return false;\n    }"}
{"instruction":"Write a Zig function similar to fromOkLabAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn fromOkLabAlpha(self: RgbColorspace, oklab: OklabAlpha, post_conversion_behavior: PostConversionBehavior) Colorf32 {\n        const xyza = oklab.toXYZAlpha();\n        var result = self.fromXYZAlpha(xyza);\n\n        switch (post_conversion_behavior) {\n            .none => {}"}
{"instruction":"Write a Zig function similar to __ixor__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __ixor__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ = self.num_ ^ other.num_;\n        return self;\n    }"}
{"instruction":"Write a Zig struct similar to ThreadPool from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"pub const ThreadPool = struct {\n    allocator: std.mem.Allocator,\n    mutex: std.Thread.Mutex = .{}"}
{"instruction":"Write a Zig function similar to free from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig","output":"fn free(context: *anyopaque, buf: []u8, alignment: std.mem.Alignment, ret_addr: usize) void {\n    const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));\n    this.child_allocator.rawFree(buf, alignment, ret_addr);\n\n    if (comptime Environment.allow_assert) {\n        _ = this.memory_cost.fetchSub(buf.len, .monotonic);\n        log(\"free({d}"}
{"instruction":"Write a Zig function similar to read from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/stream.zig","output":"pub fn read(self: *Self, buffer: []u8) Error!usize {\n        return switch (self.*) {\n            Self.uart => @panic(\"unimplemented\"),\n            Self.socket => |*sock| sock.read(buffer),\n            Self.opened_file => |*f| f.read(buffer),\n            Self.dir => @panic(\"unimplemented\"),\n        }"}
{"instruction":"Write a Zig function similar to makeGameIdToBlueprintIdMap from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"fn makeGameIdToBlueprintIdMap(self: Blueprint, allocator: NeverFailingAllocator) GameIdToBlueprintIdMapType {\n\t\tvar gameIdToBlueprintId: GameIdToBlueprintIdMapType = .init(allocator.allocator);\n\n\t\tfor(self.blocks.mem) |block| {\n\t\t\tconst result = gameIdToBlueprintId.getOrPut(block.typ) catch unreachable;\n\t\t\tif(!result.found_existing) {\n\t\t\t\tresult.value_ptr.* = @intCast(gameIdToBlueprintId.count() - 1);\n\t\t\t}"}
{"instruction":"Write a Zig function similar to deinit from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn deinit(editor: *Editor) !void {\n    if (editor.colors.palette) |*palette| palette.deinit();\n    if (editor.colors.file_tree_palette) |*palette| palette.deinit();\n\n    editor.recents.save(pixi.app.allocator) catch {\n        dvui.log.err(\"Failed to save recents\", .{}"}
{"instruction":"Write a Zig function similar to isModifier from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub fn isModifier(self: Key) bool {\n    return self.codepoint == left_shift or\n        self.codepoint == left_alt or\n        self.codepoint == left_super or\n        self.codepoint == left_hyper or\n        self.codepoint == left_control or\n        self.codepoint == left_meta or\n        self.codepoint == right_shift or\n        self.codepoint == right_alt or\n        self.codepoint == right_super or\n        self.codepoint == right_hyper or\n        self.codepoint == right_control or\n        self.codepoint == right_meta;\n}"}
{"instruction":"Write a Zig const similar to views_path from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: build.zig","output":"const views_path: []const u8 = try std.fs.path.join(\n        b.allocator,\n        &[_][]const u8{ root_path, \"src\", \"app\", \"views\" },\n    );"}
{"instruction":"Write a Zig struct similar to IPv6 from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub const IPv6 = struct {\n        const Self = @This();\n\n        pub const any = std.mem.zeroes(Self);\n        pub const loopback = IPv6.init([1]u8{0}"}
{"instruction":"Write a Zig struct similar to SortContext from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"const SortContext = struct {\n                sub_ctx: @TypeOf(ctx),\n                slice: Slice,\n\n                pub fn swap(sc: @This(), a_index: u32, b_index: u32) void {\n                    inline for (fields, 0..) |field_info, i| {\n                        if (@sizeOf(field_info.type) != 0) {\n                            const field: Field = @enumFromInt(i);\n                            const ptr = sc.slice.items(field);\n                            mem.swap(field_info.type, &ptr[a_index], &ptr[b_index]);\n                        }"}
{"instruction":"Write a Zig function similar to init from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/IdleInhibitor.zig","output":"pub fn init(\n    inhibitor: *IdleInhibitor,\n    wlr_inhibitor: *wlr.IdleInhibitorV1,\n    inhibit_manager: *IdleInhibitManager,\n) !void {\n    inhibitor.* = .{\n        .inhibit_manager = inhibit_manager,\n        .wlr_inhibitor = wlr_inhibitor,\n    }"}
{"instruction":"Write a Zig const similar to directionVec from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const directionVec: Vec3f = @as(Vec3f, @floatCast(self.direction())) + randomnessVec;"}
{"instruction":"Write a Zig function similar to isFaulted from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn isFaulted(self: Self, sock: Socket) bool {\n        if (self.except_fd_set.getSelectPointer()) |ptr| {\n            return windows.funcs.__WSAFDIsSet(sock.internal, ptr) != 0;\n        }"}
{"instruction":"Write a Zig function similar to shouldRetain from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn shouldRetain(c: *Chunk, src: SlotId, dst: SlotId, retain_override: bool) bool {\n    const src_s = getSlot(c, src);\n    const dst_s = getSlot(c, dst);\n    if (!src_s.boxed) {\n        return false;\n    }"}
{"instruction":"Write a Zig function similar to fail from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Lower.zig","output":"pub fn fail(lower: *Lower, comptime format: []const u8, args: anytype) Error {\n    @branchHint(.cold);\n    assert(lower.err_msg == null);\n    lower.err_msg = try std.fmt.allocPrint(lower.gpa, format, args);\n    return error.LowerFail;\n}"}
{"instruction":"Write a Zig function similar to deinit from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DiagnosticsCollection.zig","output":"pub fn deinit(collection: *DiagnosticsCollection) void {\n    for (collection.tag_set.values()) |*entry| {\n        entry.error_bundle.deinit(collection.allocator);\n        if (entry.error_bundle_src_base_path) |src_path| collection.allocator.free(src_path);\n        for (entry.diagnostics_set.keys(), entry.diagnostics_set.values()) |uri, *lsp_diagnostic| {\n            collection.allocator.free(uri);\n            lsp_diagnostic.arena.promote(collection.allocator).deinit();\n            lsp_diagnostic.error_bundle.deinit(collection.allocator);\n        }"}
{"instruction":"Write a Zig function similar to externFuncPtr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn externFuncPtr(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.ExternFunc, 0);\n    return Value.initRaw(@intFromPtr(obj.ptr));\n}"}
{"instruction":"Write a Zig struct similar to ParseOptions from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub const ParseOptions = struct {\n    allocator: std.mem.Allocator,\n    diagnostic: ?*Diagnostic = null,\n\n    /// The assignment separators, which by default is `=`. This is the separator between the name\n    /// of an argument and its value. For `--arg=value`, `arg` is the name and `value` is the value\n    /// if `=` is one of the assignment separators.\n    assignment_separators: []const u8 = default_assignment_separators,\n\n    /// This option makes `clap.parse` and `clap.parseEx` stop parsing after encountering a\n    /// certain positional index. Setting `terminating_positional` to 0 will make them stop\n    /// parsing after the 0th positional has been added to `positionals` (aka after parsing 1\n    /// positional)\n    terminating_positional: usize = std.math.maxInt(usize),\n}"}
{"instruction":"Write a Zig function similar to parseEscape from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/parser.zig","output":"fn parseEscape(p: *Parser, w: anytype) ParseError!void {\n        const sel = p.s;\n        const sel_len = sel.len;\n\n        if (sel_len < p.i + 2 or sel[p.i] != '\\\\') {\n            p.i += 1;\n            w.writeAll(REPLACEMENT_CHARACTER) catch return ParseError.WriteError;\n            return;\n        }"}
{"instruction":"Write a Zig const similar to mute_volume from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const mute_volume: u21 = 57440;"}
{"instruction":"Write a Zig function similar to init from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: src/http/date.zig","output":"pub fn init(ts: i64) Date {\n        return Date{ .ts = ts }"}
{"instruction":"Write a Zig function similar to deinit from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputManager.zig","output":"pub fn deinit(input_manager: *InputManager) void {\n    // This function must be called after the backend has been destroyed\n    assert(input_manager.devices.empty());\n\n    input_manager.new_virtual_pointer.link.remove();\n    input_manager.new_virtual_keyboard.link.remove();\n    input_manager.new_constraint.link.remove();\n    input_manager.new_input_method.link.remove();\n    input_manager.new_text_input.link.remove();\n\n    while (input_manager.seats.pop()) |seat_node| {\n        seat_node.data.deinit();\n        util.gpa.destroy(seat_node);\n    }"}
{"instruction":"Write a Zig struct similar to KeyConfig from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub const KeyConfig = struct {\n    pub const Algorithm = enum { RSA }"}
{"instruction":"Write a Zig struct similar to MultiPartField from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"const MultiPartField = struct {\n        name: []const u8,\n        value: MultiFormKeyValue.Value,\n    }"}
{"instruction":"Write a Zig function similar to set_ipset from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig","output":"fn set_ipset(tag: Tag, name46: []const u8) ?void {\n    if (tag.is_null())\n        return null;\n\n    get(tag).ipset_name46.set(name46);\n}"}
{"instruction":"Write a Zig function similar to eventStreamSync from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn eventStreamSync(_: *Request, res: *Response) !void {\n        res.status = 818;\n        const stream = try res.startEventStreamSync();\n        var w = stream.writer(&.{}"}
{"instruction":"Write a Zig function similar to getOrPutAssumeCapacity from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn getOrPutAssumeCapacity(self: *Self, key: K) Self.GetOrPutResult {\n            return self.getOrPutAssumeCapacityContext(key, undefined);\n        }"}
{"instruction":"Write a Zig function similar to read from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn read(self: *Self, comptime T: type) ReadError!T {\n    var subBuf: [@sizeOf(T)]u8 = undefined;\n    _ = try self.readBuf(&subBuf);\n\n    return mem.bytesToValue(T, &subBuf);\n}"}
{"instruction":"Write a Zig function similar to freeRegIndex from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"fn freeRegIndex(self: *Self, tracked_index: TrackedIndex) void {\n            log.debug(\"freeing register {}"}
{"instruction":"Write a Zig function similar to buildCVM from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"pub fn buildCVM(b: *std.Build, opts: Options) !*std.Build.Step.Compile {\n    const lib = b.addObject(.{\n        .name = \"vm\",\n        .target = rtarget,\n        .optimize = optimize,\n    }"}
{"instruction":"Write a Zig function similar to randomOffset from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn randomOffset(self: BlockDropLocation) Vec3f {\n\t\t\t\tconst max = @min(@as(Vec3f, @splat(1.0)) - itemHitBoxMarginVec, @max(itemHitBoxMarginVec, self.max - itemHitBoxMarginVec));\n\t\t\t\tconst min = @min(max, @max(itemHitBoxMarginVec, self.min + itemHitBoxMarginVec));\n\t\t\t\tconst center = (max + min)*half;\n\t\t\t\tconst width = (max - min)*half;\n\t\t\t\treturn center + width*main.random.nextFloatVectorSigned(3, &main.seed)*half;\n\t\t\t}"}
{"instruction":"Write a Zig function similar to EchoStateMachineType from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/echo_client.zig","output":"fn EchoStateMachineType(comptime StateMachine: type) type {\n    return struct {\n        pub const Operation = StateMachine.Operation;\n        pub const operation_from_vsr = StateMachine.operation_from_vsr;\n\n        pub const EventType = StateMachine.EventType;\n        pub const operation_event_max = StateMachine.operation_event_max;\n        pub const operation_result_max = StateMachine.operation_result_max;\n        pub const operation_result_count_expected = StateMachine.operation_result_count_expected;\n        pub const operation_is_multi_batch = StateMachine.operation_is_multi_batch;\n\n        // Re-exporting functions where results are equal to events.\n        pub const ResultType = StateMachine.EventType;\n        pub const event_size_bytes = StateMachine.event_size_bytes;\n        pub const result_size_bytes = StateMachine.event_size_bytes;\n    }"}
{"instruction":"Write a Zig function similar to AppInit from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/app.zig","output":"pub fn AppInit(win: *dvui.Window) !void {\n    orig_content_scale = win.content_scale;\n    //try dvui.addFont(\"NOTO\", @embedFile(\"../src/fonts/NotoSansKR-Regular.ttf\"), null);\n\n    if (false) {\n        // If you need to set a theme based on the users preferred color scheme, do it here\n        win.theme = switch (win.backend.preferredColorScheme() orelse .light) {\n            .light => dvui.Theme.builtin.adwaita_light,\n            .dark => dvui.Theme.builtin.adwaita_dark,\n        }"}
{"instruction":"Write a Zig function similar to timer_next from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"fn timer_next(next_ms: u64) wasi.timestamp_t {\n        // Get the absolute time we'll execute this timer next.\n        var now_ts: wasi.timestamp_t = undefined;\n        switch (wasi.clock_time_get(@as(u32, @bitCast(posix.CLOCK.MONOTONIC)), 1, &now_ts)) {\n            .SUCCESS => {}"}
{"instruction":"Write a Zig function similar to fromLabAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn fromLabAlpha(self: RgbColorspace, lab: CIELabAlpha, post_conversion_behavior: PostConversionBehavior) Colorf32 {\n        const xyza = lab.toXYZAlpha(self.white);\n\n        var result = self.fromXYZAlpha(xyza);\n\n        switch (post_conversion_behavior) {\n            .none => {}"}
{"instruction":"Write a Zig function similar to writeIdentifier from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/id_render.zig","output":"pub fn writeIdentifier(w: *std.Io.Writer, id: []const u8) !void {\n    try w.print(\"{f}"}
{"instruction":"Write a Zig function similar to pointerGetString from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn pointerGetString(vm: *cy.VM) anyerror!Value {\n    const ptr: [*]const u8 = @ptrCast(vm.getPointer(0));\n    const off: usize = @intCast(vm.getInt(1));\n    const len: usize = @intCast(vm.getInt(2));\n    return vm.allocString(ptr[off..@intCast(off+len)]);\n}"}
{"instruction":"Write a Zig function similar to hid_logical_min from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub fn hid_logical_min(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Global),\n        @intFromEnum(GlobalItem.LogicalMin),\n        data,\n    );\n}"}
{"instruction":"Write a Zig function similar to scanSourceFiles from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: build.zig","output":"fn scanSourceFiles(b: *std.Build) ![]const []const u8 {\n    var buf = std.array_list.Managed([]const u8).init(b.allocator);\n\n    var src_dir = try std.fs.openDirAbsolute(b.pathFromRoot(\"src\"), .{ .iterate = true }"}
{"instruction":"Write a Zig struct similar to DirDest from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_link.zig","output":"pub const DirDest = struct {\n    path: []const u8,\n}"}
{"instruction":"Write a Zig function similar to delete from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn delete(self: *Self, key: K) ?V {\n            return self.deleteContext(key, undefined);\n        }"}
{"instruction":"Write a Zig function similar to write from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn write(self: Self, addr: std.net.Address, buf: xev.WriteBuffer) anyerror!usize {\n        const ResultT = WriteResult;\n        const Data = struct {\n            result: ResultT = undefined,\n            frame: ?Frame = null,\n\n            fn callback(\n                userdata: ?*@This(),\n                l: *xev.Loop,\n                c: *xev.Completion,\n                s: *xev.UDP.State,\n                udp: xev.UDP,\n                b: xev.WriteBuffer,\n                result: ResultT,\n            ) xev.CallbackAction {\n                _ = l;\n                _ = c;\n                _ = s;\n                _ = udp;\n                _ = b;\n                const data = userdata.?;\n                data.result = result;\n                if (data.frame != null) libcoro.xresume(data.frame.?);\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to generateProtocolDeclaration from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateProtocolDeclaration(self: *Self, node: Ast.Node.Index, _: ?*Breaks) Error!?*obj.ObjFunction {\n    const location = self.ast.nodes.items(.location)[node];\n    const components = self.ast.nodes.items(.components)[node].ProtocolDeclaration;\n    const type_def = self.ast.nodes.items(.type_def)[node].?;\n\n    try self.emitConstant(location, type_def.toValue());\n    try self.OP_DEFINE_GLOBAL(location, @intCast(components.slot));\n\n    try self.patchOptJumps(node);\n    try self.endScope(node);\n\n    return null;\n}"}
{"instruction":"Write a Zig function similar to fill from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn fill(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjList.cast(ctx.vm.peek(3).obj()).?;\n    const value = ctx.vm.peek(2);\n    const start: usize = @intCast(\n        @min(\n            @max(\n                0,\n                ctx.vm.peek(1).integerOrNull() orelse 0,\n            ),\n            self.items.items.len - 1,\n        ),\n    );\n    const count: ?usize = if (ctx.vm.peek(0).integerOrNull()) |c|\n        @intCast(@max(0, c))\n    else\n        null;\n\n    const limit: usize = if (count != null and start + count.? < self.items.items.len)\n        start + count.?\n    else\n        self.items.items.len;\n\n    for (start..limit) |i| {\n        self.items.items[i] = value;\n    }"}
{"instruction":"Write a Zig const similar to pipe_flags from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const pipe_flags: posix.O = .{ .CLOEXEC = true };"}
{"instruction":"Write a Zig function similar to tick from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"pub fn tick(self: *Loop, wait: u32) !void {\n        // If we're stopped then the loop is fully over.\n        if (self.flags.stopped) return;\n\n        // We can't nest runs.\n        if (self.flags.in_run) return error.NestedRunsNotAllowed;\n        self.flags.in_run = true;\n        defer self.flags.in_run = false;\n\n        // The list of entry that will be filled with a call to GetQueuedCompletionStatusEx.\n        var entries: [128]windows.OVERLAPPED_ENTRY = undefined;\n\n        var wait_rem = @as(usize, @intCast(wait));\n\n        // Handle all of our cancellations first because we may be able to stop submissions from\n        // even happening if its still queued. Plus, cancellations sometimes add more to the\n        // submission queue.\n        self.process_cancellations();\n\n        // Submit pending completions.\n        try self.submit();\n\n        // Loop condition is inspired from the kqueue backend. See its documentation for details.\n        while (true) {\n            // If we're stopped then the loop is fully over.\n            if (self.flags.stopped) return;\n\n            // We must update our time no matter what.\n            self.update_now();\n\n            const should_continue = (self.active > 0 and (wait == 0 or wait_rem > 0)) or !self.completions.empty();\n            if (!should_continue) break;\n\n            // Run our expired timers.\n            const now_timer: Timer = .{ .next = self.cached_now }"}
{"instruction":"Write a Zig function similar to init from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/Scheduler.zig","output":"pub fn init(allocator: Allocator) Scheduler {\n    return .{\n        .high_priority = Queue.init(allocator, {}"}
{"instruction":"Write a Zig function similar to init from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn init(self: *Self, buf: []const u8) void {\n    self.* = Self{ .off = 0, .buf = buf, .io_reader = undefined }"}
{"instruction":"Write a Zig function similar to extract from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn extract(self: *Self, iter: *[]const u8) !bool {\n    return cbor.matchValue(iter, .{\n        cbor.extract(&self.row),\n        cbor.extract(&self.col),\n        cbor.extract(&self.target),\n    }"}
{"instruction":"Write a Zig function similar to isTypeFunc from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn isTypeFunc(self: Type) bool {\n        return switch (self.data) {\n            .function => |info| info.return_value.is_type_val,\n            else => false,\n        }"}
{"instruction":"Write a Zig function similar to getSource from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn getSource(comp: *const Compilation, id: Source.Id) Source {\n    if (id == .generated) return .{\n        .path = \"<scratch space>\",\n        .buf = comp.generated_buf.items,\n        .id = .generated,\n        .splice_locs = &.{}"}
{"instruction":"Write a Zig function similar to sendDataSlave from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"fn sendDataSlave(data: u8) void {\n    arch.out(SLAVE_DATA_REG, data);\n}"}
{"instruction":"Write a Zig function similar to recv from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn recv(fd: c_int, buf: []u8, flags: c_int) ?usize {\n    const raw = struct {\n        extern fn recv(fd: c_int, buf: [*]u8, len: usize, flags: c_int) isize;\n    }"}
{"instruction":"Write a Zig function similar to get_id from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub fn get_id(name: []const u8) ?ID {\n    var id: ?ID = null;\n    return get_id_cache(name, &id);\n}"}
{"instruction":"Write a Zig function similar to scheduleSlotChange from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/SlotChangeMonitor.zig","output":"fn scheduleSlotChange(self: *SlotChangeMonitor, slot: *parser.Slot) !void {\n    for (self.slots_changed.items) |changed| {\n        if (slot == changed) {\n            return;\n        }"}
{"instruction":"Write a Zig function similar to OP_ADD_MAP from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_ADD_MAP(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_ADD_MAP);\n}"}
{"instruction":"Write a Zig function similar to add from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn add(self: *Weights, other: Weights) void {\n        self.bols += other.bols;\n        self.eols += other.eols;\n        self.len += other.len;\n        self.depth = @max(self.depth, other.depth);\n    }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn callback(ud: ?*anyopaque, l: *Loop, c: *Completion, r: Result) CallbackAction {\n                _ = l;\n                _ = c;\n                _ = r.send catch unreachable;\n                _ = ud;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to make from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"fn make(step: *std.Build.Step, _: std.Build.Step.MakeOptions) anyerror!void {\n        const self: *PrintStep = @fieldParentPtr(\"step\", step);\n        std.io.getStdOut().writer().writeAll(self.str) catch unreachable;\n    }"}
{"instruction":"Write a Zig function similar to addDependencies from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: build.zig","output":"fn addDependencies(b: *Build, mod: *Build.Module, opts: *Build.Step.Options) !void {\n    try moduleNetSurf(b, mod);\n    mod.addImport(\"build_config\", opts.createModule());\n\n    const target = mod.resolved_target.?;\n    const dep_opts = .{\n        .target = target,\n        .optimize = mod.optimize.?,\n    }"}
{"instruction":"Write a Zig struct similar to ModernBertAttention from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertAttention = struct {\n    Wqkv: zml.nn.Linear,\n    Wo: zml.nn.Linear,\n    is_global_attention: bool = false,\n    num_heads: i64 = undefined,\n\n    /// sdpa_attention_forward\n    pub fn forward(\n        self: ModernBertAttention,\n        hidden_states: Tensor,\n        global_mask: Tensor,\n        local_mask: Tensor,\n    ) Tensor {\n        const batch_size = hidden_states.shape().dim(0);\n        const seq_length = hidden_states.shape().dim(1);\n        const hidden_size = hidden_states.shape().dim(2);\n        const num_heads = self.num_heads;\n        const head_dim = @divExact(hidden_size, num_heads);\n\n        // Project to query, key, value - { batch_size, seq_len, 3 * num_heads * head_dim }"}
{"instruction":"Write a Zig function similar to generateInteger from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateInteger(self: *Self, node: Ast.Node.Index, _: ?*Breaks) Error!?*obj.ObjFunction {\n    try self.emitConstant(\n        self.ast.nodes.items(.location)[node],\n        try self.ast.toValue(node, self.gc),\n    );\n\n    try self.patchOptJumps(node);\n    try self.endScope(node);\n\n    return null;\n}"}
{"instruction":"Write a Zig function similar to colorize from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn colorize(color: std.io.tty.Color, buf: []u8, input: []const u8, is_colorized: bool) ![]const u8 {\n    if (!is_colorized) return input;\n\n    const config: std.io.tty.Config = .escape_codes;\n    var stream = std.io.fixedBufferStream(buf);\n    const writer = stream.writer();\n    try config.setColor(writer, color);\n    try writer.writeAll(input);\n    try config.setColor(writer, .reset);\n\n    return stream.getWritten();\n}"}
{"instruction":"Write a Zig function similar to build from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: build.zig","output":"pub fn build(b: *std.Build) void {\n    b.reference_trace = 256;\n\n    const target = b.standardTargetOptions(.{}"}
{"instruction":"Write a Zig function similar to isRetainedLocal from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn isRetainedLocal(self: GenValue) bool {\n        return self.type == .local and self.retained;\n    }"}
{"instruction":"Write a Zig const similar to umountRet from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/main.zig","output":"const umountRet: i64 = @bitCast(std.os.linux.umount(path));"}
{"instruction":"Write a Zig function similar to setupTestStep from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig","output":"fn setupTestStep(\n    b: *std.Build,\n    superhtml: *std.Build.Module,\n    check: *std.Build.Step,\n) void {\n    const test_step = b.step(\"test\", \"Run unit tests\");\n    test_step.dependOn(check);\n\n    const unit_tests = b.addTest(.{\n        .root_module = superhtml,\n        .filters = b.args orelse &.{}"}
{"instruction":"Write a Zig function similar to print_pkg_data_to from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/fetch.zig","output":"fn print_pkg_data_to(w: std.fs.File.Writer, notdone: *std.ArrayList(zigmod.Module), done: *std.ArrayList(zigmod.Module)) !void {\n    var len: usize = notdone.items.len;\n    while (notdone.items.len > 0) {\n        for (notdone.items, 0..) |mod, i| {\n            if (contains_all(mod.deps, done.items)) {\n                try w.print(\n                    \\\\    pub var _{s}"}
{"instruction":"Write a Zig function similar to render from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/generator.zig","output":"fn render(self: *Generator, writer: *std.Io.Writer) !void {\n        try renderRegistry(writer, self.arena.allocator(), &self.registry, &self.id_renderer, self.have_video);\n    }"}
{"instruction":"Write a Zig function similar to walk_tree_done_callback from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn walk_tree_done_callback(parent: tp.pid_ref, root_path: []const u8) error{Exit}"}
{"instruction":"Write a Zig function similar to init from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_exports.zig","output":"pub fn init(\n    tb_client_out: *tb_client_t,\n    cluster_id_ptr: *const [16]u8,\n    addresses_ptr: [*:0]const u8,\n    addresses_len: u32,\n    completion_ctx: usize,\n    completion_callback: tb_completion_t,\n) callconv(.c) tb_init_status {\n    const addresses = @as([*]const u8, @ptrCast(addresses_ptr))[0..addresses_len];\n\n    // Passing u128 by value is prone to ABI issues. Pass as a [16]u8, and explicitly copy into\n    // memory we know will be aligned correctly. Don't just use bytesToValue here, as that keeps\n    // pointer alignment, and will result in a potentially unaligned access of a\n    // `*align(1) const u128`.\n    const cluster_id: u128 = blk: {\n        var cluster_id: u128 = undefined;\n        stdx.copy_disjoint(.exact, u8, std.mem.asBytes(&cluster_id), cluster_id_ptr);\n\n        break :blk cluster_id;\n    }"}
{"instruction":"Write a Zig const similar to tm from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const tm: windows.timeval = if (timeout) |tout| block: {\n                const secs = @divFloor(tout, std.time.ns_per_s);"}
{"instruction":"Write a Zig struct similar to AsyncThread from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub const AsyncThread = struct {\n    threadlocal var current: *AsyncThread = undefined;\n\n    executor: *aio.Executor,\n    stack_allocator: *stack.StackAllocator,\n    loop: *xev.Loop,\n    thread_pool: *XevThreadPool,\n    async_notifier: *xev.Async,\n    waiters_queue: *threading.WaiterQueue,\n\n    pub fn wake(self: *const AsyncThread) void {\n        self.async_notifier.notify() catch {}"}
{"instruction":"Write a Zig function similar to setSampleRate from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"fn setSampleRate(self: *@This(), sample_rate: i32) void {\n        self.phaseIncrement = (std.math.tau * self.frequency) / @as(f64, @floatFromInt(sample_rate));\n    }"}
{"instruction":"Write a Zig const similar to IS_CONSUMING from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"const IS_CONSUMING: usize = 0b10;"}
{"instruction":"Write a Zig function similar to commandLine from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn commandLine(self: *WindowsCommandLineCache) ![:0]u16 {\n        if (self.cmd_line == null) {\n            self.cmd_line = try argvToCommandLineWindows(self.allocator, self.argv);\n        }"}
{"instruction":"Write a Zig function similar to desc from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig","output":"fn desc(m: Modifier) [:0]const u8 {\n        return if (m == .none) \"\" else @tagName(m);\n    }"}
{"instruction":"Write a Zig struct similar to HidDescriptor from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const HidDescriptor = struct {\n    pub const const_descriptor_type = HidDescType.Hid;\n\n    length: u8 = 9,\n    /// Type of this descriptor\n    descriptor_type: HidDescType = const_descriptor_type,\n    /// Numeric expression identifying the HID Class Specification release\n    bcd_hid: u16 align(1),\n    /// Numeric expression identifying country code of the localized hardware\n    country_code: u8,\n    /// Numeric expression specifying the number of class descriptors\n    num_descriptors: u8,\n    /// Type of HID class report\n    report_type: HidDescType = HidDescType.Report,\n    /// The total size of the Report descriptor\n    report_length: u16 align(1),\n\n    pub fn serialize(self: *const @This()) [9]u8 {\n        var out: [9]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intCast(self.bcd_hid & 0xff);\n        out[3] = @intCast((self.bcd_hid >> 8) & 0xff);\n        out[4] = self.country_code;\n        out[5] = self.num_descriptors;\n        out[6] = @intFromEnum(self.report_type);\n        out[7] = @intCast(self.report_length & 0xff);\n        out[8] = @intCast((self.report_length >> 8) & 0xff);\n        return out;\n    }"}
{"instruction":"Write a Zig function similar to touchFunction from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn touchFunction(self: Block) ?*const TouchFunction {\n\t\treturn _touchFunction[self.typ];\n\t}"}
{"instruction":"Write a Zig function similar to registerBlockDrop from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn registerBlockDrop(typ: u16, zon: ZonElement) void {\n\tconst drops = zon.getChild(\"drops\").toSlice();\n\t_blockDrops[typ] = arena.alloc(BlockDrop, drops.len);\n\n\tfor(drops, 0..) |blockDrop, i| {\n\t\t_blockDrops[typ][i].chance = blockDrop.get(f32, \"chance\", 1);\n\t\tconst itemZons = blockDrop.getChild(\"items\").toSlice();\n\t\tvar resultItems = main.List(items.ItemStack).initCapacity(main.stackAllocator, itemZons.len);\n\t\tdefer resultItems.deinit();\n\n\t\tfor(itemZons) |itemZon| {\n\t\t\tvar string = itemZon.as([]const u8, \"auto\");\n\t\t\tstring = std.mem.trim(u8, string, \" \");\n\t\t\tvar iterator = std.mem.splitScalar(u8, string, ' ');\n\t\t\tvar name = iterator.first();\n\t\t\tvar amount: u16 = 1;\n\t\t\twhile(iterator.next()) |next| {\n\t\t\t\tif(next.len == 0) continue; // skip multiple spaces.\n\t\t\t\tamount = std.fmt.parseInt(u16, name, 0) catch 1;\n\t\t\t\tname = next;\n\t\t\t\tbreak;\n\t\t\t}"}
{"instruction":"Write a Zig function similar to len from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn len(self: PixelStorage) usize {\n        return switch (self) {\n            .invalid => 0,\n            .indexed1 => |data| data.indices.len,\n            .indexed2 => |data| data.indices.len,\n            .indexed4 => |data| data.indices.len,\n            .indexed8 => |data| data.indices.len,\n            .indexed16 => |data| data.indices.len,\n            .grayscale1 => |data| data.len,\n            .grayscale2 => |data| data.len,\n            .grayscale4 => |data| data.len,\n            .grayscale8 => |data| data.len,\n            .grayscale8Alpha => |data| data.len,\n            .grayscale16 => |data| data.len,\n            .grayscale16Alpha => |data| data.len,\n            .rgb24 => |data| data.len,\n            .rgba32 => |data| data.len,\n            .rgb332 => |data| data.len,\n            .rgb565 => |data| data.len,\n            .rgb555 => |data| data.len,\n            .bgr555 => |data| data.len,\n            .bgr24 => |data| data.len,\n            .bgra32 => |data| data.len,\n            .rgb48 => |data| data.len,\n            .rgba64 => |data| data.len,\n            .float32 => |data| data.len,\n        }"}
{"instruction":"Write a Zig const similar to B_COEFF_VEC from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const B_COEFF_VEC: @Vector(SIMD_SIZE, u32) = @splat(B_COEFF);"}
{"instruction":"Write a Zig function similar to open_scratch from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Manager.zig","output":"pub fn open_scratch(self: *Self, file_path: []const u8, content: []const u8) Buffer.LoadError!*Buffer {\n    const buffer = if (self.buffers.get(file_path)) |buffer| buffer else blk: {\n        var buffer = try Buffer.create(self.allocator);\n        errdefer buffer.deinit();\n        try buffer.load_from_string_and_update(file_path, content);\n        buffer.file_exists = true;\n        try self.add_buffer(buffer);\n        break :blk buffer;\n    }"}
{"instruction":"Write a Zig struct similar to ZigAllocator from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: ffi/zig_allocator.zig","output":"pub const ZigAllocator = struct {\n    pub inline fn from(allocator: std.mem.Allocator) c.zig_allocator {\n        return .{\n            .ctx = @ptrCast(@alignCast(&allocator)),\n            .alloc = &alloc,\n            .free = &free,\n        }"}
{"instruction":"Write a Zig function similar to getString from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"pub fn getString(pool: *Pool, str: []const u8) ?String {\n            assert(std.mem.indexOfScalar(u8, str, 0) == null);\n\n            // precompute the hash before acquiring the lock\n            const precomputed_key_hash = std.hash_map.hashString(str);\n\n            pool.mutex.lock();\n            defer pool.mutex.unlock();\n\n            const adapter: PrecomputedStringIndexAdapter = .{\n                .bytes = &pool.bytes,\n                .adapted_key = str,\n                .precomputed_key_hash = precomputed_key_hash,\n            }"}
{"instruction":"Write a Zig function similar to calculatePixelColorDelta from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"pub fn calculatePixelColorDelta(pixel_a: u32, pixel_b: u32) f64 {\n    const decoded_a = blendSemiTransparentPixel(decodeRawPixel(pixel_a));\n    const decoded_b = blendSemiTransparentPixel(decodeRawPixel(pixel_b));\n\n    const y = rgb2y(decoded_a) - rgb2y(decoded_b);\n    const i = rgb2i(decoded_a) - rgb2i(decoded_b);\n    const q = rgb2q(decoded_a) - rgb2q(decoded_b);\n\n    return (YIQ_Y_WEIGHT * y * y) + (YIQ_I_WEIGHT * i * i) + (YIQ_Q_WEIGHT * q * q);\n}"}
{"instruction":"Write a Zig function similar to getWatchDirs from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/Assets.zig","output":"pub fn getWatchDirs(assets: *Assets, allocator: std.mem.Allocator) ![]const []const u8 {\n    var out_dirs = std.ArrayList([]const u8).init(allocator);\n\n    var paths = assets.paths.slice();\n    path_blk: while (paths.next()) |id| {\n        if (std.fs.path.dirname(paths.objs.get(id, .value))) |new_dir| {\n            for (out_dirs.items) |dir| {\n                if (std.mem.eql(u8, dir, new_dir)) {\n                    continue :path_blk;\n                }"}
{"instruction":"Write a Zig function similar to tryCraftingTo from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn tryCraftingTo(self: *Command, allocator: NeverFailingAllocator, dest: Inventory, source: InventoryAndSlot, side: Side, user: ?*main.server.User) void { // MARK: tryCraftingTo()\n\t\tstd.debug.assert(source.inv.type == .crafting);\n\t\tstd.debug.assert(dest.type == .normal);\n\t\tif(source.slot != source.inv._items.len - 1) return;\n\t\tif(!dest.canHold(source.ref().*)) return;\n\t\tif(source.ref().item == null) return; // Can happen if the we didn't receive the inventory information from the server yet.\n\n\t\tconst playerInventory: Inventory = switch(side) {\n\t\t\t.client => main.game.Player.inventory,\n\t\t\t.server => blk: {\n\t\t\t\tif(user) |_user| {\n\t\t\t\t\tvar it = _user.inventoryClientToServerIdMap.valueIterator();\n\t\t\t\t\twhile(it.next()) |serverId| {\n\t\t\t\t\t\tconst serverInventory = &Sync.ServerSide.inventories.items[@intFromEnum(serverId.*)];\n\t\t\t\t\t\tif(serverInventory.source == .playerInventory)\n\t\t\t\t\t\t\tbreak :blk serverInventory.inv;\n\t\t\t\t\t}"}
{"instruction":"Write a Zig function similar to fromSlice from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn fromSlice(comptime T: type, s: Slice) []const T {\n    if (s.len == 0) {\n        return &.{}"}
{"instruction":"Write a Zig function similar to onUnloadClient from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"fn onUnloadClient(self: *BlockEntityType, dataIndex: BlockEntityIndex) void {\n\t\treturn self.vtable.onUnloadClient(dataIndex);\n\t}"}
{"instruction":"Write a Zig function similar to genConstFloat from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genConstFloat(c: *Chunk, val: f64, dst: LocalId, node: *ast.Node) !GenValue {\n    const idx = try c.buf.getOrPushConst(cy.Value.initF64(val));\n    try genConst(c, idx, dst, false, node);\n    return regValue(c, dst, false);\n}"}
{"instruction":"Write a Zig const similar to self from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"const self: *Self = @ptrCast(@alignCast(ud));"}
{"instruction":"Write a Zig function similar to sliceToXYZAlphaCopy from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn sliceToXYZAlphaCopy(self: RgbColorspace, allocator: std.mem.Allocator, colors: []const Colorf32) ![]CIEXYZAlpha {\n        const slice_xyza: []CIEXYZAlpha = try allocator.alloc(CIEXYZAlpha, colors.len);\n\n        for (0..colors.len) |index| {\n            slice_xyza[index] = CIEXYZAlpha.fromFloat4(self.rgba_to_xyza.mulVector(colors[index].to.float4()));\n        }"}
{"instruction":"Write a Zig function similar to main from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: examples/_basic.zig","output":"pub fn main() !void {\n    // Initialize the loop state. Notice we can use a stack-allocated\n    // value here. We can even pass around the loop by value! The loop\n    // will contain all of our \"completions\" (watches).\n    var loop = try xev.Loop.init(.{}"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn decode(decoder: *Decoder) Decoder.Error!@This() {\n            const consumer_tag = try decoder.read_short_string();\n            const bitset_1: stdx.BitSetType(8) = .{ .bits = try decoder.read_int(u8) }"}
{"instruction":"Write a Zig function similar to runtimeBlack from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn runtimeBlack(allocator: std.mem.Allocator, message: []const u8) ![]const u8 {\n    return try runtimeWrap(allocator, codes.black, message);\n}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn callback(ud: ?*anyopaque, l: *Loop, c: *Completion, r: Result) CallbackAction {\n                _ = l;\n                _ = c;\n                const ptr = @as(*?bool, @ptrCast(@alignCast(ud.?)));\n                ptr.* = if (r.recv) |_| false else |err| switch (err) {\n                    error.EOF => true,\n                    else => false,\n                }"}
{"instruction":"Write a Zig function similar to refreshWithHeldLock from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig","output":"fn refreshWithHeldLock(self: *Progress) void {\n    const is_dumb = !self.supports_ansi_escape_codes and !self.is_windows_terminal;\n    if (is_dumb and self.dont_print_on_dumb) return;\n\n    const file = self.terminal orelse return;\n\n    var end: usize = 0;\n    clearWithHeldLock(self, &end);\n\n    if (!self.done) {\n        var need_ellipse = false;\n        var maybe_node: ?*Node = &self.root;\n        while (maybe_node) |node| {\n            if (need_ellipse) {\n                self.bufWrite(&end, \"... \", .{}"}
{"instruction":"Write a Zig function similar to getSlotByKey from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"fn getSlotByKey(self: Map, key: anytype, header: *IndexHeader, comptime I: type, indexes: []Index(I)) ?u32 {\n    const slice = self.entries.slice();\n    const hashes_array = slice.items(.hash);\n    const keys_array = slice.items(.key);\n    const h = key.hash();\n\n    const start_index = h;\n    const end_index = start_index +% indexes.len;\n\n    var index = start_index;\n    var distance_from_start_index: I = 0;\n    while (index != end_index) : ({\n        index +%= 1;\n        distance_from_start_index += 1;\n    }"}
{"instruction":"Write a Zig function similar to refToIndex from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Bytecode.zig","output":"fn refToIndex(r: Ref, params: u32) u32 {\n    return @intFromEnum(r) - params;\n}"}
{"instruction":"Write a Zig function similar to imm64 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn imm64(self: Self, imm: u64) !void {\n            try self.writer.writeInt(u64, imm, .little);\n        }"}
{"instruction":"Write a Zig function similar to send from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"fn send(self: *Client) void {\n        switch (self.awaiter) {\n            .send_and_forget,\n            .send_and_await_reply,\n            => {\n                self.io.send(\n                    *Client,\n                    self,\n                    send_callback,\n                    &self.send_completion,\n                    self.fd,\n                    self.send_buffer.flush(),\n                );\n            }"}
{"instruction":"Write a Zig function similar to clearAttribute from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"fn clearAttribute(val: *align(1) u32, attr: u32) void {\n    val.* &= ~attr;\n}"}
{"instruction":"Write a Zig function similar to matchDistance from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/Token.zig","output":"pub fn matchDistance(code: u8) MatchDistance {\n    return match_distances[code];\n}"}
{"instruction":"Write a Zig function similar to isString from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/Odin.zig","output":"fn isString(params: *const encoding.Params) ?u64 {\n    // null-terminated c strings\n    if (params.data_type.form == .pointer and strings.eql(params.data_type_name, \"cstring\")) {\n        return 0;\n    }"}
{"instruction":"Write a Zig function similar to check_terminated from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig","output":"fn check_terminated() void {\n    const top_frame = _terminated orelse return;\n    _terminated = null;\n\n    // https://github.com/ziglang/zig/issues/10622\n    const ptr = @intToPtr([*]u8, @ptrToInt(top_frame));\n    return g.allocator.free(ptr[0.._frame_size]);\n}"}
{"instruction":"Write a Zig function similar to parseDefines from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn parseDefines(\n    allocator: Allocator,\n    types: *xml.Element,\n    api: registry.Api,\n    api_constants: *std.ArrayList(registry.ApiConstant),\n) !void {\n    var it = types.findChildrenByTag(\"type\");\n    while (it.next()) |ty| {\n        if (!requiredByApi(ty, api))\n            continue;\n\n        const category = ty.getAttribute(\"category\") orelse continue;\n        if (!mem.eql(u8, category, \"define\")) {\n            continue;\n        }"}
{"instruction":"Write a Zig function similar to run from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn run(self: TakeHalf, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, gamemode: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig const similar to end_jump from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"const end_jump: usize = try self.OP_JUMP(locations[node]);"}
{"instruction":"Write a Zig struct similar to AddHealth from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const AddHealth = struct { // MARK: AddHealth\n\t\ttarget: u32,\n\t\thealth: f32,\n\t\tcause: main.game.DamageType,\n\n\t\tpub fn run(self: AddHealth, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig function similar to elemToToken from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"fn elemToToken(elem: *xml.Element) !?Token {\n        // Sometimes we encounter empty comment tags. Filter those out\n        // by early returning here, otherwise the next check will\n        // determine that the input is not valid XML.\n        if (mem.eql(u8, elem.tag, \"comment\")) {\n            return null;\n        }"}
{"instruction":"Write a Zig struct similar to Pair from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const Pair = struct {\n        actual: Index, // type\n        wanted: Index, // type\n    }"}
{"instruction":"Write a Zig const similar to layer_surface from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/LayerSurface.zig","output":"const layer_surface: *LayerSurface = @fieldParentPtr(\"new_popup\", listener);"}
{"instruction":"Write a Zig function similar to enableDebug from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"pub fn enableDebug() void {\n    const extensions = std.mem.span(c.glGetString(c.GL_EXTENSIONS));\n    if (std.mem.indexOf(u8, extensions, \"GL_KHR_debug\") != null) {\n        c.glEnable(c.GL_DEBUG_OUTPUT_KHR);\n        c.glEnable(c.GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR);\n\n        const glDebugMessageControl = @as(c.PFNGLDEBUGMESSAGECONTROLKHRPROC, @ptrCast(c.eglGetProcAddress(\"glDebugMessageControl\"))).?;\n        glDebugMessageControl(c.GL_DONT_CARE, c.GL_DONT_CARE, c.GL_DEBUG_SEVERITY_NOTIFICATION_KHR, 0, null, c.GL_TRUE);\n\n        const glDebugMessageCallback = @as(c.PFNGLDEBUGMESSAGECALLBACKKHRPROC, @ptrCast(c.eglGetProcAddress(\"glDebugMessageCallback\"))).?;\n        glDebugMessageCallback(debugMessageCallback, null);\n    }"}
{"instruction":"Write a Zig function similar to remove from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Data.zig","output":"pub fn remove(self: *Data, gpa: std.mem.Allocator, key: Key) std.mem.Allocator.Error!void {\n    self.mutex.lock();\n    defer self.mutex.unlock();\n    try self.trash.ensureUnusedCapacity(gpa, 1);\n\n    if (self.storage.fetchRemove(key)) |dd| {\n        self.trash.appendAssumeCapacity(dd.value);\n    }"}
{"instruction":"Write a Zig function similar to byteAnd from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn byteAnd(vm: *cy.VM) Value {\n    return Value.initByte(vm.getByte(0) & vm.getByte(1));\n}"}
{"instruction":"Write a Zig function similar to middleware from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn middleware(self: *Self, comptime M: type, config: M.Config) !Middleware(H) {\n            const arena = self.arena;\n\n            const node = try arena.create(MiddlewareItem);\n            errdefer arena.destroy(node);\n\n            const m = try arena.create(M);\n            errdefer arena.destroy(m);\n            switch (comptime @typeInfo(@TypeOf(M.init)).@\"fn\".params.len) {\n                1 => m.* = try M.init(config),\n                2 => m.* = try M.init(config, MiddlewareConfig{\n                    .arena = arena,\n                    .allocator = self.allocator,\n                }"}
{"instruction":"Write a Zig struct similar to NamedArg from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"const NamedArg = struct {\n    name_pos: u32 align(8),\n    name_len: u32,\n    arg: *Node,\n}"}
{"instruction":"Write a Zig function similar to eqlNoLock from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn eqlNoLock(a: Key, b: Key, ip: *const InternPool) bool {\n        return eqlCustom(a, b, @constCast(ip), false);\n    }"}
{"instruction":"Write a Zig function similar to generateObjectDeclaration from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateObjectDeclaration(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n    const type_defs = self.ast.nodes.items(.type_def);\n    const lexemes = self.ast.tokens.items(.lexeme);\n    const components = self.ast.nodes.items(.components)[node].ObjectDeclaration;\n    const location = locations[node];\n\n    const object_type = type_defs[node].?;\n    const object_def = object_type.resolved_type.?.Object;\n\n    // Check object conforms to declared protocols\n    var protocol_it = object_def.conforms_to.iterator();\n    while (protocol_it.next()) |kv| {\n        const protocol_type_def = kv.key_ptr.*;\n\n        if (protocol_type_def.def_type == .Placeholder) {\n            self.reporter.reportPlaceholder(self.ast, protocol_type_def.resolved_type.?.Placeholder);\n        }"}
{"instruction":"Write a Zig function similar to getOnClickListener from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/invocationhandler/main.zig","output":"fn getOnClickListener(self: *AndroidApp, jni: *JNI) !android.jobject {\n        // Get class loader instance\n        const ActivityClass = try jni.findClass(\"android/app/NativeActivity\");\n        const cls = try ActivityClass.callObjectMethod(self.activity.clazz, \"getClassLoader\", \"()Ljava/lang/ClassLoader;\", .{}"}
{"instruction":"Write a Zig struct similar to vector_size from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const vector_size = struct {\n        bytes: u32, // TODO: validate \"The bytes argument must be a positive power-of-two multiple of the base type size\"\n\n    }"}
{"instruction":"Write a Zig function similar to run from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn run(self: AddHealth, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig function similar to class from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub fn class(reg: Register) Class {\n        return switch (@intFromEnum(reg)) {\n            // zig fmt: off\n            @intFromEnum(Register.rax)  ... @intFromEnum(Register.r15)   => .general_purpose,\n            @intFromEnum(Register.eax)  ... @intFromEnum(Register.r15d)  => .general_purpose,\n            @intFromEnum(Register.ax)   ... @intFromEnum(Register.r15w)  => .general_purpose,\n            @intFromEnum(Register.al)   ... @intFromEnum(Register.r15b)  => .general_purpose,\n            @intFromEnum(Register.ah)   ... @intFromEnum(Register.bh)    => .general_purpose,\n\n            @intFromEnum(Register.ymm0) ... @intFromEnum(Register.ymm15) => .sse,\n            @intFromEnum(Register.xmm0) ... @intFromEnum(Register.xmm15) => .sse,\n            @intFromEnum(Register.mm0)  ... @intFromEnum(Register.mm7)   => .mmx,\n            @intFromEnum(Register.st0)  ... @intFromEnum(Register.st7)   => .x87,\n\n            @intFromEnum(Register.es)   ... @intFromEnum(Register.gs)    => .segment,\n\n            else => unreachable,\n            // zig fmt: on\n        }"}
{"instruction":"Write a Zig function similar to set from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/classes.zig","output":"pub fn set(prop: *Prop, value: py.PyString) !void {\n            const self: *Self = @fieldParentPtr(\"email\", prop);\n            if (std.mem.indexOfScalar(u8, try value.asSlice(), '@') == null) {\n                return py.ValueError(root).raiseFmt(\"Invalid email address for {s}"}
{"instruction":"Write a Zig function similar to bitcast from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn bitcast(vm: *cy.VM) anyerror!Value {\n    const dst_t: cy.TypeId = @intCast(vm.getInt(0));\n    const src_t: cy.TypeId = @intCast(vm.getInt(2));\n    if (vm.c.types[src_t].kind != .int or vm.c.types[dst_t].kind != .int) {\n        return error.InvalidArgument;\n    }"}
{"instruction":"Write a Zig function similar to backgroundWorker from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"fn backgroundWorker(self: *ThreadPool) void {\n        var w = Worker{ .pool = self }"}
{"instruction":"Write a Zig function similar to asFile from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn asFile(self: File) std.fs.File {\n        return .{ .handle = self._handle }"}
{"instruction":"Write a Zig function similar to fromHSLuv from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn fromHSLuv(self: RgbColorspace, hsluv: HSLuv, post_conversion_behavior: PostConversionBehavior) Colorf32 {\n        const lch = hsluv.toCIELCHuv(self.xyza_to_rgba);\n\n        return self.fromLCHuv(lch, post_conversion_behavior);\n    }"}
{"instruction":"Write a Zig const similar to f19 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f19: u21 = 57382;"}
{"instruction":"Write a Zig function similar to create from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pci.zig","output":"pub fn create(pci_device: PciDevice, function: u3) Error!PciDeviceInfo {\n        const vender_id = pci_device.configReadData(function, .VenderId);\n\n        // No function available, try the next\n        if (vender_id == 0xFFFF) {\n            return Error.NoFunction;\n        }"}
{"instruction":"Write a Zig function similar to destroyPopups from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/LayerSurface.zig","output":"pub fn destroyPopups(layer_surface: *LayerSurface) void {\n    var it = layer_surface.wlr_layer_surface.popups.safeIterator(.forward);\n    while (it.next()) |wlr_xdg_popup| wlr_xdg_popup.destroy();\n}"}
{"instruction":"Write a Zig struct similar to TickEvent from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub const TickEvent = struct {\n\tfunction: *const TickFunction,\n\tchance: f32,\n\n\tpub fn loadFromZon(zon: ZonElement) ?TickEvent {\n\t\tconst functionName = zon.get(?[]const u8, \"name\", null) orelse return null;\n\n\t\tconst function = tickFunctions.getFunctionPointer(functionName) orelse {\n\t\t\tstd.log.err(\"Could not find TickFunction {s}"}
{"instruction":"Write a Zig struct similar to DvuiModuleOptions from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: build.zig","output":"const DvuiModuleOptions = struct {\n    b: *std.Build,\n    target: std.Build.ResolvedTarget,\n    optimize: std.builtin.OptimizeMode,\n    check_step: ?*std.Build.Step = null,\n    test_step: ?*std.Build.Step = null,\n    test_filters: []const []const u8,\n    add_stb_image: bool = true,\n    use_lld: ?bool = null,\n    accesskit: AccesskitOptions = .off,\n    build_options: *std.Build.Step.Options,\n\n    fn addChecks(self: *const @This(), mod: *std.Build.Module, name: []const u8) void {\n        const tests = self.b.addTest(.{ .root_module = mod, .name = self.b.fmt(\"{s}"}
{"instruction":"Write a Zig struct similar to CodepointCountingWriter from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/codepoint_counting_writer.zig","output":"pub const CodepointCountingWriter = struct {\n    codepoints_written: u64 = 0,\n    child_stream: *std.Io.Writer,\n    interface: std.Io.Writer = .{\n        .buffer = &.{}"}
{"instruction":"Write a Zig struct similar to DummyWebsocketHandler from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub const DummyWebsocketHandler = struct {\n    pub fn clientMessage(_: DummyWebsocketHandler, _: []const u8) !void {}"}
{"instruction":"Write a Zig function similar to prepThrowZError2 from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn prepThrowZError2(ctx: cy.Context, err: anyerror, optTrace: ?*std.builtin.StackTrace) rt.Error {\n    if (!cy.isFreestanding and C.verbose()) {\n        if (optTrace) |trace| {\n            std.debug.dumpStackTrace(trace.*);\n        }"}
{"instruction":"Write a Zig function similar to _getRandomValues from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/crypto/crypto.zig","output":"pub fn _getRandomValues(_: *const Crypto, js_obj: js.Object) !js.Object {\n        var into = try js_obj.toZig(Crypto, \"getRandomValues\", RandomValues);\n        const buf = into.asBuffer();\n        if (buf.len > 65_536) {\n            return error.QuotaExceededError;\n        }"}
{"instruction":"Write a Zig const similar to day_names from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: src/http/date.zig","output":"const day_names: []const []const u8 = &.{\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\",\n    \"Sun\",\n};"}
{"instruction":"Write a Zig function similar to empty_reply from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn empty_reply(msg: []u8, qnamelen: c_int) []u8 {\n    const len = c.dns_empty_reply(msg.ptr, qnamelen);\n    return msg[0..len];\n}"}
{"instruction":"Write a Zig struct similar to LayoutPoint from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const LayoutPoint = struct {\n    lx: f64,\n    ly: f64,\n}"}
{"instruction":"Write a Zig function similar to hash from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn hash(self: SetContext, item: ReferencedType) u32 {\n            _ = self;\n            var hasher: std.hash.Wyhash = .init(0);\n            hasher.update(item.str);\n            hasher.update(item.handle.uri);\n            hasher.update(&std.mem.toBytes(item.token));\n            return @truncate(hasher.final());\n        }"}
{"instruction":"Write a Zig function similar to fromOkLCh from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn fromOkLCh(self: RgbColorspace, lch: OkLCh, post_conversion_behavior: PostConversionBehavior) Colorf32 {\n        return self.fromOkLab(lch.toOklab(), post_conversion_behavior);\n    }"}
{"instruction":"Write a Zig const similar to base from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"const base: w.rights_t = w.RIGHT.FD_WRITE |\n            w.RIGHT.FD_READ |\n            w.RIGHT.FD_DATASYNC |\n            w.RIGHT.FD_SEEK |\n            w.RIGHT.FD_TELL |\n            w.RIGHT.FD_FDSTAT_SET_FLAGS |\n            w.RIGHT.FD_SYNC |\n            w.RIGHT.FD_ALLOCATE |\n            w.RIGHT.FD_ADVISE |\n            w.RIGHT.FD_FILESTAT_SET_TIMES |\n            w.RIGHT.FD_FILESTAT_SET_SIZE |\n            w.RIGHT.FD_FILESTAT_GET |\n            w.RIGHT.POLL_FD_READWRITE;"}
{"instruction":"Write a Zig const similar to log_scope_levels from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: build.zig","output":"pub const log_scope_levels: []const std.log.ScopeLevel = &.{{}};"}
{"instruction":"Write a Zig function similar to channel from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn channel(comptime T: type, len: usize, comptime capacity: usize) Channel(T, capacity) {\n    return Channel(T, capacity).initWithLen(len);\n}"}
{"instruction":"Write a Zig struct similar to CoroId from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"const CoroId = struct {\n    coro: usize,\n\n    pub const InvocationId = if (builtin.mode == .Debug) DebugInvocationId else DummyInvocationId;\n\n    const DummyInvocationId = struct {\n        fn init(id: CoroId) @This() {\n            _ = id;\n            return .{}"}
{"instruction":"Write Zig 0.13.0 code for: Zero Bit Types §","input":"For some types, @sizeOf is 0: void The Integers u0 and i0 . Arrays and Vectors with len 0, or with an element type that is a zero bit type. An enum with only 1 tag. A struct with all fields being zero bit types. A union with only 1 field which is a zero bit type. These types can only ever have one possible value, and thus require 0 bits to represent. Code that makes use of these types is not included in the final generated code: zero_bit_types.zig When this turns into machine code, there is no c","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"ignoring expression value\"</span> {\n    foo();\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>() <span class=\"tok-type\">i32</span> {\n    <span class=\"tok-kw\">return</span> <span class=\"tok-number\">1234</span>;\n}"}
{"instruction":"Write a Zig function similar to defaultParseBlockLike from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"fn defaultParseBlockLike(_: []const u8) !Mask.Entry.Inner {\n\t\tunreachable;\n\t}"}
{"instruction":"Write a Zig function similar to version from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn version(self: *const Self) usize {\n    return @intFromPtr(self.root);\n}"}
{"instruction":"Write Zig 0.13.0 code for: comptime §","input":"Zig places importance on the concept of whether an expression is known at compile-time. There are a few different places this concept is used, and these building blocks are used to keep the language small, readable, and powerful. Introducing the Compile-Time Concept § Compile-Time Parameters § Compile-time parameters is how Zig implements generics. It is compile-time duck typing. compile-time_duck_typing.zig In Zig, types are first-class citizens. They can be assigned to variables, passed as par","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">fibonacci</span>(index: <span class=\"tok-type\">u32</span>) <span class=\"tok-type\">u32</span> {\n    <span class=\"tok-kw\">if</span> (index < <span class=\"tok-number\">2</span>) <span class=\"tok-kw\">return</span> index;\n    <span class=\"tok-kw\">return</span> fibonacci(index - <span class=\"tok-number\">1</span>) + fibonacci(index - <span class=\"tok-number\">2</span>);\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"fibonacci\"</span> {\n    <span class=\"tok-comment\">// test fibonacci at run-time</span>\n    <span class=\"tok-kw\">try</span> expect(fibonacci(<span class=\"tok-number\">7</span>) == <span class=\"tok-number\">13</span>);\n\n    <span class=\"tok-comment\">// test fibonacci at compile-time</span>\n    <span class=\"tok-kw\">try</span> <span class=\"tok-kw\">comptime</span> expect(fibonacci(<span class=\"tok-number\">7</span>) == <span class=\"tok-number\">13</span>);\n}"}
{"instruction":"Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn serialize(self: *const @This()) [7]u8 {\n        var out: [7]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = self.endpoint_address;\n        out[3] = self.attributes;\n        out[4] = @intCast(self.max_packet_size & 0xff);\n        out[5] = @intCast((self.max_packet_size >> 8) & 0xff);\n        out[6] = self.interval;\n        return out;\n    }"}
{"instruction":"Write a Zig function similar to OP_TRY from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_TRY(self: *Self, location: Ast.TokenIndex) !usize {\n    return try self.emitJump(\n        location,\n        .OP_TRY,\n    );\n}"}
{"instruction":"Write a Zig const similar to generate_type from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/commands/completion.zig","output":"const generate_type: ?Shells = if (main_options.positionals.len > 0)\n        map.get(main_options.positionals[0])\n    else\n        null;"}
{"instruction":"Write a Zig function similar to handleSubordinateStopped from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn handleSubordinateStopped(self: *Self, scratch: Allocator, req: proto.SubordinateStoppedRequest) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            self.data.mu.lock();\n            defer self.data.mu.unlock();\n\n            try self.handleSubordinateStoppedAlreadyLocked(scratch, req);\n        }"}
{"instruction":"Write a Zig function similar to from from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: ffi/zig_allocator.zig","output":"fn from(allocator: std.mem.Allocator) c.zig_allocator {\n        return .{\n            .ctx = @ptrCast(@alignCast(&allocator)),\n            .alloc = &alloc,\n            .free = &free,\n        }"}
{"instruction":"Write a Zig function similar to init from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"fn init(musicBuffer: []const f32) void {\n\t\tbuffer = musicBuffer;\n\t\tanimationAmplitude = 0;\n\t\tanimationVelocity = 0;\n\t\tanimationDecaying = false;\n\t\tanimationProgress = 0;\n\t\tinterpolationPolynomial = utils.unitIntervalSpline(f32, animationAmplitude, animationVelocity, 1, 0);\n\t\tpos = 0;\n\t}"}
{"instruction":"Write a Zig function similar to static_buf from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn static_buf(size: usize) []u8 {\n    const static = struct {\n        var buf: []u8 = &.{}"}
{"instruction":"Write a Zig function similar to fd from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn fd(self: *Completion) ?posix.fd_t {\n        return switch (self.op) {\n            .accept => |v| v.socket,\n            .connect => |v| v.socket,\n            .poll => |v| v.fd,\n            .read => |v| v.fd,\n            .pread => |v| v.fd,\n            .recv => |v| v.fd,\n            .write => |v| v.fd,\n            .pwrite => |v| v.fd,\n            .send => |v| v.fd,\n            .sendmsg => |v| v.fd,\n            .recvmsg => |v| v.fd,\n            .close => |v| v.fd,\n            .shutdown => |v| v.socket,\n\n            .cancel,\n            .timer,\n            => null,\n\n            .noop => unreachable,\n        }"}
{"instruction":"Write a Zig const similar to sample_rate from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/defaults.zig","output":"pub const sample_rate: usize = 24000;"}
{"instruction":"Write a Zig function similar to add_task from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn add_task(self: *Self, command: []const u8) OutOfMemoryError!void {\n    defer self.sort_tasks_by_mtime();\n    const mtime = std.time.milliTimestamp();\n    for (self.tasks.items) |*task|\n        if (std.mem.eql(u8, task.command, command)) {\n            tp.trace(tp.channel.debug, .{ \"Project\", self.name, \"add_task\", command, task.mtime, \"->\", mtime }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn callback(ud: ?*void, l: *Loop, c: *Completion, r: CancelError!void) CallbackAction {\n                r catch unreachable;\n                _ = c;\n                _ = l;\n                _ = ud;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig struct similar to Generator from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/gen.zig","output":"pub const Generator = struct {\n    /// Number of calculated samples per sine curve (affects perceived frequency).\n    pub const sample_count: usize = 10000;\n\n    /// Configuration.\n    config: GeneratorConfig,\n\n    /// Creates a new instance.\n    pub fn init(config: GeneratorConfig) Generator {\n        return Generator{ .config = config }"}
{"instruction":"Write a Zig struct similar to Test from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"const Test = struct {\n    //     const Storage = struct {\n    //         x: *usize,\n    //     }"}
{"instruction":"Write a Zig function similar to isSegmentRegister from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn isSegmentRegister(mem: Memory) bool {\n            return switch (mem) {\n                .moffs => true,\n                .rip => false,\n                .sib => |s| switch (s.base) {\n                    .none, .frame, .reloc => false,\n                    .reg => |reg| reg.class() == .segment,\n                }"}
{"instruction":"Write a Zig function similar to addTraceTest from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"fn addTraceTest(b: *std.Build, opts: Options) !*std.Build.Step.Compile {\n    const step = b.addTest(.{\n        .name = \"trace_test\",\n        .root_source_file = b.path(\"./test/trace_test.zig\"),\n        .optimize = optimize,\n        .target = rtarget,\n        .filter = testFilter,\n    }"}
{"instruction":"Write a Zig function similar to RgbColorToRgbaColor from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn RgbColorToRgbaColor(comptime source_format: PixelFormat, comptime destination_format: PixelFormat) type {\n    return struct {\n        pub fn convert(source: *const color.PixelStorage, destination: *color.PixelStorage) void {\n            const source_rgb = @field(source, getFieldNameFromPixelFormat(source_format));\n            var destination_pixels = @field(destination, getFieldNameFromPixelFormat(destination_format));\n            const destination_type = @TypeOf(destination_pixels[0]);\n\n            for (0..source_rgb.len) |index| {\n                destination_pixels[index] = rgbToRgba(destination_type, source_rgb[index]);\n            }"}
{"instruction":"Write a Zig function similar to isConditional from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn isConditional(ty: Type) bool {\n        return switch (ty.data) {\n            .either => true,\n            .anytype_parameter => true,\n            .optional => |child_ty| child_ty.isConditional(),\n            .pointer => |info| info.elem_ty.isConditional(),\n            .array => |info| info.elem_ty.isConditional(),\n            .tuple => |types| {\n                for (types) |t|\n                    if (t.isConditional()) return true;\n                return false;\n            }"}
{"instruction":"Write a Zig const similar to targets from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: build.zig","output":"const targets: []const std.Target.Query = &.{\n        .{ .cpu_arch = .aarch64, .os_tag = .macos },\n        .{ .cpu_arch = .aarch64, .os_tag = .linux, .abi = .musl },\n        .{ .cpu_arch = .x86_64, .os_tag = .macos },\n        .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .musl },\n        .{ .cpu_arch = .x86_64, .os_tag = .windows },\n        .{ .cpu_arch = .aarch64, .os_tag = .windows },\n    };"}
{"instruction":"Write a Zig function similar to asNum from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"fn asNum(val: *Value) f64 {\n    return switch (val.*) {\n        .int => |v| @floatFromInt(v),\n        .num => |v| v,\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig function similar to OP_SHR from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_SHR(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_SHR);\n}"}
{"instruction":"Write a Zig function similar to walker from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn walker(ctx_: *anyopaque, egc: []const u8, wcwidth: usize, _: Metrics) Walker {\n                const ctx = @as(*@This(), @ptrCast(@alignCast(ctx_)));\n                if (ctx.wcwidth >= ctx.col) return Walker.stop;\n                ctx.pos += egc.len;\n                ctx.wcwidth += wcwidth;\n                return if (egc[0] == '\\n') Walker.stop else Walker.keep_walking;\n            }"}
{"instruction":"Write a Zig function similar to lighten from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn lighten(self: HSLuv, deltal: f32) HSLuv {\n        return .{\n            .h = self.h,\n            .s = self.s,\n            .l = std.math.clamp(self.l + deltal, 0, 100),\n            .a = self.a,\n        }"}
{"instruction":"Write a Zig function similar to sidt from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/arch.zig","output":"pub fn sidt() idt.IdtPtr {\n    var idt_ptr = idt.IdtPtr{ .limit = 0, .base = 0 }"}
{"instruction":"Write a Zig function similar to main from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigrecursion/main.zig","output":"pub fn main() !void {\n    print(\"first call:\\n\", .{}"}
{"instruction":"Write a Zig function similar to writer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig","output":"pub fn writer(self: *SelfTransfer) Writer {\n                        return Writer{ .context = self }"}
{"instruction":"Write a Zig function similar to parseSelector from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"fn parseSelector(s: *State) !Rule.Style.Selector {\n    // TODO: Support other selectors\n\n    return .{\n        .simple = try parseSimpleSelector(s),\n    }"}
{"instruction":"Write a Zig struct similar to FileEntry from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"const FileEntry = struct {\n    path: []const u8,\n    size: u64,\n}"}
{"instruction":"Write a Zig function similar to clearInternalBreakpoints from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn clearInternalBreakpoints(self: *Self, scratch: Allocator) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            const internal_bps = blk: {\n                var bps = ArrayList(types.Breakpoint).init(scratch);\n                var to_remove = ArrayList(usize).init(scratch);\n                for (self.data.state.breakpoints.items, 0..) |bp, ndx| {\n                    if (!bp.flags.internal) continue;\n\n                    try bps.append(bp);\n                    try to_remove.append(ndx);\n                }"}
{"instruction":"Write a Zig function similar to isRoot from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn isRoot(self: Type) bool {\n        switch (self.data) {\n            .container => |info| return info.scope_handle.scope == Scope.Index.root,\n            else => return false,\n        }"}
{"instruction":"Write a Zig function similar to generateMultilineStringCodeActions from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"pub fn generateMultilineStringCodeActions(\n    builder: *Builder,\n    token: Ast.TokenIndex,\n) !void {\n    const tracy_zone = tracy.trace(@src());\n    defer tracy_zone.end();\n\n    if (!builder.wantKind(.refactor)) return;\n\n    const tree = builder.handle.tree;\n    std.debug.assert(.multiline_string_literal_line == tree.tokenTag(token));\n    // Collect (exclusive) token range of the literal (one token per literal line)\n    const start = if (std.mem.lastIndexOfNone(Token.Tag, tree.tokens.items(.tag)[0..(token + 1)], &.{.multiline_string_literal_line}"}
{"instruction":"Write a Zig function similar to markMethods from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"fn markMethods(self: *GC) !void {\n    if (BuildOptions.gc_debug) {\n        std.log.info(\"MARKING BASIC TYPES METHOD\", .{}"}
{"instruction":"Write a Zig function similar to showBrowserInfo from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/window_management/main.zig","output":"fn showBrowserInfo(e: *webui.Event) void {\n    // 显示浏览器和窗口信息\n    e.runClient(\n        \\\\const info = {\n        \\\\    userAgent: navigator.userAgent,\n        \\\\    screenWidth: screen.width,\n        \\\\    screenHeight: screen.height,\n        \\\\    windowWidth: window.innerWidth,\n        \\\\    windowHeight: window.innerHeight,\n        \\\\    isFullscreen: !!document.fullscreenElement\n        \\\\}"}
{"instruction":"Write a Zig function similar to scanSiteAssets from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/Build.zig","output":"pub fn scanSiteAssets(\n    b: *Build,\n    gpa: Allocator,\n    arena: Allocator,\n) !void {\n    const zone = tracy.trace(@src());\n    defer zone.end();\n\n    var dir_stack: std.ArrayListUnmanaged([]const u8) = .empty;\n    try dir_stack.append(arena, \"\");\n\n    const empty_path: Path = @enumFromInt(0);\n    assert(b.pt.get(&.{}"}
{"instruction":"Write a Zig function similar to store from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn store(self: *const Node, writer: *std.Io.Writer, eol_mode: EolMode) !void {\n        switch (self.*) {\n            .node => |*node| {\n                try node.left.store(writer, eol_mode);\n                try node.right.store(writer, eol_mode);\n            }"}
{"instruction":"Write a Zig const similar to ty from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const ty: InternPool.Index = switch (result) {\n                .int,\n                .big_int,\n                => .comptime_int_type,\n                .float => .comptime_float_type,\n                .failure => return null,\n            };"}
{"instruction":"Write a Zig function similar to help from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/main.zig","output":"fn help() !void {\n    try std.io.getStdOut().writer().writeAll(usage);\n    process.exit(0);\n}"}
{"instruction":"Write a Zig function similar to paste from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn paste(editor: *Editor) !void {\n    if (editor.sprite_clipboard) |*clipboard| {\n        if (editor.activeFile()) |file| {\n            const active_layer = file.layers.get(file.selected_layer_index);\n\n            var dst_rect: dvui.Rect = .fromSize(pixi.image.size(clipboard.source));\n\n            var sprite_iterator = file.editor.selected_sprites.iterator(.{ .kind = .set, .direction = .forward }"}
{"instruction":"Write a Zig function similar to setRootFolder from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setRootFolder(self: webui, path: [:0]const u8) !void {\n    const success = c.webui_set_root_folder(self.window_handle, path.ptr);\n    // TODO: replace this error\n    if (!success) return WebUIError.GenericError;\n}"}
{"instruction":"Write a Zig struct similar to Switch from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub const Switch = struct {\n        /// tag is `.@\"switch\"` or `.switch_comma`\n        node: Ast.Node.Index,\n        /// is guaranteed to have a payload_token\n        case_index: u32,\n\n        pub fn getCase(self: Switch, tree: Ast) Ast.full.SwitchCase {\n            const extra_index = tree.nodeData(self.node).node_and_extra[1];\n            const cases = tree.extraDataSlice(tree.extraData(extra_index, Ast.Node.SubRange), Ast.Node.Index);\n            return tree.fullSwitchCase(cases[self.case_index]).?;\n        }"}
{"instruction":"Write a Zig function similar to format from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn format(ctx: FormatContext, writer: *std.Io.Writer) std.Io.Writer.Error!void {\n    if (ctx.options.debug and ctx.index == .none) {\n        return writer.writeAll(\".none\");\n    }"}
{"instruction":"Write a Zig const similar to HID_DATA from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const HID_DATA: u8 = 0 << 0;"}
{"instruction":"Write a Zig function similar to get_file_path from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn get_file_path(self: *const Self) []const u8 {\n    return self.file_path_buf.items;\n}"}
{"instruction":"Write a Zig function similar to genToFinalDst from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genToFinalDst(c: *Chunk, val: GenValue, dst: Cstr, node: *ast.Node) !GenValue {\n    log.tracev(\"genToFinalDst src: {}"}
{"instruction":"Write Zig 0.13.0 code for: struct §","input":"test_structs.zig Shell Default Field Values § Each struct field may have an expression indicating the default field value. Such expressions are executed at comptime , and allow the field to be omitted in a struct literal expression: struct_default_field_values.zig Shell Default field values are only appropriate when the data invariants of a struct cannot be violated by omitting that field from an initialization. For example, here is an inappropriate use of default struct field initialization: ba","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">const</span> BitField = <span class=\"tok-kw\">packed</span> <span class=\"tok-kw\">struct</span> {\n    a: <span class=\"tok-type\">u3</span>,\n    b: <span class=\"tok-type\">u3</span>,\n    c: <span class=\"tok-type\">u2</span>,\n};\n\n<span class=\"tok-kw\">var</span> bit_field = BitField{\n    .a = <span class=\"tok-number\">1</span>,\n    .b = <span class=\"tok-number\">2</span>,\n    .c = <span class=\"tok-number\">3</span>,\n};\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"pointer to non-byte-aligned field\"</span> {\n    <span class=\"tok-kw\">try</span> expect(bar(&bit_field.b) == <span class=\"tok-number\">2</span>);\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">bar</span>(x: *<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u3</span>) <span class=\"tok-type\">u3</span> {\n    <span class=\"tok-kw\">return</span> x.*;\n}"}
{"instruction":"Write a Zig function similar to coerceInMemoryAllowedErrorSets from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn coerceInMemoryAllowedErrorSets(\n    ip: *InternPool,\n    gpa: Allocator,\n    arena: Allocator,\n    dest_ty: Index,\n    src_ty: Index,\n) !InMemoryCoercionResult {\n    if (dest_ty == src_ty) return .ok;\n    if (dest_ty == .anyerror_type) return .ok;\n    if (src_ty == .anyerror_type) return .from_anyerror;\n\n    const dest_set_names = try ip.indexToKey(dest_ty).error_set_type.names.dupe(gpa, ip);\n    defer gpa.free(dest_set_names);\n\n    const src_set_names = try ip.indexToKey(src_ty).error_set_type.names.dupe(gpa, ip);\n    defer gpa.free(src_set_names);\n\n    var missing_error_buf: std.ArrayList(String) = .empty;\n    defer missing_error_buf.deinit(gpa);\n\n    for (src_set_names) |name| {\n        if (std.mem.indexOfScalar(String, dest_set_names, name) == null) {\n            try missing_error_buf.append(gpa, name);\n        }"}
{"instruction":"Write a Zig const similar to NUMBER_OF_ENTRIES from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/irq.zig","output":"const NUMBER_OF_ENTRIES: u16 = 16;"}
{"instruction":"Write a Zig function similar to String_decode2 from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn String_decode2(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.Array, 0);\n\n    const encoding = bindings.getBuiltinSymbol(vm.getSymbol(1)) orelse {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }"}
{"instruction":"Write a Zig function similar to embed from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn embed(embed_tokens_: zml.nn.TokenEmbedding, tokens_: zml.Tensor) zml.Tensor {\n        return zml.call(embed_tokens_, .forward, .{tokens_}"}
{"instruction":"Write a Zig const similar to sockaddr_in6 from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const sockaddr_in6: *align(1) const std.posix.sockaddr.in6 = @ptrCast(sockaddr);"}
{"instruction":"Write a Zig function similar to setupCounter from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"fn setupCounter(counter: CounterSelect, freq: u32, mode: u8) PitError!void {\n    if (freq < 19 or freq > MAX_FREQUENCY) {\n        return PitError.InvalidFrequency;\n    }"}
{"instruction":"Write a Zig function similar to main from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigmultithread/main.zig","output":"pub fn main() !void {\n    print(\"starting zigmultithread\\n\", .{}"}
{"instruction":"Write a Zig function similar to OP_SHL from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_SHL(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_SHL);\n}"}
{"instruction":"Write a Zig struct similar to FreeContext from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"const FreeContext = struct {\n                    allocator: std.mem.Allocator,\n\n                    fn onFree(ctx: *@This(), buffer: *anyopaque, len: u32) callconv(.C) void {\n                        ctx.allocator.free(@as([*]u8, @ptrCast(buffer))[0..len]);\n                        bun.destroy(ctx);\n                    }"}
{"instruction":"Write a Zig function similar to panic from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn panic(vm: *cy.VM) anyerror!Value {\n    const str = try vm.getOrBufPrintValueStr(&cy.tempBuf, vm.getValue(0));\n    return vm.prepPanic(str);\n}"}
{"instruction":"Write a Zig function similar to unref from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn unref(self: *Fd) void {\n        return self.free();\n    }"}
{"instruction":"Write a Zig function similar to genAll from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn genAll(c: *cy.Compiler) !void {\n    // Constants.\n    c.vm.emptyString = try c.buf.getOrPushStaticAstring(\"\");\n\n    // Prepare types.\n    for (c.newTypes(), c.type_start..) |stype, typeId| {\n        if (stype.kind == .null) {\n            // Skip placeholders.\n            continue;\n        }"}
{"instruction":"Write a Zig function similar to run1 from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/Scheduler.zig","output":"fn run1(ctx: *anyopaque) ?u32 {\n        var self: *TestTask = @ptrCast(@alignCast(ctx));\n        self.calls.append(self.allocator, 1) catch unreachable;\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to asyncCallback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/async1.zig","output":"fn asyncCallback(\n        ud: ?*Thread,\n        _: *xev.Loop,\n        _: *xev.Completion,\n        r: xev.Async.WaitError!void,\n    ) xev.CallbackAction {\n        _ = r catch unreachable;\n        const self = ud.?;\n        self.main_async.notify() catch unreachable;\n        self.worker_sent += 1;\n        self.worker_seen += 1;\n        return if (self.worker_sent >= NUM_PINGS) .disarm else .rearm;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"@setRuntimeSafety\"</span> {\n    <span class=\"tok-comment\">// The builtin applies to the scope that it is called in. So here, integer overflow</span>\n    <span class=\"tok-comment\">// will not be caught in ReleaseFast and ReleaseSmall modes:</span>\n    <span class=\"tok-comment\">// var x: u8 = 255;</span>\n    <span class=\"tok-comment\">// x += 1; // undefined behavior in ReleaseFast/ReleaseSmall modes.</span>\n    {\n        <span class=\"tok-comment\">// However this block has safety enabled, so safety checks happen here,</span>\n        <span class=\"tok-comment\">// even in ReleaseFast and ReleaseSmall modes.</span>\n        <span class=\"tok-builtin\">@setRuntimeSafety</span>(<span class=\"tok-null\">true</span>);\n        <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">255</span>;\n        x += <span class=\"tok-number\">1</span>;\n\n        {\n            <span class=\"tok-comment\">// The value can be overridden at any scope. So here integer overflow</span>\n            <span class=\"tok-comment\">// would not be caught in any build mode.</span>\n            <span class=\"tok-builtin\">@setRuntimeSafety</span>(<span class=\"tok-null\">false</span>);\n            <span class=\"tok-comment\">// var x: u8 = 255;</span>\n            <span class=\"tok-comment\">// x += 1; // undefined behavior in all build modes.</span>\n        }\n    }\n}"}
{"instruction":"Write a Zig function similar to statement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn statement(self: *Self, docblock: ?Ast.TokenIndex, hanging: bool, loop_scope: ?LoopScope) !?Ast.Node.Index {\n    const global_scope = self.current.?.scope_depth == 0;\n    const statement_allowed = self.flavor == .Repl or !global_scope;\n\n    if (statement_allowed) {\n        if (try self.match(.If)) {\n            std.debug.assert(!hanging);\n            return try self.ifStatement(loop_scope);\n        }"}
{"instruction":"Write a Zig struct similar to Vex from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub const Vex = struct {\n    w: bool = false,\n    r: bool = false,\n    x: bool = false,\n    b: bool = false,\n    l: bool = false,\n    p: enum(u2) {\n        none = 0b00,\n        @\"66\" = 0b01,\n        f3 = 0b10,\n        f2 = 0b11,\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Optionals §","input":"One area that Zig provides safety without compromising efficiency or readability is with the optional type. The question mark symbolizes the optional type. You can convert a type to an optional type by putting a question mark in front of it, like this: optional_integer.zig Now the variable optional_int could be an i32 , or null . Instead of integers, let's talk about pointers. Null references are the source of many runtime exceptions, and even stand accused of being the worst mistake of computer","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"optional type\"</span> {\n    <span class=\"tok-comment\">// Declare an optional and coerce from null:</span>\n    <span class=\"tok-kw\">var</span> foo: ?<span class=\"tok-type\">i32</span> = <span class=\"tok-null\">null</span>;\n\n    <span class=\"tok-comment\">// Coerce from child type of an optional</span>\n    foo = <span class=\"tok-number\">1234</span>;\n\n    <span class=\"tok-comment\">// Use compile-time reflection to access the child type of the optional:</span>\n    <span class=\"tok-kw\">try</span> <span class=\"tok-kw\">comptime</span> expect(<span class=\"tok-builtin\">@typeInfo</span>(<span class=\"tok-builtin\">@TypeOf</span>(foo)).Optional.child == <span class=\"tok-type\">i32</span>);\n}"}
{"instruction":"Write a Zig function similar to table from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/types.zig","output":"pub fn table(self: *const ClientCapabilities) Encoder.Table {\n        const vtable: Encoder.Table.VTable = comptime .{\n            .write = &struct {\n                fn write(context: *const anyopaque, encoder: *Encoder.TableEncoder) void {\n                    const capabilities: *const ClientCapabilities = @ptrCast(@alignCast(context));\n                    encoder.put(\"publisher_confirms\", .{\n                        .boolean = capabilities.publisher_confirms,\n                    }"}
{"instruction":"Write a Zig const similar to val from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const val: Value = .{\n                .int = std.fmt.parseInt(i64, slice, 0) catch\n                    return c.reportErr(\"TODO big int\", node),\n            };"}
{"instruction":"Write a Zig function similar to testHandler0 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn testHandler0(ctx: *const arch.CpuState, arg1: usize, arg2: usize, arg3: usize, arg4: usize, arg5: usize) anyerror!usize {\n    // Suppress unused variable warnings\n    _ = ctx;\n    _ = arg1;\n    _ = arg2;\n    _ = arg3;\n    _ = arg4;\n    _ = arg5;\n    test_int += 1;\n    return 0;\n}"}
{"instruction":"Write a Zig function similar to OP_GET_MAP_SUBSCRIPT from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_GET_MAP_SUBSCRIPT(self: *Self, location: Ast.TokenIndex, checked: bool) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_GET_MAP_SUBSCRIPT,\n        if (checked) 1 else 0,\n    );\n}"}
{"instruction":"Write a Zig function similar to add_buffer from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Manager.zig","output":"fn add_buffer(self: *Self, buffer: *Buffer) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to getModule from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"pub fn getModule(self: *ScriptManager, url: [:0]const u8, referrer: []const u8) !void {\n    const gop = try self.sync_modules.getOrPut(self.allocator, url);\n    if (gop.found_existing) {\n        // already requested\n        return;\n    }"}
{"instruction":"Write a Zig function similar to generateUnwrap from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateUnwrap(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n    const location = locations[node];\n    const components = self.ast.nodes.items(.components)[node].Unwrap;\n\n    if (components.original_type.def_type == .Placeholder) {\n        self.reporter.reportPlaceholder(self.ast, components.original_type.resolved_type.?.Placeholder);\n\n        return null;\n    }"}
{"instruction":"Write a Zig struct similar to SeqDestructure from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const SeqDestructure = struct {\n    args: []*Node align(8),\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to load from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn load(this: *LazySourceMap) ?*SourceMap.ParsedSourceMap {\n            init_lock.lock();\n            defer init_lock.unlock();\n\n            return switch (this.*) {\n                .none => null,\n                .parsed => |map| map,\n                .serialized => |serialized| {\n                    var stored = switch (SourceMap.Mapping.parse(\n                        bun.default_allocator,\n                        serialized.mappingVLQ(),\n                        null,\n                        std.math.maxInt(i32),\n                        std.math.maxInt(i32),\n                        .{}"}
{"instruction":"Write a Zig const similar to ogg_info from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"const ogg_info: c.stb_vorbis_info = c.stb_vorbis_get_info(ogg_stream);"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *xev.Loop,\n                c: *xev.Completion,\n                r: xev.Result,\n            ) xev.CallbackAction {\n                _ = l;\n                _ = c;\n                const ptr = @as(*?usize, @ptrCast(@alignCast(ud.?)));\n                ptr.* = r.write catch unreachable;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to fromNameExtra from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins.zig","output":"fn fromNameExtra(name: []const u8, comptime arch: std.meta.Tag(Tag)) ?FromName {\n    const list = @field(@This(), @tagName(arch));\n    const tag = list.tagFromName(name) orelse return null;\n    const builtin = list.data[@intFromEnum(tag)];\n\n    return .{\n        .tag = @unionInit(Tag, @tagName(arch), tag),\n        .param_str = builtin.param_str,\n        .header = builtin.header,\n        .language = builtin.language,\n        .attributes = builtin.attributes,\n        .features = if (@hasField(@TypeOf(builtin), \"features\")) builtin.features else null,\n    }"}
{"instruction":"Write a Zig const similar to f21 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f21: u21 = 57384;"}
{"instruction":"Write a Zig function similar to bufWrite from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig","output":"fn bufWrite(self: *Progress, end: *usize, comptime format: []const u8, args: anytype) void {\n    if (std.fmt.bufPrint(self.output_buffer[end.*..], format, args)) |written| {\n        const amt = written.len;\n        end.* += amt;\n        self.columns_written += amt;\n    }"}
{"instruction":"Write a Zig struct similar to SetContext from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const SetContext = struct {\n        pub fn hash(self: SetContext, item: ReferencedType) u32 {\n            _ = self;\n            var hasher: std.hash.Wyhash = .init(0);\n            hasher.update(item.str);\n            hasher.update(item.handle.uri);\n            hasher.update(&std.mem.toBytes(item.token));\n            return @truncate(hasher.final());\n        }"}
{"instruction":"Write a Zig function similar to syscall2 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn syscall2(syscall: usize, arg1: usize, arg2: usize) anyerror!usize {\n    const res = asm volatile (\n        \\\\int $0x80\n        : [ret] \"={eax}"}
{"instruction":"Write a Zig struct similar to Particle from zig-gamedev/zig-gamedev","input":"Repository: zig-gamedev/zig-gamedev (2703 ⭐)\nFile: experiments/genart/src/x0012.zig","output":"const Particle = struct {\n    x: f32 = 0.0,\n    y: f32 = 0.0,\n    frame: u32 = 0,\n    num_frames: u32 = 50,\n    step: u32 = 0,\n    color: [3]f32 = .{ 1, 1, 1 }"}
{"instruction":"Write a Zig function similar to print_imports from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/fetch.zig","output":"fn print_imports(alloc: std.mem.Allocator, w: std.fs.File.Writer, m: zigmod.Module, path: string) !void {\n    for (m.deps) |d| {\n        if (d.main.len == 0) {\n            continue;\n        }"}
{"instruction":"Write a Zig struct similar to ArrayMapContext from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub const ArrayMapContext = struct {\n        pub fn hash(self: ArrayMapContext, ty: Type) u32 {\n            _ = self;\n            return ty.hash32();\n        }"}
{"instruction":"Write a Zig function similar to isEOF from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Scanner.zig","output":"fn isEOF(self: *Self) bool {\n    return self.current.offset >= self.source.len or self.source[self.current.offset] == 0;\n}"}
{"instruction":"Write a Zig function similar to __truediv__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __truediv__(self: *const Self, other: *const Self) !*Self {\n        return py.init(root, Self, .{ .num_ = self.num_ / other.num_ }"}
{"instruction":"Write a Zig const similar to scaleAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const scaleAlpha: if (has_alpha) fn (anytype) AlphaT else void =\n        if (has_alpha)\n            ScaleValue(AlphaT)\n        else {};"}
{"instruction":"Write a Zig function similar to async_notify from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"pub fn async_notify(self: *Loop, c: *Completion) void {\n        assert(c.op == .async_wait);\n\n        if (threaded) {\n            self.wakeup.store(true, .SeqCst);\n            c.op.async_wait.wakeup.store(true, .SeqCst);\n        }"}
{"instruction":"Write a Zig const similar to y0 from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/algorithms/brezenham.zig","output":"const y0: i32 = @intFromFloat(@floor(start.y));"}
{"instruction":"Write a Zig function similar to findInclude from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn findInclude(\n    comp: *Compilation,\n    filename: []const u8,\n    includer_token: Token,\n    /// angle bracket vs quotes\n    include_type: IncludeType,\n    /// include vs include_next\n    which: WhichInclude,\n) Compilation.Error!?Source {\n    const found = try FindInclude.run(comp, filename, include_type, switch (which) {\n        .next => .{ .only_search_after_dir = comp.getSource(includer_token.source).path }"}
{"instruction":"Write a Zig function similar to accept from zigcc/zig-cookbook","input":"Repository: zigcc/zig-cookbook (1019 ⭐)\nFile: assets/src/05-03.zig","output":"fn accept(conn: Connection) !void {\n    defer conn.stream.close();\n\n    log.info(\"Got new client({f}"}
{"instruction":"Write a Zig const similar to data_out from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const data_out: [1]u8 = \"\\x21\".*;"}
{"instruction":"Write a Zig function similar to onStoreServerToDisk from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn onStoreServerToDisk(dataIndex: BlockEntityIndex, writer: *BinaryWriter) void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tdefer StorageServer.mutex.unlock();\n\n\t\t\tconst data = StorageServer.getByIndex(dataIndex) orelse return;\n\t\t\twriter.writeSlice(data.text);\n\t\t}"}
{"instruction":"Write a Zig function similar to markObjDirty from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn markObjDirty(self: *GC, obj: *o.Obj) !void {\n    if (!obj.dirty and self.obj_collected != obj) {\n        obj.dirty = true;\n\n        // A dirty obj is: an old object with reference to potential young objects that will need to be marked\n        // Since old object are ignored when tracing references, this will force tracing for it\n        try self.gray_stack.append(self.allocator, obj);\n    }"}
{"instruction":"Write a Zig const similar to start from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/StringParser.zig","output":"const start: usize = self.offset - 1;"}
{"instruction":"Write a Zig const similar to limit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"const limit: usize = if (upto != null and @as(usize, @intCast(start + upto.?)) < self.items.items.len)\n        @intCast(start + upto.?)\n    else\n        self.items.items.len;"}
{"instruction":"Write a Zig struct similar to Errors from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/bog.zig","output":"pub const Errors = struct {\n    list: List = .{}"}
{"instruction":"Write a Zig struct similar to BufferPool from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"const BufferPool = struct {\n    count: usize,\n    available: List = .{}"}
{"instruction":"Write a Zig const similar to bit_to_set1 from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig","output":"const bit_to_set1: usize = 5;"}
{"instruction":"Write a Zig function similar to git from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/git.zig","output":"fn git(\n    context: usize,\n    cmd: anytype,\n    out: OutputHandler,\n    exit: ExitHandler,\n) Error!void {\n    return git_err(context, cmd, out, noop, exit);\n}"}
{"instruction":"Write a Zig function similar to main from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"pub fn main() !u8 {\n    return main2() catch |e| switch (e) {\n        error.AlreadyReported => return 1,\n        else => return e,\n    }"}
{"instruction":"Write a Zig function similar to navigateToUrl from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/js_execution/main.zig","output":"fn navigateToUrl(e: *webui.Event, url: [:0]const u8) void {\n    const win = e.getWindow();\n    \n    if (std.mem.startsWith(u8, url, \"http://\") or std.mem.startsWith(u8, url, \"https://\")) {\n        win.navigate(url);\n        e.returnString(\"Navigation initiated\");\n        std.debug.print(\"Navigating to: {s}"}
{"instruction":"Write a Zig function similar to sinusoidal from zig-gamedev/zig-gamedev","input":"Repository: zig-gamedev/zig-gamedev (2703 ⭐)\nFile: experiments/genart/src/x0001.zig","output":"fn sinusoidal(v: Vec2, scale: f32) Vec2 {\n    return .{ scale * math.sin(v[0]), scale * math.sin(v[1]) }"}
{"instruction":"Write a Zig function similar to init from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"pub fn init(self: *SpiceTreeSum, allocator: std.mem.Allocator) void {\n        self.thread_pool = spice.ThreadPool.init(allocator);\n        self.thread_pool.start(.{ .background_worker_count = self.num_threads - 1 }"}
{"instruction":"Write a Zig const similar to lsp_defaults from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_type_config.zig","output":"const lsp_defaults: LspDefaults = static_file_type_lsp_defaults.get(file_type.name) orelse .{};"}
{"instruction":"Write a Zig const similar to val from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const val: u32 = if (enable) 1 else 0;"}
{"instruction":"Write a Zig function similar to reverse from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn reverse(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const list = o.ObjList.cast(ctx.vm.peek(0).obj()).?;\n\n    var new_list = ctx.vm.gc.allocateObject(\n        o.ObjList.init(ctx.vm.gc.allocator, list.type_def) catch {\n            ctx.vm.panic(\"Out of memory\");\n            unreachable;\n        }"}
{"instruction":"Write a Zig struct similar to seat_listener from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"const seat_listener = struct {\n    fn seatHandleName(window_id: mach.ObjectID, seat: ?*c.struct_wl_seat, name_ptr: [*:0]const u8) callconv(.C) void {\n        _ = window_id;\n        _ = seat;\n        _ = name_ptr;\n    }"}
{"instruction":"Write a Zig const similar to method from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"const method: spec.ServerMethod = .{ .confirm_select = .{ .nowait = false } };"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn write(fd: c_int, buf: [*]const u8, len: usize) isize;\n    }"}
{"instruction":"Write a Zig const similar to b from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"const b: f32 = @as(f32, @floatFromInt(color.b)) / 255.0;"}
{"instruction":"Write a Zig function similar to dBToAmplitude from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/audio.zig","output":"pub fn dBToAmplitude(dB: f64) f64 {\n    return std.math.pow(f64, 10.0, dB / 20.0);\n}"}
{"instruction":"Write a Zig function similar to wouldStartIdent from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig","output":"fn wouldStartIdent(self: *Tokenizer, src: []const u8) bool {\n    const char0 = if (self.idx >= src.len) ' ' else src[self.idx];\n    const char1 = if (self.idx + 1 >= src.len) ' ' else src[self.idx + 1];\n    const char2 = if (self.idx + 2 >= src.len) ' ' else src[self.idx + 2];\n\n    _ = char2;\n\n    return switch (char0) {\n        '-' => isIdentStartChar(char1) or char1 == '-',\n        else => isIdentStartChar(char0),\n    }"}
{"instruction":"Write a Zig function similar to rawReplace from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/pattern.zig","output":"fn rawReplace(self: *o.ObjPattern, vm: *VM, subject: *o.ObjString, replacement: *o.ObjString, offset: *usize) !*o.ObjString {\n    if (subject.string.len == 0) {\n        return subject;\n    }"}
{"instruction":"Write a Zig const similar to app_dirname_w from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const app_dirname_w: ?[:0]u16 = x: {\n        if (maybe_app_dirname_wtf8) |app_dirname_wtf8| {\n            break :x try unicode.wtf8ToWtf16LeAllocZ(self.allocator, app_dirname_wtf8);"}
{"instruction":"Write a Zig function similar to OP_PROTOCOL_TAIL_INVOKE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_PROTOCOL_TAIL_INVOKE(self: *Self, location: Ast.TokenIndex, identifier: []const u8) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_PROTOCOL_TAIL_INVOKE,\n        try self.identifierConstant(identifier),\n    );\n}"}
{"instruction":"Write a Zig function similar to unwrap from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn unwrap(oi: OptionalIndex) ?Decl.Index {\n            if (oi == .none) return null;\n            return @enumFromInt(@intFromEnum(oi));\n        }"}
{"instruction":"Write a Zig function similar to end from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig","output":"pub fn end(self: *Node) void {\n        self.context.maybeRefresh();\n        if (self.parent) |parent| {\n            {\n                self.context.update_mutex.lock();\n                defer self.context.update_mutex.unlock();\n                _ = @cmpxchgStrong(?*Node, &parent.recently_updated_child, self, null, .monotonic, .monotonic);\n            }"}
{"instruction":"Write a Zig function similar to createSerialNumber from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: mkfat32.zig","output":"fn createSerialNumber() u32 {\n        // TODO: Get the actual date. Currently there is no std lib for human readable date.\n        const year = 2020;\n        const month = 09;\n        const day = 27;\n        const hour = 13;\n        const minute = 46;\n        const second = 53;\n        const millisecond_10 = 54;\n\n        const p1 = (@as(u16, month) << 8) | day;\n        const p2 = (@as(u16, second) << 8) | millisecond_10;\n        const p3 = (@as(u16, hour) << 8) | minute;\n\n        const p4 = p1 + p2;\n        const p5 = p3 + year;\n\n        return (@as(u32, p4) << 16) + p5;\n    }"}
{"instruction":"Write a Zig const similar to layers from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/mnist/mnist.zig","output":"const layers: []const Layer = &.{ self.fc1, self.fc2 };"}
{"instruction":"Write a Zig function similar to clone from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"pub fn clone(self: Map, allocator: Allocator) !Map {\n    var other: Map = .{}"}
{"instruction":"Write a Zig function similar to add_sh_cmd from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn add_sh_cmd(sh_cmd: []const u8) *Step {\n    const cmd = fmt(\"set -o nounset; set -o errexit; {s}"}
{"instruction":"Write a Zig const similar to std_options from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/main.zig","output":"pub const std_options: std.Options = .{\n    .log_level = .info,\n    .log_scope_levels = &[_]std.log.ScopeLevel{\n        .{ .scope = .modernbert, .level = .info },\n    },\n    .logFn = async.logFn(std.log.defaultLog),\n};"}
{"instruction":"Write a Zig function similar to resolveBracketAccessType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveBracketAccessType(analyser: *Analyser, lhs: Type, rhs: BracketAccess) error{OutOfMemory}"}
{"instruction":"Write Zig 0.13.0 code for: Values §","input":"values.zig Shell Primitive Types § Primitive Types Type C Equivalent Description i8 int8_t signed 8-bit integer u8 uint8_t unsigned 8-bit integer i16 int16_t signed 16-bit integer u16 uint16_t unsigned 16-bit integer i32 int32_t signed 32-bit integer u32 uint32_t unsigned 32-bit integer i64 int64_t signed 64-bit integer u64 uint64_t unsigned 64-bit integer i128 __int128 signed 128-bit integer u128 unsigned __int128 unsigned 128-bit integer isize intptr_t signed pointer sized integer usize uintpt","output":"<span class=\"tok-kw\">const</span> print = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).debug.print;\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">i32</span> = <span class=\"tok-null\">undefined</span>;\n    x = <span class=\"tok-number\">1</span>;\n    print(<span class=\"tok-str\">\"{d}\"</span>, .{x});\n}"}
{"instruction":"Write a Zig function similar to errorFmt from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"fn errorFmt(vm: *Vm, comptime fmt: []const u8, args: anytype) Vm.Error!*Value {\n    const str = try vm.gc.alloc(.str);\n    str.* = .{ .str = try Value.String.init(vm.gc.gpa, fmt, args) }"}
{"instruction":"Write a Zig function similar to getDefaultSectorSize from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: mkfat32.zig","output":"fn getDefaultSectorSize() u16 {\n        // TODO: Look into if this could be different for different scenarios\n        return 512;\n    }"}
{"instruction":"Write a Zig const similar to handle from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/ForeignToplevelHandle.zig","output":"const handle: *ForeignToplevelHandle = @fieldParentPtr(\"foreign_close\", listener);"}
{"instruction":"Write a Zig function similar to pushRelease from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushRelease(c: *Chunk, slot: u8, node: *ast.Node) !void {\n    log.tracev(\"release: {}"}
{"instruction":"Write a Zig function similar to generateBlockExpression from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateBlockExpression(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    for (self.ast.nodes.items(.components)[node].BlockExpression) |statement| {\n        _ = try self.generateNode(statement, breaks);\n    }"}
{"instruction":"Write a Zig function similar to logFn from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn logFn(comptime fallbackLogFn: LogFn) LogFn {\n    return struct {\n        const Self = @This();\n\n        var mu: ?Mutex = null;\n\n        pub fn call(\n            comptime message_level: std.log.Level,\n            comptime scope: @TypeOf(.enum_literal),\n            comptime format: []const u8,\n            args: anytype,\n        ) void {\n            if (coro.inCoro() == false) {\n                return fallbackLogFn(message_level, scope, format, args);\n            }"}
{"instruction":"Write a Zig function similar to addLocal from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn addLocal(self: *Self, node: Ast.Node.Index, name: Ast.TokenIndex, local_type: *obj.ObjTypeDef, final: bool, mutable: bool) Error!usize {\n    if (self.current.?.local_count == std.math.maxInt(u8)) {\n        const location = self.ast.tokens.get(name);\n        self.reporter.reportErrorAt(\n            .locals_count,\n            location,\n            location,\n            \"Too many local variables in scope.\",\n        );\n        return 0;\n    }"}
{"instruction":"Write a Zig struct similar to ContentDispositionAttributes from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"const ContentDispositionAttributes = struct {\n        name: []const u8,\n        filename: ?[]const u8 = null,\n    }"}
{"instruction":"Write a Zig function similar to OP_PROTOCOL_INVOKE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_PROTOCOL_INVOKE(self: *Self, location: Ast.TokenIndex, identifier: []const u8) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_PROTOCOL_INVOKE,\n        try self.identifierConstant(identifier),\n    );\n}"}
{"instruction":"Write a Zig function similar to prefixExpr from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/parser.zig","output":"fn prefixExpr(p: *Parser, skip_nl: SkipNl, level: u8) Error!Node.Index {\n        const tok = p.nextToken(skip_nl);\n        switch (p.tok_ids[tok]) {\n            .minus => {\n                p.skipNl();\n                return p.addUn(.negate_expr, tok, try p.powerExpr(skip_nl, level));\n            }"}
{"instruction":"Write a Zig function similar to renderString from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/C3.zig","output":"fn renderString(\n    params: *const encoding.Params,\n    len: u64,\n) encoding.EncodeVariableError!encoding.RenderStringResult {\n    const res = try encoding.renderSlice(\"ptr\", \"len\", params);\n\n    const buf = try params.scratch.alloc(u8, res.item_bufs.len);\n    for (res.item_bufs, 0..) |item, ndx| {\n        buf[ndx] = item[0];\n    }"}
{"instruction":"Write a Zig function similar to getSlotPtr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn getSlotPtr(c: *const Chunk, idx: usize) *Slot {\n    return &c.slot_stack.items[c.curBlock.slot_start + idx];\n}"}
{"instruction":"Write a Zig struct similar to Capability from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/pci.zig","output":"pub const Capability = struct {\n    id: u8,\n    next: u8,\n    len: u8,\n    data: []u8,\n\n    const Self = @This();\n}"}
{"instruction":"Write a Zig function similar to reader from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn reader(self: *Self) IOReader {\n    return .{ .context = self }"}
{"instruction":"Write a Zig struct similar to Parser from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"const Parser = struct {\n    src: []const u8,\n    html: html.Ast,\n    nodes: std.ArrayListUnmanaged(Node) = .{}"}
{"instruction":"Write a Zig function similar to declaration from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn declaration(self: *Self, docblock: ?Ast.TokenIndex) Error!?Ast.Node.Index {\n    const global_scope = self.current.?.scope_depth == 0;\n\n    const node = if (try self.match(.Object))\n        try self.objectDeclaration()\n    else if (try self.match(.Protocol))\n        try self.protocolDeclaration()\n    else if (try self.match(.Enum))\n        try self.enumDeclaration()\n    else if ((try self.match(.Fun)) or (global_scope and try self.match(.Extern)))\n        try self.funDeclaration()\n    else if ((try self.match(.Final)) or\n        (try self.match(.Var) or\n            (self.check(.Identifier) and std.mem.eql(u8, \"_\", self.ast.tokens.items(.lexeme)[self.current_token.?]))))\n    variable: {\n        const final = self.current_token.? > 0 and self.ast.tokens.items(.tag)[self.current_token.? - 1] == .Final;\n        try self.consume(.Identifier, \"Expected identifier\");\n        const identifier = self.current_token.? - 1;\n        const dismiss_identifier = std.mem.eql(u8, \"_\", self.ast.tokens.items(.lexeme)[identifier]);\n\n        // Type omitted?\n        if (!(try self.match(.Colon))) {\n            break :variable try self.varDeclaration(\n                identifier,\n                null,\n                .Semicolon,\n                final,\n                dismiss_identifier,\n                true,\n                false,\n            );\n        }"}
{"instruction":"Write a Zig function similar to deinit from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/key_value.zig","output":"pub fn deinit(self: *Self, allocator: Allocator) void {\n            const allocation = @as([*]align(alignment) u8, @alignCast(@ptrCast(if (kFirst) self.keys.ptr else self.values.ptr)));\n            allocator.free(allocation[0 .. self.keys.len * size]);\n        }"}
{"instruction":"Write a Zig function similar to deinit from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn deinit(this: *const @This()) void {\n            switch (this.*) {\n                .success => {}"}
{"instruction":"Write a Zig function similar to formatDegibberish from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/degibberish.zig","output":"fn formatDegibberish(data: FormatDegibberishData, writer: *std.Io.Writer) std.Io.Writer.Error!void {\n    const ip = data.ip;\n    var ty = data.ty;\n\n    while (ty != .none) {\n        switch (ip.indexToKey(ty)) {\n            .simple_type,\n            .int_type,\n            => try writer.print(\"{f}"}
{"instruction":"Write a Zig function similar to init from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"pub fn init(options: looppkg.Options) !Loop {\n        const entries = std.math.cast(u13, options.entries) orelse\n            return error.TooManyEntries;\n\n        var result: Loop = .{\n            // TODO(mitchellh): add an init_advanced function or something\n            // for people using the io_uring API directly to be able to set\n            // the flags for this.\n            .ring = try linux.IoUring.init(entries, 0),\n        }"}
{"instruction":"Write a Zig function similar to openUrl from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn openUrl(url: [:0]const u8) void {\n    c.webui_open_url(url.ptr);\n}"}
{"instruction":"Write a Zig const similar to Bun__userAgent from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"const Bun__userAgent: [*:0]const u8 = Global.user_agent;"}
{"instruction":"Write a Zig function similar to loadDebugSymbolsSync from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn loadDebugSymbolsSync(self: *Self, req: proto.LoadSymbolsRequest) void {\n            trace.initThread();\n            defer trace.deinitThread();\n\n            const z = trace.zone(@src());\n            defer z.end();\n\n            const start = time.microTimestamp();\n            defer {\n                const end = time.microTimestamp();\n                const diff: f32 = @floatFromInt(end - start);\n                log.debugf(\"debug symbols loaded in {d:.3}"}
{"instruction":"Write a Zig function similar to mainLoop from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"fn mainLoop(self: *Self) !void {\n        // This code somehow crashes yet. Needs more investigations\n        var native_activity = NativeActivity.init(self.activity);\n        defer native_activity.deinit();\n\n        // Must be called from main thread…\n        _ = try native_activity.AndroidMakeFullscreen();\n\n        var loop: usize = 0;\n        app_log.info(\"mainLoop() started\\n\", .{}"}
{"instruction":"Write a Zig struct similar to LocalScriptImport from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"const LocalScriptImport = struct {\n    referenced: bool = false,\n    location: Ast.TokenIndex,\n    end_location: Ast.TokenIndex,\n}"}
{"instruction":"Write a Zig function similar to loadDebugSymbolsAsync from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn loadDebugSymbolsAsync(self: *Self, req: proto.LoadSymbolsRequest) !void {\n            self.data.state.shutdown_wg.start();\n            const thread = try Thread.spawn(.{}"}
{"instruction":"Write a Zig function similar to getUndefined from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn getUndefined(ip: *InternPool, gpa: Allocator, ty: Index) Allocator.Error!Index {\n    assert(ip.isType(ty));\n    return try ip.get(gpa, .{ .undefined_value = .{ .ty = ty }"}
{"instruction":"Write a Zig function similar to isBlockExpr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn isBlockExpr(self: *Node) bool {\n        return @as(*NodeHeader, @ptrFromInt(@intFromPtr(self) - 1)).*.is_block_expr;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: WebAssembly §","input":"Zig supports building for WebAssembly out of the box. Freestanding § For host environments like the web browser and nodejs, build as an executable using the freestanding OS target. Here's an example of running Zig code compiled to WebAssembly with nodejs. math.zig Shell test.js Shell WASI § Zig's support for WebAssembly System Interface (WASI) is under active development. Example of using the standard library and reading command line arguments: wasi_args.zig Shell Shell A more interesting exampl","output":"<span class=\"tok-kw\">extern</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">print</span>(<span class=\"tok-type\">i32</span>) <span class=\"tok-type\">void</span>;\n\n<span class=\"tok-kw\">export</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">add</span>(a: <span class=\"tok-type\">i32</span>, b: <span class=\"tok-type\">i32</span>) <span class=\"tok-type\">void</span> {\n    print(a + b);\n}"}
{"instruction":"Write a Zig const similar to sample_count from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/gen.zig","output":"pub const sample_count: usize = 10000;"}
{"instruction":"Write a Zig function similar to eql from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn eql(ctx: GenericContext, a: Data, b: Data) bool {\n                _ = ctx;\n                return a.eql(b);\n            }"}
{"instruction":"Write a Zig function similar to bytesRead from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/container.zig","output":"pub fn bytesRead(self: *Self) u32 {\n                return @truncate(self.bytes);\n            }"}
{"instruction":"Write a Zig const similar to xy_delta from zig-gamedev/zig-gamedev","input":"Repository: zig-gamedev/zig-gamedev (2703 ⭐)\nFile: experiments/genart/src/x0012.zig","output":"const xy_delta: f32 = if (frame % 180 < 90) 0.01 else 0.02;"}
{"instruction":"Write a Zig struct similar to Frame from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub const Frame = struct {\n    /// List of instructions part of this function.\n    body: []const u32,\n    /// Index into `body`.\n    ip: u32 = 0,\n    /// Number of parameters current function has. Needed to calculate\n    /// a reference to instructions.\n    params: u32,\n    /// The module in which this function lives in.\n    mod: *Bytecode,\n    /// Values this function captures.\n    captures: []*Value,\n\n    /// Value of `this` as set by the caller.\n    this: *Value, // = Value.Null,\n    /// Frame of the function which called this, forms a call stack.\n    caller_frame: ?*Frame,\n    /// Frame of `mod.main`.\n    module_frame: *Frame,\n    /// This function frames stack.\n    stack: Stack = .{}"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn init(self: *ModernBertModel, options: ModernBertOptions) void {\n        self.options = options;\n        self.final_norm.eps = 1e-5;\n        self.embeddings.norm.eps = 1e-5;\n        for (self.layers, 0..) |*encoder_layer, layer_idx| {\n            encoder_layer.attn.Wqkv.weight = encoder_layer.attn.Wqkv.weight.withSharding(.{0}"}
{"instruction":"Write a Zig function similar to load from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn load(self: *const Self, reader: *std.Io.Reader, eol_mode: *EolMode, utf8_sanitized: *bool) LoadError!Root {\n    const lf = '\\n';\n    const cr = '\\r';\n    const self_ = @constCast(self);\n    var read_buffer: ArrayList(u8) = .empty;\n    defer read_buffer.deinit(self.external_allocator);\n    try reader.appendRemainingUnlimited(self.external_allocator, &read_buffer);\n    var buf = try read_buffer.toOwnedSlice(self.external_allocator);\n\n    if (!std.unicode.utf8ValidateSlice(buf)) {\n        const converted = try unicode.utf8_sanitize(self.external_allocator, buf);\n        self.external_allocator.free(buf);\n        buf = converted;\n        utf8_sanitized.* = true;\n    }"}
{"instruction":"Write a Zig function similar to handleThreadExited from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn handleThreadExited(self: *Self, scratch: Allocator, pid: types.PID) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            const sub = &self.data.subordinate.?;\n\n            {\n                // remove all thread breakpoints\n                var ndx: usize = 0;\n                while (ndx < sub.thread_breakpoints.items.len) : (ndx += 1) {\n                    if (sub.thread_breakpoints.items[ndx].pid.neq(pid)) continue;\n\n                    _ = sub.thread_breakpoints.orderedRemove(ndx);\n                    if (ndx > 0) ndx -= 1;\n                }"}
{"instruction":"Write a Zig function similar to identifierTokenAndLocFromIndex from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn identifierTokenAndLocFromIndex(tree: Ast, source_index: usize) ?struct { Ast.TokenIndex, offsets.Loc }"}
{"instruction":"Write a Zig function similar to getInteger from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/call_zig_from_js/main.zig","output":"fn getInteger(n1: i64, n2: i64, n3: i64, f1: f64) void {\n    std.debug.print(\"number is {}"}
{"instruction":"Write a Zig function similar to init from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn init(gpa: mem.Allocator) !Self {\n            return Self.initCapacity(gpa, 16);\n        }"}
{"instruction":"Write a Zig function similar to runtimeTests from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"pub fn runtimeTests() void {\n    // Interrupts aren't enabled yet, so for the runtime tests, enable it temporary\n    arch.enableInterrupts();\n    defer arch.disableInterrupts();\n\n    rt_initCounter_0();\n    rt_waitTicks();\n    rt_waitTicks2();\n}"}
{"instruction":"Write a Zig function similar to append from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"pub fn append(value: *Self, data: Server) !void {\n        value.mutex.lock();\n        defer value.mutex.unlock();\n        for (value.list.items) |item| {\n            if (std.meta.eql(item.address, data.address)) {\n                // is already in the list, dont add it again\n                return;\n            }"}
{"instruction":"Write a Zig function similar to pop from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"fn pop(noalias self: *Thread, noalias thread_pool: *ThreadPool) ?Node.Buffer.Stole {\n        // Check our local buffer first\n        if (self.run_buffer.pop()) |node| {\n            return Node.Buffer.Stole{\n                .node = node,\n                .pushed = false,\n            }"}
{"instruction":"Write a Zig function similar to receive from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn receive(self: *Process, from: tp.pid_ref, m: tp.message) tp.result {\n        return self.receive_safe(from, m) catch |e| switch (e) {\n            error.ExitNormal => tp.exit_normal(),\n            error.ExitUnexpected => error.Exit,\n            else => tp.exit_error(e, @errorReturnTrace()),\n        }"}
{"instruction":"Write a Zig function similar to lock_slow from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"fn lock_slow(self: *Locker) void {\n        @branchHint(.cold);\n\n        // Avoid doing an atomic swap below if we already know the state is contended.\n        // An atomic swap unconditionally stores which marks the cache-line as modified\n        // unnecessarily.\n        if (self.state.load(.monotonic) == contended) {\n            Futex.wait(&self.state, contended);\n        }"}
{"instruction":"Write a Zig const similar to TENTRY_CACHE_DISABLED from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"const TENTRY_CACHE_DISABLED: u32 = 0x10;"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">const</span> FileOpenError = <span class=\"tok-kw\">error</span>{\n    AccessDenied,\n    OutOfMemory,\n    FileNotFound,\n};\n\n<span class=\"tok-kw\">const</span> AllocationError = <span class=\"tok-kw\">error</span>{\n    OutOfMemory,\n};\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"coerce superset to subset\"</span> {\n    foo(FileOpenError.OutOfMemory) <span class=\"tok-kw\">catch</span> {};\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(err: FileOpenError) AllocationError {\n    <span class=\"tok-kw\">return</span> err;\n}"}
{"instruction":"Write a Zig struct similar to Console from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/console/console.zig","output":"pub const Console = struct {\n    // TODO: configurable writer\n    timers: std.StringHashMapUnmanaged(u32) = .{}"}
{"instruction":"Write a Zig struct similar to VmReadLine from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"const VmReadLine = struct {\n    vm: *cy.VM,\n    read_line: cy.Value,\n\n    fn read(ptr: *anyopaque, prefix: [:0]const u8) anyerror![]const u8 {\n        const self: *@This() = @ptrCast(@alignCast(ptr));\n        const vm_prefix = try self.vm.allocString(prefix);\n        defer self.vm.release(vm_prefix);\n        const line = try self.vm.callFunc(self.read_line, &.{ vm_prefix }"}
{"instruction":"Write a Zig function similar to eql from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/PathTable.zig","output":"pub fn eql(_: @This(), a: Path, b: Path) bool {\n            return a == b;\n        }"}
{"instruction":"Write a Zig function similar to getOutputStream from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/opensl.zig","output":"pub fn getOutputStream(allocator: std.mem.Allocator, conf: OutputStreamConfig) !*OutputStream {\n        // TODO: support multiple formats\n        std.debug.assert(conf.sample_format == .Int16);\n\n        var config = conf;\n        config.buffer_size = config.buffer_size orelse 256;\n        config.sample_rate = config.sample_rate orelse 44100;\n\n        // Allocate memory for audio buffer\n        // TODO: support other formats\n        var buffers = try allocator.alloc(i16, config.buffer_size.? * config.buffer_count);\n        errdefer allocator.free(buffers);\n\n        for (buffers) |*sample| {\n            sample.* = 0;\n        }"}
{"instruction":"Write a Zig function similar to print from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigsimple/main.zig","output":"fn print(self: @This(), msg: []const u8) void {\n        std.debug.print(\n            \"{s}"}
{"instruction":"Write a Zig function similar to frac from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn frac(vm: *cy.VM) Value {\n    const f = vm.getFloat(0);\n    const res = std.math.modf(f);\n    return Value.initF64(res.fpart);\n}"}
{"instruction":"Write a Zig function similar to getUnprotectedSlice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn getUnprotectedSlice(slice: Slice, ip: *const InternPool) []const Index {\n            if (slice.len == 0) return &.{}"}
{"instruction":"Write a Zig function similar to read_short_string from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn read_short_string(self: *Decoder) Error![]const u8 {\n        const length: u8 = try self.read_int(u8);\n        return try self.read_bytes(length);\n    }"}
{"instruction":"Write a Zig function similar to asmSimple from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn asmSimple(tree: Ast, node: Node.Index) full.Asm {\n    const template, const rparen = tree.nodeData(node).node_and_token;\n    return fullAsmComponents(tree, .{\n        .asm_token = tree.nodeMainToken(node),\n        .template = template,\n        .items = &.{}"}
{"instruction":"Write a Zig function similar to isAll8BitColor from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn isAll8BitColor(comptime red_type: type, comptime green_type: type, comptime blue_type: type, comptime alpha_type: type) bool {\n    return red_type == u8 and green_type == u8 and blue_type == u8 and (alpha_type == u8 or alpha_type == void);\n}"}
{"instruction":"Write a Zig function similar to load from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/taxonomy.zig","output":"pub fn load(self: *Taxonomy, root: []const u8, max_date_: ?[]const u8) !void {\n        var dir = try std.fs.cwd().openDir(root, .{ .iterate = true }"}
{"instruction":"Write a Zig function similar to task from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig","output":"pub fn task(debug: bool) !void {\n            if (usb_config == null) return error.UninitializedDevice;\n\n            S.debug_mode = debug;\n\n            // Device Specific Request\n            const DeviceRequestProcessor = struct {\n                fn process_setup_request(setup: *const types.SetupPacket) !void {\n                    switch (setup.request_type.type) {\n                        .Class => {\n                            //const itfIndex = setup.index & 0x00ff;\n                            std.log.info(\"Device.Class\", .{}"}
{"instruction":"Write a Zig function similar to createBlockModel from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig","output":"pub fn createBlockModel(block: Block, modeData: *u16, zon: ZonElement) ModelIndex {\n\tconst modelId = zon.get([]const u8, \"model\", \"cubyz:cube\");\n\tconst stateCount = zon.get(u16, \"states\", 2);\n\tconst blockId = block.id();\n\tif(stateCount <= 1) {\n\t\tstd.log.err(\"Block '{s}"}
{"instruction":"Write a Zig function similar to consumeHash from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"fn consumeHash(self: *Tokenizer) ?[]const u8 {\n        return self.consume(isIdent, isIdent);\n    }"}
{"instruction":"Write a Zig function similar to tail from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig","output":"fn tail(list: *const Node) *Node {\n    return list.prev;\n}"}
{"instruction":"Write a Zig function similar to advanceBy from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn advanceBy(self: *Self, off: usize) void {\n    self.off = self.off + off;\n}"}
{"instruction":"Write a Zig function similar to eql from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn eql(self: Context, a: NodeWithUri, b: NodeWithUri) bool {\n            _ = self;\n            if (a.node != b.node) return false;\n            return std.mem.eql(u8, a.uri, b.uri);\n        }"}
{"instruction":"Write a Zig function similar to fmt from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/PathTable.zig","output":"pub fn fmt(\n        p: Path,\n        st: *const StringTable,\n        pt: *const PathTable,\n        prefix: ?[]const u8,\n        trailing_slash: bool,\n    ) Path.Formatter {\n        return .{\n            .p = p,\n            .st = st,\n            .pt = pt,\n            .prefix = prefix,\n            .slash = trailing_slash,\n        }"}
{"instruction":"Write a Zig function similar to isTempSlot from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn isTempSlot(c: *const cy.Chunk, slot: SlotId) bool {\n    return c.slot_stack.items[c.curBlock.slot_start + slot].type == .temp;\n}"}
{"instruction":"Write a Zig function similar to deinit from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"pub fn deinit(self: DownloadResult, allocator: Allocator) void {\n        switch (self) {\n            .ok => {}"}
{"instruction":"Write a Zig struct similar to ThrowExpr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"const ThrowExpr = struct {\n    child: *Node align(8),\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to get_bufsz from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn get_bufsz(msg: []const u8, qnamelen: c_int) u16 {\n    return c.dns_get_bufsz(msg.ptr, cc.to_isize(msg.len), qnamelen);\n}"}
{"instruction":"Write a Zig function similar to tick from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"pub fn tick(self: *Client) void {\n        const duration_ticks: u64 = switch (self.awaiter) {\n            .none, .send_and_forget => return,\n            .send_and_await_reply => |*awaiter| ticks: {\n                if (awaiter.state == .sending) return;\n                assert(awaiter.state == .awaiting);\n                awaiter.state.awaiting.duration_ticks += 1;\n                break :ticks awaiter.state.awaiting.duration_ticks;\n            }"}
{"instruction":"Write a Zig function similar to get from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn get(self: *Defaults, dir: main.files.Dir, dirPath: []const u8) ZonElement {\n\t\t\t\tconst result = self.defaults.getOrPut(self.localAllocator.allocator, dirPath) catch unreachable;\n\n\t\t\t\tif(!result.found_existing) {\n\t\t\t\t\tresult.key_ptr.* = self.localAllocator.dupe(u8, dirPath);\n\t\t\t\t\tconst default: ZonElement = self.read(dir) catch |err| blk: {\n\t\t\t\t\t\tstd.log.err(\"Failed to read default file: {s}"}
{"instruction":"Write a Zig const similar to f24 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f24: u21 = 57387;"}
{"instruction":"Write a Zig struct similar to Client from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"pub const Client = struct {\n    pub const Callback = *const fn (self: *Client) void;\n    pub const GetMessagePropertiesCallback = *const fn (\n        self: *Client,\n        result: ?GetMessagePropertiesResult,\n    ) Decoder.Error!void;\n    pub const GetMessageBodyCallback = *const fn (\n        self: *Client,\n        body: []const u8,\n    ) Decoder.Error!void;\n\n    io: *IO,\n    fd: IO.socket_t = IO.INVALID_SOCKET,\n    reply_timeout_ticks: u64,\n\n    receive_buffer: ReceiveBuffer,\n    receive_completion: IO.Completion = undefined,\n\n    send_buffer: SendBuffer,\n    send_completion: IO.Completion = undefined,\n\n    heartbeat: union(enum) {\n        idle,\n        sending: IO.Completion,\n    }"}
{"instruction":"Write a Zig const similar to STATUS_REGISTER_B from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/cmos.zig","output":"const STATUS_REGISTER_B: u8 = 0x0B;"}
{"instruction":"Write a Zig struct similar to QueueAllocation from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/graphics_context.zig","output":"const QueueAllocation = struct {\n    graphics_family: u32,\n    present_family: u32,\n}"}
{"instruction":"Write a Zig struct similar to Manager from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/configuration.zig","output":"pub const Manager = struct {\n    allocator: std.mem.Allocator,\n    config: Config,\n    zig_exe: ?struct {\n        /// Same as `Manager.config.zig_exe_path.?`\n        path: []const u8,\n        version: std.SemanticVersion,\n        env: Env,\n    }"}
{"instruction":"Write a Zig function similar to updateServerData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn updateServerData(pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void {\n\t\t\tif(event == .remove or event.update.remaining.len == 0) {\n\t\t\t\tconst entry = StorageServer.remove(pos, chunk) orelse return;\n\t\t\t\tmain.globalAllocator.free(entry.text);\n\t\t\t\treturn;\n\t\t\t}"}
{"instruction":"Write a Zig function similar to parseParamsIntoSlice from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn parseParamsIntoSlice(slice: []Param(Help), str: []const u8) ![]Param(Help) {\n    var list = std.ArrayList(Param(Help)){\n        .items = slice[0..0],\n        .capacity = slice.len,\n    }"}
{"instruction":"Write a Zig const similar to keyboard from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Keyboard.zig","output":"const keyboard: *Keyboard = @fieldParentPtr(\"key\", listener);"}
{"instruction":"Write a Zig struct similar to MiddlewareConfig from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub const MiddlewareConfig = struct {\n    arena: Allocator,\n    allocator: Allocator,\n}"}
{"instruction":"Write a Zig function similar to removeRepoFromEcosystem from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/taxonomy.zig","output":"fn removeRepoFromEcosystem(self: *Taxonomy, eco_name: []const u8, repo: []const u8) !void {\n        const eco_id = self.eco_ids.get(eco_name) orelse return error.InvalidEcosystem;\n        var repos_for_eco = self.eco_to_repo_map.getPtr(eco_id) orelse return error.EcosystemHasNoRepos;\n        const repo_id = self.repo_ids.get(repo) orelse return error.InvalidRepo;\n        _ = repos_for_eco.remove(repo_id);\n\n        const key: EcoTagKey = .{ .eco_id = eco_id, .repo_id = repo_id }"}
{"instruction":"Write a Zig function similar to option_lto from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn option_lto() void {\n    const default = switch (_mode) {\n        .ReleaseFast, .ReleaseSmall, .ReleaseSafe => true,\n        else => false,\n    }"}
{"instruction":"Write a Zig const similar to start from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const start: usize = @intCast(range.start);"}
{"instruction":"Write a Zig function similar to vtable_free from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"fn vtable_free(\n    _: *anyopaque,\n    buf: []u8,\n    alignment: Alignment,\n    _: usize,\n) void {\n    // mi_free_size internally just asserts the size\n    // so it's faster if we don't pass that value through\n    // but its good to have that assertion\n    if (comptime bun.Environment.isDebug) {\n        assert(mimalloc.mi_is_in_heap_region(buf.ptr));\n        if (mimalloc.mustUseAlignedAlloc(alignment))\n            mimalloc.mi_free_size_aligned(buf.ptr, buf.len, alignment.toByteUnits())\n        else\n            mimalloc.mi_free_size(buf.ptr, buf.len);\n    }"}
{"instruction":"Write a Zig function similar to consumeTemp from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn consumeTemp(c: *Chunk, slot: SlotId, node: *ast.Node) !void {\n    getSlotPtr(c, slot).boxed_retains = false;\n    try popUnwindSlot(c, slot, node);\n}"}
{"instruction":"Write a Zig function similar to isTargetVariantEnvironment from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn isTargetVariantEnvironment(comp: *const Compilation, query: []const u8) bool {\n    if (comp.target.os.tag.isDarwin()) {\n        const variant_target = comp.darwin_target_variant orelse return false;\n        return target_util.isEnvironment(variant_target, query);\n    }"}
{"instruction":"Write a Zig function similar to deinit from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/IdleInhibitManager.zig","output":"pub fn deinit(inhibit_manager: *IdleInhibitManager) void {\n    while (inhibit_manager.inhibitors.pop()) |inhibitor| {\n        inhibitor.data.destroy.link.remove();\n        util.gpa.destroy(inhibitor);\n    }"}
{"instruction":"Write a Zig function similar to add from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dialogs.zig","output":"pub fn add(self: *Dialogs, gpa: std.mem.Allocator, dialog: Dialog) !*std.Thread.Mutex {\n    self.mutex.lock();\n    errdefer self.mutex.unlock();\n    for (self.stack.items) |*d| {\n        if (d.id == dialog.id) {\n            d.* = dialog;\n            break;\n        }"}
{"instruction":"Write a Zig function similar to init from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn init(args: InitArgs) RgbColorspace {\n        var result = RgbColorspace{\n            .red = args.red,\n            .green = args.green,\n            .blue = args.blue,\n            .white = args.white,\n            .rgba_to_xyza = undefined,\n            .xyza_to_rgba = undefined,\n            .to_gamma = args.to_gamma,\n            .to_gamma_fast = args.to_gamma_fast,\n            .to_linear = args.to_linear,\n            .to_linear_fast = args.to_linear_fast,\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Operators §","input":"There is no operator overloading. When you see an operator in Zig, you know that it is doing something from this table, and nothing else. Table of Operators § Name Syntax Types Remarks Example Addition Integers Floats Can cause overflow for integers. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Wrapping Addition Integers Twos-complement wrapping behavior. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Saturating Addition Integers Invokes","output":"<span class=\"tok-kw\">const</span> value: <span class=\"tok-type\">anyerror</span>!<span class=\"tok-type\">u32</span> = <span class=\"tok-kw\">error</span>.Broken;\n<span class=\"tok-kw\">const</span> unwrapped = value <span class=\"tok-kw\">catch</span> <span class=\"tok-number\">1234</span>;\nunwrapped == <span class=\"tok-number\">1234</span>"}
{"instruction":"Write a Zig function similar to sys_iserror from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_iserror(ret_code: *const isize) bool {\n    return call(.SYS_ISERROR, ret_code) != 0;\n}"}
{"instruction":"Write a Zig function similar to getTargetConfig from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn getTargetConfig(self: Target) TargetConfig {\n        const config: TargetConfig = switch (self) {\n            .aarch64 => TargetConfig{\n                .lib_dir = \"aarch64-linux-android\",\n                .include_dir = \"aarch64-linux-android\",\n                .out_dir = \"arm64\",\n                .target = zig_targets.aarch64,\n            }"}
{"instruction":"Write a Zig function similar to sprite from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/dvui.zig","output":"pub fn sprite(src: std.builtin.SourceLocation, init_opts: SpriteInitOptions, opts: dvui.Options) dvui.WidgetData {\n    const source_size: dvui.Size = dvui.imageSize(init_opts.source) catch .{ .w = 0, .h = 0 }"}
{"instruction":"Write a Zig const similar to TABLE_SIZE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/idt.zig","output":"const TABLE_SIZE: u16 = @sizeOf(IdtEntry) * NUMBER_OF_ENTRIES - 1;"}
{"instruction":"Write a Zig function similar to bytesSlice from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/PathTable.zig","output":"pub fn bytesSlice(\n    //     index: Path,\n    //     st: *const StringTable,\n    //     pt: *const PathTable,\n    //     buf: []u8,\n    //     sep: u8,\n    //     // extra path component to add at the end\n    //     name: ?StringTable.String,\n    // ) usize {\n    //     var out = std.ArrayListUnmanaged(u8).initBuffer(buf);\n    //     const components = index.slice(pt);\n    //     for (components) |c| {\n    //         const bytes = c.slice(st);\n    //         out.appendSliceAssumeCapacity(bytes);\n    //         out.appendAssumeCapacity(sep);\n    //     }"}
{"instruction":"Write Zig 0.14.1 code for: Compilation Model §","input":"A Zig compilation is separated into modules . Each module is a collection of Zig source files, one of which is the module's root source file . Each module can depend on any number of other modules, forming a directed graph (dependency loops between modules are allowed). If module A depends on module B, then any Zig source file in module A can import the root source file of module B using @import with the module's name. In essence, a module acts as an alias to import a Zig source file (which migh","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-builtin\">@setRuntimeSafety</span>(<span class=\"tok-null\">true</span>);\n    <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">255</span>;\n    <span class=\"tok-comment\">// Let's overflow this integer!</span>\n    x += <span class=\"tok-number\">1</span>;\n}\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">const</span> panic = std.debug.FullPanic(myPanic);\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">myPanic</span>(msg: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>, first_trace_addr: ?<span class=\"tok-type\">usize</span>) <span class=\"tok-type\">noreturn</span> {\n    _ = first_trace_addr;\n    std.debug.print(<span class=\"tok-str\">\"Panic! {s}\\n\"</span>, .{msg});\n    std.process.exit(<span class=\"tok-number\">1</span>);\n}\n\n<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);"}
{"instruction":"Write a Zig function similar to processNode from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn processNode(self: *UsesFiberContext, _: std.mem.Allocator, ast: Self.Slice, node: Self.Node.Index) (std.mem.Allocator.Error || std.fmt.BufPrintError)!bool {\n            switch (ast.nodes.items(.tag)[node]) {\n                .AsyncCall,\n                .Resolve,\n                .Resume,\n                .Yield,\n                => {\n                    self.result = true;\n                    return true;\n                }"}
{"instruction":"Write a Zig function similar to serialize from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn serialize(self: TakeHalf, writer: *utils.BinaryWriter) void {\n\t\t\tself.dest.write(writer);\n\t\t\tself.source.write(writer);\n\t\t}"}
{"instruction":"Write a Zig const similar to X from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/bigclock/Lang.zig","output":"pub const X: u32 = if (interop.supportsUnicode()) 0x2593 else '#';"}
{"instruction":"Write a Zig function similar to build_aof from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_aof(\n    b: *std.Build,\n    step_aof: *std.Build.Step,\n    options: struct {\n        stdx_module: *std.Build.Module,\n        vsr_options: *std.Build.Step.Options,\n        target: std.Build.ResolvedTarget,\n        mode: std.builtin.OptimizeMode,\n    },\n) void {\n    const aof = b.addExecutable(.{\n        .name = \"aof\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/aof.zig\"),\n            .target = options.target,\n            .optimize = options.mode,\n        }"}
{"instruction":"Write a Zig const similar to name from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"const name: String = blk: {\n                    if (addr.eqlInt(0)) break :blk types.Unknown;"}
{"instruction":"Write a Zig const similar to sy from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/algorithms/brezenham.zig","output":"const sy: i32 = if (y0 < y1) 1 else -1;"}
{"instruction":"Write a Zig function similar to stringToSliceUnsafe from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"pub fn stringToSliceUnsafe(pool: *Pool, index: String) [:0]const u8 {\n            assert(@intFromEnum(index) < pool.bytes.items.len);\n            const string_bytes: [*:0]u8 = @ptrCast(pool.bytes.items.ptr);\n            const start = @intFromEnum(index);\n            return std.mem.sliceTo(string_bytes + start, 0);\n        }"}
{"instruction":"Write a Zig function similar to init from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"fn init(comptime root: type, comptime Cls: type, state: Cls) PyError!*Cls {\n    const cls: *Cls = try alloc(root, Cls);\n    cls.* = state;\n    return cls;\n}"}
{"instruction":"Write a Zig function similar to writeRamdisk from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: build.zig","output":"fn writeRamdisk(comptime Usize: type, self: *RamdiskStep) Error!void {\n        // 1GB, don't think the ram disk should be very big\n        const max_file_size = 1024 * 1024 * 1024;\n\n        // Open the out file\n        var ramdisk = try fs.cwd().createFile(self.out_file_path, .{}"}
{"instruction":"Write a Zig struct similar to Parameter from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub const Parameter = struct {\n            doc_comments: ?[]const u8,\n            modifier: ?Modifier,\n            name: ?[]const u8,\n            name_token: ?Ast.TokenIndex,\n            type: Type,\n\n            pub const Modifier = enum {\n                comptime_param,\n                noalias_param,\n            }"}
{"instruction":"Write a Zig function similar to formatter from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"pub fn formatter(self: Ast, src: []const u8) Formatter {\n    return .{\n        .ast = self,\n        .src = src,\n    }"}
{"instruction":"Write a Zig function similar to buildValueToDouble from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn buildValueToDouble(self: *Self, value: m.MIR_op_t, dest: m.MIR_op_t) !void {\n    // Allocate memory\n    const block = try self.REG(\"call_block\", m.MIR_T_I64);\n    self.BSTART(block);\n    defer self.BEND(block); // release alloca after result is put in dest registry\n    const addr = self.REG(\"cast\", m.MIR_T_I64) catch unreachable;\n    self.ALLOCA(addr, @sizeOf(u64));\n\n    // Put the value in it as u64\n    self.MOV(\n        m.MIR_new_mem_op(\n            self.ctx,\n            m.MIR_T_U64,\n            0,\n            addr,\n            0,\n            0,\n        ),\n        value,\n    );\n\n    // Take it out as double\n    self.DMOV(\n        dest,\n        m.MIR_new_mem_op(\n            self.ctx,\n            m.MIR_T_D,\n            0,\n            addr,\n            0,\n            0,\n        ),\n    );\n}"}
{"instruction":"Write a Zig function similar to src from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"pub fn src(self: *const GetResult) []const u8 {\n        return self.buffer.items;\n    }"}
{"instruction":"Write a Zig function similar to mainBlock from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn mainBlock(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .mainBlock);\n    log.tracev(\"main block: {}"}
{"instruction":"Write a Zig function similar to init from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn init(allocator: std.mem.Allocator) !Self {\n        var list = Self{\n            .allocator = allocator,\n            .read_fds = .empty,\n            .write_fds = .empty,\n            .read_fd_set = try .make(allocator),\n            .write_fd_set = try .make(allocator),\n            .except_fd_set = try .make(allocator),\n        }"}
{"instruction":"Write a Zig function similar to lowerMir from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Lower.zig","output":"pub fn lowerMir(lower: *Lower, index: Mir.Inst.Index) Error!struct {\n    insts: []const Instruction,\n    relocs: []const Reloc,\n}"}
{"instruction":"Write a Zig function similar to init from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/WindowsWatcher.zig","output":"pub fn init(\n    gpa: std.mem.Allocator,\n    debouncer: *Debouncer,\n    dir_paths: []const []const u8,\n) WindowsWatcher {\n    errdefer |err| fatal.msg(\"error: unable to start the file watcher: {s}"}
{"instruction":"Write a Zig function similar to compareDir from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn compareDir(dir_id: FileId, other_dir: []const u8) !enum { missing, access_denied, match, mismatch }"}
{"instruction":"Write a Zig function similar to releaseTempValue from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn releaseTempValue(c: *Chunk, val: GenValue, node: *ast.Node) !void {\n    if (val.isRetainedTemp()) {\n        const slot = getSlot(c, val.reg);\n        if (!slot.boxed or slot.type != .temp or !slot.has_unwind) {\n            std.debug.panic(\"Expected retained temp {}"}
{"instruction":"Write a Zig function similar to deinit from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/InternalScreen.zig","output":"pub fn deinit(self: *InternalScreen, alloc: std.mem.Allocator) void {\n    self.arena.deinit();\n    alloc.destroy(self.arena);\n    self.* = undefined;\n}"}
{"instruction":"Write a Zig function similar to start from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn start(self: *Process) tp.result {\n        const frame = tracy.initZone(@src(), .{ .name = module_name ++ \" start\" }"}
{"instruction":"Write a Zig const similar to y1 from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/algorithms/brezenham.zig","output":"const y1: i32 = @intFromFloat(@floor(end.y));"}
{"instruction":"Write a Zig function similar to handleWaitResult from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn handleWaitResult(self: *ChildProcess, status: u32) void {\n    self.term = statusToTerm(status);\n}"}
{"instruction":"Write a Zig const similar to ICW4_AUTO_END_OF_INTERRUPT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const ICW4_AUTO_END_OF_INTERRUPT: u8 = 0x02;"}
{"instruction":"Write a Zig function similar to resolveGenericTypeInternal from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn resolveGenericTypeInternal(\n    analyser: *Analyser,\n    ty: Type,\n    bound_params: TokenToTypeMap,\n    visiting: *Type.Data.GenericSet,\n) error{OutOfMemory}"}
{"instruction":"Write Zig 0.15.1 code for: Build Mode §","input":"Zig has four build modes: Debug (default) ReleaseFast ReleaseSafe ReleaseSmall To add standard build options to a build.zig file: build.zig This causes these options to be available: -Doptimize=Debug Optimizations off and safety on (default) -Doptimize=ReleaseSafe Optimizations on and safety on -Doptimize=ReleaseFast Optimizations on and safety off -Doptimize=ReleaseSmall Size optimizations on and safety off Debug § Shell Fast compilation speed Safety checks enabled Slow runtime performance Larg","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">build</span>(b: *std.Build) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> optimize = b.standardOptimizeOption(.{});\n    <span class=\"tok-kw\">const</span> exe = b.addExecutable(.{\n        .name = <span class=\"tok-str\">\"example\"</span>,\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(<span class=\"tok-str\">\"example.zig\"</span>),\n            .optimize = optimize,\n        }),\n    });\n    b.default_step.dependOn(&exe.step);\n}"}
{"instruction":"Write a Zig function similar to lerp from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn lerp(self: Color, other: Color, t: f32) Color {\n    if (t <= 0) return self;\n    if (t >= 1) return other;\n    const r: f32 = std.math.lerp(@as(f32, @floatFromInt(self.r)) / 255, @as(f32, @floatFromInt(other.r)) / 255, t);\n    const g: f32 = std.math.lerp(@as(f32, @floatFromInt(self.g)) / 255, @as(f32, @floatFromInt(other.g)) / 255, t);\n    const b: f32 = std.math.lerp(@as(f32, @floatFromInt(self.b)) / 255, @as(f32, @floatFromInt(other.b)) / 255, t);\n    const a: f32 = std.math.lerp(@as(f32, @floatFromInt(self.a)) / 255, @as(f32, @floatFromInt(other.a)) / 255, t);\n    return Color{\n        .r = @intFromFloat(r * 255.99),\n        .g = @intFromFloat(g * 255.99),\n        .b = @intFromFloat(b * 255.99),\n        .a = @intFromFloat(a * 255.99),\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Operators §","input":"There is no operator overloading. When you see an operator in Zig, you know that it is doing something from this table, and nothing else. Table of Operators § Name Syntax Types Remarks Example Addition Integers Floats Can cause overflow for integers. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Wrapping Addition Integers Twos-complement wrapping behavior. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Saturating Addition Integers Invokes","output":"<span class=\"tok-kw\">const</span> x: <span class=\"tok-type\">u32</span> = <span class=\"tok-number\">1234</span>;\n<span class=\"tok-kw\">const</span> ptr = &x;\nptr.* == <span class=\"tok-number\">1234</span>"}
{"instruction":"Write a Zig struct similar to LessContext from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"const LessContext = struct {\n        lessFn: Value,\n        vm: *cy.UserVM,\n        newFramePtr: u32,\n    }"}
{"instruction":"Write a Zig function similar to handle_not_found from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn handle_not_found(self: *Process) error{ExitNormal}"}
{"instruction":"Write a Zig function similar to pushOpSlice from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn pushOpSlice(self: *ByteCodeBuffer, code: OpCode, args: []const u8) !void {\n        try self.pushOpSliceExt(code, args, .{}"}
{"instruction":"Write a Zig struct similar to Buffer from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/buffer.zig","output":"pub const Buffer = struct {\n    data: []u8,\n    type: Type,\n\n    const Type = enum {\n        arena,\n        static,\n        pooled,\n        dynamic,\n    }"}
{"instruction":"Write a Zig function similar to index from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/07_advanced_routing.zig","output":"fn index(_: *Handler, _: *httpz.Request, res: *httpz.Response) !void {\n    res.content_type = .HTML;\n    res.body =\n        \\\\<!DOCTYPE html>\n        \\\\ <p>It's possible to define a custom dispatch method, custom handler instance and/or custom middleware per-route.\n        \\\\ <p>It's also possible to create a route group, which is a group of routes who share a common prefix and/or a custom configration.\n        \\\\ <ul>\n        \\\\ <li><a href=\"/page1\">page with custom dispatch</a>\n        \\\\ <li><a href=\"/page2\">page with custom handler</a>\n    ;\n}"}
{"instruction":"Write a Zig const similar to USER_SEGMENT_DATA from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/gdt.zig","output":"const USER_SEGMENT_DATA: AccessBits = AccessBits{\n    .accessed = 0,\n    .read_write = 1,\n    .direction_conforming = 0,\n    .executable = 0,\n    .descriptor = 1,\n    .privilege = 3,\n    .present = 1,\n};"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn callback(ud: ?*anyopaque, l: *Loop, c: *Completion, r: Result) CallbackAction {\n                _ = l;\n                _ = c;\n                _ = ud;\n                _ = r.timer_remove catch unreachable;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig const similar to opt_musl from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"const opt_musl: [:0]const u8 = if (is_musl()) \"1\" else \"0\";"}
{"instruction":"Write a Zig const similar to result from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"const result: *IndexHeader = @ptrCast(bytes.ptr);"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn decode(flags: u16, content: []const u8) Decoder.Error!BasicProperties {\n            comptime assert(target == .decode);\n\n            var reader = Decoder.init(content);\n            var bitset: stdx.BitSetType(16) = .{ .bits = @bitReverse(flags) }"}
{"instruction":"Write a Zig function similar to FromMethods from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn FromMethods(comptime T: type) type {\n    const has_alpha = @hasField(T, \"a\");\n\n    const RedT: type = @FieldType(T, \"r\");\n    const GreenT: type = @FieldType(T, \"g\");\n    const BlueT: type = @FieldType(T, \"b\");\n    const AlphaT: type =\n        if (has_alpha)\n            @FieldType(T, \"a\")\n        else\n            void;\n\n    const multiple_channel_types =\n        RedT != GreenT or\n        RedT != BlueT or\n        (RedT != AlphaT and AlphaT != void);\n\n    const scaleRed = ScaleValue(RedT);\n    const scaleGreen = ScaleValue(GreenT);\n    const scaleBlue = ScaleValue(BlueT);\n    const scaleAlpha: if (has_alpha) fn (anytype) AlphaT else void =\n        if (has_alpha)\n            ScaleValue(AlphaT)\n        else {}"}
{"instruction":"Write a Zig function similar to currentImage from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/swapchain.zig","output":"pub fn currentImage(self: Swapchain) vk.Image {\n        return self.swap_images[self.image_index].image;\n    }"}
{"instruction":"Write a Zig function similar to findDefinition from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"fn findDefinition(\n        comptime root: type,\n        comptime definition: anytype,\n    ) ?Definition {\n        return switch (@TypeOf(definition)) {\n            Definition => definition,\n            type => switch (@typeInfo(definition)) {\n                .@\"struct\" => blk: {\n                    for (getAllIdentifiers(root)) |id| {\n                        if (id.definition.definition == definition)\n                            break :blk id.definition;\n                    }"}
{"instruction":"Write a Zig const similar to self from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"const self: Borrowed = .fromOpaque(ptr);"}
{"instruction":"Write a Zig function similar to build from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: build.zig","output":"pub fn build(b: *std.Build) !void {\n    dest_directory = b.option([]const u8, \"dest_directory\", \"Specify a destination directory for installation\") orelse \"\";\n    config_directory = b.option([]const u8, \"config_directory\", \"Specify a default config directory (default is /etc). This path gets embedded into the binary\") orelse \"/etc\";\n    prefix_directory = b.option([]const u8, \"prefix_directory\", \"Specify a default prefix directory (default is /usr)\") orelse \"/usr\";\n    executable_name = b.option([]const u8, \"name\", \"Specify installed executable file name (default is ly)\") orelse \"ly\";\n    init_system = b.option(InitSystem, \"init_system\", \"Specify the target init system (default is systemd)\") orelse .systemd;\n\n    const build_options = b.addOptions();\n    const version_str = try getVersionStr(b, \"ly\", ly_version);\n    const enable_x11_support = b.option(bool, \"enable_x11_support\", \"Enable X11 support (default is on)\") orelse true;\n    const default_tty = b.option(u8, \"default_tty\", \"Set the TTY (default is 2)\") orelse 2;\n    const fallback_tty = b.option(u8, \"fallback_tty\", \"Set the fallback TTY (default is 2). This value gets embedded into the binary\") orelse 2;\n\n    default_tty_str = try std.fmt.allocPrint(b.allocator, \"{d}"}
{"instruction":"Write a Zig const similar to numFields from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"const numFields: u8 = @intCast(c.sema.types.items[ret_t].data.struct_t.nfields);"}
{"instruction":"Write a Zig function similar to writeCell from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/InternalScreen.zig","output":"pub fn writeCell(\n    self: *InternalScreen,\n    col: u16,\n    row: u16,\n    cell: Cell,\n) void {\n    if (self.width < col) {\n        // column out of bounds\n        return;\n    }"}
{"instruction":"Write a Zig function similar to deinit from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: build/generate_def.zig","output":"pub fn deinit(db: *DafsaBuilder) void {\n        db.arena.promote(db.allocator).deinit();\n        db.unchecked_nodes.deinit(db.allocator);\n        db.minimized_nodes.deinit(db.allocator);\n        db.* = undefined;\n    }"}
{"instruction":"Write a Zig function similar to checkMinZig from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: deps.zig","output":"fn checkMinZig(current: std.SemanticVersion, exe: *std.Build.Step.Compile) void {\n    const min = std.SemanticVersion.parse(\"0.14.0\") catch return;\n    if (current.order(min).compare(.lt)) @panic(exe.step.owner.fmt(\"Your Zig version v{}"}
{"instruction":"Write a Zig function similar to gc from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"pub fn gc(self: Self) void {\n    self.borrow().gc();\n}"}
{"instruction":"Write a Zig const similar to mid_point from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"const mid_point: dvui.Point.Physical = .{ .x = @floatCast((bounds.x0 + bounds.x1) / 2), .y = @floatCast((bounds.y0 + bounds.y1) / 2) };"}
{"instruction":"Write a Zig function similar to toXYZ from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn toXYZ(self: RgbColorspace, color: Colorf32) CIEXYZ {\n        const result = self.rgba_to_xyza.mulVector(color.to.float4());\n\n        return .{\n            .x = result[0],\n            .y = result[1],\n            .z = result[2],\n        }"}
{"instruction":"Write a Zig function similar to create from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn create(alloc: Allocator, buf: []const u8) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to ptr from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"const ptr: *bool = @ptrCast(@alignCast(ud.?));"}
{"instruction":"Write a Zig function similar to data from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig","output":"pub fn data(comptime T: type) *T {\n    comptime assert(@sizeOf(T) <= SIZE);\n    comptime assert(@alignOf(T) <= ALIGN);\n    return std.mem.bytesAsValue(T, _data[0..@sizeOf(T)]);\n}"}
{"instruction":"Write a Zig function similar to sort from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn sort(ctx: *o.NativeCtx) callconv(.c) c_int {\n    var self = o.ObjList.cast(ctx.vm.peek(1).obj()).?;\n    // fun compare(T lhs, T rhs) > bool\n    const sort_closure = ctx.vm.peek(0);\n\n    std.sort.insertion(\n        v.Value,\n        self.items.items,\n        SortContext{\n            .sort_closure = sort_closure,\n            .ctx = ctx,\n        }"}
{"instruction":"Write a Zig const similar to value from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"const value: *UserValue = @ptrCast(@alignCast(obj));"}
{"instruction":"Write a Zig const similar to left_alt from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const left_alt: u21 = 57443;"}
{"instruction":"Write a Zig const similar to neighbor from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig","output":"const neighbor: Neighbor = @enumFromInt(rotationTable[a - 1][i]);"}
{"instruction":"Write a Zig struct similar to Fn from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const Fn = struct {\n    code: Code = .{}"}
{"instruction":"Write a Zig function similar to __index__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __index__(self: *Self) !py.PyLong {\n        return py.PyLong.create(self.num_);\n    }"}
{"instruction":"Write a Zig function similar to getScopeChildScopesConst from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn getScopeChildScopesConst(\n    doc_scope: DocumentScope,\n    scope: Scope.Index,\n) []const Scope.Index {\n    const slice = doc_scope.scopes.slice();\n\n    if (slice.items(.data)[@intFromEnum(scope)].is_child_scopes_small) {\n        const small = &slice.items(.child_scopes)[@intFromEnum(scope)].small;\n\n        for (0..Scope.ChildScopes.small_size) |idx| {\n            if (small[idx] == .none) {\n                return @ptrCast(small[0..idx]);\n            }"}
{"instruction":"Write a Zig function similar to debugNodes from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"fn debugNodes(nodes: []const Node, src: []const u8) void {\n    const ast = Ast{\n        .language = .html,\n        .nodes = nodes,\n        .errors = &.{}"}
{"instruction":"Write a Zig function similar to parseVariable from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseVariable(\n    self: *Self,\n    node: Ast.Node.Index,\n    identifier: ?Ast.TokenIndex,\n    variable_type: *obj.ObjTypeDef,\n    final: bool,\n    mutable: bool,\n    comptime error_message: []const u8,\n) !usize {\n    if (identifier == null) {\n        try self.consume(.Identifier, error_message);\n    }"}
{"instruction":"Write a Zig struct similar to funcs from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const funcs = struct {\n        extern \"ws2_32\" fn recvfrom(s: ws2_32.SOCKET, buf: [*c]u8, len: c_int, flags: c_int, from: [*c]std.posix.sockaddr, fromlen: [*c]std.posix.socklen_t) callconv(.winapi) c_int;\n        extern \"ws2_32\" fn select(nfds: c_int, readfds: ?*anyopaque, writefds: ?*anyopaque, exceptfds: ?*anyopaque, timeout: [*c]const timeval) callconv(.winapi) c_int;\n        extern \"ws2_32\" fn __WSAFDIsSet(arg0: ws2_32.SOCKET, arg1: [*]u8) c_int;\n        extern \"ws2_32\" fn getaddrinfo(nodename: [*:0]const u8, servicename: [*:0]const u8, hints: *const posix.addrinfo, result: **posix.addrinfo) callconv(.winapi) c_int;\n        extern \"ws2_32\" fn freeaddrinfo(res: *posix.addrinfo) callconv(.winapi) void;\n    }"}
{"instruction":"Write a Zig struct similar to EPBIter from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig","output":"pub const EPBIter = struct {\n    /// Bitmask of the input buffers to handle\n    bufbits: u32,\n    /// The last input buffer handled. This can be used to flag the input buffer as handled on the\n    /// next call.\n    last_bit: ?u32 = null,\n    /// Point to the device configuration (to get access to the endpoint buffers defined by the user)\n    device_config: *const DeviceConfiguration,\n    /// Get the next available input buffer\n    next: *const fn (self: *@This()) ?EPB,\n}"}
{"instruction":"Write a Zig function similar to run from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"fn run(self: Func) void {\n            @call(.auto, self.func, .{self.userdata}"}
{"instruction":"Write a Zig function similar to entry from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: examples/basic/main.zig","output":"fn entry(rt: *Runtime, p: EntryParams) !void {\n                var server = Server.init(.{\n                    .stack_size = 1024 * 1024 * 4,\n                    .socket_buffer_bytes = 1024 * 2,\n                    .keepalive_count_max = null,\n                    .connection_count_max = 1024,\n                }"}
{"instruction":"Write a Zig function similar to getDocumentScopeCached from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"pub fn getDocumentScopeCached(self: *Handle) DocumentScope {\n        if (builtin.mode == .Debug) {\n            std.debug.assert(self.getStatus().has_document_scope);\n        }"}
{"instruction":"Write a Zig function similar to build_c_client from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_c_client(\n    b: *std.Build,\n    step_clients_c: *std.Build.Step,\n    options: struct {\n        vsr_module: *std.Build.Module,\n        vsr_options: *std.Build.Step.Options,\n        tb_client_header: *Generated,\n        mode: std.builtin.OptimizeMode,\n    },\n) void {\n    step_clients_c.dependOn(&options.tb_client_header.step);\n\n    inline for (platforms) |platform| {\n        const query = Query.parse(.{\n            .arch_os_abi = platform[0],\n            .cpu_features = platform[2],\n        }"}
{"instruction":"Write a Zig function similar to get_or_start_language_server from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn get_or_start_language_server(self: *Self, file_path: []const u8, language_server: []const u8) StartLspError!*const LSP {\n    if (self.file_language_server_name.get(file_path)) |lsp_name|\n        return self.get_existing_language_server(lsp_name) orelse error.LspFailed;\n    const lsp = try self.get_language_server_instance(language_server);\n    const key = try self.allocator.dupe(u8, file_path);\n    const value = try self.allocator.dupe(u8, language_server);\n    try self.file_language_server_name.put(key, value);\n    return lsp;\n}"}
{"instruction":"Write a Zig function similar to consume from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn consume(self: *Runner) void {\n        assert(self.connected.vsr);\n        assert(self.connected.amqp);\n        assert(self.state == .last);\n        assert(TimestampRange.valid(self.state.last.producer_timestamp));\n        assert(self.state.last.consumer_timestamp == 0 or\n            TimestampRange.valid(self.state.last.consumer_timestamp));\n        assert(self.state.last.producer_timestamp > self.state.last.consumer_timestamp);\n        switch (self.consumer) {\n            .idle => {\n                if (!self.buffer.consumer_begin()) {\n                    // No buffers ready (they must be both `free` or still `producing`).\n                    // The running/waiting producer will resume the consumer once it finishes.\n                    if (self.buffer.all_free()) {\n                        assert(self.producer == .idle);\n                    }"}
{"instruction":"Write a Zig struct similar to Walker from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub const Walker = struct {\n    keep_walking_: bool = false,\n    found_: bool = false,\n    err: ?anyerror = null,\n\n    pub const keep_walking = Walker{ .keep_walking_ = true }"}
{"instruction":"Write a Zig function similar to main from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigloop/main.zig","output":"pub fn main() !void {\n    const pid = std.os.linux.getpid();\n\n    var ndx: usize = 0;\n    while (true) {\n        std.debug.print(\"zig looping (pid {d}"}
{"instruction":"Write a Zig function similar to reloadTextures from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub fn reloadTextures(_: usize) void {\n\t\tblockTextures.clearRetainingCapacity();\n\t\temissionTextures.clearRetainingCapacity();\n\t\treflectivityTextures.clearRetainingCapacity();\n\t\tabsorptionTextures.clearRetainingCapacity();\n\t\ttextureFogData.clearAndFree();\n\t\ttextureOcclusionData.clearAndFree();\n\t\tfor(textureIDs.items) |path| {\n\t\t\treadTextureData(path);\n\t\t}"}
{"instruction":"Write a Zig struct similar to Container from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"const Container = struct {\n        node: List.Node,\n        buf: std.ArrayListUnmanaged(u8),\n    }"}
{"instruction":"Write a Zig const similar to value_len from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"const value_len: usize = brk: {\n                switch (comptime AppendType) {\n                    EmptyType, []const u8, []u8, [:0]const u8, [:0]u8 => {\n                        break :brk _value.len;"}
{"instruction":"Write a Zig function similar to from_u24 from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"fn from_u24(v: u24) RGB {\n        const r = @as(u8, @intCast(v >> 16 & 0xFF));\n        const g = @as(u8, @intCast(v >> 8 & 0xFF));\n        const b = @as(u8, @intCast(v & 0xFF));\n        return .{ .r = r, .g = g, .b = b }"}
{"instruction":"Write a Zig struct similar to Completion from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"pub const Completion = struct {\n    /// Operation to execute. This is only safe to read BEFORE the completion\n    /// is queued. After being queued (with \"add\"), the operation may change.\n    op: Operation = .{ .noop = {}"}
{"instruction":"Write a Zig function similar to confirmationData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn confirmationData(self: *Command, allocator: NeverFailingAllocator) []const u8 {\n\t\tswitch(self.payload) {\n\t\t\tinline else => |payload| {\n\t\t\t\tif(@hasDecl(@TypeOf(payload), \"confirmationData\")) {\n\t\t\t\t\treturn payload.confirmationData(allocator);\n\t\t\t\t}"}
{"instruction":"Write a Zig struct similar to CSSKeywords from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"const CSSKeywords = struct {\n    const BORDER_STYLES = [_][]const u8{\n        \"none\", \"solid\", \"dotted\", \"dashed\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\",\n    }"}
{"instruction":"Write a Zig const similar to os from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig","output":"const os: OperatingSystem = if (arch.isWasm())\n            .wasm\n        else switch (temp_resolved.result.os.tag) {\n            .macos => .mac,\n            .linux => .linux,\n            .windows => .windows,\n            else => |t| std.debug.panic(\"Unsupported OS tag {}\", .{t}),\n        };"}
{"instruction":"Write a Zig const similar to numFields from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"const numFields: u8 = @intCast(c.sema.types.items[local.some.type].data.object.numFields);"}
{"instruction":"Write a Zig function similar to setAppContentView from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/invocationhandler/main.zig","output":"fn setAppContentView(self: *AndroidApp) void {\n        setAppContentViewImpl(self) catch |e| {\n            app_log.err(\"Encountered error while setting app content view: {s}"}
{"instruction":"Write a Zig function similar to zigf32 from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/result_types.zig","output":"pub fn zigf32() f32 {\n    return 2.71 * std.math.pow(f32, 10, 38);\n}"}
{"instruction":"Write a Zig const similar to event_size from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"const event_size: u32 = StateMachine.event_size_bytes(operation);"}
{"instruction":"Write a Zig function similar to deinit from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"pub fn deinit(self: *BaselineTreeSum) void {\n        _ = self;\n    }"}
{"instruction":"Write a Zig function similar to convertNoFree from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/Image.zig","output":"pub fn convertNoFree(self: *Image, allocator: std.mem.Allocator, destination_format: PixelFormat) ConvertError!void {\n    // Do nothing if the format is the same\n    if (std.meta.activeTag(self.pixels) == destination_format) {\n        return;\n    }"}
{"instruction":"Write a Zig struct similar to nonstring from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const nonstring = struct {}"}
{"instruction":"Write a Zig function similar to getSystemInfo from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/comprehensive/main.zig","output":"fn getSystemInfo(e: *webui.Event) void {\n    const builtin = @import(\"builtin\");\n\n    var buffer: [1024]u8 = undefined;\n    const info = std.fmt.bufPrintZ(buffer[0..],\n        \\\\{{\"os\":\"{s}"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/sound_loading.zig","output":"pub fn main() !void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const screenWidth = 800;\n    const screenHeight = 450;\n\n    rl.initWindow(screenWidth, screenHeight, \"raylib [audio] example - sound loading and playing\");\n    defer rl.closeWindow(); // Close window and OpenGL context\n\n    rl.initAudioDevice(); // Initialize audio device\n    defer rl.closeAudioDevice(); // Close audio device\n\n    const fxWav: rl.Sound = try rl.loadSound(\"resources/audio/sound.wav\"); // Load WAV audio file\n    const fxOgg: rl.Sound = try rl.loadSound(\"resources/audio/target.ogg\"); // Load OGG audio file\n    defer rl.unloadSound(fxWav); // Unload sound data\n    defer rl.unloadSound(fxOgg); // Unload sound data\n\n    rl.setTargetFPS(60); // Set our game to run at 60 frames-per-second\n    //--------------------------------------------------------------------------------------\n\n    // Main game loop\n    while (!rl.windowShouldClose()) // Detect window close button or ESC key\n    {\n        // Update\n        //----------------------------------------------------------------------------------\n        if (rl.isKeyPressed(.space)) rl.playSound(fxWav); // Play WAV sound\n        if (rl.isKeyPressed(.enter)) rl.playSound(fxOgg); // Play OGG sound\n        //----------------------------------------------------------------------------------\n\n        // Draw\n        //----------------------------------------------------------------------------------\n        rl.beginDrawing();\n        defer rl.endDrawing();\n\n        rl.clearBackground(.white);\n\n        rl.drawText(\"Press SPACE to PLAY the WAV sound!\", 200, 180, 20, .light_gray);\n        rl.drawText(\"Press ENTER to PLAY the OGG sound!\", 200, 220, 20, .light_gray);\n        //----------------------------------------------------------------------------------\n    }"}
{"instruction":"Write a Zig function similar to init from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/progress.zig","output":"pub fn init() Self {\n        return Self{ .frame_idx = 0 }"}
{"instruction":"Write a Zig const similar to color_count from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"const color_count: u32 = @as(u32, 1) << @as(u5, @truncate(destination_format.bitsPerChannel()));"}
{"instruction":"Write a Zig struct similar to Shadow from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/parser.zig","output":"const Shadow = struct { x: f32, y: f32, blur: f32 = 0, spread: f32 = 0, color: Color = .black }"}
{"instruction":"Write a Zig struct similar to Result from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"pub const Result = struct {\n    hash: HashKeyType,\n    index: IndexType,\n    status: ItemStatus,\n\n    pub fn hasCheckedIfExists(r: *const Result) bool {\n        return r.index.index != Unassigned.index;\n    }"}
{"instruction":"Write a Zig function similar to addStaticLlvmOptionsToModule from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"fn addStaticLlvmOptionsToModule(mod: *std.Build.Module, options: struct {\n    llvm_has_m68k: bool,\n    llvm_has_csky: bool,\n    llvm_has_arc: bool,\n    llvm_has_xtensa: bool,\n}) !void {\n    // Adds the Zig C++ sources which both stage1 and stage2 need.\n    //\n    // We need this because otherwise zig_clang_cc1_main.cpp ends up pulling\n    // in a dependency on llvm::cfg::Update<llvm::BasicBlock*>::dump() which is\n    // unavailable when LLVM is compiled in Release mode.\n    const zig_cpp_cflags = exe_cflags ++ [_][]const u8{\"-DNDEBUG=1\"}"}
{"instruction":"Write a Zig function similar to createApp from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn createApp(\n    sdk: *Sdk,\n    apk_filename: []const u8,\n    src_file: []const u8,\n    java_files_opt: ?[]const []const u8,\n    app_config: AppConfig,\n    mode: std.builtin.Mode,\n    wanted_targets: AppTargetConfig,\n    key_store: KeyStore,\n) CreateAppStep {\n    const write_xml_step = sdk.b.addWriteFiles();\n    const write_xml_file_source = write_xml_step.add(\"strings.xml\", blk: {\n        var buf = std.ArrayList(u8).init(sdk.b.allocator);\n        errdefer buf.deinit();\n\n        var writer = buf.writer();\n\n        writer.writeAll(\n            \\\\<?xml version=\"1.0\" encoding=\"utf-8\"?>\n            \\\\<resources>\n            \\\\\n        ) catch unreachable;\n\n        writer.print(\n            \\\\    <string name=\"app_name\">{s}"}
{"instruction":"Write a Zig function similar to OP_OBJECT_DEFAULT from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_OBJECT_DEFAULT(self: *Self, location: Ast.TokenIndex, property_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_OBJECT_DEFAULT,\n        property_idx,\n    );\n}"}
{"instruction":"Write a Zig const similar to package_uris from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"const package_uris: std.ArrayList([]const u8) = .empty;"}
{"instruction":"Write a Zig function similar to next from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/id_render.zig","output":"pub fn next(self: *SegmentIterator) ?[]const u8 {\n        while (self.offset < self.text.len and self.text[self.offset] == '_') {\n            self.offset += 1;\n        }"}
{"instruction":"Write a Zig function similar to is_at_bottom from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/View.zig","output":"fn is_at_bottom(self: *const Self, root: Buffer.Root) bool {\n    if (root.lines() < self.rows) return true;\n    return self.row >= root.lines() - scroll_cursor_min_border_distance;\n}"}
{"instruction":"Write a Zig function similar to fromColor from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn fromColor(c: Color) HSLuv {\n        var ret: HSLuv = undefined;\n        hsluv.rgb2hsluv(\n            @as(f32, @floatFromInt(c.r)) / 255.0,\n            @as(f32, @floatFromInt(c.g)) / 255.0,\n            @as(f32, @floatFromInt(c.b)) / 255.0,\n            &ret.h,\n            &ret.s,\n            &ret.l,\n        );\n        ret.a = @as(f32, @floatFromInt(c.a)) * 100.0 / 255.0;\n        return ret;\n    }"}
{"instruction":"Write a Zig function similar to rawCAlloc from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/heap.zig","output":"fn rawCAlloc(\n    _: *anyopaque,\n    len: usize,\n    alignment: std.mem.Alignment,\n    ret_addr: usize,\n) ?[*]u8 {\n    _ = ret_addr;\n\n    _ = lock.acquire();\n    defer lock.release();\n\n    std.debug.assert(alignment.compare(.lte, .of(std.c.max_align_t)));\n    // Note that this pointer cannot be aligncasted to max_align_t because if\n    // len is < max_align_t then the alignment can be smaller. For example, if\n    // max_align_t is 16, but the user requests 8 bytes, there is no built-in\n    // type in C that is size 8 and has 16 byte alignment, so the alignment may\n    // be 8 bytes rather than 16. Similarly if only 1 byte is requested, malloc\n    // is allowed to return a 1-byte aligned pointer.\n    return @ptrCast(malloc(len));\n}"}
{"instruction":"Write a Zig function similar to goto_definition from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn goto_definition(self: *Self, from: tp.pid_ref, file_path: []const u8, row: usize, col: usize) SendGotoRequestError!void {\n    return self.send_goto_request(from, file_path, row, col, \"textDocument/definition\");\n}"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">const</span> StackTrace = <span class=\"tok-kw\">struct</span> {\n    index: <span class=\"tok-type\">usize</span>,\n    instruction_addresses: [N]<span class=\"tok-type\">usize</span>,\n};"}
{"instruction":"Write a Zig struct similar to EmptyType from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"const EmptyType = struct {\n            len: usize = 0,\n        }"}
{"instruction":"Write a Zig const similar to bits_remainder from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/ccitt.zig","output":"const bits_remainder: u16 = decoded_bits % 8;"}
{"instruction":"Write a Zig function similar to recreate from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/swapchain.zig","output":"pub fn recreate(self: *Swapchain, new_extent: vk.Extent2D) !void {\n        const gc = self.gc;\n        const allocator = self.allocator;\n        const old_handle = self.handle;\n        self.deinitExceptSwapchain();\n        // set current handle to NULL_HANDLE to signal that the current swapchain does no longer need to be\n        // de-initialized if we fail to recreate it.\n        self.handle = .null_handle;\n        self.* = initRecycle(gc, allocator, new_extent, old_handle) catch |err| switch (err) {\n            error.SwapchainCreationFailed => {\n                // we failed while recreating so our current handle still exists,\n                // but we won't destroy it in the deferred deinit of this object.\n                gc.dev.destroySwapchainKHR(old_handle, null);\n                return err;\n            }"}
{"instruction":"Write a Zig function similar to namespaceStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn namespaceStatement(self: *Self) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    // Should be the first statement\n    const components = self.ast.nodes.items(.components);\n    const current_body = components[self.current.?.function_node].Function.body;\n    if (current_body == null or components[current_body.?].Block.len > 0) {\n        self.reporter.reportErrorAt(\n            .syntax,\n            self.ast.tokens.get(if (current_body) |body| self.ast.nodes.items(.location)[body] else start_location),\n            self.ast.tokens.get(if (current_body) |body| self.ast.nodes.items(.end_location)[body] else start_location),\n            \"`namespace` should be the first statement\",\n        );\n    }"}
{"instruction":"Write a Zig function similar to readUntil from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn readUntil(self: *Self, val: u8) ReadError![]const u8 {\n    const start = self.offset();\n\n    const max = std.math.pow(usize, 2, 20);\n    for (0..max) |ndx| {\n        // @PERFORMANCE (jrc): read in chunks and use SIMD\n        const item = try self.read(u8);\n        if (item == val) break;\n\n        assert(ndx < max - 1);\n    }"}
{"instruction":"Write a Zig function similar to deinit from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"pub fn deinit(self: ParseResult) void {\n        self.arena.deinit();\n    }"}
{"instruction":"Write a Zig function similar to setWriter from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BitWriter.zig","output":"pub fn setWriter(self: *BitWriter, new_writer: *std.Io.Writer) void {\n    //assert(self.bits == 0 and self.nbits == 0 and self.nbytes == 0);\n    self.inner_writer = new_writer;\n}"}
{"instruction":"Write a Zig function similar to OP_CALL from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_CALL(self: *Self, location: Ast.TokenIndex, arg_count: u8, catch_default: bool) !void {\n    try self.emitCodeArgs(\n        location,\n        .OP_CALL,\n        arg_count,\n        if (catch_default) 1 else 0,\n    );\n}"}
{"instruction":"Write a Zig function similar to deleteBreakpoint from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn deleteBreakpoint(self: *Self, bp: types.Breakpoint) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            if (self.data.subordinate != null) {\n                try self.unsetBreakpointInAllThreads(bp);\n            }"}
{"instruction":"Write a Zig struct similar to selectany from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const selectany = struct {}"}
{"instruction":"Write a Zig function similar to writeEndRecord from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"pub fn writeEndRecord(self: *Self) !void {\n            const cd_offset = self.first_central_offset orelse 0;\n            const cd_end = self.last_central_limit orelse 0;\n            const hdr: std.zip.EndRecord = .{\n                .signature = std.zip.end_record_sig,\n                .disk_number = 0,\n                .central_directory_disk_number = 0,\n                .record_count_disk = @intCast(self.central_count),\n                .record_count_total = @intCast(self.central_count),\n                .central_directory_size = @intCast(cd_end - cd_offset),\n                .central_directory_offset = @intCast(cd_offset),\n                .comment_len = 0,\n            }"}
{"instruction":"Write a Zig function similar to sendTo from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn sendTo(self: Self, receiver: EndPoint, data: []const u8) SendError!usize {\n        const flags = if (is_windows or is_bsd) 0 else std.os.linux.MSG.NOSIGNAL;\n\n        const saddr = receiver.toSocketAddress();\n\n        const len = switch (saddr) {\n            .ipv4 => |sockaddr| try sendto(\n                self.internal,\n                data,\n                flags,\n                @ptrCast(&sockaddr),\n                @sizeOf(@TypeOf(sockaddr)),\n            ),\n            .ipv6 => |sockaddr| try sendto(\n                self.internal,\n                data,\n                flags,\n                @ptrCast(&sockaddr),\n                @sizeOf(@TypeOf(sockaddr)),\n            ),\n        }"}
{"instruction":"Write a Zig const similar to breakpoint from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"const breakpoint: ?types.Breakpoint = blk: {\n                for (self.data.state.breakpoints.items) |*bp| {\n                    if (!bp.flags.active) continue;"}
{"instruction":"Write a Zig function similar to write from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn write(self: InventoryAndSlot, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeEnum(InventoryId, self.inv.id);\n\t\t\twriter.writeInt(u32, self.slot);\n\t\t}"}
{"instruction":"Write a Zig function similar to runtimeTests from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"pub fn runtimeTests(v_end: u32) void {\n    rt_accessUnmappedMem(v_end);\n    rt_accessMappedMem(v_end);\n}"}
{"instruction":"Write a Zig function similar to renderErrorSet from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderErrorSet(self: *Self, errors: []const []const u8) !void {\n        try self.writer.writeAll(\"error{\");\n        for (errors) |name| {\n            if (std.mem.eql(u8, name, \"VK_ERROR_UNKNOWN\")) {\n                continue;\n            }"}
{"instruction":"Write a Zig function similar to thisDir from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/lib.zig","output":"fn thisDir() []const u8 {\n    return comptime std.fs.path.dirname(@src().file) orelse @panic(\"error\");\n}"}
{"instruction":"Write a Zig function similar to build from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build.zig","output":"pub fn build(b: *std.build.Builder) !void {\n    // Default-initialize SDK\n    const sdk = Sdk.init(b, null, .{}"}
{"instruction":"Write a Zig function similar to genDocComment from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"fn genDocComment(vm: *cy.VM, view: ast.AstView, decl_type: ast.NodeType, state: *ParseCyberState) !?cy.Value {\n    const comments = state.comments;\n    if (state.commentIdx < comments.len) {\n        var docStartIdx = state.commentIdx;\n        var docEndIdx = state.commentIdx;\n        while (state.commentIdx < comments.len) {\n            var commentPos = comments[state.commentIdx];\n            if (commentPos.start > state.pos) {\n                break;\n            }"}
{"instruction":"Write a Zig function similar to to32 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub fn to32(reg: Register) Register {\n        return @enumFromInt(@intFromEnum(reg) - reg.gpBase() + @intFromEnum(Register.eax));\n    }"}
{"instruction":"Write a Zig function similar to maxArrayBytes from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn maxArrayBytes(comp: *const Compilation) u64 {\n    const max_bits = @min(61, comp.target.ptrBitWidth());\n    return (@as(u64, 1) << @truncate(max_bits)) - 1;\n}"}
{"instruction":"Write a Zig const similar to quote from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"const quote: u32 = if (v.quote == .none) 0 else 1;"}
{"instruction":"Write a Zig function similar to add from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache_ignore.zig","output":"pub fn add(ascii_domain: []const u8) ?void {\n    var buf: [c.DNS_NAME_WIRE_MAXLEN]u8 = undefined;\n    var level: u8 = undefined;\n\n    const opt_domain_z = dns.ascii_to_wire(ascii_domain, &buf, &level);\n    if (opt_domain_z == null or level > MAX_LEVEL) {\n        opt.print(@src(), \"invalid domain\", ascii_domain);\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to init from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn init(btype: ProcType, id: usize) Proc {\n        return .{\n            .id = @intCast(id),\n            .type = btype,\n            .requiresEndingRet1 = false,\n            .closureLocal = cy.NullU8,\n            .irLocalMapStart = 0,\n            .slot_start = 0,\n            .num_pre_slots = 0,\n            .max_slots = 0,\n            .startLocalReg = 0,\n            .debugNode = undefined,\n            .block_depth = 0,\n        }"}
{"instruction":"Write a Zig function similar to stateUpdated from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"pub fn stateUpdated(self: *Self) void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            const resp = proto.StateUpdatedResponse{}"}
{"instruction":"Write a Zig function similar to generateDoUntil from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateDoUntil(self: *Self, node: Ast.Node.Index) Error!?m.MIR_op_t {\n    const components = self.state.?.ast.nodes.items(.components)[node].DoUntil;\n\n    const out_label = m.MIR_new_label(self.ctx);\n    const loop_label = m.MIR_new_label(self.ctx);\n\n    const previous_out_label = self.state.?.break_label;\n    self.state.?.break_label = out_label;\n    const previous_continue_label = self.state.?.continue_label;\n    self.state.?.continue_label = loop_label;\n\n    if (components.label != null) {\n        try self.state.?.breaks_label.append(\n            self.vm.gc.allocator,\n            .{\n                .node = node,\n                .break_label = out_label,\n                .continue_label = loop_label,\n            }"}
{"instruction":"Write Zig 0.13.0 code for: Casting §","input":"A type cast converts a value of one type to another. Zig has Type Coercion for conversions that are known to be completely safe and unambiguous, and Explicit Casts for conversions that one would not want to happen on accident. There is also a third kind of type conversion called Peer Type Resolution for the case when a result type must be decided given multiple operand types. Type Coercion § Type coercion occurs when one type is expected, but different type is provided: test_type_coercion.zig Sh","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"type coercion - variable declaration\"</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">1</span>;\n    <span class=\"tok-kw\">const</span> b: <span class=\"tok-type\">u16</span> = a;\n    _ = b;\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"type coercion - function call\"</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">1</span>;\n    foo(a);\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(b: <span class=\"tok-type\">u16</span>) <span class=\"tok-type\">void</span> {\n    _ = b;\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"type coercion - @as builtin\"</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">1</span>;\n    <span class=\"tok-kw\">const</span> b = <span class=\"tok-builtin\">@as</span>(<span class=\"tok-type\">u16</span>, a);\n    _ = b;\n}"}
{"instruction":"Write a Zig function similar to link from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig","output":"fn link(node: *Node, prev: *Node, next: *Node) void {\n    prev.next = node;\n    node.prev = prev;\n    node.next = next;\n    next.prev = node;\n}"}
{"instruction":"Write a Zig function similar to binaryValue from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"fn binaryValue(self: Self.Slice, node: Node.Index, gc: *GC) !?Value {\n        const components = self.nodes.items(.components)[node].Binary;\n\n        const left = try self.toValue(components.left, gc);\n        const left_integer = if (left.isInteger()) left.integer() else null;\n        const left_float = if (left.isDouble()) left.double() else null;\n        const right = try self.toValue(components.right, gc);\n        const right_integer = if (right.isInteger()) right.integer() else null;\n        const right_float = if (right.isDouble()) right.double() else null;\n\n        switch (components.operator) {\n            .Ampersand => return Value.fromInteger(left_integer.? & right_integer.?),\n            .Bor => return Value.fromInteger(left_integer.? | right_integer.?),\n            .Xor => return Value.fromInteger(left_integer.? ^ right_integer.?),\n            .ShiftLeft => {\n                const b = right_integer.?;\n\n                if (b < 0) {\n                    if (b * -1 > std.math.maxInt(u6)) {\n                        return Value.fromInteger(0);\n                    }"}
{"instruction":"Write a Zig const similar to THRESHOLD from zigcc/zig-cookbook","input":"Repository: zigcc/zig-cookbook (1019 ⭐)\nFile: assets/src/07-01.zig","output":"const THRESHOLD: usize = 2;"}
{"instruction":"Write a Zig function similar to clear from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn clear(self: *Self) void {\n        self.fds.shrinkRetainingCapacity(0);\n    }"}
{"instruction":"Write a Zig function similar to move_half_page_down from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn move_half_page_down(self: *Self, root: Buffer.Root, view: *const View, metrics: Metrics) void {\n    const half_view_rows = @divTrunc(view.rows, 2);\n    if (root.lines() > self.row + half_view_rows) {\n        self.row += half_view_rows;\n    }"}
{"instruction":"Write a Zig const similar to kp_page_down from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_page_down: u21 = 57422;"}
{"instruction":"Write a Zig function similar to getDefinition from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"pub fn getDefinition(\n        comptime root: type,\n        comptime definition: type,\n    ) Definition {\n        return findDefinition(root, definition) orelse @compileError(\"Unable to find definition \" ++ @typeName(definition));\n    }"}
{"instruction":"Write a Zig function similar to toLCHabAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn toLCHabAlpha(self: RgbColorspace, color: Colorf32) CIELCHabAlpha {\n        return self.toLabAlpha(color).toLCHabAlpha();\n    }"}
{"instruction":"Write a Zig struct similar to Assets from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"pub const Assets = struct {\n\tpub const ZonHashMap = std.StringHashMapUnmanaged(ZonElement);\n\tpub const BytesHashMap = std.StringHashMapUnmanaged([]const u8);\n\tpub const AddonNameToZonMap = std.StringHashMapUnmanaged(ZonElement);\n\n\tblocks: ZonHashMap,\n\tblockMigrations: AddonNameToZonMap,\n\titems: ZonHashMap,\n\titemMigrations: ZonHashMap,\n\ttools: ZonHashMap,\n\tbiomes: ZonHashMap,\n\tbiomeMigrations: AddonNameToZonMap,\n\trecipes: ZonHashMap,\n\tmodels: BytesHashMap,\n\tstructureBuildingBlocks: ZonHashMap,\n\tblueprints: BytesHashMap,\n\tparticles: ZonHashMap,\n\n\tfn init() Assets {\n\t\treturn .{\n\t\t\t.blocks = .{}"}
{"instruction":"Write a Zig function similar to convert from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/Image/Managed.zig","output":"pub fn convert(self: *Managed, destination_format: PixelFormat) ConvertError!void {\n    return Image.convert(@ptrCast(self), self.allocator, destination_format);\n}"}
{"instruction":"Write a Zig function similar to init from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/animations/ColorMix.zig","output":"pub fn init(terminal_buffer: *TerminalBuffer, col1: u32, col2: u32, col3: u32) ColorMix {\n    return .{\n        .terminal_buffer = terminal_buffer,\n        .frames = 0,\n        .pattern_cos_mod = terminal_buffer.random.float(f32) * math.pi * 2.0,\n        .pattern_sin_mod = terminal_buffer.random.float(f32) * math.pi * 2.0,\n        .palette = [palette_len]Cell{\n            Cell.init(0x2588, col1, col2),\n            Cell.init(0x2593, col1, col2),\n            Cell.init(0x2592, col1, col2),\n            Cell.init(0x2591, col1, col2),\n            Cell.init(0x2588, col2, col3),\n            Cell.init(0x2593, col2, col3),\n            Cell.init(0x2592, col2, col3),\n            Cell.init(0x2591, col2, col3),\n            Cell.init(0x2588, col3, col1),\n            Cell.init(0x2593, col3, col1),\n            Cell.init(0x2592, col3, col1),\n            Cell.init(0x2591, col3, col1),\n        }"}
{"instruction":"Write a Zig const similar to kind from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"const kind: Ast.Kind = if (std.ascii.eqlIgnoreCase(\"ctx\", name))\n                                    .ctx\n                                else if (std.ascii.eqlIgnoreCase(\"super\", name))\n                                    .super\n                                else if (std.ascii.eqlIgnoreCase(\"extend\", name))\n                                    .extend\n                                else\n                                    kinds.get(name) orelse .___;"}
{"instruction":"Write a Zig function similar to perform from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"fn perform(self: *Completion) Result {\n        return switch (self.op) {\n            // This should never happen because we always do these synchronously\n            // or in another location.\n            .close,\n            .async_wait,\n            .noop,\n            .shutdown,\n            .cancel,\n            .timer,\n            => unreachable,\n\n            .accept => |*op| res: {\n                var out_fd: posix.fd_t = undefined;\n                break :res .{\n                    .accept = switch (wasi.sock_accept(op.socket, 0, &out_fd)) {\n                        .SUCCESS => out_fd,\n                        else => |err| posix.unexpectedErrno(err),\n                    }"}
{"instruction":"Write a Zig const similar to slice_xyza from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const slice_xyza: []CIEXYZAlpha = try allocator.alloc(CIEXYZAlpha, colors.len);"}
{"instruction":"Write a Zig function similar to serve from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"fn serve(s: *Server, list: *std.net.AddressList) void {\n        defer list.deinit();\n\n        errdefer |err| switch (err) {\n            error.OutOfMemory => fatal.oom(),\n        }"}
{"instruction":"Write a Zig function similar to OP_MAP_INVOKE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_MAP_INVOKE(self: *Self, location: Ast.TokenIndex, field_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_MAP_INVOKE,\n        field_idx,\n    );\n}"}
{"instruction":"Write a Zig const similar to identifier_token from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"const identifier_token: Ast.TokenIndex = @intCast(tok_i);"}
{"instruction":"Write a Zig function similar to stepOver from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn stepOver(self: *Self, scratch: Allocator, bpp: BreakpointAndPID) !void {\n            const regs = try self.adapter.getRegisters(bpp.pid);\n            try self.stepOverForPC(scratch, bpp, regs.pc());\n        }"}
{"instruction":"Write a Zig function similar to locateMarkdownFiles from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/commands/bundle.zig","output":"fn locateMarkdownFiles(allocator: std.mem.Allocator, dir: std.fs.Dir, views_path: []const u8, paths: *std.array_list.Managed([]const u8)) !void {\n    var views_dir = try dir.openDir(views_path, .{ .iterate = true }"}
{"instruction":"Write a Zig function similar to dropOutside from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn dropOutside(self: BlockDropLocation, pos: Vec3i, _drop: main.blocks.BlockDrop) void {\n\t\t\t\tfor(_drop.items) |itemStack| {\n\t\t\t\t\tmain.server.world.?.drop(itemStack.clone(), self.outsidePos(pos), self.dropDir(), self.dropVelocity());\n\t\t\t\t}"}
{"instruction":"Write a Zig function similar to reset from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/params.zig","output":"pub fn reset(self: *Params) void {\n        self.len = 0;\n    }"}
{"instruction":"Write a Zig function similar to genIf from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genIf(c: *Compiler, node: Node.Index, res: Result) Error!Value {\n    const if_expr = Tree.If.get(c.tree.*, node);\n\n    const scope_count = c.scopes.items.len;\n    defer c.scopes.items.len = scope_count;\n\n    const jump_buf_top = c.unwrap_jump_buf.items.len;\n    defer c.unwrap_jump_buf.items.len = jump_buf_top;\n\n    const cond_val = try c.genNode(if_expr.cond, .value);\n    if (if_expr.capture) |capture| {\n        const cond_ref = try c.makeRuntime(cond_val);\n        switch (c.tree.nodes.items(.id)[c.getLastNode(capture)]) {\n            .ident_expr, .mut_ident_expr, .discard_expr => {\n                const jump_null_index = try c.addJump(.jump_if_null, cond_ref);\n                try c.unwrap_jump_buf.append(c.gpa, jump_null_index);\n            }"}
{"instruction":"Write a Zig function similar to closeInventory from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn closeInventory(user: *main.server.User, clientId: InventoryId) !void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tconst serverId = user.inventoryClientToServerIdMap.get(clientId) orelse return error.InventoryNotFound;\n\t\t\tinventories.items[@intFromEnum(serverId)].removeUser(user, clientId);\n\t\t}"}
{"instruction":"Write a Zig function similar to source from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"fn source(as: *Assembler, token: Tokenizer.Token) []const u8 {\n        return as.it.input[token.start..token.end];\n    }"}
{"instruction":"Write a Zig const similar to bitwidth from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"const bitwidth: u8 = if (mem.eql(u8, flags_type, \"VkFlags\"))\n            32\n        else if (mem.eql(u8, flags_type, \"VkFlags64\"))\n            64\n        else\n            return error.InvalidRegistry;"}
{"instruction":"Write a Zig function similar to install from zig-gamedev/zig-gamedev","input":"Repository: zig-gamedev/zig-gamedev (2703 ⭐)\nFile: experiments/genart/build.zig","output":"fn install(\n    b: *std.Build,\n    optimize: std.builtin.Mode,\n    target: std.Build.ResolvedTarget,\n    comptime name: []const u8,\n) void {\n    const zsdl = b.dependency(\"zsdl\", .{}"}
{"instruction":"Write a Zig function similar to getContext from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getContext(e: *Event) !*anyopaque {\n        const context = c.webui_get_context(e);\n        if (context) |result| return result;\n        return WebUIError.GenericError;\n    }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = r.read catch unreachable;\n                _ = c;\n                _ = l;\n                const b = @as(*bool, @ptrCast(ud.?));\n                b.* = true;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to peek from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins/TypeDescription.zig","output":"pub fn peek(self: *ComponentIterator) ?Component {\n        const idx = self.idx;\n        defer self.idx = idx;\n        return self.next();\n    }"}
{"instruction":"Write a Zig function similar to pop from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"fn pop(self: *Job, tail: **Job) void {\n        std.debug.assert(self.state() == .queued);\n        std.debug.assert(tail.* == self);\n        const prev: *Job = @ptrCast(@alignCast(self.prev_or_null));\n        prev.next_or_state = null; // prev.next = null\n        tail.* = @ptrCast(@alignCast(self.prev_or_null)); // tail = self.prev\n        self.* = undefined;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Blocks §","input":"Blocks are used to limit the scope of variable declarations: test_blocks.zig Shell Blocks are expressions. When labeled, break can be used to return a value from the block: test_labeled_break.zig Shell Here, blk can be any name. See also: Labeled while Labeled for Shadowing § Identifiers are never allowed to \"hide\" other identifiers by using the same name: test_shadowing.zig Shell Because of this, when you read Zig code you can always rely on an identifier to consistently mean the same thing wit","output":"<span class=\"tok-kw\">const</span> pi = <span class=\"tok-number\">3.14</span>;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"inside test block\"</span> {\n    <span class=\"tok-comment\">// Let's even go inside another block</span>\n    {\n        <span class=\"tok-kw\">var</span> pi: <span class=\"tok-type\">i32</span> = <span class=\"tok-number\">1234</span>;\n    }\n}"}
{"instruction":"Write a Zig function similar to renderWrapperName from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderWrapperName(\n        self: *Self,\n        name: []const u8,\n        dispatch_handle: []const u8,\n        kind: WrapperKind,\n    ) !void {\n        const trimmed_name = switch (kind) {\n            .wrapper => trimVkNamespace(name),\n            .proxy => blk: {\n                // Strip additional namespaces: queue for VkQueue and cmd for VkCommandBuffer\n                const no_vk = trimVkNamespace(name);\n                const additional_namespace = additional_namespaces.get(dispatch_handle) orelse break :blk no_vk;\n                if (std.mem.startsWith(u8, no_vk, additional_namespace)) {\n                    break :blk no_vk[additional_namespace.len..];\n                }"}
{"instruction":"Write a Zig function similar to findBitIndex from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"fn findBitIndex(desired_capacity: u32) !u8 {\n        if (desired_capacity > max_capacity) return error.OutOfMemory;\n        var new_bit_index: u8 = @intCast(std.math.log2_int_ceil(u32, desired_capacity));\n        if (desired_capacity > index_capacities[new_bit_index]) new_bit_index += 1;\n        if (new_bit_index < min_bit_index) new_bit_index = min_bit_index;\n        assert(desired_capacity <= index_capacities[new_bit_index]);\n        return new_bit_index;\n    }"}
{"instruction":"Write a Zig function similar to text_from_root from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/diff.zig","output":"fn text_from_root(root: Buffer.Root, eol_mode: Buffer.EolMode) ![]const u8 {\n        var text: std.Io.Writer.Allocating = .init(std.heap.c_allocator);\n        defer text.deinit();\n        try root.store(&text.writer, eol_mode);\n        return text.toOwnedSlice();\n    }"}
{"instruction":"Write a Zig function similar to calculateRowPadding from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/bmp.zig","output":"fn calculateRowPadding(width: u32, bytes_per_pixel: u8) u32 {\n    const row_size = width * bytes_per_pixel;\n    return (4 - (row_size % 4)) % 4;\n}"}
{"instruction":"Write a Zig function similar to reconsume from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig","output":"fn reconsume(self: *Tokenizer, src: []const u8) void {\n    self.idx -= 1;\n    if (self.idx == 0) {\n        self.current = undefined;\n    }"}
{"instruction":"Write a Zig function similar to dispatch from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"fn dispatch(\n                    context: *Client,\n                    body: []const u8,\n                ) Decoder.Error!void {\n                    assert(context.action == .get_message_body);\n                    assert(context.action.get_message_body.body_size == body.len);\n                    const get_message_body_callback = context.action.get_message_body.callback;\n                    context.action = .none;\n                    try get_message_body_callback(context, body);\n                }"}
{"instruction":"Write a Zig function similar to available from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"pub fn available() bool {\n    return builtin.os.tag == .linux;\n}"}
{"instruction":"Write a Zig function similar to BgraColor from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn BgraColor(comptime T: type) type {\n    return extern struct {\n        pub const from = FromMethods(@This());\n\n        to: ToMethods(@This(), T, T, T, T) = .{}"}
{"instruction":"Write a Zig function similar to read_frame_header from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn read_frame_header(self: *Decoder) Error!FrameHeader {\n        return .{\n            .type = try self.read_enum(FrameType),\n            .channel = try self.read_enum(Channel),\n            .size = try self.read_int(u32),\n        }"}
{"instruction":"Write a Zig struct similar to ComboIterator from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const ComboIterator = struct {\n        possible_types: *const ArrayMap([]const Type),\n        current_combo: ArrayMap(Type),\n        total_combos: usize,\n        counter: usize,\n\n        fn init(\n            arena: std.mem.Allocator,\n            possible_types: *const ArrayMap([]const Type),\n        ) !ComboIterator {\n            var current_combo: ArrayMap(Type) = .empty;\n            try current_combo.entries.resize(arena, possible_types.count());\n            @memcpy(current_combo.keys(), possible_types.keys());\n            try current_combo.reIndex(arena);\n\n            var total_combos: usize = 1;\n            for (possible_types.values()) |types| {\n                total_combos *= types.len;\n            }"}
{"instruction":"Write a Zig function similar to getZdef from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/FFI.zig","output":"fn getZdef(self: *Self, decl_index: Ast.Node.Index) !?*Zdef {\n    const decl_tag = self.state.?.ast.nodeTag(decl_index);\n    const decl_data = self.state.?.ast.nodeData(decl_index);\n    const ast = self.state.?.ast;\n\n    return switch (decl_tag) {\n        .fn_proto_simple,\n        .fn_proto_multi,\n        .fn_proto_one,\n        .fn_proto,\n        => try self.fnProto(decl_tag, decl_index),\n\n        .identifier => try self.identifier(decl_index),\n\n        .ptr_type_aligned,\n        .ptr_type_sentinel,\n        .ptr_type,\n        => try self.ptrType(decl_tag, decl_index),\n\n        .simple_var_decl => var_decl: {\n            // Allow simple type if we're parsing type expr, or struct type\n            if (self.state.?.type_expr != null) {\n                break :var_decl try self.getZdef(ast.simpleVarDecl(decl_index).ast.type_node.unwrap().?);\n            }"}
{"instruction":"Write a Zig const similar to phys_end from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"const phys_end: usize = PAGE_SIZE_4MB * 4;"}
{"instruction":"Write a Zig struct similar to Global from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub const Global = struct {\n    name: []const Ast.TokenIndex,\n    node: Ast.Node.Index,\n    type_def: *obj.ObjTypeDef,\n    export_alias: ?Ast.TokenIndex = null,\n    imported_from: ?[]const u8 = null,\n    placeholder_referrers: std.ArrayList(Ast.Node.Index) = .{}"}
{"instruction":"Write a Zig function similar to eql from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn eql(lhs: Self, rhs: Self) bool {\n            return std.mem.eql(u8, &lhs.value, &rhs.value) and\n                lhs.scope_id == rhs.scope_id;\n        }"}
{"instruction":"Write a Zig function similar to waitForSpawn from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub fn waitForSpawn(self: *ChildProcess) SpawnError!void {\n    if (native_os == .windows) return; // `spawn` reports everything\n    if (self.term) |term| {\n        _ = term catch |spawn_err| return spawn_err;\n        return;\n    }"}
{"instruction":"Write a Zig function similar to initKeyboard from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/arch.zig","output":"pub fn initKeyboard(allocator: Allocator) Allocator.Error!*Keyboard {\n    return keyboard.init(allocator);\n}"}
{"instruction":"Write a Zig function similar to hash from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: build/generate_def.zig","output":"pub fn hash(ctx: @This(), key: *Node) u64 {\n                _ = ctx;\n                var hasher = std.hash.Wyhash.init(0);\n                std.hash.autoHash(&hasher, key.children);\n                std.hash.autoHash(&hasher, key.is_terminal);\n                return hasher.final();\n            }"}
{"instruction":"Write a Zig const similar to ws_worker from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"const ws_worker: *websocket.server.Worker(H) = @ptrCast(@alignCast(http_conn.ws_worker));"}
{"instruction":"Write a Zig struct similar to LockedString from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"pub const LockedString = struct {\n            slice: [:0]const u8,\n\n            pub fn release(locked_string: LockedString, pool: *Pool) void {\n                _ = locked_string;\n                pool.mutex.unlock();\n            }"}
{"instruction":"Write a Zig const similar to media_stop from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const media_stop: u21 = 57432;"}
{"instruction":"Write a Zig function similar to get_type from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/StyleSheet.zig","output":"pub fn get_type(self: *const StyleSheet) []const u8 {\n    return self.type;\n}"}
{"instruction":"Write a Zig function similar to deleteTree from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: fixdeletetree.zig","output":"pub fn deleteTree(dir: std.fs.Dir, sub_path: []const u8) !void {\n    if (builtin.os.tag != .windows) {\n        return dir.deleteTree(sub_path);\n    }"}
{"instruction":"Write a Zig struct similar to namespace from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"const namespace = struct { field_a: u32 }"}
{"instruction":"Write a Zig function similar to deinit from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn deinit(self: *Visitor) void {\n//         self.stack.deinit(self.alloc);\n//     }"}
{"instruction":"Write a Zig const similar to RRF_ZEROONFAILURE from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build/auto-detect.zig","output":"const RRF_ZEROONFAILURE: DWORD = 0x20000000;"}
{"instruction":"Write a Zig function similar to get_message_dispatch from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"fn get_message_dispatch(self: *Client, reply: spec.ClientMethod) Decoder.Error!void {\n        assert(self.action == .get_message);\n        assert(self.awaiter == .none);\n        switch (reply) {\n            .basic_get_empty => {\n                const get_header_callback = self.action.get_message;\n                self.action = .none;\n                try get_header_callback(self, null);\n            }"}
{"instruction":"Write a Zig function similar to contentScale from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn contentScale(self: Backend) f32 {\n    return self.impl.contentScale();\n}"}
{"instruction":"Write a Zig const similar to tracy_c_flags from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"const tracy_c_flags: []const []const u8 = &.{ \"-DTRACY_ENABLE=1\", \"-fno-sanitize=undefined\" };"}
{"instruction":"Write a Zig struct similar to CreateAppStep from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub const CreateAppStep = struct {\n    sdk: *Sdk,\n    first_step: *std.Build.Step,\n    final_step: *std.Build.Step,\n\n    libraries: []const *std.Build.Step.Compile,\n    build_options: *BuildOptionStep,\n\n    apk_file: std.Build.LazyPath,\n\n    package_name: []const u8,\n\n    pub fn getAndroidPackage(self: @This(), name: []const u8) std.Build.Pkg {\n        return self.sdk.b.dupePkg(std.Build.Pkg{\n            .name = name,\n            .source = self.sdk.b.path(sdkRoot() ++ \"/src/android-support.zig\"),\n            .dependencies = &[_]std.Build.Pkg{\n                self.build_options.getPackage(\"build_options\"),\n            }"}
{"instruction":"Write a Zig function similar to err_msg from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn err_msg(self: *const Process, comptime fmt: anytype, args: anytype) void {\n        send_msg(self.parent, self.tag, .err, fmt, args);\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Pointers §","input":"Zig has two kinds of pointers: single-item and many-item. *T - single-item pointer to exactly one item. Supports deref syntax: ptr.* [*]T - many-item pointer to unknown number of items. Supports index syntax: ptr[i] Supports slice syntax: ptr[start..end] and ptr[start..] Supports pointer arithmetic: ptr + x , ptr - x T must have a known size, which means that it cannot be anyopaque or any other opaque type . These types are closely related to Arrays and Slices : *[N]T - pointer to N items, same","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"comptime @ptrFromInt\"</span> {\n    <span class=\"tok-kw\">comptime</span> {\n        <span class=\"tok-comment\">// Zig is able to do this at compile-time, as long as</span>\n        <span class=\"tok-comment\">// ptr is never dereferenced.</span>\n        <span class=\"tok-kw\">const</span> ptr: *<span class=\"tok-type\">i32</span> = <span class=\"tok-builtin\">@ptrFromInt</span>(<span class=\"tok-number\">0xdeadbee0</span>);\n        <span class=\"tok-kw\">const</span> addr = <span class=\"tok-builtin\">@intFromPtr</span>(ptr);\n        <span class=\"tok-kw\">try</span> expect(<span class=\"tok-builtin\">@TypeOf</span>(addr) == <span class=\"tok-type\">usize</span>);\n        <span class=\"tok-kw\">try</span> expect(addr == <span class=\"tok-number\">0xdeadbee0</span>);\n    }\n}"}
{"instruction":"Write a Zig function similar to performGC from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn performGC(vm: *cy.VM) anyerror!Value {\n    const res = try cy.arc.performGC(vm);\n    const map = try vm.allocEmptyMap();\n    const cycKey = try vm.retainOrAllocAstring(\"numCycFreed\");\n    const objKey = try vm.retainOrAllocAstring(\"numObjFreed\");\n    const num_cyc_freed = try vm.allocInt(@intCast(res.numCycFreed));\n    try map.asHeapObject().map.setConsume(vm, cycKey, num_cyc_freed);\n    const num_obj_freed = try vm.allocInt(@intCast(res.numObjFreed));\n    try map.asHeapObject().map.setConsume(vm, objKey, num_obj_freed);\n    return map;\n}"}
{"instruction":"Write a Zig struct similar to TextAlign from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub const TextAlign = struct {\n    pub const left = c.ACCESSKIT_TEXT_ALIGN_LEFT;\n    pub const right = c.ACCESSKIT_TEXT_ALIGN_RIGHT;\n    pub const center = c.ACCESSKIT_TEXT_ALIGN_CENTER;\n    pub const justify = c.ACCESSKIT_TEXT_ALIGN_JUSTIFY;\n}"}
{"instruction":"Write a Zig function similar to pushField from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushField(c: *cy.Chunk, recv: u8, fieldIdx: u8, retain: bool, dst: u8, debugNode: *ast.Node) !void {\n    try c.pushCode(.field, &.{ recv, fieldIdx, @intFromBool(retain), dst }"}
{"instruction":"Write a Zig function similar to formData from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"pub fn formData(self: *Request) !*StringKeyValue {\n        if (self.fd_read) {\n            return self.fd;\n        }"}
{"instruction":"Write a Zig function similar to distanceCode from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/Token.zig","output":"pub fn distanceCode(t: Token) u8 {\n    var dist: u16 = t.dist;\n    if (dist < match_distances_index.len) {\n        return match_distances_index[dist];\n    }"}
{"instruction":"Write a Zig function similar to disableInterrupts from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/arch.zig","output":"pub fn disableInterrupts() void {\n    asm volatile (\"cli\");\n}"}
{"instruction":"Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig","output":"pub fn serialize(self: *const @This()) [5]u8 {\n        var out: [5]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intFromEnum(self.descriptor_subtype);\n        out[3] = @intCast(self.bcd_cdc & 0xff);\n        out[4] = @intCast((self.bcd_cdc >> 8) & 0xff);\n        return out;\n    }"}
{"instruction":"Write a Zig function similar to deinit from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn deinit() void {\n\t\t\tStorageServer.deinit();\n\t\t}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn callback(\n            ud: ?*anyopaque,\n            l: *Loop,\n            _: *Completion,\n            r: Result,\n        ) CallbackAction {\n            _ = l;\n            const v: *?TimerTrigger = @ptrCast(ud.?);\n            v.* = r.timer catch unreachable;\n            return .disarm;\n        }"}
{"instruction":"Write a Zig function similar to run from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn run(arena: Allocator, buf: []const u8) !void {\n            var diagnostics: Diagnostics = .{ .output = .ignore }"}
{"instruction":"Write a Zig function similar to getFieldNameFromPixelFormat from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn getFieldNameFromPixelFormat(comptime source_format: PixelFormat) []const u8 {\n    const enum_fields = std.meta.fields(PixelFormat);\n    inline for (enum_fields) |field| {\n        if (field.value == @intFromEnum(source_format)) {\n            return field.name;\n        }"}
{"instruction":"Write a Zig function similar to tabName from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"fn tabName(grid_type: GridType) []const u8 {\n            return switch (grid_type) {\n                .styling => \"Styling and\\nsorting\",\n                .layout => \"Layouts and\\ndata\",\n                .scrolling => \"Virtual\\nscrolling\",\n                .row_heights => \"Variable row\\nheights\",\n                .selection => \"Selection\\n \",\n                .navigation => \"Keyboard\\nnavigation\",\n            }"}
{"instruction":"Write a Zig const similar to self from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: ffi/zig_allocator.zig","output":"const self: *const std.mem.Allocator = @ptrCast(@alignCast(ctx));"}
{"instruction":"Write a Zig function similar to getPathname from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn getPathname(file: *const FileOperation) string {\n        if (file.is_tmpdir) {\n            return resolve_path.joinAbs(@TypeOf(Fs.FileSystem.instance.fs).tmpdir_path, .auto, file.pathname);\n        }"}
{"instruction":"Write a Zig function similar to handleHideCursorTimeout from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleHideCursorTimeout(cursor: *Cursor) c_int {\n    log.debug(\"hide cursor timeout\", .{}"}
{"instruction":"Write a Zig function similar to objectInit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn objectInit(self: *Self, _: bool, object: Ast.Node.Index) Error!Ast.Node.Index {\n    const start_location = self.ast.nodes.items(.location)[object];\n    const obj_type_def = self.ast.nodes.items(.type_def)[object];\n    var properties = std.ArrayList(Ast.ObjectInit.Property).empty;\n    var property_names = std.StringHashMapUnmanaged(Ast.Node.Index).empty;\n    defer property_names.deinit(self.gc.allocator);\n\n    while (!self.check(.RightBrace) and !self.check(.Eof)) {\n        try self.consume(.Identifier, \"Expected property name\");\n\n        const property_name = self.current_token.? - 1;\n        const property_name_lexeme = self.ast.tokens.items(.lexeme)[property_name];\n        if (property_names.get(property_name_lexeme)) |previous_decl| {\n            const location = self.ast.tokens.get(property_name);\n            const decl_location = self.ast.tokens.get(previous_decl);\n            self.reporter.reportWithOrigin(\n                .property_already_exists,\n                location,\n                location,\n                decl_location,\n                decl_location,\n                \"Property `{s}"}
{"instruction":"Write a Zig function similar to init from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/codepoint_counting_writer.zig","output":"pub fn init(child_stream: *std.Io.Writer) Self {\n        return .{\n            .child_stream = child_stream,\n        }"}
{"instruction":"Write a Zig function similar to OP_STRING_INVOKE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_STRING_INVOKE(self: *Self, location: Ast.TokenIndex, field_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_STRING_INVOKE,\n        field_idx,\n    );\n}"}
{"instruction":"Write a Zig const similar to notification from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const notification: lsp.TypedJsonRPCNotification(@TypeOf(params)) = .{\n        .method = method,\n        .params = params,\n    };"}
{"instruction":"Write a Zig const similar to ptr from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"const ptr: ?*anyopaque = if (mimalloc.mustUseAlignedAlloc(alignment))\n            mimalloc.mi_heap_malloc_aligned(heap, len, alignment.toByteUnits())\n        else\n            mimalloc.mi_heap_malloc(heap, len);"}
{"instruction":"Write Zig 0.13.0 code for: Values §","input":"values.zig Shell Primitive Types § Primitive Types Type C Equivalent Description i8 int8_t signed 8-bit integer u8 uint8_t unsigned 8-bit integer i16 int16_t signed 16-bit integer u16 uint16_t unsigned 16-bit integer i32 int32_t signed 32-bit integer u32 uint32_t unsigned 32-bit integer i64 int64_t signed 64-bit integer u64 uint64_t unsigned 64-bit integer i128 __int128 signed 128-bit integer u128 unsigned __int128 unsigned 128-bit integer isize intptr_t signed pointer sized integer usize uintpt","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">i32</span>;\n\n    x = <span class=\"tok-number\">1</span>;\n}"}
{"instruction":"Write a Zig const similar to self from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"const self: T = @ptrCast(@alignCast(pointer));"}
{"instruction":"Write a Zig function similar to panic from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/panic.zig","output":"pub fn panic(msg: []const u8, _: ?*std.builtin.StackTrace, _: ?usize) noreturn {\n    log.fatal.printf(\"=== PANIC ===\\n\", .{}"}
{"instruction":"Write a Zig function similar to GE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn GE(self: *Self, dest: m.MIR_op_t, left: m.MIR_op_t, right: m.MIR_op_t) void {\n    self.append(\n        m.MIR_new_insn_arr(\n            self.ctx,\n            @intFromEnum(m.MIR_Instruction.GE),\n            3,\n            &[_]m.MIR_op_t{\n                dest,\n                left,\n                right,\n            }"}
{"instruction":"Write a Zig const similar to media_reverse from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const media_reverse: u21 = 57431;"}
{"instruction":"Write a Zig function similar to convertDim from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/element.zig","output":"fn convertDim(value: css.Dimension) emlay.Dimension {\n    return switch (value) {\n        .auto => .auto,\n        .px => |v| .{ .px = v }"}
{"instruction":"Write a Zig function similar to generate from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator/html.zig","output":"pub fn generate(gpa: Allocator, input: *Reader, w: *Writer) !void {\n    var stack: std.ArrayList([]const u8) = .empty;\n    defer stack.deinit(gpa);\n\n    var newlines: usize = 0;\n    while (true) {\n        const op: Op = @enumFromInt((input.takeByte() catch return) % 8);\n        if (op == .add_newline) newlines += 1;\n        if (newlines > 10) return error.Skip;\n        op.apply(gpa, &stack, input, w) catch |err| switch (err) {\n            error.Done => return,\n            else => return err,\n        }"}
{"instruction":"Write a Zig function similar to run from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"pub fn run(self: *Runner, bench: anytype, input: anytype) !void {\n        var out = std.io.getStdOut();\n\n        var name_buf: [255]u8 = undefined;\n        var fbs = std.io.fixedBufferStream(&name_buf);\n        try bench.writeName(fbs.writer());\n        const name = fbs.getWritten();\n\n        try out.writer().print(\"{s}"}
{"instruction":"Write a Zig function similar to next from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn next(self: *Executor) !void {\n                const index = self.index;\n                const middlewares = self.middlewares;\n\n                if (index < middlewares.len) {\n                    self.index = index + 1;\n                    return middlewares[index].execute(self.req, self.res, self);\n                }"}
{"instruction":"Write a Zig function similar to renderAll from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn renderAll(projectionMatrix: Mat4f, ambientLight: Vec3f, playerPos: Vec3d) void {\n\tinline for(@typeInfo(BlockEntityTypes).@\"struct\".decls) |declaration| {\n\t\t@field(BlockEntityTypes, declaration.name).renderAll(projectionMatrix, ambientLight, playerPos);\n\t}"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn forward(\n        self: SelfAttn,\n        x: zml.Tensor,\n        token_index: zml.Tensor,\n        kv_cache: KvCache,\n    ) struct { zml.Tensor, KvCache }"}
{"instruction":"Write a Zig const similar to signature from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"pub const signature: Signature = .{\n            .params = &.{ .Int, .{ .Opt = .Int } },\n            .ret = .{ .Many = .any },\n        };"}
{"instruction":"Write a Zig function similar to len from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"pub fn len(comptime root: type, object: anytype) !usize {\n    const length = ffi.PyObject_Length(py.object(root, object).py);\n    if (length < 0) return PyError.PyRaised;\n    return @intCast(length);\n}"}
{"instruction":"Write a Zig function similar to ZigCodeFormatter from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn ZigCodeFormatter(comptime T: type) type {\n    return struct {\n        value: T,\n        pub fn format(self: @This(), writer: *std.Io.Writer) std.Io.Writer.Error!void {\n            switch (@typeInfo(T)) {\n                .optional => if (self.value) |v|\n                    try writer.print(\"{f}"}
{"instruction":"Write a Zig struct similar to ModernBertMLP from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertMLP = struct {\n    Wi: zml.nn.Linear,\n    Wo: zml.nn.Linear,\n\n    pub fn forward(self: ModernBertMLP, hidden_states: Tensor) Tensor {\n        // Perform Wi\n        const wi_output: Tensor = zml.call(self.Wi, .forward, .{hidden_states}"}
{"instruction":"Write a Zig function similar to init from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/EventHandler.zig","output":"pub fn init(allocator: Allocator) List {\n        return .{\n            .allocator = allocator,\n            .list = .empty,\n        }"}
{"instruction":"Write a Zig struct similar to AndroidApp from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/textview/main.zig","output":"pub const AndroidApp = struct {\n    allocator: std.mem.Allocator,\n    activity: *android.ANativeActivity,\n    thread: ?std.Thread = null,\n    running: bool = true,\n\n    // The JNIEnv of the UI thread\n    uiJni: NativeActivity = undefined,\n    // The JNIEnv of the app thread\n    mainJni: NativeActivity = undefined,\n\n    // This is needed because to run a callback on the UI thread Looper you must\n    // react to a fd change, so we use a pipe to force it\n    pipe: [2]std.os.fd_t = undefined,\n    // This is used with futexes so that runOnUiThread waits until the callback is completed\n    // before returning.\n    uiThreadCondition: std.atomic.Value(u32) = std.atomic.Value(u32).init(0),\n    uiThreadLooper: *android.ALooper = undefined,\n    uiThreadId: std.Thread.Id = undefined,\n\n    pub fn init(allocator: std.mem.Allocator, activity: *android.ANativeActivity, stored_state: ?[]const u8) !AndroidApp {\n        _ = stored_state;\n\n        return AndroidApp{\n            .allocator = allocator,\n            .activity = activity,\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">0b01010101</span>; <span class=\"tok-comment\">// runtime-known</span>\n    _ = &x;\n    <span class=\"tok-kw\">const</span> y = <span class=\"tok-builtin\">@shlExact</span>(x, <span class=\"tok-number\">2</span>);\n    std.debug.print(<span class=\"tok-str\">\"value: {}\\n\"</span>, .{y});\n}"}
{"instruction":"Write a Zig function similar to mapServerId from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn mapServerId(serverId: InventoryId, inventory: Inventory) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tserverToClientMap.put(serverId, inventory) catch unreachable;\n\t\t}"}
{"instruction":"Write a Zig function similar to gotoPlainText from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub fn gotoPlainText(self: *Tokenizer) void {\n    self.state = .{ .plaintext = self.idx }"}
{"instruction":"Write a Zig function similar to next from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/key_value.zig","output":"pub fn next(self: *Iterator) ?KV {\n                const pos = self.pos;\n                if (pos == self.keys.len) {\n                    return null;\n                }"}
{"instruction":"Write a Zig function similar to memcpy from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn memcpy(dst: []u8, src: []const u8) void {\n    c.webui_memcpy(@ptrCast(dst.ptr), @ptrCast(@constCast(src.ptr)), src.len);\n}"}
{"instruction":"Write a Zig function similar to writeToSlice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn writeToSlice(self: *Self, dest: []T, start: usize) void {\n            const end = start + dest.len;\n            assert(end <= self.len);\n\n            var i = start;\n            if (end <= prealloc_item_count) {\n                const src = self.prealloc_segment[i..end];\n                @memcpy(dest[i - start ..][0..src.len], src);\n                return;\n            }"}
{"instruction":"Write a Zig function similar to control_ack from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn control_ack(self: *@This(), setup: *const SetupPacket) void {\n        return self.fn_control_ack(setup);\n    }"}
{"instruction":"Write a Zig function similar to pack from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn pack(val: f128) F128Value {\n            return @bitCast(val);\n        }"}
{"instruction":"Write a Zig function similar to initializeCandidate from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/graphics_context.zig","output":"fn initializeCandidate(instance: Instance, candidate: DeviceCandidate) !vk.Device {\n    const priority = [_]f32{1}"}
{"instruction":"Write a Zig function similar to run from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"pub fn run(self: *Loop, mode: RunMode) !void {\n        switch (mode) {\n            .no_wait => try self.tick(0),\n            .once => try self.tick(1),\n            .until_done => while (!self.done()) try self.tick(1),\n        }"}
{"instruction":"Write a Zig function similar to typedefBaseType from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn typedefBaseType(self: Self, type_ndx: types.TypeNdx) struct {\n            data_type: types.DataType,\n            data_type_ndx: types.TypeNdx,\n        }"}
{"instruction":"Write a Zig function similar to stop from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn stop(self: *Self) void {\n            self._mut.lock();\n            defer self._mut.unlock();\n\n            for (self._workers) |*w| {\n                if (self._listener == null) {\n                    log.err(\"Cannot stop server, .listen() was never called\", .{}"}
{"instruction":"Write a Zig function similar to build_tigerbeetle_executable_multiversion from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_tigerbeetle_executable_multiversion(b: *std.Build, options: struct {\n    stdx_module: *std.Build.Module,\n    vsr_module: *std.Build.Module,\n    vsr_options: *std.Build.Step.Options,\n    llvm_objcopy: ?[]const u8,\n    tigerbeetle_previous: std.Build.LazyPath,\n    target: std.Build.ResolvedTarget,\n    mode: std.builtin.OptimizeMode,\n}) std.Build.LazyPath {\n    // build_multiversion a custom step that would take care of packing several releases into one\n    const build_multiversion_exe = b.addExecutable(.{\n        .name = \"build_multiversion\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/build_multiversion.zig\"),\n            // Enable aes extensions for vsr.checksum on the host.\n            .target = resolve_target(b, null) catch @panic(\"unsupported host\"),\n        }"}
{"instruction":"Write a Zig function similar to handleDestroy from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputDevice.zig","output":"fn handleDestroy(listener: *wl.Listener(*wlr.InputDevice), _: *wlr.InputDevice) void {\n    const device: *InputDevice = @fieldParentPtr(\"destroy\", listener);\n\n    log.debug(\"removed input device: {s}"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn forward(\n        self: ModernBertEncoderLayer,\n        hidden_states: Tensor,\n        global_mask: Tensor,\n        local_mask: Tensor,\n    ) Tensor {\n        const attn_norm_output = if (self.attn_norm) |attn_norm|\n            zml.call(attn_norm, .forward, .{hidden_states}"}
{"instruction":"Write a Zig function similar to parseFnCall from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/parser.zig","output":"pub fn parseFnCall(self: *Parser, fun: anytype) !@typeInfo(@TypeOf(fun)).Fn.return_type.? {\n        const Args = std.meta.ArgsTuple(@TypeOf(fun));\n        var args: Args = undefined;\n        inline for (std.meta.fields(Args), 0..) |f, i| {\n            if (i > 0) try self.expect(.comma);\n            @field(args, f.name) = try self.parse(f.type);\n        }"}
{"instruction":"Write a Zig function similar to getUnknown from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn getUnknown(ip: *InternPool, gpa: Allocator, ty: Index) Allocator.Error!Index {\n    assert(ip.isType(ty));\n    if (ty == .type_type) return Index.unknown_type;\n    if (ty == .unknown_type) return Index.unknown_unknown;\n    return try ip.get(gpa, .{ .unknown_value = .{ .ty = ty }"}
{"instruction":"Write a Zig function similar to build_vortex from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_vortex(\n    b: *std.Build,\n    steps: struct {\n        vortex_build: *std.Build.Step,\n        vortex_run: *std.Build.Step,\n    },\n    options: struct {\n        tb_client_header: std.Build.LazyPath,\n        stdx_module: *std.Build.Module,\n        vsr_module: *std.Build.Module,\n        vsr_options: *std.Build.Step.Options,\n        target: std.Build.ResolvedTarget,\n        mode: std.builtin.OptimizeMode,\n        print_exe: bool,\n    },\n) void {\n    const vortex = build_vortex_executable(b, .{\n        .tb_client_header = options.tb_client_header,\n        .stdx_module = options.stdx_module,\n        .vsr_module = options.vsr_module,\n        .vsr_options = options.vsr_options,\n        .target = options.target,\n        .mode = options.mode,\n    }"}
{"instruction":"Write a Zig function similar to OP_RANGE_INVOKE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_RANGE_INVOKE(self: *Self, location: Ast.TokenIndex, field_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_RANGE_INVOKE,\n        field_idx,\n    );\n}"}
{"instruction":"Write a Zig struct similar to Decl from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Decl = struct {\n    name: String,\n    node_idx: std.zig.Ast.Node.Index,\n    /// this stores both the type and the value\n    index: InternPool.Index,\n    alignment: u16,\n    address_space: std.builtin.AddressSpace,\n    src_namespace: InternPool.NamespaceIndex,\n    is_pub: bool,\n    is_exported: bool,\n\n    pub const Index = enum(u32) {\n        _,\n\n        pub fn toOptional(i: Decl.Index) OptionalIndex {\n            return @enumFromInt(@intFromEnum(i));\n        }"}
{"instruction":"Write a Zig function similar to getExecuteState from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"fn getExecuteState(self: *Job) *JobExecuteState {\n        std.debug.assert(self.state() == .executing);\n        return @ptrCast(@alignCast(self.next_or_state));\n    }"}
{"instruction":"Write a Zig function similar to throwFmt from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub fn throwFmt(ctx: Context, comptime err: []const u8, args: anytype) Value.NativeError {\n        try ctx.frame.throwFmt(ctx.vm, err, args);\n        return error.Throw;\n    }"}
{"instruction":"Write a Zig function similar to deinit from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn deinit(_: Coro) void {\n        // empty\n    }"}
{"instruction":"Write a Zig const similar to vtable from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/types.zig","output":"const vtable: Encoder.Table.VTable = comptime .{\n            .write = &struct {\n                fn write(context: *const anyopaque, encoder: *Encoder.TableEncoder) void {\n                    const capabilities: *const ClientCapabilities = @ptrCast(@alignCast(context));"}
{"instruction":"Write Zig 0.14.1 code for: Values §","input":"values.zig Shell Primitive Types § Primitive Types Type C Equivalent Description i8 int8_t signed 8-bit integer u8 uint8_t unsigned 8-bit integer i16 int16_t signed 16-bit integer u16 uint16_t unsigned 16-bit integer i32 int32_t signed 32-bit integer u32 uint32_t unsigned 32-bit integer i64 int64_t signed 64-bit integer u64 uint64_t unsigned 64-bit integer i128 __int128 signed 128-bit integer u128 unsigned __int128 unsigned 128-bit integer isize intptr_t signed pointer sized integer usize uintpt","output":"<span class=\"tok-kw\">const</span> print = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).debug.print;\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">u32</span> = <span class=\"tok-null\">undefined</span>;\n    <span class=\"tok-kw\">var</span> y: <span class=\"tok-type\">u32</span> = <span class=\"tok-null\">undefined</span>;\n    <span class=\"tok-kw\">var</span> z: <span class=\"tok-type\">u32</span> = <span class=\"tok-null\">undefined</span>;\n\n    <span class=\"tok-kw\">const</span> tuple = .{ <span class=\"tok-number\">1</span>, <span class=\"tok-number\">2</span>, <span class=\"tok-number\">3</span> };\n\n    x, y, z = tuple;\n\n    print(<span class=\"tok-str\">\"tuple: x = {}, y = {}, z = {}\\n\"</span>, .{x, y, z});\n\n    <span class=\"tok-kw\">const</span> array = [_]<span class=\"tok-type\">u32</span>{ <span class=\"tok-number\">4</span>, <span class=\"tok-number\">5</span>, <span class=\"tok-number\">6</span> };\n\n    x, y, z = array;\n\n    print(<span class=\"tok-str\">\"array: x = {}, y = {}, z = {}\\n\"</span>, .{x, y, z});\n\n    <span class=\"tok-kw\">const</span> vector: <span class=\"tok-builtin\">@Vector</span>(<span class=\"tok-number\">3</span>, <span class=\"tok-type\">u32</span>) = .{ <span class=\"tok-number\">7</span>, <span class=\"tok-number\">8</span>, <span class=\"tok-number\">9</span> };\n\n    x, y, z = vector;\n\n    print(<span class=\"tok-str\">\"vector: x = {}, y = {}, z = {}\\n\"</span>, .{x, y, z});\n}"}
{"instruction":"Write a Zig function similar to findZig from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/configuration.zig","output":"pub fn findZig(allocator: std.mem.Allocator) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to client_eviction_callback from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"fn client_eviction_callback(client: *Client, eviction: *const Message.Eviction) void {\n            const self: *Context = @fieldParentPtr(\"client\", client);\n            assert(self.eviction_reason == null);\n\n            log.debug(\"{}"}
{"instruction":"Write a Zig function similar to debug from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub fn debug(\n        node: *const Node,\n        src: []const u8,\n        html_ast: html.Ast,\n        ast: Ast,\n    ) void {\n        std.debug.print(\"\\n\\n-- DEBUG --\\n\", .{}"}
{"instruction":"Write a Zig function similar to write from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn write(self: *EvLoop, fdobj: *Fd, data: []const u8) ?void {\n    var nsend: usize = 0;\n\n    while (nsend < data.len) {\n        if (fdobj.is_canceled())\n            return null;\n\n        if (cc.send(fdobj.fd, data[nsend..], 0)) |n| {\n            nsend += n;\n        }"}
{"instruction":"Write a Zig function similar to addFd from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn addFd(fd_set: **align(8) FdSet, allocator: std.mem.Allocator, new_fd: windows.ws2_32.SOCKET) !void {\n            if (fd_set.*.size == fd_set.*.capacity) {\n                // Double our capacity.\n                const new_mem_size = 4 * @sizeOf(c_uint) + 2 * fd_set.*.capacity * @sizeOf(windows.ws2_32.SOCKET);\n                const ptr: []u8 align(8) = @alignCast(fd_set.*.memSlice());\n                fd_set.* = @ptrCast(@alignCast((try allocator.reallocAdvanced(ptr, new_mem_size, @returnAddress())).ptr));\n                fd_set.*.capacity *= 2;\n            }"}
{"instruction":"Write a Zig function similar to move_left_no_target from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"fn move_left_no_target(self: *Self, root: Buffer.Root, metrics: Metrics) !void {\n    if (self.col == 0) {\n        if (self.row == 0) return error.Stop;\n        self.row -= 1;\n        self.col = root.line_width(self.row, metrics) catch 0;\n    }"}
{"instruction":"Write a Zig struct similar to ErrorUnion from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const ErrorUnion = struct {\n        // .none if inferred error set\n        error_set_type: Index,\n        payload_type: Index,\n    }"}
{"instruction":"Write a Zig function similar to set from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/String.zig","output":"pub fn set(str: *String, ctx: Vm.Context, index: *const Value, new_val: *const Value) Value.NativeError!void {\n    _ = str;\n    _ = index;\n    _ = new_val;\n    return ctx.frame.fatal(ctx.vm, \"TODO set string\");\n}"}
{"instruction":"Write a Zig function similar to add from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"pub fn add(self: *Palette, id: []const u8) void {\n\t\tself.palette.append(self.palette.allocator.dupe(u8, id));\n\t}"}
{"instruction":"Write a Zig function similar to deinit from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn deinit() void {\n\t\t\treset();\n\t\t\tcommands.deinit();\n\t\t\tfreeIdList.deinit();\n\t\t\tserverToClientMap.deinit();\n\t\t}"}
{"instruction":"Write a Zig function similar to validateMimeChars from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig","output":"pub fn validateMimeChars(bytes: []const u8) ?Rule.ValueRejection {\n    for (bytes, 0..) |c, idx| switch (c) {\n        // zig fmt: off\n        '!', '#', '$', '%', '&', '\\'', '*',\n        '+', '-', '.', '^', '_', '`', '|', '~',\n        'a'...'z', '0'...'9', 'A'...'Z' => {}"}
{"instruction":"Write a Zig function similar to eql from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/Token.zig","output":"pub fn eql(t: Token, o: Token) bool {\n    return t.kind == o.kind and\n        t.dist == o.dist and\n        t.len_lit == o.len_lit;\n}"}
{"instruction":"Write a Zig const similar to EP0_IN_ADDR from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub const EP0_IN_ADDR: u8 = to_address(0, .In);"}
{"instruction":"Write a Zig struct similar to Batch from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"pub const Batch = struct {\n    len: usize = 0,\n    head: ?*Task = null,\n    tail: ?*Task = null,\n\n    /// Create a batch from a single task.\n    pub fn from(task: *Task) Batch {\n        return Batch{\n            .len = 1,\n            .head = task,\n            .tail = task,\n        }"}
{"instruction":"Write a Zig function similar to UserVM_finalizer from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"pub fn UserVM_finalizer(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) void {\n    const uvm: *UserVM = @ptrCast(@alignCast(obj));\n    @as(*C.ZVM, @ptrCast(uvm.vm)).destroy();\n}"}
{"instruction":"Write a Zig function similar to markVal from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Gc.zig","output":"pub fn markVal(gc: *Gc, maybe_value: ?*const Value) void {\n    const value = maybe_value orelse return;\n    // These will never be allocated\n    if (value == Value.Null or\n        value == Value.True or\n        value == Value.False) return;\n\n    for (gc.simple_pages.items) |page| {\n        const index = page.indexOf(value) orelse continue;\n        if (page.meta[index] == .white) {\n            page.meta[index] = .black;\n        }"}
{"instruction":"Write a Zig function similar to walk_egc_forward from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn walk_egc_forward(self: *const Node, line: usize, walker_f: EgcF, walker_ctx: *anyopaque, metrics_: Metrics) anyerror!void {\n        const Ctx = struct {\n            walker_f: EgcF,\n            walker_ctx: @TypeOf(walker_ctx),\n            abs_col: usize = 0,\n            fn walker(ctx_: *anyopaque, leaf: *const Self.Leaf, metrics: Metrics) Walker {\n                const ctx = @as(*@This(), @ptrCast(@alignCast(ctx_)));\n                var buf: []const u8 = leaf.buf;\n                while (buf.len > 0) {\n                    var cols: c_int = undefined;\n                    const bytes = metrics.egc_length(metrics, buf, &cols, ctx.abs_col);\n                    const ret = ctx.walker_f(ctx.walker_ctx, buf[0..bytes], @intCast(cols), metrics);\n                    if (ret.err) |e| return .{ .err = e }"}
{"instruction":"Write a Zig const similar to index from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/idt.zig","output":"const index: u8 = 100;"}
{"instruction":"Write a Zig function similar to collectIncludeDirs from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"pub fn collectIncludeDirs(\n    store: *DocumentStore,\n    allocator: std.mem.Allocator,\n    handle: *Handle,\n    include_dirs: *std.ArrayList([]const u8),\n) !bool {\n    comptime std.debug.assert(supports_build_system);\n\n    var arena_allocator: std.heap.ArenaAllocator = .init(allocator);\n    defer arena_allocator.deinit();\n\n    const target_info: std.Target = .{\n        .cpu = .{\n            .arch = builtin.cpu.arch,\n            .model = undefined,\n            .features = undefined,\n        }"}
{"instruction":"Write a Zig struct similar to BuildOptions from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/lib.zig","output":"const BuildOptions = struct {\n    target: std.Build.ResolvedTarget,\n    optimize: std.builtin.OptimizeMode,\n}"}
{"instruction":"Write a Zig function similar to deinit from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/ping-pongs.zig","output":"pub fn deinit(self: *Client) void {\n        self.completion_pool.deinit();\n    }"}
{"instruction":"Write a Zig const similar to pos from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const pos: Vec3d = @floatFromInt(_pos);"}
{"instruction":"Write a Zig struct similar to CMakeConfig from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"const CMakeConfig = struct {\n    llvm_linkage: std.builtin.LinkMode,\n    cmake_binary_dir: []const u8,\n    cmake_prefix_path: []const u8,\n    cmake_static_library_prefix: []const u8,\n    cmake_static_library_suffix: []const u8,\n    cxx_compiler: []const u8,\n    cxx_compiler_arg1: []const u8,\n    lld_include_dir: []const u8,\n    lld_libraries: []const u8,\n    clang_libraries: []const u8,\n    llvm_lib_dir: []const u8,\n    llvm_include_dir: []const u8,\n    llvm_libraries: []const u8,\n    dia_guids_lib: []const u8,\n    system_libcxx: []const u8,\n}"}
{"instruction":"Write a Zig const similar to input_popup from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputPopup.zig","output":"const input_popup: *InputPopup = @fieldParentPtr(\"commit\", listener);"}
{"instruction":"Write a Zig function similar to constructor from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleSheet.zig","output":"pub fn constructor(_opts: ?CSSStyleSheetOpts) !CSSStyleSheet {\n    const opts = _opts orelse CSSStyleSheetOpts{}"}
{"instruction":"Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/ore.zig","output":"pub fn canBeChangedInto(oldBlock: Block, newBlock: Block, _: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) RotationMode.CanBeChangedInto {\n\tif(oldBlock == newBlock) return .no;\n\tif(oldBlock.transparent() or oldBlock.viewThrough()) return .no;\n\tif(!main.blocks.meshes.modelIndexStart(oldBlock).model().allNeighborsOccluded) return .no;\n\tif(oldBlock.data != 0) return .no;\n\tif(newBlock.data != oldBlock.typ) return .no;\n\tshouldDropSourceBlockOnSuccess.* = false;\n\treturn .{.yes_costsItems = 1}"}
{"instruction":"Write a Zig function similar to shrinkRetainingCapacity from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn shrinkRetainingCapacity(self: *Self, new_len: u32) void {\n            self.len = new_len;\n        }"}
{"instruction":"Write a Zig function similar to len from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/range.zig","output":"pub fn len(ctx: *obj.NativeCtx) callconv(.c) c_int {\n    const range = ctx.vm.peek(0).obj().access(obj.ObjRange, .Range, ctx.vm.gc).?;\n\n    ctx.vm.push(\n        v.Value.fromInteger(\n            if (range.low < range.high)\n                range.high - range.low\n            else\n                range.low - range.high,\n        ),\n    );\n\n    return 1;\n}"}
{"instruction":"Write a Zig function similar to XCallback from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"fn XCallback(comptime ResultT: type) type {\n    return struct {\n        frame: ?Frame = null,\n        result: ResultT = undefined,\n\n        fn init() @This() {\n            return .{ .frame = libcoro.xframe() }"}
{"instruction":"Write a Zig function similar to init from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/taxonomy.zig","output":"pub fn init(allocator: std.mem.Allocator) Taxonomy {\n        return .{\n            .allocator = allocator,\n            .eco_auto_id = 0,\n            .repo_auto_id = 0,\n            .tag_auto_id = 0,\n            .migration_count = 0,\n            .buffers = ArrayList([]const u8).init(allocator),\n            .eco_ids = SliceIdMap.init(allocator),\n            .repo_ids = SliceIdMap.init(allocator),\n            .tag_ids = SliceIdMap.init(allocator),\n            .tag_id_to_name_map = IdSliceMap.init(allocator),\n            .parent_to_child_map = ParentToChildMap.init(allocator),\n            .child_to_parent_map = ChildToParentMap.init(allocator),\n            .eco_to_repo_map = EcoToRepoMap.init(allocator),\n            .repo_to_eco_map = RepoToEcoMap.init(allocator),\n            .repo_id_to_url_map = IdSliceMap.init(allocator),\n            .eco_id_to_name_map = IdSliceMap.init(allocator),\n            .eco_repo_to_tag_map = EcoRepoToTagMap.init(allocator),\n            .errors = ArrayList(TaxonomyError).init(allocator),\n        }"}
{"instruction":"Write a Zig function similar to split from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/shlex.zig","output":"pub fn split(line: []const u8, tokens: []?[]const u8) !usize {\n    var token_count: usize = 0;\n    var i: usize = 0;\n    var start: usize = 0;\n\n    while (i < line.len and token_count < tokens.len) : (i += 1) {\n        while (i < line.len and std.ascii.isWhitespace(line[i])) {\n            i += 1;\n        }"}
{"instruction":"Write a Zig struct similar to no_stack_limit from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const no_stack_limit = struct {}"}
{"instruction":"Write a Zig function similar to xframe from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn xframe() Frame {\n    return thread_state.current();\n}"}
{"instruction":"Write a Zig function similar to is_hidden from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn is_hidden(self: *const Self) bool {\n    return self.hidden;\n}"}
{"instruction":"Write a Zig function similar to containsFd from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn containsFd(self: *align(8) FdSet, fd: windows.ws2_32.SOCKET) bool {\n            for (self.fdSlice()) |ex_fd| {\n                if (ex_fd == fd) return true;\n            }"}
{"instruction":"Write a Zig struct similar to UseAlias from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const UseAlias = struct {\n    name: *Node align(8),\n    target: *Node,\n    pos: u32,\n}"}
{"instruction":"Write a Zig const similar to char from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Scanner.zig","output":"const char: u8 = self.peek();"}
{"instruction":"Write a Zig function similar to router from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn router(self: *Self, config: RouterConfig) !*Router(H, ActionArg) {\n            // we store this in self for us when no route is found (these will\n            // still be executed).\n\n            const owned = try self.arena.dupe(Middleware(H), config.middlewares);\n            self._middlewares = owned;\n\n            // we store this in router to append to add/append to created routes\n            self._router.middlewares = owned;\n\n            return &self._router;\n        }"}
{"instruction":"Write a Zig function similar to lessThan from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"fn lessThan(_: void, lhs: @This(), rhs: @This()) bool {\n            return rhs.loc.start < lhs.loc.start and lhs.loc.end < rhs.loc.end;\n        }"}
{"instruction":"Write a Zig function similar to reset from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn reset(self: *Debug, gpa: std.mem.Allocator) void {\n    if (self.target.mouse()) {\n        for (self.under_mouse_stack.items) |item| {\n            gpa.free(item.name);\n        }"}
{"instruction":"Write a Zig function similar to deinit from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/configuration.zig","output":"pub fn deinit(manager: *Manager) void {\n        const allocator = manager.allocator;\n        switch (builtin.os.tag) {\n            .wasi => {\n                if (manager.impl.cached_wasi_preopens) |wasi_preopens| {\n                    for (wasi_preopens.names[3..]) |name| allocator.free(name);\n                    allocator.free(wasi_preopens.names);\n                }"}
{"instruction":"Write a Zig struct similar to methods from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/List.zig","output":"pub const methods = struct {\n    fn append(list: Value.This(*List), ctx: Vm.Context, vals: Value.Variadic(*Value)) !void {\n        try list.t.inner.appendSlice(ctx.vm.gc.gpa, vals.t);\n    }"}
{"instruction":"Write a Zig struct similar to Data from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"const Data = struct {\n                result: ResultT = undefined,\n                frame: ?Frame = null,\n\n                fn callback(\n                    userdata: ?*@This(),\n                    l: *xev.Loop,\n                    c: *xev.Completion,\n                    s: StreamT,\n                    result: ResultT,\n                ) xev.CallbackAction {\n                    _ = l;\n                    _ = c;\n                    _ = s;\n                    const data = userdata.?;\n                    data.result = result;\n                    if (data.frame != null) libcoro.xresume(data.frame.?);\n                    return .disarm;\n                }"}
{"instruction":"Write a Zig function similar to read from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn read(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !InventoryAndSlot {\n\t\t\tconst id = try reader.readEnum(InventoryId);\n\t\t\tconst result: InventoryAndSlot = .{\n\t\t\t\t.inv = Sync.getInventory(id, side, user) orelse return error.InventoryNotFound,\n\t\t\t\t.slot = try reader.readInt(u32),\n\t\t\t}"}
{"instruction":"Write a Zig const similar to switch_expr_type from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const switch_expr_type: Type = (try analyser.resolveTypeOfNodeInternal(.of(cond, self.handle))) orelse return null;"}
{"instruction":"Write a Zig function similar to nodesAtLoc from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn nodesAtLoc(allocator: std.mem.Allocator, tree: Ast, loc: offsets.Loc) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to Action from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub const Action = struct {\n    pub const click = c.ACCESSKIT_ACTION_CLICK;\n    pub const focus = c.ACCESSKIT_ACTION_FOCUS;\n    pub const blur = c.ACCESSKIT_ACTION_BLUR;\n    pub const collapse = c.ACCESSKIT_ACTION_COLLAPSE;\n    pub const expand = c.ACCESSKIT_ACTION_EXPAND;\n    pub const custom_action = c.ACCESSKIT_ACTION_CUSTOM_ACTION;\n    pub const decrement = c.ACCESSKIT_ACTION_DECREMENT;\n    pub const increment = c.ACCESSKIT_ACTION_INCREMENT;\n    pub const hide_tooltip = c.ACCESSKIT_ACTION_HIDE_TOOLTIP;\n    pub const show_tooltip = c.ACCESSKIT_ACTION_SHOW_TOOLTIP;\n    pub const replace_selected_text = c.ACCESSKIT_ACTION_REPLACE_SELECTED_TEXT;\n    pub const scroll_down = c.ACCESSKIT_ACTION_SCROLL_DOWN;\n    pub const scroll_left = c.ACCESSKIT_ACTION_SCROLL_LEFT;\n    pub const scroll_right = c.ACCESSKIT_ACTION_SCROLL_RIGHT;\n    pub const scroll_up = c.ACCESSKIT_ACTION_SCROLL_UP;\n    pub const scroll_into_view = c.ACCESSKIT_ACTION_SCROLL_INTO_VIEW;\n    pub const scroll_to_point = c.ACCESSKIT_ACTION_SCROLL_TO_POINT;\n    pub const set_scroll_offset = c.ACCESSKIT_ACTION_SET_SCROLL_OFFSET;\n    pub const set_text_selection = c.ACCESSKIT_ACTION_SET_TEXT_SELECTION;\n    pub const set_sequential_focus_navigation_starting_point = c.ACCESSKIT_ACTION_SET_SEQUENTIAL_FOCUS_NAVIGATION_STARTING_POINT;\n    pub const set_value = c.ACCESSKIT_ACTION_SET_VALUE;\n    pub const show_context_menu = c.ACCESSKIT_ACTION_SHOW_CONTEXT_MENU;\n}"}
{"instruction":"Write a Zig function similar to allocator from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"pub fn allocator(self: Default) std.mem.Allocator {\n        _ = self;\n        return c_allocator;\n    }"}
{"instruction":"Write a Zig function similar to delete from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"pub fn delete(self: *Loop, completion: *Completion) void {\n        switch (completion.flags.state) {\n            // Already deleted\n            .deleting => return,\n\n            // If we're active then we will stop it and remove from epoll.\n            // If we're adding then we'll ignore it when adding.\n            .dead, .active, .adding => {}"}
{"instruction":"Write a Zig const similar to entry_ty from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const entry_ty: Type = .{ .data = entry.type_data, .is_type_val = self.is_type_val };"}
{"instruction":"Write a Zig const similar to color from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"const color: std.io.tty.Color = if (delta < 1000000)\n        .green\n    else if (delta < 5000000)\n        .yellow\n    else\n        .red;"}
{"instruction":"Write a Zig function similar to init from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/parser.zig","output":"pub fn init(allocator: std.mem.Allocator, input: []const u8) Parser {\n        return .{\n            .allocator = allocator,\n            .tokenizer = Tokenizer{ .input = input }"}
{"instruction":"Write a Zig function similar to id from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub fn id(reg: Register) u6 {\n        const base = switch (@intFromEnum(reg)) {\n            // zig fmt: off\n            @intFromEnum(Register.rax)  ... @intFromEnum(Register.r15)   => @intFromEnum(Register.rax),\n            @intFromEnum(Register.eax)  ... @intFromEnum(Register.r15d)  => @intFromEnum(Register.eax),\n            @intFromEnum(Register.ax)   ... @intFromEnum(Register.r15w)  => @intFromEnum(Register.ax),\n            @intFromEnum(Register.al)   ... @intFromEnum(Register.r15b)  => @intFromEnum(Register.al),\n            @intFromEnum(Register.ah)   ... @intFromEnum(Register.bh)    => @intFromEnum(Register.ah),\n\n            @intFromEnum(Register.ymm0) ... @intFromEnum(Register.ymm15) => @intFromEnum(Register.ymm0) - 16,\n            @intFromEnum(Register.xmm0) ... @intFromEnum(Register.xmm15) => @intFromEnum(Register.xmm0) - 16,\n            @intFromEnum(Register.mm0)  ... @intFromEnum(Register.mm7)   => @intFromEnum(Register.mm0) - 32,\n            @intFromEnum(Register.st0)  ... @intFromEnum(Register.st7)   => @intFromEnum(Register.st0) - 40,\n\n            @intFromEnum(Register.es)   ... @intFromEnum(Register.gs)    => @intFromEnum(Register.es) - 48,\n\n            else => unreachable,\n            // zig fmt: on\n        }"}
{"instruction":"Write a Zig function similar to sendDataToCounter from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"fn sendDataToCounter(counter: CounterSelect, data: u8) void {\n    arch.out(counter.getRegister(), data);\n}"}
{"instruction":"Write a Zig struct similar to VarDecl from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const VarDecl = struct {\n    name: *Node align(8),\n    typeSpec: ?*Node,\n    right: *Node,\n    typed: bool,\n    pos: u32\n}"}
{"instruction":"Write a Zig function similar to errorSymbol from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn errorSymbol(err: anyerror) Symbol {\n    switch (err) {\n        error.AssertError           => return .AssertError,\n        error.EvalError             => return .EvalError,\n        error.Unicode               => return .Unicode,\n        error.InvalidResult         => return .InvalidResult,\n        error.InvalidArgument       => return .InvalidArgument,\n        error.InvalidEnumTag        => return .InvalidArgument,\n        error.FileNotFound          => return .FileNotFound,\n        error.OutOfBounds           => return .OutOfBounds,\n        error.PermissionDenied      => return .PermissionDenied,\n        error.StdoutStreamTooLong   => return .StreamTooLong,\n        error.StderrStreamTooLong   => return .StreamTooLong,\n        error.EndOfStream           => return .EndOfStream,\n        error.Unsupported           => return .Unsupported,\n        else                        => return .UnknownError,\n    }"}
{"instruction":"Write a Zig function similar to machMain from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/machbench.zig","output":"pub fn machMain(runs: usize) anyerror!void {\n    defer Output.flush();\n    waker = try bun.Async.Waker.init(bun.default_allocator);\n\n    var args = try std.process.argsAlloc(bun.default_allocator);\n    const count = std.fmt.parseInt(usize, args[args.len - 1], 10) catch 1024;\n    var elapsed: u64 = 0;\n\n    var remaining_runs: usize = runs;\n    while (remaining_runs > 0) : (remaining_runs -= 1) {\n        var threads: [thread_count]std.Thread = undefined;\n        var j: usize = 0;\n        while (j < thread_count) : (j += 1) {\n            threads[j] = try std.Thread.spawn(.{}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = l;\n                _ = c;\n                const ptr: *usize = @ptrCast(@alignCast(ud.?));\n                ptr.* = r.pread catch unreachable;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to deinit from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn deinit(self: Self) void {\n                self._frame.deinit();\n            }"}
{"instruction":"Write a Zig function similar to deinit from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/bog.zig","output":"pub fn deinit(self: *Errors) void {\n        for (self.list.items) |*err| {\n            err.msg.deinit(self.arena.child_allocator);\n        }"}
{"instruction":"Write a Zig function similar to receive from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"fn receive(self: *Client) void {\n        assert(self.fd != IO.INVALID_SOCKET);\n        assert(self.receive_buffer.state == .idle);\n        self.io.recv(\n            *Client,\n            self,\n            receive_callback,\n            &self.receive_completion,\n            self.fd,\n            self.receive_buffer.begin_receive(),\n        );\n    }"}
{"instruction":"Write a Zig function similar to deinit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn deinit(self: *Report, allocator: std.mem.Allocator) void {\n        for (self.items) |*item| {\n            @constCast(item).deinit(allocator);\n        }"}
{"instruction":"Write a Zig struct similar to ArrayLit from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const ArrayLit = struct {\n    args: []*Node align(8),\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to deinit from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputDevice.zig","output":"pub fn deinit(device: *InputDevice) void {\n    device.destroy.link.remove();\n\n    util.gpa.free(device.identifier);\n\n    if (!isKeyboardGroup(device.wlr_device)) {\n        device.link.remove();\n        device.seat.updateCapabilities();\n    }"}
{"instruction":"Write a Zig function similar to handleSwipeEnd from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleSwipeEnd(\n    listener: *wl.Listener(*wlr.Pointer.event.SwipeEnd),\n    event: *wlr.Pointer.event.SwipeEnd,\n) void {\n    const cursor: *Cursor = @fieldParentPtr(\"swipe_end\", listener);\n    server.input_manager.pointer_gestures.sendSwipeEnd(\n        cursor.seat.wlr_seat,\n        event.time_msec,\n        event.cancelled,\n    );\n}"}
{"instruction":"Write a Zig const similar to green from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub const green: PMA = .fromColor(.green);"}
{"instruction":"Write a Zig const similar to callCode from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"const callCode: ir.ExprCode = @enumFromInt(c.ir.buf.items[call]);"}
{"instruction":"Write a Zig function similar to startCallback from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn startCallback(transfer: *Http.Transfer) !void {\n        log.debug(.http, \"script fetch start\", .{ .req = transfer, .blocking = true }"}
{"instruction":"Write a Zig function similar to get_parentRule from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"pub fn get_parentRule(_: *const CSSStyleDeclaration) ?CSSRule {\n    return null;\n}"}
{"instruction":"Write a Zig function similar to argsToBog from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/main.zig","output":"fn argsToBog(ctx: bog.Vm.Context) bog.Vm.Error!*bog.Value {\n            const ret = try ctx.vm.gc.alloc(.list);\n            ret.* = .{ .list = .{}"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">comptime</span> {\n    <span class=\"tok-kw\">const</span> ptr: *<span class=\"tok-kw\">align</span>(<span class=\"tok-number\">1</span>) <span class=\"tok-type\">i32</span> = <span class=\"tok-builtin\">@ptrFromInt</span>(<span class=\"tok-number\">0x1</span>);\n    <span class=\"tok-kw\">const</span> aligned: *<span class=\"tok-kw\">align</span>(<span class=\"tok-number\">4</span>) <span class=\"tok-type\">i32</span> = <span class=\"tok-builtin\">@alignCast</span>(ptr);\n    _ = aligned;\n}"}
{"instruction":"Write a Zig function similar to size from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"pub fn size(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjMap.cast(ctx.vm.peek(0).obj()).?;\n\n    ctx.vm.push(v.Value.fromInteger(@intCast(self.map.count())));\n\n    return 1;\n}"}
{"instruction":"Write a Zig struct similar to aarch64_sve_pcs from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const aarch64_sve_pcs = struct {}"}
{"instruction":"Write a Zig const similar to f13 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f13: u21 = 57376;"}
{"instruction":"Write a Zig function similar to OP_GET_MAP_PROPERTY from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_GET_MAP_PROPERTY(self: *Self, location: Ast.TokenIndex, property_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_GET_MAP_PROPERTY,\n        property_idx,\n    );\n}"}
{"instruction":"Write a Zig struct similar to Macho from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"const Macho = struct {\n        pub extern \"C\" fn Bun__getStandaloneModuleGraphMachoLength() ?*align(1) u32;\n\n        pub fn getData() ?[]const u8 {\n            if (Bun__getStandaloneModuleGraphMachoLength()) |length| {\n                if (length.* < 8) {\n                    return null;\n                }"}
{"instruction":"Write a Zig function similar to iterator from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig","output":"pub fn iterator(list: *const Node) Iterator {\n    return .{\n        .sentinel = list,\n        .node = list.head(),\n    }"}
{"instruction":"Write a Zig struct similar to WipSwitch from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"const WipSwitch = struct {\n    cases: Cases = .{}"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">comptime</span> {\n    assert(<span class=\"tok-null\">false</span>);\n}\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">assert</span>(ok: <span class=\"tok-type\">bool</span>) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (!ok) <span class=\"tok-kw\">unreachable</span>; <span class=\"tok-comment\">// assertion failure</span>\n}"}
{"instruction":"Write a Zig function similar to build from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub fn build(b: *Build) void {\n    const optimize = b.standardOptimizeOption(.{}"}
{"instruction":"Write a Zig function similar to readRawPixelAtOffset from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"fn readRawPixelAtOffset(self: *const Image, offset: usize) u32 {\n        return self.data[offset];\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Arrays §","input":"test_arrays.zig Shell See also: for Slices Multidimensional Arrays § Multidimensional arrays can be created by nesting arrays: test_multidimensional_arrays.zig Shell Sentinel-Terminated Arrays § The syntax [N:x]T describes an array which has a sentinel element of value x at the index corresponding to the length N . test_null_terminated_array.zig Shell See also: Sentinel-Terminated Pointers Sentinel-Terminated Slices","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"0-terminated sentinel array\"</span> {\n    <span class=\"tok-kw\">const</span> array = [_:<span class=\"tok-number\">0</span>]<span class=\"tok-type\">u8</span>{ <span class=\"tok-number\">1</span>, <span class=\"tok-number\">2</span>, <span class=\"tok-number\">3</span>, <span class=\"tok-number\">4</span> };\n\n    <span class=\"tok-kw\">try</span> expect(<span class=\"tok-builtin\">@TypeOf</span>(array) == [<span class=\"tok-number\">4</span>:<span class=\"tok-number\">0</span>]<span class=\"tok-type\">u8</span>);\n    <span class=\"tok-kw\">try</span> expect(array.len == <span class=\"tok-number\">4</span>);\n    <span class=\"tok-kw\">try</span> expect(array[<span class=\"tok-number\">4</span>] == <span class=\"tok-number\">0</span>);\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"extra 0s in 0-terminated sentinel array\"</span> {\n    <span class=\"tok-comment\">// The sentinel value may appear earlier, but does not influence the compile-time 'len'.</span>\n    <span class=\"tok-kw\">const</span> array = [_:<span class=\"tok-number\">0</span>]<span class=\"tok-type\">u8</span>{ <span class=\"tok-number\">1</span>, <span class=\"tok-number\">0</span>, <span class=\"tok-number\">0</span>, <span class=\"tok-number\">4</span> };\n\n    <span class=\"tok-kw\">try</span> expect(<span class=\"tok-builtin\">@TypeOf</span>(array) == [<span class=\"tok-number\">4</span>:<span class=\"tok-number\">0</span>]<span class=\"tok-type\">u8</span>);\n    <span class=\"tok-kw\">try</span> expect(array.len == <span class=\"tok-number\">4</span>);\n    <span class=\"tok-kw\">try</span> expect(array[<span class=\"tok-number\">4</span>] == <span class=\"tok-number\">0</span>);\n}"}
{"instruction":"Write a Zig function similar to Nullable from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"pub fn Nullable(comptime Allocator: type) type {\n    return if (comptime Allocator == std.mem.Allocator)\n        NullableAllocator\n    else if (comptime @hasDecl(Allocator, \"Nullable\"))\n        Allocator.Nullable\n    else\n        ?Allocator;\n}"}
{"instruction":"Write a Zig function similar to listIterGetChildren from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn listIterGetChildren(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) C.ValueSlice {\n    var iter: *cy.heap.ListIterInner = @ptrCast(@alignCast(obj));\n    return .{\n        .ptr = @ptrCast(&iter.list),\n        .len = 1,\n    }"}
{"instruction":"Write a Zig function similar to u64Rgb from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn u64Rgb(to: *const To) u64 {\n            const self = to.getSelf();\n            return @as(u64, toU16(self.r)) << 32 |\n                @as(u64, toU16(self.g)) << 16 |\n                toU16(self.b);\n        }"}
{"instruction":"Write a Zig function similar to array from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"pub fn array(self: *const SemanticVersion) std.BoundedArray(u8, max_string) {\n        var result: std.BoundedArray(u8, max_string) = undefined;\n        const roundtrip = std.fmt.bufPrint(&result.buffer, \"{}"}
{"instruction":"Write a Zig struct similar to InstDesc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub const InstDesc = struct {\n    debug_idx: u32 = cy.NullId,\n    extraIdx: u32 = cy.NullId,\n}"}
{"instruction":"Write a Zig function similar to free from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"pub fn free(self: *CacheMsg) void {\n    return g.allocator.free(self.mem());\n}"}
{"instruction":"Write a Zig function similar to singleStep from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn singleStep(self: *Self, bpp: BreakpointAndPID) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            try self.adapter.singleStep(bpp.pid);\n        }"}
{"instruction":"Write a Zig function similar to get_tag from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dnl.zig","output":"fn get_tag(name: [*]const u8, namelen: c_int) Tag {\n    return if (namelen > 0 and !is_empty())\n        Tag.from_int(c.dnl_get_tag(name, namelen, g.default_tag.int()))\n    else\n        g.default_tag;\n}"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">export</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>() <span class=\"tok-type\">void</span> {}"}
{"instruction":"Write a Zig const similar to NUM_HANDLERS from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"pub const NUM_HANDLERS: u16 = 256;"}
{"instruction":"Write a Zig const similar to createDeviceFlags from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/dx11-ontop.zig","output":"const createDeviceFlags: win32.D3D11_CREATE_DEVICE_FLAG = .{\n        .DEBUG = 0,\n    };"}
{"instruction":"Write a Zig const similar to angle from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig","output":"const angle: f32 = -@as(f32, @floatFromInt(@intFromEnum(dir)))*std.math.pi/2.0;"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn decode(decoder: *Decoder) Decoder.Error!@This() {\n            const reply_code = try decoder.read_int(u16);\n            const reply_text = try decoder.read_short_string();\n            const exchange = try decoder.read_short_string();\n            const routing_key = try decoder.read_short_string();\n\n            return .{\n                .reply_code = reply_code,\n                .reply_text = reply_text,\n                .exchange = exchange,\n                .routing_key = routing_key,\n            }"}
{"instruction":"Write a Zig function similar to buildMir from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"pub fn buildMir(b: *Build, target: Build.ResolvedTarget, optimize: std.builtin.OptimizeMode) !*Build.Step.Compile {\n    const lib = b.addLibrary(\n        .{\n            .name = \"mir\",\n            .linkage = .static,\n            .use_llvm = true,\n            .root_module = b.createModule(\n                .{\n                    .target = target,\n                    .optimize = optimize,\n                }"}
{"instruction":"Write a Zig const similar to decl from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"const decl: Declaration = if (while_node.error_token != null)\n            .{ .error_union_payload = .{ .identifier = name_token, .condition = while_node.ast.cond_expr } }\n        else\n            .{ .optional_payload = .{ .identifier = name_token, .condition = while_node.ast.cond_expr } };"}
{"instruction":"Write a Zig function similar to hasManySiblingsWithSameColor from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/antialiasing.zig","output":"fn hasManySiblingsWithSameColor(x: u32, y: u32, width: u32, height: u32, image: *const Image) bool {\n    if (x <= width - 1 and y <= height - 1) {\n        const x0 = @max(if (x > 0) x - 1 else 0, 0);\n        const y0 = @max(if (y > 0) y - 1 else 0, 0);\n        const x1 = @min(x + 1, width - 1);\n        const y1 = @min(y + 1, height - 1);\n\n        var zeroes: u32 = if (x == x0 or x == x1 or y == y0 or y == y1) 1 else 0;\n\n        const base_color = image.readRawPixel(x, y);\n\n        var adj_y = y0;\n        while (adj_y <= y1) : (adj_y += 1) {\n            var adj_x = x0;\n            while (adj_x <= x1) : (adj_x += 1) {\n                if (zeroes < 3 and (x != adj_x or y != adj_y)) {\n                    const adjacent_color = image.readRawPixel(adj_x, adj_y);\n                    if (base_color == adjacent_color) {\n                        zeroes += 1;\n                    }"}
{"instruction":"Write a Zig struct similar to AppConfig from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub const AppConfig = struct {\n    /// The display name of the application. This is shown to the users.\n    display_name: []const u8,\n\n    /// Application name, only lower case letters and underscores are allowed.\n    app_name: []const u8,\n\n    /// Java package name, usually the reverse top level domain + app name.\n    /// Only lower case letters, dots and underscores are allowed.\n    package_name: []const u8,\n\n    /// The android version which is embedded in the manifset.\n    /// The default is Android 9, it's more than 4 years old by now and should be widespread enough\n    /// to be a reasonable default.\n    target_version: AndroidVersion = .android9,\n\n    /// The resource directory that will contain the manifest and other app resources.\n    /// This should be a distinct directory per app.\n    resources: []const Resource = &[_]Resource{}"}
{"instruction":"Write a Zig function similar to _calc_decode_length from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/base64/base64_basic.zig","output":"fn _calc_decode_length(input: []const u8) !usize {\r\n    if (input.len < 4) {\r\n        return 3;\r\n    }"}
{"instruction":"Write a Zig function similar to AutoIndentingWriter from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"fn AutoIndentingWriter(comptime UnderlyingWriter: type) type {\n    return struct {\n        const Self = @This();\n        pub const Error = UnderlyingWriter.Error;\n        pub const Writer = std.io.Writer(*Self, Error, write);\n\n        underlying_writer: UnderlyingWriter,\n\n        /// Offset into the source at which formatting has been disabled with\n        /// a `zig fmt: off` comment.\n        ///\n        /// If non-null, the AutoIndentingStream will not write any bytes\n        /// to the underlying writer. It will however continue to track the\n        /// indentation level.\n        disabled_offset: ?usize = null,\n\n        indent_count: usize = 0,\n        indent_delta: usize,\n        current_line_empty: bool = true,\n        /// automatically popped when applied\n        indent_one_shot_count: usize = 0,\n        /// the most recently applied indent\n        applied_indent: usize = 0,\n        /// not used until the next line\n        indent_next_line: usize = 0,\n\n        pub fn writer(self: *Self) Writer {\n            return .{ .context = self }"}
{"instruction":"Write a Zig function similar to setFileHandlerWindow from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setFileHandlerWindow(self: webui, comptime handler: fn (window_handle: usize, filename: []const u8) ?[]const u8) void {\n    const tmp_struct = struct {\n        fn handle(window: usize, tmp_filename: [*:0]const u8, length: *c_int) callconv(.c) ?*const anyopaque {\n            const len = std.mem.len(tmp_filename);\n            const content = handler(window, tmp_filename[0..len]);\n            if (content) |val| {\n                length.* = @intCast(val.len);\n                return @ptrCast(val.ptr);\n            }"}
{"instruction":"Write a Zig function similar to get from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/params.zig","output":"pub fn get(self: *const Params, needle: []const u8) ?[]const u8 {\n        const names = self.names[0..self.len];\n        for (names, 0..) |name, i| {\n            if (mem.eql(u8, name, needle)) {\n                return self.values[i];\n            }"}
{"instruction":"Write a Zig function similar to parseIgnoreRegions from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/cli.zig","output":"fn parseIgnoreRegions(input: []const u8, list: *std.array_list.Managed(diff.IgnoreRegion)) !void {\n    var regions_iter = std.mem.splitSequence(u8, input, \",\");\n    while (regions_iter.next()) |region_str| {\n        // Parse format: x1:y1-x2:y2\n        var coords_iter = std.mem.splitSequence(u8, region_str, \"-\");\n        const start_coords = coords_iter.next() orelse return error.InvalidFormat;\n        const end_coords = coords_iter.next() orelse return error.InvalidFormat;\n\n        // Parse start coordinates\n        var start_iter = std.mem.splitSequence(u8, start_coords, \":\");\n        const x1_str = start_iter.next() orelse return error.InvalidFormat;\n        const y1_str = start_iter.next() orelse return error.InvalidFormat;\n\n        // Parse end coordinates\n        var end_iter = std.mem.splitSequence(u8, end_coords, \":\");\n        const x2_str = end_iter.next() orelse return error.InvalidFormat;\n        const y2_str = end_iter.next() orelse return error.InvalidFormat;\n\n        const x1 = try std.fmt.parseInt(u32, x1_str, 10);\n        const y1 = try std.fmt.parseInt(u32, y1_str, 10);\n        const x2 = try std.fmt.parseInt(u32, x2_str, 10);\n        const y2 = try std.fmt.parseInt(u32, y2_str, 10);\n\n        try list.append(.{ .x1 = x1, .y1 = y1, .x2 = x2, .y2 = y2 }"}
{"instruction":"Write a Zig const similar to expected_ps from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const expected_ps: u32 = 727;"}
{"instruction":"Write a Zig function similar to alloc from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"fn alloc(allocator: Allocator, new_bit_index: u8) !*IndexHeader {\n        const len = @as(usize, 1) << @intCast(new_bit_index);\n        const index_size = Map.capacityIndexSize(new_bit_index);\n        const nbytes = @sizeOf(IndexHeader) + index_size * len;\n        const bytes = try allocator.alignedAlloc(u8, @alignOf(IndexHeader), nbytes);\n        @memset(bytes[@sizeOf(IndexHeader)..], 0xff);\n        const result: *IndexHeader = @ptrCast(bytes.ptr);\n        result.* = .{\n            .bit_index = new_bit_index,\n        }"}
{"instruction":"Write a Zig struct similar to TagIterator from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub const TagIterator = struct {\n        end: u32,\n        name_span: Span,\n        tokenizer: Tokenizer,\n\n        pub fn next(ti: *TagIterator, src: []const u8) ?Tokenizer.Attr {\n            while (ti.tokenizer.next(src[0..ti.end])) |maybe_attr| switch (maybe_attr) {\n                .attr => |attr| return attr,\n                else => {}"}
{"instruction":"Write a Zig const similar to count from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"const count: ?usize = if (ctx.vm.peek(0).integerOrNull()) |c|\n        @intCast(@max(0, c))\n    else\n        null;"}
{"instruction":"Write a Zig function similar to idx from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/common.zig","output":"pub fn idx(self: Self) *volatile u16 {\n        const offset = @sizeOf(u16);\n        return @as(*volatile u16, @ptrCast(@alignCast(&self.data[offset])));\n    }"}
{"instruction":"Write a Zig function similar to packet_enqueue from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"fn packet_enqueue(self: *Context, packet: *Packet) void {\n            assert(self.batch_size_limit != null);\n            packet.assert_phase(.submitted);\n\n            if (self.eviction_reason != null) {\n                return self.packet_cancel(packet);\n            }"}
{"instruction":"Write a Zig function similar to rotateZ from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn rotateZ(self: Block, angle: Degrees) Block {\n\t\treturn .{.typ = self.typ, .data = self.mode().rotateZ(self.data, angle)}"}
{"instruction":"Write a Zig struct similar to GetOptions from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dragging.zig","output":"pub const GetOptions = struct {\n    /// If a name is given, `get` returns null immediately if it doesn't match\n    /// the name given to `preStart` or `start`.  This is useful for widgets\n    /// that need multiple different kinds of drags.\n    name: ?[]const u8 = null,\n\n    /// Used to scale the `preStart` dragging to natural pixels on the screen.\n    /// This ensures that the amount of movement needed to start the drag is\n    /// consistent at different screen DPIs or OS scalings.\n    ///\n    /// Should be the value of `Window.natural_scale`\n    // TODO: This isn't the nicest api and there should probably be a nicer and\n    //       more consistent way to access the `Window` instance for this\n    window_natural_scale: f32,\n}"}
{"instruction":"Write a Zig function similar to expectStr from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn expectStr(self: *Parser, text: []const u8) !void {\n        if (self.source.len < self.offset + text.len) {\n            return error.UnexpectedEof;\n        }"}
{"instruction":"Write a Zig function similar to renderWrapperParam from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderWrapperParam(self: *Self, param: reg.Command.Param) !void {\n        try self.writeIdentifierWithCase(.snake, param.name);\n        try self.writer.writeAll(\": \");\n        try self.renderTypeInfo(param.param_type);\n        try self.writer.writeAll(\", \");\n    }"}
{"instruction":"Write a Zig struct similar to Cstr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub const Cstr = struct {\n    type: CstrType,\n\n    data: union {\n        simple: struct {\n            retain: bool,\n        }"}
{"instruction":"Write a Zig function similar to check from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn check(_: Frame) !void {\n        // const stack = coro.stack.ptr;\n        // const sp = coro.impl.stack_pointer;\n        // const magic_number_ptr: *usize = @ptrCast(stack);\n        // if (magic_number_ptr.* != magic_number or //\n        //     @intFromPtr(sp) < @intFromPtr(stack))\n        // {\n        //     return Error.StackOverflow;\n        // }"}
{"instruction":"Write a Zig function similar to receive from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/net.zig","output":"pub fn receive(self: *Self) void {\n        const isr = self.virtio.transport.getIsr();\n        if (isr.isQueue()) {\n            lwip.acquire().sys_check_timeouts();\n            lwip.release();\n\n            const rq = self.receiveq();\n            while (rq.last_used_idx != rq.used.idx().*) {\n                // Each packet is contained in a single descriptor,\n                // because VIRTIO_NET_F_MRG_RXBUF is not negotiated.\n                const used_elem = rq.popUsedOne() orelse continue;\n                const buf = @as([*]u8, @ptrFromInt(rq.desc[used_elem.id].addr))[0..used_elem.len];\n                const packet_buf = buf[@sizeOf(Header)..];\n\n                rx_recv(@as(*u8, @ptrCast(packet_buf.ptr)), @as(u16, @intCast(packet_buf.len)));\n\n                rq.enqueue(([1]common.VirtqDescBuffer{common.VirtqDescBuffer{\n                    .addr = rq.desc[used_elem.id].addr,\n                    .len = PACKET_MAX_LEN,\n                    .type = common.VirtqDescBufferType.WritableFromDevice,\n                }"}
{"instruction":"Write a Zig function similar to deinit from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/stack.zig","output":"pub fn deinit(_: *StackAllocator) void {\n        // empty\n    }"}
{"instruction":"Write a Zig const similar to kappa from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const kappa: f32 = 24389.0 / 27.0;"}
{"instruction":"Write a Zig function similar to manipulateDom from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/js_execution/main.zig","output":"fn manipulateDom(e: *webui.Event, element_id: [:0]const u8, new_text: [:0]const u8) void {\n    const win = e.getWindow();\n    \n    var js_code: [512]u8 = undefined;\n    const script = std.fmt.bufPrint(js_code[0..], \n        \\\\const element = document.getElementById('{s}"}
{"instruction":"Write a Zig function similar to toValue from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn toValue(self: Self.Slice, node: Node.Index, gc: *GC) Error!Value {\n        const value = &self.nodes.items(.value)[node];\n\n        if (value.* == null and try self.isConstant(gc.allocator, node)) {\n            value.* = switch (self.nodes.items(.tag)[node]) {\n                .AnonymousObjectType,\n                .FiberType,\n                .FunctionType,\n                .GenericResolveType,\n                .GenericType,\n                .ListType,\n                .MapType,\n                .SimpleType,\n                .UserType,\n                => self.nodes.items(.type_def)[node].?.toValue(),\n                .StringLiteral => self.nodes.items(.components)[node].StringLiteral.literal.toValue(),\n                .TypeOfExpression => (try (try self.toValue(\n                    self.nodes.items(.components)[node].TypeOfExpression,\n                    gc,\n                )).typeOf(gc)).toValue(),\n                .TypeExpression => self.nodes.items(.type_def)[self.nodes.items(.components)[node].TypeExpression].?.toValue(),\n                .Pattern => self.nodes.items(.components)[node].Pattern.toValue(),\n                .Void => Value.Void,\n                .Null => Value.Null,\n                .Double => Value.fromDouble(self.nodes.items(.components)[node].Double),\n                .Integer => Value.fromInteger(self.nodes.items(.components)[node].Integer),\n                .Boolean => Value.fromBoolean(self.nodes.items(.components)[node].Boolean),\n                .As => try self.toValue(self.nodes.items(.components)[node].As.left, gc),\n                .Is => is: {\n                    const components = self.nodes.items(.components)[node].Is;\n                    break :is Value.fromBoolean(\n                        (try self.toValue(components.constant, gc))\n                            .is(try self.toValue(components.left, gc)),\n                    );\n                }"}
{"instruction":"Write a Zig function similar to getContextsMap from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/event_handling/main.zig","output":"fn getContextsMap() *std.AutoHashMap(usize, *UserContext) {\n    ensureContextsInitialized();\n    return &global_user_contexts.?;\n}"}
{"instruction":"Write a Zig struct similar to DebugHeap from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"const DebugHeap = struct {\n    inner: *mimalloc.Heap,\n    thread_lock: bun.safety.ThreadLock,\n\n    pub const deinit = void;\n}"}
{"instruction":"Write a Zig const similar to red from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub const red: PMA = .fromColor(.red);"}
{"instruction":"Write a Zig const similar to n from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const n: usize = @intCast(vm.getInt(1));"}
{"instruction":"Write a Zig function similar to getClientToServerData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn getClientToServerData(pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void {\n\t\t\tStorageClient.mutex.lock();\n\t\t\tdefer StorageClient.mutex.unlock();\n\n\t\t\tconst data = StorageClient.get(pos, chunk) orelse return;\n\t\t\twriter.writeSlice(data.text);\n\t\t}"}
{"instruction":"Write a Zig function similar to render from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/progress.zig","output":"pub fn render(self: *Self) !void {\n        const now = try std.time.Instant.now();\n        if (now.since(self.last_rendered) < 50 * std.time.ns_per_ms) {\n            return;\n        }"}
{"instruction":"Write a Zig function similar to retainInc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig","output":"fn retainInc(self: *cy.VM, val: cy.Value, inc: u32) void {\n    if (cy.Trace) {\n        self.c.trace.numRetainAttempts += inc;\n    }"}
{"instruction":"Write a Zig const similar to cur_samples from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"const cur_samples: u64 = sample_index + 1;"}
{"instruction":"Write a Zig const similar to f3 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f3: u21 = 57366;"}
{"instruction":"Write a Zig function similar to buildAndLink from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/tcc/lib.zig","output":"pub fn buildAndLink(b: *std.Build, mod: *std.Build.Module, opts: BuildOptions) void {\n    const lib = b.addStaticLibrary(.{\n        .name = \"tcc\",\n        .target = opts.target,\n        .optimize = opts.optimize,\n    }"}
{"instruction":"Write a Zig function similar to enumDeclaration from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn enumDeclaration(self: *Self) Error!Ast.Node.Index {\n    const node_slot = try self.ast.nodes.addOne(self.gc.allocator);\n    const start_location = self.current_token.? - 1;\n\n    if (self.current.?.scope_depth > 0) {\n        const location = self.ast.tokens.get(self.current_token.? - 1);\n        self.reporter.reportErrorAt(\n            .syntax,\n            location,\n            location,\n            \"Enum must be defined at top-level.\",\n        );\n    }"}
{"instruction":"Write a Zig function similar to starts from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/selector.zig","output":"fn starts(haystack: []const u8, needle: []const u8, ci: bool) bool {\n        if (ci) return std.ascii.startsWithIgnoreCase(haystack, needle);\n        return std.mem.startsWith(u8, haystack, needle);\n    }"}
{"instruction":"Write a Zig struct similar to Layer from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/simple_layer/main.zig","output":"const Layer = struct {\n    bias: ?zml.Tensor = null,\n    weight: zml.Tensor,\n\n    pub fn forward(self: Layer, x: zml.Tensor) zml.Tensor {\n        var y = self.weight.mul(x);\n        if (self.bias) |bias| {\n            y = y.add(bias);\n        }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = l;\n                _ = c;\n                _ = r.send catch unreachable;\n                _ = ud;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to send_request from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"pub fn send_request(\n    self: *const Self,\n    allocator: std.mem.Allocator,\n    method: []const u8,\n    m: anytype,\n    ctx: anytype,\n) (OutOfMemoryError || SpawnError || std.Io.Writer.Error)!void {\n    var cb: std.Io.Writer.Allocating = .init(self.allocator);\n    defer cb.deinit();\n    try cbor.writeValue(&cb.writer, m);\n    return RequestContext(@TypeOf(ctx)).send(allocator, self.pid.ref(), ctx, tp.message.fmt(.{ \"REQ\", method, cb.written() }"}
{"instruction":"Write a Zig function similar to reset from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"pub fn reset(self: *State) void {\n        // not our job to clear the arena!\n        self.pos = 0;\n        self.len = 0;\n        self.url = null;\n        self.method = null;\n        self.unread_body = 0;\n        self.method_string = null;\n        self.protocol = null;\n\n        self.body_pos = 0;\n        self.body_len = 0;\n        if (self.body) |buf| {\n            self.buffer_pool.release(buf);\n            self.body = null;\n        }"}
{"instruction":"Write a Zig struct similar to TestHandlerHandle from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"const TestHandlerHandle = struct {\n    pub fn handle(_: TestHandlerHandle, req: *Request, res: *Response) void {\n        const query = req.query() catch unreachable;\n        const writer = res.writer();\n        writer.print(\"hello {s}"}
{"instruction":"Write a Zig function similar to init from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/gen.zig","output":"pub fn init(config: GeneratorConfig) Generator {\n        return Generator{ .config = config }"}
{"instruction":"Write a Zig function similar to buildAndLink from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/lib.zig","output":"pub fn buildAndLink(b: *std.Build, mod: *std.Build.Module, opts: BuildOptions) void {\n    const lib = b.addStaticLibrary(.{\n        .name = \"mimalloc\",\n        .target = opts.target,\n        .optimize = opts.optimize,\n    }"}
{"instruction":"Write a Zig function similar to getReg from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"pub fn getReg(self: *Self, reg: Register, inst: ?Inst) AllocateRegistersError!void {\n            return self.getRegIndex(indexOfRegIntoTracked(reg) orelse return, inst);\n        }"}
{"instruction":"Write a Zig function similar to intFitsInType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn intFitsInType(\n    ip: *InternPool,\n    val: Index,\n    ty: Index,\n    target: std.Target,\n) Allocator.Error!bool {\n    if (ty == .comptime_int_type) return true;\n    const info = ip.intInfo(ty, target);\n\n    switch (ip.indexToKey(val)) {\n        .undefined_value, .unknown_value => return true,\n        inline .int_i64_value, .int_u64_value => |value| {\n            var buffer: [std.math.big.int.calcTwosCompLimbCount(64)]std.math.big.Limb = undefined;\n            var big_int: std.math.big.int.Mutable = .init(&buffer, value.int);\n            return big_int.toConst().fitsInTwosComp(info.signedness, info.bits);\n        }"}
{"instruction":"Write a Zig function similar to JniReturnType from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/jni.zig","output":"fn JniReturnType(comptime function: @TypeOf(.literal)) type {\n        @setEvalBranchQuota(10_000);\n        return @typeInfo(@typeInfo(std.meta.fieldInfo(android.JNINativeInterface, function).type).Pointer.child).Fn.return_type.?;\n    }"}
{"instruction":"Write a Zig function similar to findNodeTagsIdx from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn findNodeTagsIdx(ast: *const Ast, offset: u32) u32 {\n    if (ast.nodes.len < 2) return 0;\n    var cur_idx: u32 = 1;\n    while (cur_idx != 0) {\n        const n = ast.nodes[cur_idx];\n        if (!n.kind.isElement()) cur_idx = 0;\n\n        if (n.open.start <= offset and n.open.end > offset) {\n            break;\n        }"}
{"instruction":"Write a Zig function similar to newSpanNode from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn newSpanNode(self: *Ast, comptime node_t: NodeType, src_pos: usize, src_end: usize) !*Span {\n        const span = try self.newEmptyNode(node_t);\n        span.* = .{\n            .pos = @intCast(src_pos),\n            .len = @intCast(src_end-src_pos),\n            .srcGen = false,\n        }"}
{"instruction":"Write a Zig function similar to testHandler2 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn testHandler2(ctx: *const arch.CpuState, arg1: usize, arg2: usize, arg3: usize, arg4: usize, arg5: usize) anyerror!usize {\n    // Suppress unused variable warnings\n    _ = ctx;\n    _ = arg3;\n    _ = arg4;\n    _ = arg5;\n    test_int += arg1 + arg2;\n    return 2;\n}"}
{"instruction":"Write a Zig const similar to header_len from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/wav.zig","output":"const header_len: u32 = 44;"}
{"instruction":"Write a Zig function similar to addLevelNode from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/OctTreeQuantizer.zig","output":"pub fn addLevelNode(self: *OctTreeQuantizer, level: i32, node: *Node) void {\n    node.level_next = self.levels[@intCast(level)];\n    self.levels[@intCast(level)] = node;\n}"}
{"instruction":"Write a Zig const similar to example_opts from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: build.zig","output":"const example_opts: ExampleOptions = .{\n                .dvui_mod = dvui_raylib,\n                .backend_name = \"raylib-backend\",\n                .backend_mod = raylib_mod,\n            };"}
{"instruction":"Write a Zig function similar to deinit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"pub fn deinit(self: *Self, allocator: std.mem.Allocator) void {\n    self.compiled_nodes.deinit(allocator);\n    self.blacklisted_nodes.deinit(allocator);\n    // std.debug.assert(self.functions_queue.count() == 0);\n    self.functions_queue.deinit(allocator);\n    // std.debug.assert(self.objclosures_queue.count() == 0);\n    self.objclosures_queue.deinit(allocator);\n    self.modules.deinit(allocator);\n    self.required_ext_api.deinit(allocator);\n    self.compiled_functions_bodies.deinit(allocator);\n    m.MIR_finish(self.ctx);\n}"}
{"instruction":"Write a Zig function similar to deinit from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn deinit(self: *Analyser) void {\n    self.resolved_callsites.deinit(self.gpa);\n    self.resolved_nodes.deinit(self.gpa);\n}"}
{"instruction":"Write a Zig function similar to get_qtype from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn get_qtype(msg: []const u8, qnamelen: c_int) u16 {\n    return c.dns_get_qtype(msg.ptr, qnamelen);\n}"}
{"instruction":"Write a Zig const similar to num_groups_copy from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const num_groups_copy: usize = cg_index - index;"}
{"instruction":"Write a Zig function similar to deinit from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn deinit(self: *Proc, alloc: std.mem.Allocator) void {\n        _ = self;\n        _ = alloc;\n    }"}
{"instruction":"Write a Zig function similar to printConfig from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"fn printConfig(config: *android.AConfiguration) void {\n        var lang: [2]u8 = undefined;\n        var country: [2]u8 = undefined;\n\n        android.AConfiguration_getLanguage(config, &lang);\n        android.AConfiguration_getCountry(config, &country);\n\n        app_log.debug(\n            \\\\App Configuration:\n            \\\\  MCC:         {}"}
{"instruction":"Write a Zig function similar to saving from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn saving(editor: *Editor) bool {\n    for (editor.open_files.items) |file| {\n        if (file.saving) return true;\n    }"}
{"instruction":"Write a Zig const similar to PATHEXT from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const PATHEXT: [:0]const u16 = process.getenvW(unicode.utf8ToUtf16LeStringLiteral(\"PATHEXT\")) orelse &[_:0]u16{};"}
{"instruction":"Write a Zig const similar to op2 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"const op2: Instruction.Operand = switch (act_enc.data.op_en) {\n                    .mi => .{ .imm = try dis.parseImm(act_enc.data.ops[1]) },\n                    .m1 => .{ .imm = Immediate.u(1) },\n                    .mc => .{ .reg = .cl },\n                    .m => .none,\n                    else => unreachable,\n                };"}
{"instruction":"Write a Zig function similar to runtimeGreen from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn runtimeGreen(allocator: std.mem.Allocator, message: []const u8) ![]const u8 {\n    return try runtimeWrap(allocator, codes.green, message);\n}"}
{"instruction":"Write a Zig function similar to putAssumeCapacityNoClobber from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"pub fn putAssumeCapacityNoClobber(self: *Map, key: *const Value, value: *Value) void {\n    const result = self.getOrPutAssumeCapacity(key);\n    assert(!result.found_existing);\n    result.value_ptr.* = value;\n}"}
{"instruction":"Write a Zig function similar to close from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/frameless/main.zig","output":"fn close(e: *webui.Event) void {\n    const win = e.getWindow();\n    win.close();\n}"}
{"instruction":"Write a Zig const similar to script from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"const script: *PendingScript = @ptrCast(@alignCast(transfer.ctx));"}
{"instruction":"Write a Zig function similar to add_tar_extract from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn add_tar_extract(tarball_path: []const u8, to_dir: []const u8) *Step {\n    const cmd = fmt(\"mkdir -p '{s}"}
{"instruction":"Write a Zig function similar to stop from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub fn stop(self: *Self) !void {\n                        try self.state.stop();\n                    }"}
{"instruction":"Write a Zig function similar to yellow from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn yellow(comptime message: []const u8) []const u8 {\n    return wrap(codes.yellow, message);\n}"}
{"instruction":"Write a Zig struct similar to Data from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"const Data = struct {\n                result: ResultT = undefined,\n                frame: ?Frame = null,\n\n                fn callback(\n                    userdata: ?*@This(),\n                    l: *xev.Loop,\n                    c: *xev.Completion,\n                    s: StreamT,\n                    b: xev.ReadBuffer,\n                    result: ResultT,\n                ) xev.CallbackAction {\n                    _ = l;\n                    _ = c;\n                    _ = s;\n                    _ = b;\n                    const data = userdata.?;\n                    data.result = result;\n                    if (data.frame != null) libcoro.xresume(data.frame.?);\n                    return .disarm;\n                }"}
{"instruction":"Write a Zig function similar to genCoinitCall from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genCoinitCall(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const call = c.ir.getExprData(idx, .coinitCall).call;\n    const callCode: ir.ExprCode = @enumFromInt(c.ir.buf.items[call]);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Fiber, true, node);\n\n    const tempStart = numSlots(c);\n    var numArgs: u32 = 0;\n    var args: []align(1) const u32 = undefined;\n    if (callCode == .call_sym) {\n        const data = c.ir.getExprData(call, .call_sym);\n        numArgs = data.numArgs;\n\n        args = c.ir.getArray(data.args, u32, numArgs);\n    }"}
{"instruction":"Write a Zig function similar to mergeEnumFields from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/generator.zig","output":"fn mergeEnumFields(self: *Generator) !void {\n        var merger = EnumFieldMerger.init(self.arena.allocator(), &self.registry);\n        try merger.merge();\n    }"}
{"instruction":"Write a Zig function similar to nodeValue from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn nodeValue(self: *Self, node: Ast.Node.Index) Error!?Value {\n    const value = &self.ast.nodes.items(.value)[node];\n\n    if (value.* == null) {\n        if (self.ast.isConstant(node)) {\n            value.* = try self.ast.toValue(node, self.gc);\n        }"}
{"instruction":"Write a Zig struct similar to Report from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub const Report = struct {\n    message: []const u8,\n    error_type: Error,\n    items: []const ReportItem,\n    notes: []const Note = &[_]Note{}"}
{"instruction":"Write a Zig function similar to hash from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn hash(ctx: GenericContext, data: Data) u64 {\n                var hasher: std.hash.Wyhash = .init(0);\n                data.hashWithHasher(&hasher);\n                for (ctx.bound_params.keys(), ctx.bound_params.values()) |token_handle, ty| {\n                    token_handle.hashWithHasher(&hasher);\n                    ty.hashWithHasher(&hasher);\n                }"}
{"instruction":"Write a Zig function similar to className from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"fn className(i: usize) []const u8 {\n            return class_names[i];\n        }"}
{"instruction":"Write a Zig function similar to write from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"pub fn write(self: *Self, bytes: []const u8) Error!usize {\n            if (bytes.len == 0)\n                return @as(usize, 0);\n\n            try self.applyIndent();\n            return self.writeNoIndent(bytes);\n        }"}
{"instruction":"Write a Zig function similar to getWatchPaths from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/Assets.zig","output":"pub fn getWatchPaths(assets: *Assets, allocator: std.mem.Allocator) ![]const []const u8 {\n    var out_paths = std.ArrayList([]const u8).init(allocator);\n\n    var paths = assets.paths.slice();\n    while (paths.next()) |id| {\n        const path = paths.objs.get(id, .value);\n        for (out_paths.items) |out_path| {\n            if (std.mem.eql(u8, path, out_path)) {\n                continue;\n            }"}
{"instruction":"Write a Zig function similar to clear from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn clear(self: *Self) void {\n        self.read_fds.shrinkRetainingCapacity(0);\n        self.write_fds.shrinkRetainingCapacity(0);\n\n        self.read_fd_set.clear();\n        self.write_fd_set.clear();\n        self.except_fd_set.clear();\n    }"}
{"instruction":"Write a Zig function similar to double from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/functions.zig","output":"pub fn double(args: struct { x: i64 }) i64 {\n    return args.x * 2;\n}"}
{"instruction":"Write a Zig function similar to main from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"pub fn main() !void {\n    const allocator = std.heap.page_allocator;\n\n    try network.init();\n    defer network.deinit();\n\n    var server_list = ServerList.init(allocator);\n    defer server_list.deinit();\n\n    // background task to collect servers via UDP broadcasts\n    var server_thread = try std.Thread.spawn(.{ .stack_size = 1024 }"}
{"instruction":"Write a Zig struct similar to BlockDrop from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub const BlockDrop = struct {\n\titems: []const items.ItemStack,\n\tchance: f32,\n}"}
{"instruction":"Write a Zig function similar to main from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/custom_spa_server_on_free_port/main.zig","output":"pub fn main() !void {\n    // Create new window\n    var nwin = webui.newWindow();\n\n    // Bind all events\n    _ = try nwin.bind(\"\", events);\n    // Bind a JS call to a Zig fn\n    _ = try nwin.bind(\"gotoPage\", goto_page);\n\n    // The `webui.js` script will be available at:\n    //\n    // http://localhost:[WEBUI_PORT]/webui.js\n    //\n    // (see [WEBUI_PORT] in: index.html, free_port_web_server.py)\n    //\n    // So, get and set a free port for WebUI to use:\n\n    const webui_port: u64 = webui.getFreePort();\n    std.debug.print(\"Free Port for webui.js: {d}"}
{"instruction":"Write a Zig function similar to synchronize from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn synchronize(self: *Self) !void {\n    self.reporter.panic_mode = false;\n\n    while (self.ast.tokens.items(.tag)[self.current_token.?] != .Eof) : (try self.advance()) {\n        if (self.ast.tokens.items(.tag)[self.current_token.? - 1] == .Semicolon) {\n            return;\n        }"}
{"instruction":"Write a Zig const similar to divisor from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/serial.zig","output":"const divisor: u16 = try baudDivisor(baud);"}
{"instruction":"Write a Zig function similar to runestr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn runestr(vm: *cy.VM) anyerror!Value {\n    const num = vm.getInt(0);\n    if (num < 0 or num >= 2 << 21) {\n        return rt.prepThrowError(vm, .InvalidRune);\n    }"}
{"instruction":"Write a Zig const similar to new_enable_build_on_save from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const new_enable_build_on_save: bool = result.did_change.enable_build_on_save;"}
{"instruction":"Write Zig 0.13.0 code for: Optionals §","input":"One area that Zig provides safety without compromising efficiency or readability is with the optional type. The question mark symbolizes the optional type. You can convert a type to an optional type by putting a question mark in front of it, like this: optional_integer.zig Now the variable optional_int could be an i32 , or null . Instead of integers, let's talk about pointers. Null references are the source of many runtime exceptions, and even stand accused of being the worst mistake of computer","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"optional pointers\"</span> {\n    <span class=\"tok-comment\">// Pointers cannot be null. If you want a null pointer, use the optional</span>\n    <span class=\"tok-comment\">// prefix `?` to make the pointer type optional.</span>\n    <span class=\"tok-kw\">var</span> ptr: ?*<span class=\"tok-type\">i32</span> = <span class=\"tok-null\">null</span>;\n\n    <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">i32</span> = <span class=\"tok-number\">1</span>;\n    ptr = &x;\n\n    <span class=\"tok-kw\">try</span> expect(ptr.?.* == <span class=\"tok-number\">1</span>);\n\n    <span class=\"tok-comment\">// Optional pointers are the same size as normal pointers, because pointer</span>\n    <span class=\"tok-comment\">// value 0 is used as the null value.</span>\n    <span class=\"tok-kw\">try</span> expect(<span class=\"tok-builtin\">@sizeOf</span>(?*<span class=\"tok-type\">i32</span>) == <span class=\"tok-builtin\">@sizeOf</span>(*<span class=\"tok-type\">i32</span>));\n}"}
{"instruction":"Write a Zig function similar to cookies from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"pub fn cookies(self: *const Request) Cookie {\n        return .{\n            .header = self.header(\"cookie\") orelse \"\",\n        }"}
{"instruction":"Write a Zig function similar to get_length from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"pub fn get_length(self: *const CSSStyleDeclaration) usize {\n    return self.properties.count();\n}"}
{"instruction":"Write a Zig struct similar to BigIntInternal from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const BigIntInternal = struct {\n        ty: Index,\n        limbs: LimbSlice,\n    }"}
{"instruction":"Write a Zig function similar to notFound from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/02_handler.zig","output":"pub fn notFound(_: *Handler, _: *httpz.Request, res: *httpz.Response) !void {\n        res.status = 404;\n        res.body = \"NOPE!\";\n    }"}
{"instruction":"Write a Zig const similar to B_COEFF from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const B_COEFF: u32 = 7504;"}
{"instruction":"Write a Zig function similar to bog_Vm_addStdNoIo from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/lib.zig","output":"fn bog_Vm_addStdNoIo(vm: *bog.Vm) callconv(.C) Error {\n    vm.addStdNoIo() catch |e| switch (e) {\n        error.OutOfMemory => return .OutOfMemory,\n    }"}
{"instruction":"Write a Zig const similar to COMMAND_REGISTER from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const COMMAND_REGISTER: u16 = 0x43;"}
{"instruction":"Write a Zig function similar to is from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"pub fn is(m: u32, comptime flag: std.meta.DeclEnum(Mask)) bool {\n        const f = @field(Mask, @tagName(flag));\n        return (m & f) != 0;\n    }"}
{"instruction":"Write a Zig const similar to err_pipe from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const err_pipe: [2]posix.fd_t = try posix.pipe2(.{ .CLOEXEC = true });"}
{"instruction":"Write a Zig struct similar to EndPoint from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub const EndPoint = struct {\n    const Self = @This();\n\n    address: Address,\n    port: u16, // Stored as native, will convert to bigEndian when moving to sockaddr\n\n    pub fn parse(string: []const u8) !EndPoint {\n        const colon_index = std.mem.lastIndexOfScalar(u8, string, ':') orelse return error.InvalidFormat;\n\n        const address = try Address.parse(string[0..colon_index]);\n\n        const port = try std.fmt.parseInt(u16, string[colon_index + 1 ..], 10);\n\n        return EndPoint{\n            .address = address,\n            .port = port,\n        }"}
{"instruction":"Write a Zig function similar to dispatchTokens from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn dispatchTokens(\n    gating: zml.Tensor,\n    opts: struct {\n        tokens_per_expert: u32,\n        experts_per_token: u32,\n        normalization: MoeOpts.Normalization,\n    },\n) [2]zml.Tensor {\n    const num_experts = gating.dim(.expert);\n\n    const token_pref = gating.argsort(.expert, .{ .descending = true }"}
{"instruction":"Write a Zig function similar to spawnWindows from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn spawnWindows(self: *ChildProcess) SpawnError!void {\n    var saAttr = windows.SECURITY_ATTRIBUTES{\n        .nLength = @sizeOf(windows.SECURITY_ATTRIBUTES),\n        .bInheritHandle = windows.TRUE,\n        .lpSecurityDescriptor = null,\n    }"}
{"instruction":"Write a Zig function similar to allocAndMapBlock from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/mem.zig","output":"pub fn allocAndMapBlock(v_addr: usize) usize {\n    const block = allocBlock();\n    fillBlockZero(block);\n    PageMapEntry.mapBlock(v_addr, block);\n    return block;\n}"}
{"instruction":"Write a Zig struct similar to PerfMeasurement from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"const PerfMeasurement = struct {\n    name: []const u8,\n    config: PERF.COUNT.HW,\n}"}
{"instruction":"Write a Zig function similar to buffer_to_ref from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Manager.zig","output":"pub fn buffer_to_ref(_: *Self, buffer: *Buffer) usize {\n    return @intFromPtr(buffer);\n}"}
{"instruction":"Write a Zig function similar to apply from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputConfig.zig","output":"pub fn apply(config: *const InputConfig, device: *InputDevice) void {\n    const libinput_device: *c.libinput_device = @ptrCast(device.wlr_device.getLibinputDevice() orelse return);\n    log.debug(\"applying input configuration '{s}"}
{"instruction":"Write a Zig const similar to lg_map_width from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: examples/view.zig","output":"const lg_map_width: u16 = mapWidth: {\n    @setEvalBranchQuota(100_000);"}
{"instruction":"Write a Zig const similar to task from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"const task: *Self = @alignCast(@fieldParentPtr(\"_task\", task_));"}
{"instruction":"Write a Zig function similar to storedSizeFits from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BlockWriter.zig","output":"fn storedSizeFits(in: ?[]const u8) StoredSize {\n    if (in == null) {\n        return .{ .size = 0, .storable = false }"}
{"instruction":"Write a Zig struct similar to sentinel from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const sentinel = struct {\n        position: ?u32 = null,\n    }"}
{"instruction":"Write a Zig function similar to String_getInt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn String_getInt(vm: *cy.VM) anyerror!Value {\n    const bytes = vm.getString(0);\n    const idx = vm.getInt(1);\n    const sym = try std.meta.intToEnum(Symbol, vm.getSymbol(2));\n    const endian: std.builtin.Endian = switch (sym) {\n        .little => .little,\n        .big => .big,\n        else => return error.InvalidArgument,\n    }"}
{"instruction":"Write a Zig function similar to parseListType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseListType(self: *Self, generic_types: ?std.AutoArrayHashMapUnmanaged(*obj.ObjString, *obj.ObjTypeDef), mutable: bool) Error!Ast.Node.Index {\n    const start_location = if (mutable) self.current_token.? - 2 else self.current_token.? - 1;\n    const item_type = try self.parseTypeDef(generic_types, true);\n\n    try self.consume(.RightBracket, \"Expected `]` after list type.\");\n\n    const list_type_def = try self.gc.type_registry.getTypeDef(\n        .{\n            .optional = try self.match(.Question),\n            .def_type = .List,\n            .resolved_type = .{\n                .List = obj.ObjList.ListDef.init(\n                    self.ast.nodes.items(.type_def)[item_type].?,\n                    mutable,\n                ),\n            }"}
{"instruction":"Write a Zig function similar to select from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn select(nfds: usize, read_fds: ?[*]u8, write_fds: ?[*]u8, except_fds: ?[*]u8, timeout: ?*const timeval) SelectError!usize {\n        _ = nfds;\n        while (true) {\n            // Windows ignores nfds so we just pass zero here.\n            const result = funcs.select(0, read_fds, write_fds, except_fds, timeout);\n            if (result == ws2_32.SOCKET_ERROR) {\n                return switch (ws2_32.WSAGetLastError()) {\n                    .WSAEFAULT => unreachable,\n                    .WSAEINVAL => unreachable,\n                    .WSAEINTR => continue,\n                    .WSAENOTSOCK => error.FileDescriptorNotASocket,\n                    else => |err| return unexpectedWSAError(err),\n                }"}
{"instruction":"Write a Zig const similar to ah from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const ah: c_ulonglong = 34;"}
{"instruction":"Write a Zig function similar to reduce from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn reduce(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const list = o.ObjList.cast(ctx.vm.peek(2).obj()).?;\n    const closure = ctx.vm.peek(1);\n    var accumulator = ctx.vm.peek(0);\n\n    for (list.items.items, 0..) |item, index| {\n        const index_value = v.Value.fromInteger(@as(v.Integer, @intCast(index)));\n\n        var args = [_]*const v.Value{\n            &index_value,\n            &item,\n            &accumulator,\n        }"}
{"instruction":"Write a Zig const similar to fit_x from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Image.zig","output":"const fit_x: bool = if (win_width_pix >= self.width) true else false;"}
{"instruction":"Write a Zig function similar to hashHelper from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/TypeRegistry.zig","output":"fn hashHelper(hasher: *std.hash.Wyhash, type_def: *const o.ObjTypeDef) void {\n    std.hash.autoHash(hasher, type_def.def_type);\n    std.hash.autoHash(hasher, type_def.optional);\n    if (type_def.resolved_type) |resolved| {\n        switch (resolved) {\n            // We actually hash the ObjTypeDef and not its pointer since we don't put Placeholders in the registry\n            // BUT: when going deeper in those type we might encounter a pointer to a Placeholder ObjTypeDef,\n            // in that case we wan't to use the pointer (real this time) as hash value\n            .Placeholder => std.hash.autoHash(hasher, type_def),\n\n            .Bool,\n            .Double,\n            .Integer,\n            .Pattern,\n            .String,\n            .Type, // Something that holds a type, not an actual type\n            .UserData,\n            .Void,\n            .Range,\n            => {}"}
{"instruction":"Write a Zig function similar to asinh from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn asinh(vm: *cy.VM) Value {\n    return Value.initF64(std.math.asinh(vm.getFloat(0)));\n}"}
{"instruction":"Write a Zig struct similar to LimbSlice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const LimbSlice = struct {\n    start: u32,\n    len: u32,\n\n    pub const empty: LimbSlice = .{\n        .start = std.math.maxInt(u32),\n        .len = 0,\n    }"}
{"instruction":"Write a Zig function similar to is_empty from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/StrList.zig","output":"pub fn is_empty(self: *const StrList) bool {\n    return self.vec.is_empty();\n}"}
{"instruction":"Write a Zig function similar to writer from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn writer(self: File, buffer: []u8) Writer {\n        return .{\n            .file = self,\n            .interface = .{\n                .vtable = &.{\n                    .drain = Writer.drain,\n                }"}
{"instruction":"Write a Zig const similar to browser_id from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const browser_id: usize = webui_get_best_browser(my_window);"}
{"instruction":"Write a Zig function similar to logFn from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/logging.zig","output":"pub fn logFn(\n    comptime level: std.log.Level,\n    comptime scope: @Type(.enum_literal),\n    comptime format: []const u8,\n    args: anytype,\n) void {\n    // if (builtin.mode == .Debug) switch (scope) {\n    if (true) switch (scope) {\n        .root, .element, .super_lsp, .@\"html/ast\" => {}"}
{"instruction":"Write a Zig function similar to named from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/values/color.zig","output":"pub fn named(name: []const u8) ?Color {\n        inline for (NAMED_COLORS) |tuple| {\n            if (std.mem.eql(u8, name, tuple.@\"0\")) {\n                return tuple.@\"1\";\n            }"}
{"instruction":"Write a Zig function similar to s from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub fn s(x: i32) Immediate {\n        return .{ .signed = x }"}
{"instruction":"Write a Zig function similar to count from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"pub fn count(self: Map) u32 {\n    return self.entries.len;\n}"}
{"instruction":"Write a Zig function similar to eql from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/configuration.zig","output":"fn eql(comptime T: type, a: T, b: T) bool {\n        const a_val, const b_val = switch (@typeInfo(T)) {\n            .optional => blk: {\n                if (a == null and b == null) return true;\n                if ((a == null) != (b == null)) return false;\n                break :blk .{ a.?, b.? }"}
{"instruction":"Write a Zig function similar to whileFull from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn whileFull(tree: Ast, node: Node.Index) full.While {\n    const cond_expr, const extra_index = tree.nodeData(node).node_and_extra;\n    const extra = tree.extraData(extra_index, Node.While);\n    return fullWhileComponents(tree, .{\n        .while_token = tree.nodeMainToken(node),\n        .cond_expr = cond_expr,\n        .cont_expr = extra.cont_expr,\n        .then_expr = extra.then_expr,\n        .else_expr = extra.else_expr.toOptional(),\n    }"}
{"instruction":"Write a Zig function similar to span from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub fn span(attr: Attr) Span {\n        if (attr.value) |v| {\n            const quote: u32 = if (v.quote == .none) 0 else 1;\n            return .{\n                .start = attr.name.start,\n                .end = v.span.end + quote,\n            }"}
{"instruction":"Write a Zig function similar to init from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig","output":"pub fn init() void {\n\trotatedModels = .init(main.globalAllocator.allocator);\n}"}
{"instruction":"Write a Zig function similar to update_ttl from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"pub fn update_ttl(self: *CacheMsg) i32 {\n    const now = cc.time();\n    const ttl_change = self.calc_ttl_change(now);\n\n    if (ttl_change != 0) {\n        self.update_time = now;\n        self.ttl += ttl_change;\n        dns.update_ttl(self.msg(), self.qnamelen, ttl_change);\n    }"}
{"instruction":"Write a Zig function similar to rename_symbol from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn rename_symbol(self: *Self, from: tp.pid_ref, file_path: []const u8, row: usize, col: usize) (LspOrClientError || GetLineOfFileError || InvalidMessageError || cbor.Error)!void {\n    const lsp = try self.get_language_server(file_path);\n    const uri = try self.make_URI(file_path);\n    defer self.allocator.free(uri);\n\n    const handler: struct {\n        from: tp.pid,\n        file_path: []const u8,\n\n        pub fn deinit(self_: *@This()) void {\n            std.heap.c_allocator.free(self_.file_path);\n            self_.from.deinit();\n        }"}
{"instruction":"Write a Zig const similar to c from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"const c: *Completion = @ptrFromInt(@as(usize, @intCast(ev.data.ptr)));"}
{"instruction":"Write a Zig function similar to onInputQueueCreated from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"pub fn onInputQueueCreated(self: *Self, input: *android.AInputQueue) void {\n        self.input_lock.lock();\n        defer self.input_lock.unlock();\n\n        self.input = input;\n    }"}
{"instruction":"Write a Zig function similar to collide from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn collide(self: Block) bool {\n\t\treturn _collide[self.typ];\n\t}"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn forward(self: ModernBertModel, input_ids: Tensor) Tensor {\n        var hidden_states: Tensor = zml.call(self.embeddings, .forward, .{input_ids}"}
{"instruction":"Write a Zig function similar to from_msg from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"pub fn from_msg(in_msg: []const u8) *CacheMsg {\n    const metadata_addr = @ptrToInt(in_msg.ptr) - metadata_len;\n    return @intToPtr(*CacheMsg, metadata_addr);\n}"}
{"instruction":"Write a Zig function similar to toSocketType from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn toSocketType(proto: Self) u32 {\n        return switch (proto) {\n            .tcp => std.posix.SOCK.STREAM,\n            .udp => std.posix.SOCK.DGRAM,\n        }"}
{"instruction":"Write a Zig function similar to resolvePlaceholder from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub fn resolvePlaceholder(self: *Self, placeholder: *obj.ObjTypeDef, resolved_type: *obj.ObjTypeDef, final: bool) Error!void {\n    std.debug.assert(placeholder.def_type == .Placeholder);\n\n    if (BuildOptions.debug_placeholders) {\n        io.print(\"Attempts to resolve @{}"}
{"instruction":"Write a Zig function similar to onLoadClient from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn onLoadClient(_: Vec3i, _: *Chunk, _: *BinaryReader) BinaryReader.AllErrors!void {}"}
{"instruction":"Write a Zig function similar to debugTokens from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/main.zig","output":"fn debugTokens(gpa: std.mem.Allocator, args: []const []const u8) !void {\n    const file_name = getFileName(usage_debug, args);\n\n    const source = std.fs.cwd().readFileAlloc(gpa, file_name, 1024 * 1024) catch |e| switch (e) {\n        error.OutOfMemory => return error.OutOfMemory,\n        else => |err| {\n            fatal(\"unable to open '{s}"}
{"instruction":"Write a Zig const similar to style_ex from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/dx11-ontop.zig","output":"const style_ex: win32.WINDOW_EX_STYLE = .{ .APPWINDOW = 1, .WINDOWEDGE = 1 };"}
{"instruction":"Write a Zig function similar to insertUtilityToken from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn insertUtilityToken(self: *Self, token: Token, set_location: bool) !Ast.TokenIndex {\n    const current_token = self.ast.tokens.get(self.current_token.?);\n\n    var utility_token = token;\n    if (set_location) {\n        utility_token.line = current_token.line;\n        utility_token.column = current_token.column;\n        utility_token.offset = current_token.offset;\n    }"}
{"instruction":"Write a Zig function similar to build from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub fn build(b: *std.Build) void {\n///     const optimize = b.standardOptimizeOption(.{}"}
{"instruction":"Write a Zig function similar to fnParamsToTuple from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"fn fnParamsToTuple(comptime params: []const std.builtin.Type.Fn.Param) type {\n    const Type = std.builtin.Type;\n    const fields: [params.len]Type.StructField = blk: {\n        var res: [params.len]Type.StructField = undefined;\n\n        for (params, 0..params.len) |param, i| {\n            res[i] = Type.StructField{\n                .type = param.type.?,\n                .alignment = @alignOf(param.type.?),\n                .default_value_ptr = null,\n                .is_comptime = false,\n                .name = std.fmt.comptimePrint(\"{}"}
{"instruction":"Write a Zig struct similar to EcosystemRepoRowJson from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/taxonomy.zig","output":"pub const EcosystemRepoRowJson = struct {\n    const Self = @This();\n    eco_name: []const u8,\n    branch: []const []const u8,\n    repo_url: []const u8,\n    tags: []const []const u8,\n\n    pub fn deinit(self: *Self, allocator: std.mem.Allocator) void {\n        allocator.free(self.branch);\n        allocator.free(self.tags);\n    }"}
{"instruction":"Write a Zig function similar to eql from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"fn eql(self: Self, other: Self) bool {\n    return self.row == other.row and self.col == other.col;\n}"}
{"instruction":"Write a Zig function similar to dvui_floating_stuff from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/dx11-ontop.zig","output":"fn dvui_floating_stuff() void {\n    var float = dvui.floatingWindow(@src(), .{}"}
{"instruction":"Write a Zig function similar to index from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/04_action_context.zig","output":"fn index(_: *Env, _: *httpz.Request, res: *httpz.Response) !void {\n    res.content_type = .HTML;\n    res.body =\n        \\\\<!DOCTYPE html>\n        \\\\ <p>The <code>Handler.dispatch</code> method takes an <code>httpz.Action(*Env)</code>.\n        \\\\ <p>This allows the handler method to create a request-specific value to pass into actions.\n        \\\\ <p>For example, dispatch might load a User (using a request header value maybe) and make it available to the action.\n        \\\\ <p>Goto <a href=\"/admin?auth=superuser\">admin</a> to simulate a (very insecure) authentication.\n    ;\n}"}
{"instruction":"Write a Zig function similar to remove from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn remove(self: *Self, sock: Socket) void {\n        for (self.read_fds.items, 0..) |fd, idx| {\n            if (fd == sock.internal) {\n                _ = self.read_fds.swapRemove(idx);\n                break;\n            }"}
{"instruction":"Write a Zig const similar to gray_u32 from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/callback/main.zig","output":"const gray_u32: u32 = @divFloor(299 * R + 587 * G + 114 * B, 1000);"}
{"instruction":"Write a Zig function similar to addImport from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: build.zig","output":"fn addImport(\n    compile: *std.Build.Step.Compile,\n    name: [:0]const u8,\n    module: *std.Build.Module,\n) void {\n    compile.root_module.addImport(name, module);\n}"}
{"instruction":"Write a Zig const similar to expected from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/gdt.zig","output":"const expected: u64 = 0;"}
{"instruction":"Write a Zig function similar to genTupleList from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genTupleList(\n    c: *Compiler,\n    node: Node.Index,\n    res: Result,\n    op: Bytecode.Inst.Op,\n) Error!Value {\n    var buf: [2]Node.Index = undefined;\n    const items = c.tree.nodeItems(node, &buf);\n\n    const list_buf_top = c.list_buf.items.len;\n    defer c.list_buf.items.len = list_buf_top;\n\n    if (res == .discard) {\n        for (items) |val| {\n            _ = try c.genNode(val, .discard);\n        }"}
{"instruction":"Write a Zig function similar to OP_ADD_F from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_ADD_F(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_ADD_F);\n}"}
{"instruction":"Write a Zig function similar to rayIntersection from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"pub fn rayIntersection(block: Block, item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f) ?RayIntersectionResult {\n\tif(item) |_item| {\n\t\tswitch(_item) {\n\t\t\t.baseItem => |baseItem| {\n\t\t\t\tif(std.mem.eql(u8, baseItem.id(), \"cubyz:chisel\")) { // Select only one eighth of a block\n\t\t\t\t\treturn closestRay(.intersection, block, relativePlayerPos, playerDir);\n\t\t\t\t}"}
{"instruction":"Write a Zig const similar to result from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const result: u32 = @intCast(ip.extra.items.len);"}
{"instruction":"Write a Zig function similar to loadImageWithFormat from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"pub fn loadImageWithFormat(allocator: std.mem.Allocator, file_path: []const u8, format: ImageFormat) !Image {\n    const file = MemoryMappedFile.open(file_path) catch return error.ImageNotLoaded;\n    defer file.close();\n\n    return switch (format) {\n        .png => try png.load(allocator, file.data),\n        .jpg => try jpeg.load(allocator, file.data),\n        .bmp => try bmp.load(allocator, file.data),\n        .tiff => try tiff.load(allocator, file.data),\n        .webp => try webp.load(allocator, file.data),\n    }"}
{"instruction":"Write a Zig function similar to wrap from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn wrap(_frame: Frame) Self {\n                return .{ ._frame = _frame }"}
{"instruction":"Write a Zig function similar to installApp from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn installApp(sdk: Sdk, apk_file: std.Build.LazyPath) *Step {\n    const step = sdk.b.addSystemCommand(&[_][]const u8{ sdk.system_tools.adb, \"install\" }"}
{"instruction":"Write a Zig struct similar to Command from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"const Command = struct {\n    raw_cmd: []const u8,\n    argv: []const []const u8,\n    measurements: Measurements,\n    sample_count: usize,\n\n    const Measurements = struct {\n        wall_time: Measurement,\n        peak_rss: Measurement,\n        cpu_cycles: Measurement,\n        instructions: Measurement,\n        cache_references: Measurement,\n        cache_misses: Measurement,\n        branch_misses: Measurement,\n    }"}
{"instruction":"Write a Zig const similar to paused from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"const paused: ?types.PauseData = blk: {\n                if (self.data.subordinate) |sub| {\n                    if (sub.paused) |paused| {\n                        // perform a full copy to the target allocator\n                        break :blk try paused.copy(req.alloc);"}
{"instruction":"Write a Zig struct similar to less_fn from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_type_config.zig","output":"const less_fn = struct {\n        fn less_fn(_: void, lhs: []const u8, rhs: []const u8) bool {\n            return std.mem.order(u8, lhs, rhs) == .lt;\n        }"}
{"instruction":"Write a Zig function similar to send_content_msg from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn send_content_msg(\n    to: tp.pid_ref,\n    tag: []const u8,\n    file_path: []const u8,\n    row: usize,\n    col: usize,\n    kind: []const u8,\n    content: []const u8,\n    range: ?Range,\n) ClientError!void {\n    const r = range orelse Range{\n        .start = .{ .line = row, .character = col }"}
{"instruction":"Write a Zig struct similar to TargetDescription from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig","output":"const TargetDescription = struct {\n    os: OperatingSystem,\n    arch: Arch,\n    musl: bool = false,\n\n    fn resolveTarget(desc: TargetDescription, b: *Build) std.Build.ResolvedTarget {\n        return b.resolveTargetQuery(.{\n            .os_tag = OperatingSystem.stdOSTag(desc.os),\n            .cpu_arch = desc.arch,\n            .cpu_model = getCpuModel(desc.os, desc.arch) orelse .determined_by_arch_os,\n            .os_version_min = getOSVersionMin(desc.os),\n            .glibc_version = if (desc.musl) null else getOSGlibCVersion(desc.os),\n        }"}
{"instruction":"Write a Zig function similar to get from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"pub fn get(self: Cookie, name: []const u8) ?[]const u8 {\n            var it = std.mem.splitScalar(u8, self.header, ';');\n            while (it.next()) |kv| {\n                const trimmed = std.mem.trimLeft(u8, kv, \" \");\n                if (name.len >= trimmed.len) {\n                    // need at least an '=' beyond the name\n                    continue;\n                }"}
{"instruction":"Write a Zig struct similar to Config from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/config.zig","output":"pub const Config = struct {\n    port: ?u16 = null,\n    address: ?[]const u8 = null,\n    unix_path: ?[]const u8 = null,\n    workers: Worker = .{}"}
{"instruction":"Write a Zig function similar to OP_ADD_I from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_ADD_I(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_ADD_I);\n}"}
{"instruction":"Write a Zig const similar to outputs_end from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"const outputs_end: usize = for (info.items, 0..) |item, i| {\n        switch (tree.nodeTag(item)) {\n            .asm_output => continue,\n            else => break i,\n        }\n    } else info.items.len;"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"pub fn forward(self: Mlp, x: Tensor) Tensor {\n        const proj = zml.call(self.up_proj, .forward, .{x}"}
{"instruction":"Write a Zig struct similar to stack_protect from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const stack_protect = struct {}"}
{"instruction":"Write a Zig function similar to read_some from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"fn read_some(self: *Self, buffer: []u8) ReadError!usize {\n                        try self.state.read_no_eof(buffer);\n                        return buffer.len;\n                    }"}
{"instruction":"Write a Zig function similar to deinit from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/diff.zig","output":"pub fn deinit(self: *@This()) void {\n        if (self.pid) |pid| {\n            pid.send(.{\"shutdown\"}"}
{"instruction":"Write a Zig function similar to present from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/swapchain.zig","output":"pub fn present(self: *Swapchain, cmdbuf: vk.CommandBuffer) !PresentState {\n        // Simple method:\n        // 1) Acquire next image\n        // 2) Wait for and reset fence of the acquired image\n        // 3) Submit command buffer with fence of acquired image,\n        //    dependendent on the semaphore signalled by the first step.\n        // 4) Present current frame, dependent on semaphore signalled by previous step\n        // Problem: This way we can't reference the current image while rendering.\n        // Better method: Shuffle the steps around such that acquire next image is the last step,\n        // leaving the swapchain in a state with the current image.\n        // 1) Wait for and reset fence of current image\n        // 2) Submit command buffer, signalling fence of current image and dependent on\n        //    the semaphore signalled by step 4.\n        // 3) Present current frame, dependent on semaphore signalled by the submit\n        // 4) Acquire next image, signalling its semaphore\n        // One problem that arises is that we can't know beforehand which semaphore to signal,\n        // so we keep an extra auxilery semaphore that is swapped around\n\n        // Step 1: Make sure the current frame has finished rendering\n        const current = self.currentSwapImage();\n        try current.waitForFence(self.gc);\n        try self.gc.dev.resetFences(1, @ptrCast(&current.frame_fence));\n\n        // Step 2: Submit the command buffer\n        const wait_stage = [_]vk.PipelineStageFlags{.{ .top_of_pipe_bit = true }"}
{"instruction":"Write a Zig const similar to OCW_SELECT_COUNTER_0 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const OCW_SELECT_COUNTER_0: u8 = 0x00;"}
{"instruction":"Write a Zig function similar to deinit from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/Variant.zig","output":"pub fn deinit(s: *const Section, gpa: Allocator) void {\n        {\n            var p = s.pages;\n            p.deinit(gpa);\n        }"}
{"instruction":"Write a Zig struct similar to Data from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"const Data = struct {\n            result: ResultT = undefined,\n            frame: ?Frame = null,\n\n            fn callback(\n                userdata: ?*@This(),\n                l: *xev.Loop,\n                c: *xev.Completion,\n                s: *xev.UDP.State,\n                udp: xev.UDP,\n                b: xev.WriteBuffer,\n                result: ResultT,\n            ) xev.CallbackAction {\n                _ = l;\n                _ = c;\n                _ = s;\n                _ = udp;\n                _ = b;\n                const data = userdata.?;\n                data.result = result;\n                if (data.frame != null) libcoro.xresume(data.frame.?);\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to sys_exit from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_exit(args: *const Debug.PanicData) isize {\n    return call(.SYS_EXIT, args);\n}"}
{"instruction":"Write a Zig function similar to Channel from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/channel.zig","output":"pub fn Channel(comptime T: type) type {\n    return struct {\n        lock: std.Thread.Mutex = .{}"}
{"instruction":"Write a Zig function similar to get_producer_buffer from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"pub fn get_producer_buffer(self: *DualBuffer) []tb.ChangeEvent {\n        self.assert_state();\n        const buffer = self.find(.producing).?;\n        return buffer.buffer;\n    }"}
{"instruction":"Write a Zig function similar to disableTextInput from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputRelay.zig","output":"pub fn disableTextInput(relay: *InputRelay) void {\n    assert(relay.text_input != null);\n    relay.text_input = null;\n\n    if (relay.input_method) |input_method| {\n        {\n            var it = relay.input_popups.iterator(.forward);\n            while (it.next()) |popup| popup.update();\n        }"}
{"instruction":"Write a Zig const similar to op from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const op: Bytecode.Inst.Op = switch (c.tree.nodes.items(.id)[node]) {\n        .less_than_expr => .less_than,\n        .less_than_equal_expr => .less_than_equal,\n        .greater_than_expr => .greater_than,\n        .greater_than_equal_expr => .greater_than_equal,\n        .equal_expr => .equal,\n        .not_equal_expr => .not_equal,\n        .in_expr => .in,\n        else => unreachable,\n    };"}
{"instruction":"Write a Zig function similar to init from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn init(buffer: []const u8) Decoder {\n        return .{\n            .buffer = buffer,\n            .index = 0,\n        }"}
{"instruction":"Write a Zig function similar to init from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/middleware/Cors.zig","output":"pub fn init(config: Config) !Cors {\n    return .{\n        .origin = config.origin,\n        .headers = config.headers,\n        .methods = config.methods,\n        .max_age = config.max_age,\n    }"}
{"instruction":"Write a Zig struct similar to Timer from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"const Timer = struct {\n    /// The absolute time to fire this timer next.\n    next: posix.timespec,\n\n    /// Only used internally. If this is non-null and timer is\n    /// CANCELLED, then the timer is rearmed automatically with this\n    /// as the next time. The callback will not be called on the\n    /// cancellation.\n    reset: ?posix.timespec = null,\n\n    /// Internal heap fields.\n    heap: heap.IntrusiveField(Timer) = .{}"}
{"instruction":"Write a Zig function similar to isTail from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"pub fn isTail(self: Job) bool {\n        return self.next_or_state == null;\n    }"}
{"instruction":"Write a Zig function similar to build_ci_step from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_ci_step(\n    b: *std.Build,\n    step_ci: *std.Build.Step,\n    command: anytype,\n) void {\n    const argv = .{ b.graph.zig_exe, \"build\" }"}
{"instruction":"Write a Zig function similar to build from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/build.zig","output":"pub fn build(b: *std.Build) !void {\n    b.addNamedLazyPath(\"cpu_cortex_m\", b.path(\"src/cpus/cortex_m.zig\"));\n    b.addNamedLazyPath(\"cpu_riscv32\", b.path(\"src/cpus/riscv32.zig\"));\n    b.addNamedLazyPath(\"cpu_avr5\", b.path(\"src/cpus/avr5.zig\"));\n\n    const unit_tests = b.addTest(.{\n        // We're not using the `start.zig` entrypoint as it overrides too much\n        // configuration\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/microzig.zig\"),\n            .target = b.graph.host,\n        }"}
{"instruction":"Write a Zig function similar to timerCallback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: examples/_basic.zig","output":"fn timerCallback(\n    _: ?*void,\n    _: *xev.Loop,\n    _: *xev.Completion,\n    result: xev.Timer.RunError!void,\n) xev.CallbackAction {\n    _ = result catch unreachable;\n    return .disarm;\n}"}
{"instruction":"Write a Zig function similar to callArgs from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/parser.zig","output":"fn callArgs(p: *Parser, is_async: bool, lhs: Node.Index, skip_nl: SkipNl, level: u8) Error!?Node.Index {\n        const tok = p.eatToken(.l_paren, .skip_nl) orelse return null;\n        const args = try p.listParser(skip_nl, level, spreadExpr, .r_paren, lhs);\n        const ops = [2][2]Node.Id{ .{ .call_expr_one, .call_expr }"}
{"instruction":"Write a Zig function similar to nameFromTag from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: build/generate_def.zig","output":"pub fn nameFromTag(tag: Tag) NameBuf {\n        \\\\    var name_buf: NameBuf = undefined;\n        \\\\    const unique_index = @intFromEnum(tag) + 1;\n        \\\\    const name = nameFromUniqueIndex(unique_index, &name_buf.buf);\n        \\\\    name_buf.len = @intCast(name.len);\n        \\\\    return name_buf;\n        \\\\}"}
{"instruction":"Write a Zig function similar to initNullable from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"pub fn initNullable(comptime Allocator: type, allocator: ?Allocator) Nullable(Allocator) {\n    return if (comptime Allocator == std.mem.Allocator or @hasDecl(Allocator, \"Nullable\"))\n        .init(allocator)\n    else\n        allocator;\n}"}
{"instruction":"Write a Zig struct similar to Socket from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub const Socket = struct {\n    pub fn Listener(comptime T: type) type {\n        return struct {\n            const Self = @This();\n\n            inner: T.Inner,\n\n            pub fn accept(self: *Self) !T {\n                return .{ .inner = try self.inner.accept() }"}
{"instruction":"Write a Zig function similar to slice from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn slice(this: *const Error) []const u8 {\n                return switch (this.*) {\n                    .message => this.message,\n                    .reason => this.reason.message(),\n                }"}
{"instruction":"Write a Zig const similar to default from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub const default: @This() = .{ .provided = 0 };"}
{"instruction":"Write a Zig function similar to popUsed from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/common.zig","output":"pub fn popUsed(self: *Self, allocator: ?Allocator) Error!?UsedRing.Chain {\n        if (self.used.idx().* == self.last_used_idx) {\n            return null;\n        }"}
{"instruction":"Write a Zig function similar to reportErr from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn reportErr(c: *Compiler, msg: []const u8, node: Node.Index) Error {\n    @branchHint(.cold);\n    const starts = c.tree.tokens.items(.start);\n    try c.errors.add(\n        .{ .data = msg }"}
{"instruction":"Write Zig 0.13.0 code for: comptime §","input":"Zig places importance on the concept of whether an expression is known at compile-time. There are a few different places this concept is used, and these building blocks are used to keep the language small, readable, and powerful. Introducing the Compile-Time Concept § Compile-Time Parameters § Compile-time parameters is how Zig implements generics. It is compile-time duck typing. compile-time_duck_typing.zig In Zig, types are first-class citizens. They can be assigned to variables, passed as par","output":"<span class=\"tok-comment\">// From the line:</span>\n<span class=\"tok-comment\">// expect(performFn('t', 1) == 6);</span>\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">performFn</span>(start_value: <span class=\"tok-type\">i32</span>) <span class=\"tok-type\">i32</span> {\n    <span class=\"tok-kw\">var</span> result: <span class=\"tok-type\">i32</span> = start_value;\n    result = two(result);\n    result = three(result);\n    <span class=\"tok-kw\">return</span> result;\n}"}
{"instruction":"Write a Zig const similar to config from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"const config: std.io.tty.Config = .escape_codes;"}
{"instruction":"Write a Zig const similar to virt_end from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"const virt_end: usize = PAGE_SIZE_4MB * 6;"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn init(exec: *Executor, tcp: xev.TCP) Self {\n        return .{ .exec = exec, .tcp = tcp }"}
{"instruction":"Write a Zig function similar to lessThan from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn lessThan(_: SortContext, lhs: ReportItem, rhs: ReportItem) bool {\n        return lhs.end_location.line < rhs.end_location.line or\n            (lhs.end_location.line == rhs.end_location.line and lhs.end_location.column < rhs.end_location.column);\n    }"}
{"instruction":"Write a Zig function similar to realloc from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig","output":"pub fn realloc(self: *RcMsg, new_cap: u16) *RcMsg {\n    assert(self.is_unique());\n    if (new_cap > self.cap) {\n        const bytes = g.allocator.reallocAdvanced(\n            self.mem(),\n            alignment,\n            header_len + new_cap,\n            .exact,\n        ) catch unreachable;\n        const new_self = header(bytes);\n        new_self.cap = new_cap;\n        return new_self;\n    }"}
{"instruction":"Write a Zig function similar to blockOrExpr from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/parser.zig","output":"fn blockOrExpr(p: *Parser, skip_nl: SkipNl, level: u8) Error!Node.Index {\n        if (skip_nl == .keep_nl) if (try p.block(level)) |node| return node;\n        p.skipNl();\n        return try p.assignExpr(skip_nl, level);\n    }"}
{"instruction":"Write a Zig struct similar to ReverseBitsTest from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/huffman_encoder.zig","output":"const ReverseBitsTest = struct {\n        in: u16,\n        bit_count: u5,\n        out: u16,\n    }"}
{"instruction":"Write a Zig function similar to from from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"pub fn from(task: *Task) Batch {\n        return Batch{\n            .len = 1,\n            .head = task,\n            .tail = task,\n        }"}
{"instruction":"Write a Zig function similar to to_cursor_top from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/View.zig","output":"fn to_cursor_top(self: *const Self) Cursor {\n    return .{ .row = self.row, .col = 0 }"}
{"instruction":"Write a Zig function similar to goto_declaration from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn goto_declaration(self: *Self, from: tp.pid_ref, file_path: []const u8, row: usize, col: usize) SendGotoRequestError!void {\n    return self.send_goto_request(from, file_path, row, col, \"textDocument/declaration\");\n}"}
{"instruction":"Write a Zig function similar to readBytes from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/file.zig","output":"pub fn readBytes(\n    allocator: std.mem.Allocator,\n    path: []const u8,\n    len: usize,\n) ![]u8 {\n    const file = try std.fs.cwd().openFile(path, .{}"}
{"instruction":"Write a Zig const similar to slice_rgba from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const slice_rgba: []Colorf32 = @ptrCast(slice_luv);"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> a: <span class=\"tok-type\">u32</span> = <span class=\"tok-number\">10</span>;\n    <span class=\"tok-kw\">var</span> b: <span class=\"tok-type\">u32</span> = <span class=\"tok-number\">0</span>;\n    _ = .{ &a, &b };\n    <span class=\"tok-kw\">const</span> c = a % b;\n    std.debug.print(<span class=\"tok-str\">\"value: {}\\n\"</span>, .{c});\n}"}
{"instruction":"Write a Zig function similar to reserveSlot from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn reserveSlot(c: *Chunk) !u8 {\n    const slot = c.slot_stack.items.len - c.curBlock.slot_start;\n    if (slot > std.math.maxInt(u8)) {\n        return c.reportError(\"Exceeded max locals.\", null);\n    }"}
{"instruction":"Write a Zig function similar to to_uppercase from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_header.zig","output":"fn to_uppercase(comptime input: []const u8) [input.len]u8 {\n    comptime var output: [input.len]u8 = undefined;\n    inline for (&output, 0..) |*char, i| {\n        char.* = input[i];\n        char.* -= 32 * @as(u8, @intFromBool(char.* >= 'a' and char.* <= 'z'));\n    }"}
{"instruction":"Write a Zig function similar to initCapacity from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn initCapacity(gpa: mem.Allocator, capacity: u64) !Self {\n            assert(math.isPowerOfTwo(capacity));\n\n            const shift = 63 - math.log2_int(u64, capacity) + 1;\n            const overflow = capacity / 10 + (63 - @as(u64, shift) + 1) << 1;\n\n            const entries = try gpa.alloc(Entry, @as(usize, @intCast(capacity + overflow)));\n            @memset(entries, Entry{}"}
{"instruction":"Write a Zig function similar to runtimeTests from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/rtc.zig","output":"pub fn runtimeTests() void {\n    rt_init();\n\n    // Disable the scheduler temporary\n    schedule = false;\n    // Interrupts aren't enabled yet, so for the runtime tests, enable it temporary\n    arch.enableInterrupts();\n    rt_interrupts();\n    arch.disableInterrupts();\n    // Can enable it back\n    schedule = true;\n}"}
{"instruction":"Write a Zig const similar to cb_ from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/diff.zig","output":"const cb_: *AsyncDiffer.CallBack = if (cb_addr == 0) return else @ptrFromInt(cb_addr);"}
{"instruction":"Write a Zig function similar to major from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn major(self: BlockDropLocation) Vec3d {\n\t\t\t\treturn @floatFromInt(@abs(self.dir.relPos()));\n\t\t\t}"}
{"instruction":"Write a Zig function similar to eql from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn eql(lhs: @This(), rhs: @This()) bool {\n        if (@as(AddressFamily, lhs) != @as(AddressFamily, rhs))\n            return false;\n        return switch (lhs) {\n            .ipv4 => |l| l.eql(rhs.ipv4),\n            .ipv6 => |l| l.eql(rhs.ipv6),\n        }"}
{"instruction":"Write a Zig const similar to VIRTIO_PCI_CAP_DEVICE_CFG from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/common.zig","output":"const VIRTIO_PCI_CAP_DEVICE_CFG: u8 = 4;"}
{"instruction":"Write a Zig function similar to stream from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"fn stream(r: *std.Io.Reader, w: *std.Io.Writer, limit: std.Io.Limit) std.Io.Reader.StreamError!usize {\n            const self: *Reader = @alignCast(@fieldParentPtr(\"interface\", r));\n            const dest = limit.slice(try w.writableSliceGreedy(1));\n            const n = switch (self.mode) {\n                .streaming => self.file.read(dest),\n                .positional => self.file.pread(dest, self.pos),\n                else => @panic(\"UNSUPPORTED\"),\n            }"}
{"instruction":"Write a Zig function similar to getCalleePreservedRegs from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/abi.zig","output":"pub fn getCalleePreservedRegs(cc: std.builtin.CallingConvention) []const Register {\n    return switch (cc) {\n        .SysV => &SysV.callee_preserved_regs,\n        .Win64 => &Win64.callee_preserved_regs,\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig function similar to deinit from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn deinit(self: Self, allocator: Allocator) void {\n            var full_palette = self.palette;\n            full_palette.len = PaletteSize;\n            allocator.free(full_palette);\n            allocator.free(self.indices);\n        }"}
{"instruction":"Write a Zig const similar to backslash_newline_escape from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub const backslash_newline_escape: Diagnostic = .{\n        .fmt = \"backslash and newline separated by space\",\n        .kind = .warning,\n        .opt = .@\"backslash-newline-escape\",\n    };"}
{"instruction":"Write a Zig struct similar to Token from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const Token = struct {\n    pos: u32 align(8),\n}"}
{"instruction":"Write a Zig function similar to generateFastAndLeastWidthTypes from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn generateFastAndLeastWidthTypes(comp: *Compilation, w: *std.Io.Writer) !void {\n    const sizes = [_]usize{ 8, 16, 32, 64 }"}
{"instruction":"Write a Zig function similar to tuple from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"pub fn tuple(comptime root: type, object: anytype) !py.PyTuple(root) {\n    const pytuple = ffi.PySequence_Tuple(py.object(root, object).py) orelse return PyError.PyRaised;\n    return py.PyTuple(root).from.unchecked(.{ .py = pytuple }"}
{"instruction":"Write a Zig struct similar to Default from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators.zig","output":"pub const Default = struct {\n    pub fn allocator(self: Default) std.mem.Allocator {\n        _ = self;\n        return c_allocator;\n    }"}
{"instruction":"Write a Zig function similar to syscall0 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn syscall0(syscall: usize) anyerror!usize {\n    const res = asm volatile (\n        \\\\int $0x80\n        : [ret] \"={eax}"}
{"instruction":"Write a Zig struct similar to InstDescExtra from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub const InstDescExtra = struct {\n    text: []const u8,\n}"}
{"instruction":"Write a Zig function similar to parseFiberType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseFiberType(self: *Self, generic_types: ?std.AutoArrayHashMapUnmanaged(*obj.ObjString, *obj.ObjTypeDef)) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    try self.consume(.Less, \"Expected `<` after `fib`\");\n    const return_type = try self.parseTypeDef(generic_types, true);\n    try self.consume(.Comma, \"Expected `,` after fiber return type\");\n    const yield_type = try self.parseTypeDef(generic_types, true);\n\n    const yield_type_def = self.ast.nodes.items(.type_def)[yield_type].?;\n    if (!yield_type_def.optional and yield_type_def.def_type != .Void) {\n        self.reportErrorAtNode(\n            .yield_type,\n            yield_type,\n            \"Expected optional type or void\",\n            .{}"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn listen(fd: c_int, backlog: c_int) c_int;\n    }"}
{"instruction":"Write a Zig function similar to _debug from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/console/console.zig","output":"pub fn _debug(values: []js.Object, page: *Page) !void {\n        if (values.len == 0) {\n            return;\n        }"}
{"instruction":"Write a Zig function similar to server_fetch from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/aq.zig","output":"pub fn server_fetch(url: string) !json.Document {\n    const req = try zfetch.Request.init(gpa, url, null);\n    defer req.deinit();\n\n    var headers = zfetch.Headers.init(gpa);\n    defer headers.deinit();\n    try headers.set(\"accept\", \"application/json\");\n\n    try req.do(.GET, headers, null);\n\n    const doc = try json.parse(gpa, \"\", req.reader(), .{ .support_trailing_commas = true, .maximum_depth = 100 }"}
{"instruction":"Write a Zig function similar to sendMessageSync from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"pub fn sendMessageSync(server: *Server, arena: std.mem.Allocator, comptime method: []const u8, params: lsp.ParamsType(method)) Error!lsp.ResultType(method) {\n    comptime std.debug.assert(lsp.isRequestMethod(method) or lsp.isNotificationMethod(method));\n\n    if (comptime lsp.isRequestMethod(method)) {\n        return try server.sendRequestSync(arena, method, params);\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">const</span> A = <span class=\"tok-kw\">error</span>{\n    NotDir,\n\n    <span class=\"tok-comment\">/// A doc comment</span>\n    PathNotFound,\n};\n<span class=\"tok-kw\">const</span> B = <span class=\"tok-kw\">error</span>{\n    OutOfMemory,\n\n    <span class=\"tok-comment\">/// B doc comment</span>\n    PathNotFound,\n};\n\n<span class=\"tok-kw\">const</span> C = A || B;\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>() C!<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">return</span> <span class=\"tok-kw\">error</span>.NotDir;\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"merge error sets\"</span> {\n    <span class=\"tok-kw\">if</span> (foo()) {\n        <span class=\"tok-builtin\">@panic</span>(<span class=\"tok-str\">\"unexpected\"</span>);\n    } <span class=\"tok-kw\">else</span> |err| <span class=\"tok-kw\">switch</span> (err) {\n        <span class=\"tok-kw\">error</span>.OutOfMemory => <span class=\"tok-builtin\">@panic</span>(<span class=\"tok-str\">\"unexpected\"</span>),\n        <span class=\"tok-kw\">error</span>.PathNotFound => <span class=\"tok-builtin\">@panic</span>(<span class=\"tok-str\">\"unexpected\"</span>),\n        <span class=\"tok-kw\">error</span>.NotDir => {},\n    }\n}"}
{"instruction":"Write a Zig function similar to store_undo from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn store_undo(self: *Self, meta: []const u8) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to genCallTrait from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genCallTrait(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .call_trait);\n\n    const ret_t = c.ir.getExprType(idx).id;\n    const inst = try beginCall(c, cstr, ret_t, true, node);\n\n    // Trait ref.\n    const argStart = numSlots(c);\n    var temp = try bc.reserveTemp(c, bt.Any);\n    const trait = try genExpr(c, data.trait, Cstr.toTemp(temp));\n    try initTempValue(c, trait, node);\n\n    // Reserve slot for unwrapped impl.\n    const placeholder = try bc.reserveTemp(c, bt.Any);\n    try initSlot(c, placeholder, false, node);\n\n    // Args. Skip impl placeholder.\n    const args = c.ir.getArray(data.args, u32, data.nargs)[1..];\n    for (args, 2..) |argIdx, i| {\n        const arg_t = c.ir.getExprType(argIdx).id;\n        temp = try bc.reserveTemp(c, arg_t);\n        if (cy.Trace and temp != argStart + i) return error.Unexpected;\n        const argv = try genExpr(c, argIdx, Cstr.toTemp(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }"}
{"instruction":"Write a Zig function similar to release from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn release(self: *BufferPool, buffer: ArrayListUnmanaged(u8)) void {\n        // create mutable copy\n        var b = buffer;\n\n        if (self.count == self.max_concurrent_transfers) {\n            b.deinit(self.allocator);\n            return;\n        }"}
{"instruction":"Write a Zig function similar to base from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn base(mem: Memory) Base {\n            return switch (mem) {\n                .moffs => |m| .{ .reg = m.seg }"}
{"instruction":"Write a Zig function similar to string from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Scanner.zig","output":"fn string(self: *Self, multiline: bool) Token {\n    const delimiter: u8 = if (multiline) '`' else '\"';\n    var in_interp: bool = false;\n    var interp_depth: usize = 0;\n    while ((self.peek() != delimiter or in_interp) and !self.isEOF()) {\n        if (self.peek() == '\\n' and !multiline) {\n            return self.makeToken(.Error, .{ .String = \"Unterminated string.\" }"}
{"instruction":"Write a Zig function similar to toInt from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn toInt(ip: *InternPool, val: Index, comptime T: type) ?T {\n    comptime assert(@typeInfo(T) == .int);\n    return switch (ip.indexToKey(val)) {\n        .simple_value => |simple| switch (simple) {\n            .null_value => 0,\n            .bool_true => 1,\n            .bool_false => 0,\n            .the_only_possible_value => 0,\n            else => null,\n        }"}
{"instruction":"Write a Zig const similar to numF from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"const numF: f64 = @floatFromInt(self.num_);"}
{"instruction":"Write a Zig function similar to depositToAny from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn depositToAny(source: Inventory, sourceSlot: u32, dest: Inventory, amount: u16) void {\n\tSync.ClientSide.executeCommand(.{.depositToAny = .{.dest = dest, .source = .{.inv = source, .slot = sourceSlot}"}
{"instruction":"Write a Zig function similar to asyncMain from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/simple_layer/main.zig","output":"pub fn asyncMain() !void {\n    // Short lived allocations\n    var gpa = std.heap.GeneralPurposeAllocator(.{}"}
{"instruction":"Write a Zig function similar to trim from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn trim(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n\n    const trimRunes = vm.getString(2);\n\n    var res: []const u8 = undefined;\n    const mode = bindings.getBuiltinSymbol(vm.getSymbol(1)) orelse {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }"}
{"instruction":"Write a Zig function similar to register_capability from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn register_capability(self: *Self, from: tp.pid_ref, cbor_id: []const u8, params_cb: []const u8) ClientError!void {\n    _ = params_cb;\n    return LSP.send_response(self.allocator, from, cbor_id, null) catch error.ClientFailed;\n}"}
{"instruction":"Write a Zig function similar to get from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/channel.zig","output":"pub fn get(self: *Self) T {\n            self.lock.lock();\n            defer {\n                self.lock.unlock();\n                self.writeable.signal();\n            }"}
{"instruction":"Write a Zig function similar to tag from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/libdom.zig","output":"pub fn tag(n: Node) ![]const u8 {\n        return parser.nodeName(n.node);\n    }"}
{"instruction":"Write a Zig function similar to resolveAlias from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn resolveAlias(self: Self, start_decl: reg.DeclarationType) !reg.DeclarationType {\n        var decl = start_decl;\n        while (true) {\n            const name = switch (decl) {\n                .alias => |alias| alias.name,\n                else => return decl,\n            }"}
{"instruction":"Write a Zig const similar to OCW2_INTERRUPT_LEVEL_2 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const OCW2_INTERRUPT_LEVEL_2: u8 = 0x02;"}
{"instruction":"Write a Zig struct similar to ForEach from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const ForEach = struct {\n    iterable: Node.Index,\n    key: Node.Index,\n    value: Node.Index,\n    body: Node.Index,\n    key_omitted: bool,\n    label: ?TokenIndex,\n}"}
{"instruction":"Write a Zig function similar to keys from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"pub fn keys(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjMap.cast(ctx.vm.peek(0).obj()).?;\n\n    const map_keys = self.map.keys();\n    var result = std.ArrayList(v.Value){}"}
{"instruction":"Write a Zig function similar to ErrorSet from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: mkfat32.zig","output":"fn ErrorSet(comptime StreamType: type) type {\n        const WriteError = switch (@typeInfo(StreamType)) {\n            .Pointer => |p| p.child.WriteError,\n            else => StreamType.WriteError,\n        }"}
{"instruction":"Write a Zig const similar to ICW1_SINGLE_CASCADE_MODE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const ICW1_SINGLE_CASCADE_MODE: u8 = 0x02;"}
{"instruction":"Write a Zig function similar to expressionStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn expressionStatement(self: *Self, hanging: bool) Error!Ast.Node.Index {\n    const expr = try self.expression(hanging);\n\n    try self.consume(.Semicolon, \"Expected `;` after expression.\");\n\n    return try self.ast.appendNode(\n        .{\n            .tag = .Expression,\n            .type_def = self.ast.nodes.items(.type_def)[expr],\n            .location = self.ast.nodes.items(.location)[expr],\n            .end_location = self.current_token.? - 1,\n            .components = .{\n                .Expression = expr,\n            }"}
{"instruction":"Write a Zig struct similar to SavedFile from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub const SavedFile = struct {\n    pub fn toJS(\n        globalThis: *jsc.JSGlobalObject,\n        path: []const u8,\n        byte_size: usize,\n    ) jsc.JSValue {\n        const mime_type = globalThis.bunVM().mimeType(path);\n        const store = jsc.WebCore.Blob.Store.initFile(\n            jsc.Node.PathOrFileDescriptor{\n                .path = jsc.Node.PathLike{\n                    .string = bun.PathString.init(path),\n                }"}
{"instruction":"Write a Zig function similar to node from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn node(c: Cursor) Node {\n        return c.ast.nodes[c.idx];\n    }"}
{"instruction":"Write a Zig function similar to tryPut from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/channel.zig","output":"pub fn tryPut(self: *Self, item: T) !void {\n            self.lock.lock();\n            defer self.lock.unlock();\n\n            try self.fifo.appendBounded(item);\n\n            // only signal on success\n            self.readable.signal();\n        }"}
{"instruction":"Write a Zig function similar to refresh_from_file from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn refresh_from_file(self: *Self) LoadFromFileError!void {\n    try self.load_from_file_and_update(self.get_file_path());\n    self.update_last_used_time();\n}"}
{"instruction":"Write a Zig struct similar to BusConfig from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig","output":"pub const BusConfig = struct {\n    // Later: add common options\n}"}
{"instruction":"Write a Zig function similar to showWv from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn showWv(self: webui, content: [:0]const u8) !void {\n    const success = c.webui_show_wv(self.window_handle, content.ptr);\n    if (!success) return WebUIError.ShowError;\n}"}
{"instruction":"Write a Zig struct similar to ComptimeParam from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const ComptimeParam = struct {\n        index: u64,\n        wanted: bool,\n    }"}
{"instruction":"Write a Zig function similar to generateBinary from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateBinary(self: *Self, node: Ast.Node.Index) Error!?m.MIR_op_t {\n    const node_components = self.state.?.ast.nodes.items(.components);\n    const components = node_components[node].Binary;\n\n    return switch (components.operator) {\n        .QuestionQuestion,\n        .And,\n        .Or,\n        => try self.generateConditional(components),\n        .Less,\n        .Greater,\n        .GreaterEqual,\n        .LessEqual,\n        .EqualEqual,\n        .BangEqual,\n        => try self.generateComparison(components),\n        else => bin: {\n            const type_defs = self.state.?.ast.nodes.items(.type_def);\n            const type_def = type_defs[components.left].?.def_type;\n\n            const left_value = (try self.generateNode(components.left)).?;\n            const right_value = (try self.generateNode(components.right)).?;\n\n            const res = m.MIR_new_reg_op(\n                self.ctx,\n                try self.REG(\"res\", m.MIR_T_I64),\n            );\n\n            try self.buildBinary(\n                components.operator,\n                type_def,\n                left_value,\n                right_value,\n                res,\n            );\n\n            break :bin res;\n        }"}
{"instruction":"Write a Zig function similar to toUnmanaged from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/Image/Managed.zig","output":"pub fn toUnmanaged(self: Managed) Image {\n    return .{\n        .width = self.width,\n        .height = self.height,\n        .pixels = self.pixels,\n        .animation = self.animation,\n    }"}
{"instruction":"Write a Zig function similar to validate_release from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/ci.zig","output":"pub fn validate_release(shell: *Shell, gpa: std.mem.Allocator, options: struct {\n    version: []const u8,\n    tigerbeetle: []const u8,\n}) !void {\n    var tmp_beetle = try TmpTigerBeetle.init(gpa, .{\n        .development = true,\n        .prebuilt = options.tigerbeetle,\n    }"}
{"instruction":"Write a Zig function similar to encode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn encode(self: *const @This(), encoder: *Encoder) void {\n            encoder.write_short_string(self.consumer_tag);\n            var bitset_1: stdx.BitSetType(8) = .{}"}
{"instruction":"Write a Zig function similar to light from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn light(self: Block) u32 {\n\t\treturn _light[self.typ];\n\t}"}
{"instruction":"Write a Zig function similar to skip from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn skip(ctx: *Ctx, i: *usize, n_: usize) void {\n                var n = n_;\n                while (n > 0) : (n -= 1) {\n                    if (ctx.rest[i.*] == '\\n') {\n                        ctx.line += 1;\n                        ctx.pos = 0;\n                    }"}
{"instruction":"Write a Zig const similar to sharing_mode from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/swapchain.zig","output":"const sharing_mode: vk.SharingMode = if (gc.graphics_queue.family != gc.present_queue.family)\n            .concurrent\n        else\n            .exclusive;"}
{"instruction":"Write a Zig function similar to initRecycle from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/swapchain.zig","output":"pub fn initRecycle(gc: *const GraphicsContext, allocator: Allocator, extent: vk.Extent2D, old_handle: vk.SwapchainKHR) !Swapchain {\n        const caps = try gc.instance.getPhysicalDeviceSurfaceCapabilitiesKHR(gc.pdev, gc.surface);\n        const actual_extent = findActualExtent(caps, extent);\n        if (actual_extent.width == 0 or actual_extent.height == 0) {\n            return error.InvalidSurfaceDimensions;\n        }"}
{"instruction":"Write a Zig function similar to reload from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/Assets.zig","output":"pub fn reload(assets: *Assets, id: mach.ObjectID) !void {\n    if (assets.textures.is(id)) {\n        var old_texture = assets.textures.getValue(id);\n        defer old_texture.deinitWithoutClear();\n\n        if (assets.textures.getTag(id, Assets, .path)) |path_id| {\n            const path = assets.paths.get(path_id, .value);\n\n            if (pixi.gfx.Texture.loadFromFile(path, .{\n                .address_mode = old_texture.address_mode,\n                .copy_dst = old_texture.copy_dst,\n                .copy_src = old_texture.copy_src,\n                .filter = old_texture.filter,\n                .format = old_texture.format,\n                .render_attachment = old_texture.render_attachment,\n                .storage_binding = old_texture.storage_binding,\n                .texture_binding = old_texture.texture_binding,\n            }"}
{"instruction":"Write a Zig function similar to get_consumer_buffer from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"pub fn get_consumer_buffer(self: *DualBuffer) []const tb.ChangeEvent {\n        self.assert_state();\n        const buffer = self.find(.consuming).?;\n        return buffer.buffer[0..buffer.state.consuming];\n    }"}
{"instruction":"Write a Zig function similar to setupGeneratorStep from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig","output":"fn setupGeneratorStep(b: *std.Build, target: std.Build.ResolvedTarget) void {\n    const gen = b.step(\"generator\", \"Build generator executable for reproing fuzz cases\");\n    const supergen = b.addExecutable(.{\n        .name = \"generator\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/generator.zig\"),\n            .target = target,\n            .optimize = .ReleaseSafe,\n        }"}
{"instruction":"Write a Zig function similar to registerIrq from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/interrupt.zig","output":"pub fn registerIrq(irq: u8, handler: *const fn (*InterruptFrame) void) void {\n    irq_handlers[irq] = handler;\n}"}
{"instruction":"Write a Zig function similar to get_id from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn get_id(msg: []const u8) c.be16 {\n    return c.dns_get_id(msg.ptr);\n}"}
{"instruction":"Write a Zig function similar to genExprStmt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genExprStmt(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .exprStmt);\n\n    if (data.isBlockResult) {\n        const inMain = c.curBlock.block_depth == 1;\n        if (inMain) {\n            const exprv = try genExpr(c, data.expr, Cstr.simpleRetain);\n            try initTempValue(c, exprv, node);\n            c.curBlock.endLocal = exprv.reg;\n            try consumeTempValue(c, exprv, node);\n            try popTempValue(c, exprv, node);\n        }"}
{"instruction":"Write a Zig const similar to char from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Scanner.zig","output":"const char: u8 = self.advance();"}
{"instruction":"Write a Zig function similar to resolveExpressionType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveExpressionType(\n    analyser: *Analyser,\n    handle: *DocumentStore.Handle,\n    node: Ast.Node.Index,\n    ancestors: []const Ast.Node.Index,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to get from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"pub fn get(self: Map, key: *const Value) ?*Value {\n    const index = self.getIndex(key) orelse return null;\n    return self.values()[index];\n}"}
{"instruction":"Write a Zig function similar to renderComments from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"fn renderComments(tree: Tree, start: usize, end: usize, aiw: anytype) !bool {\n    // borrowed from std/zig/render.zig\n    var index: usize = start;\n    while (mem.indexOfScalar(u8, tree.source[index..end], '#')) |offset| {\n        const comment_start = index + offset;\n\n        // If there is no newline, the comment ends with EOF\n        const newline_index = mem.indexOfScalar(u8, tree.source[comment_start..end], '\\n');\n        const newline = if (newline_index) |i| comment_start + i else null;\n\n        const untrimmed_comment = tree.source[comment_start .. newline orelse tree.source.len];\n        const trimmed_comment = mem.trimRight(u8, untrimmed_comment, &std.ascii.whitespace);\n\n        // Don't leave any whitespace at the start of the file\n        if (index != 0) {\n            if (index == start and mem.containsAtLeast(u8, tree.source[index..comment_start], 2, \"\\n\")) {\n                // Leave up to one empty line before the first comment\n                try aiw.insertNewline();\n                try aiw.insertNewline();\n            }"}
{"instruction":"Write a Zig struct similar to UserContext from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/event_handling/main.zig","output":"const UserContext = struct {\n    user_id: u32,\n    username: []const u8,\n    session_start: i64,\n    click_count: u32,\n    \n    fn create(user_id: u32, username: []const u8) !*UserContext {\n        const context = try allocator.create(UserContext);\n        context.* = UserContext{\n            .user_id = user_id,\n            .username = try allocator.dupe(u8, username),\n            .session_start = std.time.timestamp(),\n            .click_count = 0,\n        }"}
{"instruction":"Write a Zig function similar to _time from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/console/console.zig","output":"pub fn _time(self: *Console, label_: ?[]const u8, page: *Page) !void {\n        const label = label_ orelse \"default\";\n        const gop = try self.timers.getOrPut(page.arena, label);\n\n        if (gop.found_existing) {\n            log.info(.console, \"duplicate timer\", .{ .label = label }"}
{"instruction":"Write a Zig function similar to init from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"pub fn init(options: xev.Options) !Loop {\n        _ = options;\n        return .{ .cached_now = try get_now() }"}
{"instruction":"Write a Zig function similar to generateBoolean from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateBoolean(self: *Self, node: Ast.Node.Index, _: ?*Breaks) Error!?*obj.ObjFunction {\n    try self.emitOpCode(\n        self.ast.nodes.items(.location)[node],\n        if (self.ast.nodes.items(.components)[node].Boolean) .OP_TRUE else .OP_FALSE,\n    );\n\n    try self.patchOptJumps(node);\n    try self.endScope(node);\n\n    return null;\n}"}
{"instruction":"Write a Zig function similar to sleep from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn sleep(ms: u64) !void {\n    try aio.sleep(AsyncThread.current.executor, ms);\n}"}
{"instruction":"Write a Zig function similar to deposit from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn deposit(dest: Inventory, destSlot: u32, carried: Inventory, amount: u16) void {\n\tSync.ClientSide.executeCommand(.{.deposit = .{.dest = .{.inv = dest, .slot = destSlot}"}
{"instruction":"Write a Zig function similar to isRt from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn isRt(val: Value) bool {\n        return switch (val) {\n            .ref, .mut => true,\n            else => false,\n        }"}
{"instruction":"Write a Zig function similar to index from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/02_handler.zig","output":"fn index(_: *Handler, _: *httpz.Request, res: *httpz.Response) !void {\n    res.body =\n        \\\\<!DOCTYPE html>\n        \\\\ <p>Except in very simple cases, you'll want to use a custom Handler.\n        \\\\ <p>A custom Handler is how you share app-specific data with your actions (like a DB pool)\n        \\\\    and define a custom not found and error function.\n        \\\\ <p>Other examples show more advanced things you can do with a custom Handler.\n        \\\\ <ul>\n        \\\\ <li><a href=\"/hits\">Shared global hit counter</a>\n        \\\\ <li><a href=\"/not_found\">Custom not found handler</a>\n        \\\\ <li><a href=\"/error\">Custom error  handler</a>\n    ;\n}"}
{"instruction":"Write a Zig function similar to writeToFile from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/Image/Managed.zig","output":"pub fn writeToFile(self: Managed, file: std.fs.File, write_buffer: []u8, encoder_options: EncoderOptions) WriteError!void {\n    return Image.writeToFile(self.toUnmanaged(), self.allocator, file, write_buffer, encoder_options);\n}"}
{"instruction":"Write a Zig function similar to handleInputMethodNewPopup from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputRelay.zig","output":"fn handleInputMethodNewPopup(\n    listener: *wl.Listener(*wlr.InputPopupSurfaceV2),\n    wlr_popup: *wlr.InputPopupSurfaceV2,\n) void {\n    const relay: *InputRelay = @fieldParentPtr(\"input_method_new_popup\", listener);\n\n    InputPopup.create(wlr_popup, relay) catch {\n        log.err(\"out of memory\", .{}"}
{"instruction":"Write a Zig function similar to takeHalf from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn takeHalf(source: Inventory, sourceSlot: u32, carried: Inventory) void {\n\tSync.ClientSide.executeCommand(.{.takeHalf = .{.dest = .{.inv = carried, .slot = 0}"}
{"instruction":"Write a Zig function similar to markMainStackRoots from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig","output":"fn markMainStackRoots(vm: *cy.VM) !void {\n    if (vm.c.pc[0].opcode() == .end) {\n        return;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@mulAdd</span>(<span class=\"tok-kw\">comptime</span> T: <span class=\"tok-type\">type</span>, a: T, b: T, c: T) T"}
{"instruction":"Write a Zig function similar to freeObj from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"fn freeObj(self: *GC, obj: *o.Obj) (std.mem.Allocator.Error || std.fmt.BufPrintError)!void {\n    if (BuildOptions.gc_debug) {\n        std.log.info(\n            \">> freeing {}"}
{"instruction":"Write a Zig function similar to buildSetGlobal from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn buildSetGlobal(self: *Self, slot: usize, value: m.MIR_op_t) !void {\n    const ctx_reg = self.state.?.ctx_reg.?;\n    const index = try self.REG(\"index\", m.MIR_T_I64);\n    const globals = try self.REG(\"globals\", m.MIR_T_I64);\n\n    self.MOV(\n        m.MIR_new_reg_op(self.ctx, index),\n        m.MIR_new_uint_op(self.ctx, 0),\n    );\n\n    self.MOV(\n        m.MIR_new_reg_op(self.ctx, globals),\n        m.MIR_new_mem_op(\n            self.ctx,\n            m.MIR_T_U64,\n            @offsetOf(o.NativeCtx, \"globals\"),\n            ctx_reg,\n            index,\n            0,\n        ),\n    );\n\n    self.MOV(\n        m.MIR_new_reg_op(self.ctx, index),\n        m.MIR_new_uint_op(self.ctx, slot),\n    );\n\n    const global = m.MIR_new_mem_op(\n        self.ctx,\n        m.MIR_T_U64,\n        0,\n        globals,\n        index,\n        @sizeOf(u64),\n    );\n\n    self.MOV(global, value);\n}"}
{"instruction":"Write a Zig function similar to set from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn set(instance: *StandaloneModuleGraph) void {\n        Instance.instance = instance;\n    }"}
{"instruction":"Write a Zig function similar to my_function_count from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/call_js_from_zig/main.zig","output":"fn my_function_count(e: *webui.Event) void {\n    // This function gets called every time the user clicks on \"my_function_count\"\n\n    // Create a buffer to hold the response\n    var response = std.mem.zeroes([64]u8);\n\n    const win = e.getWindow();\n\n    // Run JavaScript\n    win.script(\"return GetCount();\", 0, &response) catch {\n        if (!win.isShown()) {\n            std.debug.print(\"window closed\\n\", .{}"}
{"instruction":"Write a Zig function similar to exit from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"pub fn exit(code: u32) noreturn {\n    is_exiting.store(true, .monotonic);\n    _ = @atomicRmw(usize, &bun.analytics.Features.exited, .Add, 1, .monotonic);\n\n    // If we are crashing, allow the crash handler to finish it's work.\n    bun.crash_handler.sleepForeverIfAnotherThreadIsCrashing();\n\n    if (Environment.isDebug) {\n        bun.assert(bun.debug_allocator_data.backing.?.deinit() == .ok);\n        bun.debug_allocator_data.backing = null;\n    }"}
{"instruction":"Write a Zig function similar to checkZero from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"fn checkZero(val: *Value) bool {\n    switch (val.*) {\n        .int => |v| return v == 0,\n        .num => |v| return v == 0,\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig function similar to expectTokens from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"fn expectTokens(input: []const u8, tokens: []const std.meta.Tag(Token)) !void {\n    var tokenizer = Tokenizer{ .input = input }"}
{"instruction":"Write a Zig function similar to grayscale from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/callback/main.zig","output":"pub fn grayscale(rgb: zml.Tensor) zml.Tensor {\n    const gray_shape = rgb.shape().setDim(0, @divExact(rgb.dim(0), 3));\n    const result = zml.callback.call(GrayScale, .{rgb.print()}"}
{"instruction":"Write a Zig function similar to allocType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn allocType(analyser: *Analyser, ty: Type) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to fixedHeader from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BlockWriter.zig","output":"fn fixedHeader(self: *BlockWriter, eof: bool) Error!void {\n    // Indicate that we are a fixed Huffman block\n    var value: u32 = 2;\n    if (eof) {\n        value = 3;\n    }"}
{"instruction":"Write a Zig function similar to superHtmlCheck from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"fn superHtmlCheck(b: *std.Build, html_file: std.Build.LazyPath) *std.Build.Step {\n    const run_superhtml = b.addSystemCommand(&.{\n        \"superhtml\", \"check\",\n    }"}
{"instruction":"Write a Zig struct similar to Feature from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/registry.zig","output":"pub const Feature = struct {\n    name: []const u8,\n    level: FeatureLevel, // from 'number'\n    requires: []Require,\n}"}
{"instruction":"Write a Zig const similar to pn from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/Variant.zig","output":"const pn: PathName = .{ .path = page_url, .name = index_html };"}
{"instruction":"Write a Zig const similar to copy from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"const copy: Value = if (needNum(lhs, rhs)) .{\n                    .num = std.math.pow(f64, asNum(lhs), asNum(rhs)),\n                } else .{\n                    .int = std.math.powi(i64, lhs.int, rhs.int) catch {\n                        try f.throw(vm, \"operation overflowed\");"}
{"instruction":"Write a Zig function similar to strip_glibc_version from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn strip_glibc_version(triple: []const u8) []const u8 {\n    if (std.mem.endsWith(u8, triple, \"gnu.2.27\")) {\n        return triple[0 .. triple.len - \".2.27\".len];\n    }"}
{"instruction":"Write a Zig function similar to timer_next from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn timer_next(self: *Loop, next_ms: u64) posix.timespec {\n        // Get the timestamp of the absolute time that we'll execute this timer.\n        // There are lots of failure scenarios here in math. If we see any\n        // of them we just use the maximum value.\n        const max: posix.timespec = .{\n            .sec = std.math.maxInt(isize),\n            .nsec = std.math.maxInt(isize),\n        }"}
{"instruction":"Write a Zig function similar to parseMultiPartEntry from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"fn parseMultiPartEntry(entry: []const u8) !MultiPartField {\n        var pos: usize = 0;\n        var attributes: ?ContentDispositionAttributes = null;\n\n        while (true) {\n            const end_line_pos = std.mem.indexOfScalarPos(u8, entry, pos, '\\n') orelse return error.InvalidMultiPartEncoding;\n            const line = entry[pos..end_line_pos];\n\n            pos = end_line_pos + 1;\n            if (line.len == 0 or line[line.len - 1] != '\\r') return error.InvalidMultiPartEncoding;\n\n            if (line.len == 1) {\n                break;\n            }"}
{"instruction":"Write a Zig function similar to writeZip from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"fn writeZip(\n    out_zip: std.fs.File,\n    file_entries: []const FileEntry,\n    store: []FileStore,\n) !void {\n    var zipper = initZipper(out_zip.writer());\n    for (file_entries, 0..) |file_entry, i| {\n        const file_offset = zipper.counting_writer.bytes_written;\n\n        const compression: std.zip.CompressionMethod = .deflate;\n\n        try zipper.writeFileHeader(file_entry.path, compression);\n\n        var file = try std.fs.cwd().openFile(file_entry.path, .{}"}
{"instruction":"Write a Zig function similar to sliceToLuvAlphaCopy from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn sliceToLuvAlphaCopy(self: RgbColorspace, allocator: std.mem.Allocator, colors: []const Colorf32) ![]CIELuvAlpha {\n        const slice_luv: []CIELuvAlpha = try allocator.alloc(CIELuvAlpha, colors.len);\n\n        const white_point_xyz = self.white.toXYZ(1.0);\n\n        for (0..colors.len) |index| {\n            const xyza = CIEXYZAlpha.fromFloat4(self.rgba_to_xyza.mulVector(colors[index].to.float4()));\n\n            slice_luv[index] = CIELuvAlpha.fromXYZAlphaPrecomputedWhitePoint(xyza, white_point_xyz);\n        }"}
{"instruction":"Write a Zig const similar to WHITE_CONTRIBUTION from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const WHITE_CONTRIBUTION: u32 = WHITE_SHADE_FACTOR * 255;"}
{"instruction":"Write a Zig function similar to mergeFaces from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"fn mergeFaces(faceVisible: [2][2]bool, mem: []GreedyFaceInfo) []GreedyFaceInfo {\n\tvar faces: usize = 0;\n\tif(faceVisible[0][0]) {\n\t\tif(faceVisible[0][1]) {\n\t\t\tif(faceVisible[1][0] and faceVisible[1][1]) {\n\t\t\t\t// One big face:\n\t\t\t\tmem[faces] = .{.min = .{0, 0}"}
{"instruction":"Write a Zig const similar to offset from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig","output":"const offset: Vec3f = @floatFromInt(@intFromBool(side.relPos() == Vec3i{1, 1, 1}));"}
{"instruction":"Write a Zig const similar to value from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const value: ?InternPool.Index = switch (result) {\n                .float => blk: {\n                    break :blk try analyser.ip.get(\n                        analyser.gpa,\n                        .{ .float_comptime_value = std.fmt.parseFloat(f128, bytes) catch break :blk null },\n                    );"}
{"instruction":"Write a Zig function similar to hid_collection_end from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub fn hid_collection_end() [1]u8 {\n    return hid_report_item(\n        0,\n        @intFromEnum(ReportItemTypes.Main),\n        @intFromEnum(ReportItemMainGroup.CollectionEnd),\n        .{}"}
{"instruction":"Write a Zig function similar to reply_receiver from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn reply_receiver(self: *UDP) void {\n        defer co.terminate(@frame(), @frameSize(reply_receiver));\n\n        defer self.free();\n\n        var free_rmsg: ?*RcMsg = null;\n        defer if (free_rmsg) |rmsg| rmsg.free();\n\n        while (true) {\n            const rmsg = free_rmsg orelse RcMsg.new(c.DNS_EDNS_MAXSIZE);\n            free_rmsg = null;\n\n            defer {\n                if (rmsg.is_unique())\n                    free_rmsg = rmsg\n                else\n                    rmsg.unref();\n            }"}
{"instruction":"Write a Zig const similar to script_z from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/js_execution/main.zig","output":"const script_z: [:0]const u8 = null_terminated_script[0..script.len :0];"}
{"instruction":"Write a Zig function similar to generateFunDeclaration from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateFunDeclaration(self: *Self, node: Ast.Node.Index) Error!?m.MIR_op_t {\n    return try self.generateFunction(\n        self.state.?.ast.nodes.items(.components)[node].FunDeclaration.function,\n    );\n}"}
{"instruction":"Write a Zig function similar to save from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/png.zig","output":"pub fn save(img: Image, writer: *std.Io.Writer) !void {\n    const ctx = c.spng_ctx_new(c.SPNG_CTX_ENCODER) orelse return error.OutOfMemory;\n    defer c.spng_ctx_free(ctx);\n\n    var ihdr = c.spng_ihdr{\n        .width = img.width,\n        .height = img.height,\n        .bit_depth = 8,\n        .color_type = c.SPNG_COLOR_TYPE_TRUECOLOR_ALPHA,\n        .compression_method = 0,\n        .filter_method = c.SPNG_FILTER_NONE,\n        .interlace_method = c.SPNG_INTERLACE_NONE,\n    }"}
{"instruction":"Write a Zig function similar to deinit from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"pub fn deinit() void {\n\thandleError(c.ma_device_stop(&device)) catch {}"}
{"instruction":"Write a Zig function similar to isFaulted from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn isFaulted(self: Self, sock: Socket) bool {\n        return self.internal.isFaulted(sock);\n    }"}
{"instruction":"Write a Zig const similar to MEMORY_BLOCK_SIZE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/arch.zig","output":"pub const MEMORY_BLOCK_SIZE: usize = paging.PAGE_SIZE_4KB;"}
{"instruction":"Write a Zig function similar to as from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/conversions.zig","output":"fn as(comptime root: type, comptime T: type, obj: anytype) py.PyError!T {\n    return tramp.Trampoline(root, T).unwrap(object(root, obj));\n}"}
{"instruction":"Write a Zig function similar to process_cancellations from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn process_cancellations(self: *Loop) void {\n        while (self.cancellations.pop()) |c| {\n            const target = c.op.cancel.c;\n            switch (target.flags.state) {\n                // If the target is dead already we do nothing.\n                .dead => {}"}
{"instruction":"Write a Zig const similar to res from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig","output":"const res: main.models.QuadInfo = .{\n\t\t.corners = .{\n\t\t\tcorners3d[0] + offset,\n\t\t\tcorners3d[1] + offset,\n\t\t\tcorners3d[2] + offset,\n\t\t\tcorners3d[3] + offset,\n\t\t},\n\t\t.cornerUV = .{corners[0], corners[1], corners[2], corners[3]},\n\t\t.normal = @as(Vec3f, @floatFromInt(side.relPos())),\n\t\t.textureSlot = @intFromEnum(pattern),\n\t};"}
{"instruction":"Write a Zig function similar to AutoStaticHashMap from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn AutoStaticHashMap(comptime K: type, comptime V: type, comptime capacity: comptime_int) type {\n    return StaticHashMap(K, V, std.hash_map.AutoContext(K), capacity);\n}"}
{"instruction":"Write a Zig function similar to slice from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn slice(self: Self) Slice {\n            var result: Slice = .{\n                .ptrs = undefined,\n                .len = self.len,\n                .capacity = self.capacity,\n            }"}
{"instruction":"Write a Zig struct similar to LocationHint from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/Variant.zig","output":"pub const LocationHint = struct {\n    id: u32, // index into pages\n    kind: union(ResourceKind) {\n        page_main,\n        page_alias,\n        page_alternative: []const u8,\n        // for page assets, 'id' is the page that owns the asset\n        page_asset: std.atomic.Value(u32), // reference counting\n    }"}
{"instruction":"Write a Zig const similar to indexEndY from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"const indexEndY: i32 = @min(@as(i32, chunk.super.width) - pos[1], @as(i32, @intCast(self.blocks.depth)));"}
{"instruction":"Write a Zig function similar to deinit from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn deinit(self: *Self, gpa: Allocator) void {\n            gpa.free(self.allocatedBytes());\n            self.* = undefined;\n        }"}
{"instruction":"Write Zig 0.14.1 code for: union §","input":"A bare union defines a set of possible types that a value can be as a list of fields. Only one field can be active at a time. The in-memory representation of bare unions is not guaranteed. Bare unions cannot be used to reinterpret memory. For that, use @ptrCast , or use an extern union or a packed union which have guaranteed in-memory layout. Accessing the non-active field is safety-checked Illegal Behavior : test_wrong_union_access.zig Shell You can activate another field by assigning the entir","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">const</span> ComplexTypeTag = <span class=\"tok-kw\">enum</span> {\n    ok,\n    not_ok,\n};\n<span class=\"tok-kw\">const</span> ComplexType = <span class=\"tok-kw\">union</span>(ComplexTypeTag) {\n    ok: <span class=\"tok-type\">u8</span>,\n    not_ok: <span class=\"tok-type\">void</span>,\n};\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"switch on tagged union\"</span> {\n    <span class=\"tok-kw\">const</span> c = ComplexType{ .ok = <span class=\"tok-number\">42</span> };\n    <span class=\"tok-kw\">try</span> expect(<span class=\"tok-builtin\">@as</span>(ComplexTypeTag, c) == ComplexTypeTag.ok);\n\n    <span class=\"tok-kw\">switch</span> (c) {\n        .ok => |value| <span class=\"tok-kw\">try</span> expect(value == <span class=\"tok-number\">42</span>),\n        .not_ok => <span class=\"tok-kw\">unreachable</span>,\n    }\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"get tag type\"</span> {\n    <span class=\"tok-kw\">try</span> expect(std.meta.Tag(ComplexType) == ComplexTypeTag);\n}"}
{"instruction":"Write a Zig function similar to normalizePath from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn normalizePath(comp: *Compilation, path: []u8) void {\n    if (comp.langopts.ms_extensions and @import(\"builtin\").target.os.tag != .windows) {\n        std.mem.replaceScalar(u8, path, std.fs.path.sep_windows, std.fs.path.sep_posix);\n    }"}
{"instruction":"Write a Zig const similar to hints from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const hints: posix.addrinfo = .{\n            .flags = .{ .NUMERICSERV = true },\n            .family = posix.AF.UNSPEC,\n            .socktype = posix.SOCK.STREAM,\n            .protocol = posix.IPPROTO.TCP,\n            .canonname = null,\n            .addr = null,\n            .addrlen = 0,\n            .next = null,\n        };"}
{"instruction":"Write a Zig function similar to debug from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn debug(ast: Ast, src: []const u8) void {\n    var c = ast.cursor(0);\n    var last_depth: u32 = 0;\n    std.debug.print(\" \\n node count: {}"}
{"instruction":"Write a Zig function similar to __richcompare__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __richcompare__(self: *const Self, other: *const Self, op: py.CompareOp) bool {\n        return switch (op) {\n            .LT => self.num < other.num,\n            .LE => self.num <= other.num,\n            .EQ => self.num == other.num,\n            .NE => self.num != other.num,\n            .GT => self.num > other.num,\n            .GE => self.num >= other.num,\n        }"}
{"instruction":"Write a Zig const similar to ICW1_LEVEL_TRIGGER_MODE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const ICW1_LEVEL_TRIGGER_MODE: u8 = 0x08;"}
{"instruction":"Write a Zig function similar to defaultDispatcher from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn defaultDispatcher(action: ActionArg, req: *Request, res: *Response) !void {\n            return action(req, res);\n        }"}
{"instruction":"Write a Zig function similar to consume from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"fn consume(noalias self: *Buffer, noalias queue: *Queue) ?Stole {\n            var consumer = queue.tryAcquireConsumer() catch return null;\n            defer queue.releaseConsumer(consumer);\n\n            const head = self.head.load(.monotonic);\n            const tail = self.tail.raw; // we're the only thread that can change this\n\n            const size = tail -% head;\n            assert(size <= capacity);\n            assert(size == 0); // we should only be consuming if our array is empty\n\n            // Pop nodes from the queue and push them to our array.\n            // Atomic stores to the array as steal() threads may be atomically reading from it.\n            var pushed: Index = 0;\n            while (pushed < capacity) : (pushed += 1) {\n                const node = queue.pop(&consumer) orelse break;\n                self.array[(tail +% pushed) % capacity].store(node, .unordered);\n            }"}
{"instruction":"Write a Zig function similar to fmt from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn fmt(index: Index, ip: *InternPool) std.fmt.Alt(FormatContext, format) {\n        return fmtOptions(index, ip, .{}"}
{"instruction":"Write a Zig function similar to destroy from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn destroy(self: *ZVM) void {\n        c.clDestroy(@ptrCast(self));\n    }"}
{"instruction":"Write a Zig const similar to start from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"const start: usize = while (i < children.len) : (i += 1) {\n        const child_loc = children[i];"}
{"instruction":"Write a Zig function similar to len from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"fn len(self: Self) usize {\n            switch (self.state()) {\n                .empty => return 0,\n                .one => return 1,\n                .many => {\n                    const head = self.head.?;\n                    const tail = self.tail.?;\n                    if (tail > head) {\n                        return tail - head + 1;\n                    }"}
{"instruction":"Write a Zig function similar to my_function_raw_binary from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/call_zig_from_js/main.zig","output":"fn my_function_raw_binary(e: *webui.Event) void {\n    // JavaScript:\n    // my_function_raw_binary(new Uint8Array([0x41]), new Uint8Array([0x42, 0x43]));\n\n    // Or e.getStringAt(0);\n    const raw_1 = e.getString();\n    const raw_2 = e.getRawAt(1);\n\n    // Or e.getSizeAt(0);\n    const len_1 = e.getSize() catch return;\n    const len_2 = e.getSizeAt(1) catch return;\n\n    // Print raw_1\n    std.debug.print(\"my_function_raw_binary 1 ({}"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/2d_camera.zig","output":"pub fn main() anyerror!void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const screenWidth = 800;\n    const screenHeight = 450;\n\n    rl.initWindow(screenWidth, screenHeight, \"raylib-zig [core] example - 2d camera\");\n    defer rl.closeWindow(); // Close window and OpenGL context\n\n    var player = rl.Rectangle{ .x = 400, .y = 280, .width = 40, .height = 40 }"}
{"instruction":"Write a Zig const similar to tone_distance from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/gen.zig","output":"const tone_distance: f32 = @floatFromInt(self.config.scale[sample % self.config.scale.len]);"}
{"instruction":"Write a Zig function similar to skipWhitespace from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/parser.zig","output":"fn skipWhitespace(p: *Parser) bool {\n        var i = p.i;\n        while (i < p.s.len) {\n            const c = p.s[i];\n            // Whitespaces.\n            if (ascii.isWhitespace(c)) {\n                i += 1;\n                continue;\n            }"}
{"instruction":"Write a Zig const similar to command from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/ci.zig","output":"const command: []const u8 = \"dotnet add package tigerbeetle --version {version}\";"}
{"instruction":"Write a Zig function similar to ownsPtr from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"pub fn ownsPtr(self: Borrowed, ptr: *const anyopaque) bool {\n        return mimalloc.mi_heap_check_owned(self.getMimallocHeap(), ptr);\n    }"}
{"instruction":"Write a Zig function similar to invalid from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/View.zig","output":"fn invalid() Self {\n    return .{\n        .row = std.math.maxInt(u32),\n        .col = std.math.maxInt(u32),\n    }"}
{"instruction":"Write a Zig function similar to genImport from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genImport(c: *Compiler, node: Node.Index) Error!Value {\n    const data = c.tree.nodes.items(.data);\n    const operand = data[node].un;\n    const str_val = try c.genNode(operand, .value);\n    if (!str_val.isRt() and str_val != .str) {\n        return c.reportErr(\"expected a string\", operand);\n    }"}
{"instruction":"Write a Zig function similar to next from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/node.zig","output":"pub fn next(self: *QuerySelectorIterator) ?*Element {\n            while (self.descendants.next()) |node| {\n                if (node.element()) |el| {\n                    if (el.matches(self.selector)) return el;\n                }"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"pub fn init(kv_shape: zml.Shape) KvCache {\n        // The KV-cache is initialized with ones to detect reads of uninitialized memory.\n        return .{\n            .k = Tensor.constant(kv_shape, kv_shape.dtype().one()).withSharding(.{.h}"}
{"instruction":"Write a Zig const similar to a_ty from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const a_ty: Type = .{ .data = a.type_data, .is_type_val = true };"}
{"instruction":"Write a Zig function similar to deinit from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/StringTable.zig","output":"pub fn deinit(st: *const StringTable, gpa: Allocator) void {\n    var sb = st.string_bytes;\n    sb.deinit(gpa);\n\n    var sm = st.string_map;\n    sm.deinit(gpa);\n}"}
{"instruction":"Write a Zig function similar to desc_mode from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn desc_mode(mode: ?BuildMode) []const u8 {\n    const res = @tagName(to_mode_opt(mode orelse _mode));\n    return if (_lto) fmt(\"{s}"}
{"instruction":"Write a Zig function similar to compileRepl from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"pub fn compileRepl(repl: *@import(\"repl.zig\").Repl, node: Node.Index) Compiler.Error!void {\n    if (repl.compiler.instructions.len == 0) {\n        try repl.compiler.instructions.append(repl.compiler.gpa, .{ .op = .ret, .data = undefined }"}
{"instruction":"Write a Zig function similar to pushCall from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushCall(c: *cy.Chunk, ret: u8, numArgs: u32, numRet: u8, node: *ast.Node) !void {\n    try c.pushFCode(.call, &.{ret, @as(u8, @intCast(numArgs)), numRet}"}
{"instruction":"Write a Zig function similar to reader from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn reader(file: File, buffer: []u8) Reader {\n            return .{\n                .file = file,\n                .interface = .{\n                    .vtable = &.{\n                        .stream = stream,\n                    }"}
{"instruction":"Write a Zig struct similar to Lib from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"const Lib = struct {\n            path: ?[]const u8 = null,\n            name: []const u8,\n            wasm_compatible: bool = true,\n        }"}
{"instruction":"Write a Zig function similar to decode from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/lzw.zig","output":"pub fn decode(self: *Self, reader: *std.Io.Reader, writer: *std.Io.Writer) !void {\n            var bit_reader: io.BitReader(endian) = .{\n                .reader = reader,\n            }"}
{"instruction":"Write a Zig function similar to initShape from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn initShape(kv_shape: zml.Shape) zml.ShapeOf(KvCache) {\n        return .{\n            .k = kv_shape,\n            .v = kv_shape,\n            .layer_index = zml.Shape.init(.{}"}
{"instruction":"Write a Zig function similar to file from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"pub fn file(b: *std.Build, options: struct {\n        generator: *std.Build.Step.Compile,\n        path: []const u8,\n    }) *Generated {\n        return create(b, options.path, .{\n            .file = options.generator,\n        }"}
{"instruction":"Write a Zig function similar to deinit from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/renderer.zig","output":"pub fn deinit(self: *Renderer) void {\n        self.vg.deinit();\n    }"}
{"instruction":"Write a Zig function similar to hash32 from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn hash32(key: Key, ip: *InternPool) u32 {\n        return @truncate(key.hash64(ip));\n    }"}
{"instruction":"Write a Zig function similar to parseEnum from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/parser.zig","output":"pub fn parseEnum(self: *Parser, comptime T: type) !T {\n        const ident = try self.expect(.ident);\n\n        inline for (std.meta.fields(T)) |f| {\n            if (std.mem.eql(u8, cssName(f.name), ident)) {\n                return @enumFromInt(f.value);\n            }"}
{"instruction":"Write a Zig function similar to addPackage from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub fn addPackage(vm: *Vm, name: []const u8, comptime importable: anytype) Allocator.Error!void {\n    try vm.imports.putNoClobber(vm.gc.gpa, name, struct {\n        fn func(ctx: Context) Vm.Error!*bog.Value {\n            if (@typeInfo(@TypeOf(importable)) == .@\"fn\") {\n                return bog.Value.zigFnToBog(ctx.vm, importable);\n            }"}
{"instruction":"Write a Zig function similar to prepareTensorInputs from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/main.zig","output":"fn prepareTensorInputs(\n    allocator: std.mem.Allocator,\n    tokens: []const u32,\n    seq_len: i64,\n    pad_token: u32,\n) ![]u32 {\n    const input_ids = try allocator.alloc(u32, @intCast(seq_len));\n\n    @memset(input_ids, pad_token);\n    for (tokens, 0..) |token, i| {\n        input_ids[i] = @intCast(token);\n    }"}
{"instruction":"Write a Zig function similar to getColorIndex from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/OctTreeQuantizer.zig","output":"fn getColorIndex(source_color: anytype, level: i32) usize {\n        const color_value = anyColorToRgb24(source_color);\n\n        var index: usize = 0;\n        const mask = @as(u8, 0b10000000) >> @intCast(level);\n        if (color_value.r & mask != 0) {\n            index |= 0b100;\n        }"}
{"instruction":"Explain Hello World § in Zig 0.15.1","input":"","output":"hello.zig Shell Most of the time, it is more appropriate to write to stderr rather than stdout, and whether or not the message is successfully written to the stream is irrelevant. Also, formatted printing often comes in handy. For this common case, there is a simpler API: hello_again.zig Shell In this case, the ! may be omitted from the return type of main because no errors are returned from the function. See also: Values Tuples @import Errors Entry Point Source Encoding try"}
{"instruction":"Write a Zig const similar to INV_SHADE_VEC from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const INV_SHADE_VEC: @Vector(SIMD_SIZE, u32) = @splat(INV_SHADE_FACTOR);"}
{"instruction":"Write a Zig struct similar to StartOptions from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dragging.zig","output":"pub const StartOptions = struct {\n    /// Use this cursor from when a drag starts to when it ends.\n    cursor: ?dvui.enums.Cursor = null,\n\n    /// Offset of point of interest from the mouse.  Useful during a drag to\n    /// locate where to move the point of interest.\n    offset: Point.Physical = .{}"}
{"instruction":"Write a Zig function similar to toggle from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig","output":"fn toggle() void {\n            if (comptime @hasDecl(hal.gpio, \"toggle\")) {\n                hal.gpio.toggle(pin.source_pin);\n            }"}
{"instruction":"Write a Zig function similar to rtcHandler from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/rtc.zig","output":"fn rtcHandler(ctx: *arch.CpuState) usize {\n    ticks +%= 1;\n\n    var ret_esp: usize = undefined;\n\n    // Call the scheduler\n    if (schedule) {\n        ret_esp = scheduler.pickNextTask(ctx);\n    }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn forward(self: ModernBertPredictionHead, hidden_states: Tensor) Tensor {\n        const dense_output: Tensor = zml.call(self.dense, .forward, .{hidden_states}"}
{"instruction":"Write a Zig function similar to init from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BitWriter.zig","output":"pub fn init(writer: *std.Io.Writer) BitWriter {\n    return .{ .inner_writer = writer }"}
{"instruction":"Write a Zig function similar to generateString from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateString(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const location = self.ast.nodes.items(.location)[node];\n    const type_defs = self.ast.nodes.items(.type_def);\n    const elements = self.ast.nodes.items(.components)[node].String;\n\n    if (elements.len == 0) {\n        // Push the empty string which is always the constant 0\n        try self.emitCodeArg(location, .OP_CONSTANT, 0);\n\n        try self.endScope(node);\n\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to unmask from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/main.zig","output":"pub fn unmask(\n    allocator: std.mem.Allocator,\n    mod: zml.ModuleExe(modernbert.ModernBertForMaskedLM.forward),\n    tokenizer: zml.tokenizer.Tokenizer,\n    seq_len: i64,\n    text: []const u8,\n) !void {\n    var tokenizer_decoder = try tokenizer.decoder();\n    defer tokenizer_decoder.deinit();\n\n    const pad_token = tokenizer.tokenToId(\"[PAD]\") orelse return error.NoSuchToken;\n    const mask_token = tokenizer.tokenToId(\"[MASK]\") orelse return error.NoSuchToken;\n\n    // Tokenize input text\n    const tokens: []const u32 = try tokenize(allocator, tokenizer, text);\n    defer allocator.free(tokens);\n\n    // Find \"[MASK]\" positions\n    const mask_positions = try findMaskPositions(allocator, tokens, mask_token);\n    defer allocator.free(mask_positions);\n\n    // Prepare input tensors\n    const inputs = try prepareTensorInputs(allocator, tokens, seq_len, pad_token);\n    defer allocator.free(inputs);\n\n    // Create input tensors (on the accelerator)\n    const input_shape = zml.Shape.init(.{ .b = 1, .s = seq_len }"}
{"instruction":"Write a Zig function similar to renderSimpleBitContainer from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderSimpleBitContainer(self: *Self, container: reg.Container) !bool {\n        var total_bits: usize = 0;\n        var is_flags_container = true;\n        for (container.fields) |field| {\n            const bits = field.bits orelse {\n                // C abi type - not a packed struct.\n                return false;\n            }"}
{"instruction":"Write a Zig function similar to completeFunc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn completeFunc(c: *cy.Compiler, id: u32, func: *cy.Func, sym: rt.FuncSymbol) void {\n    log.tracev(\"complete func gen: {s}"}
{"instruction":"Write a Zig function similar to init from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"pub fn init() Self {\n    const mimalloc_heap = mimalloc.mi_heap_new() orelse bun.outOfMemory();\n    if (comptime !safety_checks) return .{ .#heap = mimalloc_heap }"}
{"instruction":"Write a Zig function similar to match from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/libdom.zig","output":"pub fn match(m: *MatcherTest, n: Node) !void {\n        try m.nodes.append(m.allocator, n);\n    }"}
{"instruction":"Write a Zig function similar to findMatchingRBrace from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"fn findMatchingRBrace(tree: Ast, start: Ast.TokenIndex) ?Ast.TokenIndex {\n    return if (std.mem.indexOfScalarPos(std.zig.Token.Tag, tree.tokens.items(.tag), start, .r_brace)) |index| @intCast(index) else null;\n}"}
{"instruction":"Write a Zig function similar to genFloat from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genFloat(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .float);\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Float, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }"}
{"instruction":"Write a Zig function similar to deleteFile from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: build.zig","output":"fn deleteFile(\n    allocator: std.mem.Allocator,\n    prefix: []const u8,\n    file: []const u8,\n    warning: []const u8,\n) !void {\n    const path = try std.fs.path.join(allocator, &[_][]const u8{ dest_directory, prefix, file }"}
{"instruction":"Write a Zig function similar to walker from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"fn walker(ctx_: *anyopaque, egc: []const u8, wcwidth: usize, _: Metrics) Walker {\n                const ctx = @as(*@This(), @ptrCast(@alignCast(ctx_)));\n                if (ctx.col < ctx.sel.begin.col) {\n                    ctx.col += wcwidth;\n                    return Walker.keep_walking;\n                }"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn decode(decoder: *Decoder) Decoder.Error!@This() {\n            const channel_max = try decoder.read_int(u16);\n            const frame_max = try decoder.read_int(u32);\n            const heartbeat = try decoder.read_int(u16);\n\n            return .{\n                .channel_max = channel_max,\n                .frame_max = frame_max,\n                .heartbeat = heartbeat,\n            }"}
{"instruction":"Write a Zig function similar to isIndexExtended from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn isIndexExtended(op: Operand) bool {\n            return switch (op) {\n                .none, .reg, .imm => false,\n                .mem => |mem| if (mem.scaleIndex()) |si| si.index.isExtended() else false,\n            }"}
{"instruction":"Write a Zig function similar to EQS from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn EQS(self: *Self, dest: m.MIR_op_t, left: m.MIR_op_t, right: m.MIR_op_t) void {\n    self.append(\n        m.MIR_new_insn_arr(\n            self.ctx,\n            @intFromEnum(m.MIR_Instruction.EQS),\n            3,\n            &[_]m.MIR_op_t{\n                dest,\n                left,\n                right,\n            }"}
{"instruction":"Write a Zig function similar to init from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/config/SavedUsers.zig","output":"pub fn init() SavedUsers {\n    return .{\n        .user_list = .empty,\n        .last_username_index = null,\n    }"}
{"instruction":"Write a Zig function similar to alloc from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/buffer.zig","output":"pub fn alloc(self: *Pool, size: usize) !Buffer {\n        return self.allocType(self.allocator, .dynamic, size);\n    }"}
{"instruction":"Write a Zig function similar to OP_RETURN from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_RETURN(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_RETURN);\n}"}
{"instruction":"Write a Zig function similar to parse from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn parse(table: ?amqp.Decoder.Table) amqp.Decoder.Error!ProgressTrackerMessage {\n        if (table) |headers| {\n            var timestamp: ?u64 = null;\n            var release: ?vsr.Release = null;\n\n            // Intentionally allows the presence of header fields other than `timestamp`,\n            // since some plugin may insert additional headers into messages.\n            var iterator = headers.iterator();\n            while (try iterator.next()) |entry| {\n                if (std.mem.eql(u8, entry.key, \"timestamp\")) {\n                    switch (entry.value) {\n                        .int64 => |int64| {\n                            const value: u64 = @intCast(int64);\n                            if (!TimestampRange.valid(value)) break;\n                            timestamp = value;\n                        }"}
{"instruction":"Write a Zig const similar to result from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const result: std.json.Value = switch (json) {\n        .array => |arr| blk: {\n            if (arr.items.len != 1) {\n                log.err(\"Response to 'workspace/configuration' expects an array of size 1 but received {d}\", .{arr.items.len});"}
{"instruction":"Write a Zig function similar to get from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Tree.zig","output":"pub fn get(tree: Tree, node: Node.Index) While {\n        const tokens = tree.nodes.items(.token);\n        var while_expr: While = undefined;\n        while_expr.while_tok = tokens[node];\n\n        const data = tree.nodes.items(.data);\n        if (tree.nodes.items(.id)[node] == .while_let_expr) {\n            while_expr.let_tok = tree.nextToken(tokens[node]);\n            while_expr.capture = tree.extra[data[node].cond.extra];\n            while_expr.eq_tok = tree.nextToken(tree.lastToken(while_expr.capture.?));\n            while_expr.cond = data[node].cond.cond;\n            while_expr.body = tree.extra[data[node].cond.extra + 1];\n        }"}
{"instruction":"Write a Zig struct similar to Handle from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"pub const Handle = struct {\n    uri: Uri,\n    tree: Ast,\n    /// Contains one entry for every cimport in the document\n    cimports: std.MultiArrayList(CImportHandle),\n\n    /// private field\n    impl: struct {\n        /// @bitCast from/to `Status`\n        status: std.atomic.Value(u32),\n        /// TODO can we avoid storing one allocator per Handle?\n        allocator: std.mem.Allocator,\n\n        lock: std.Thread.Mutex = .{}"}
{"instruction":"Write a Zig const similar to source from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const source: Source = switch(sourceType) {\n\t\t\t\t.playerInventory => .{.playerInventory = try reader.readInt(u32)},\n\t\t\t\t.hand => .{.hand = try reader.readInt(u32)},\n\t\t\t\t.recipe => .{\n\t\t\t\t\t.recipe = blk: {\n\t\t\t\t\t\tvar itemList = main.List(struct {amount: u16, item: BaseItemIndex}).initCapacity(main.stackAllocator, len);"}
{"instruction":"Write a Zig function similar to update from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn update(self: *Self, root: Root) void {\n    self.root = root;\n    self.mtime = std.time.milliTimestamp();\n}"}
{"instruction":"Write a Zig function similar to premultipliedAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn premultipliedAlpha(to: *const To) T {\n            const self = to.getSelf();\n            var res = self.*;\n            if (!has_alpha) return res;\n\n            const alpha = if (@typeInfo(AlphaT) == .int)\n                toF32(res.a)\n            else\n                res.a;\n\n            res.r = if (@typeInfo(RedT) == .int)\n                scaleRed(toF32(res.r) * alpha)\n            else\n                res.r * alpha;\n\n            res.g = if (@typeInfo(GreenT) == .int)\n                scaleGreen(toF32(res.g) * alpha)\n            else\n                res.g * alpha;\n\n            res.b = if (@typeInfo(BlueT) == .int)\n                scaleBlue(toF32(res.b) * alpha)\n            else\n                res.b * alpha;\n\n            return res;\n        }"}
{"instruction":"Write a Zig function similar to peek from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"fn peek(self: *XmlCTokenizer) !?Token {\n        if (self.current) |current| {\n            return current;\n        }"}
{"instruction":"Write a Zig struct similar to Config from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub const Config = struct {\n    /// The target speed in bit/s. Note that the actual speed can differ from this, due to prescaler rounding.\n    target_speed: u32,\n}"}
{"instruction":"Write a Zig function similar to renderTarget from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn renderTarget(self: Backend, texture: ?dvui.TextureTarget) GenericError!void {\n    return self.impl.renderTarget(texture);\n}"}
{"instruction":"Write a Zig function similar to generate from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"pub fn generate(comptime Bundler: type, _: Bundler, allocator: std.mem.Allocator) !JSAst.Expr {\n        const info = BunInfo{\n            .bun_version = Global.package_json_version,\n            .platform = analytics.GenerateHeader.GeneratePlatform.forOS(),\n        }"}
{"instruction":"Write a Zig function similar to matchOpEqual from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn matchOpEqual(self: *Self) !bool {\n    return try self.match(.Equal) or\n        try self.match(.PlusEqual) or\n        try self.match(.MinusEqual) or\n        try self.match(.StarEqual) or\n        try self.match(.SlashEqual) or\n        try self.match(.ShiftRightEqual) or\n        try self.match(.ShiftLeftEqual) or\n        try self.match(.XorEqual) or\n        try self.match(.BorEqual) or\n        try self.match(.BnotEqual) or\n        try self.match(.AmpersandEqual) or\n        try self.match(.PercentEqual);\n}"}
{"instruction":"Write a Zig function similar to ring from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/common.zig","output":"pub fn ring(self: Self) []volatile UsedRingEntry {\n        @setRuntimeSafety(false);\n        const offset = 2 * @sizeOf(u16);\n        return @as([*]volatile UsedRingEntry, @ptrCast(@alignCast(&self.data[offset])))[0..self.queue_size];\n    }"}
{"instruction":"Write a Zig const similar to FunT from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"const FunT: type = *const fn (T, ctx: Context) Result;"}
{"instruction":"Write a Zig const similar to col from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/dvui.zig","output":"const col: dvui.Color = if (options.vertical_fade) dvui.Color.white.opacity(0.5 * (1.0 - (1.0 - t))) else .white;"}
{"instruction":"Write a Zig function similar to logRun from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn logRun(allocator: Allocator, argv: []const []const u8) !void {\n    var buffer = try allocator.alloc(u8, getCommandStringLength(argv));\n    defer allocator.free(buffer);\n\n    var prefix = false;\n    var offset: usize = 0;\n    for (argv) |arg| {\n        if (prefix) {\n            buffer[offset] = ' ';\n            offset += 1;\n        }"}
{"instruction":"Write a Zig function similar to parseWith from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"pub fn parseWith(parser: *Parser) !Self {\n            var res = Self.init(parser.allocator);\n\n            while (parser.expect(.ident) catch null) |prop_name| {\n                try parser.expect(.colon);\n\n                const val_start = parser.tokenizer.pos;\n                while (parser.tokenizer.next() catch null) |t2| if (t2 == .semi or t2 == .rcurly) break;\n\n                res.setProperty(prop_name, parser.tokenizer.input[val_start..parser.tokenizer.pos]) catch continue;\n            }"}
{"instruction":"Write a Zig function similar to send_lsp_init_request from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn send_lsp_init_request(self: *Self, lsp: *const LSP, project_path: []const u8, project_basename: []const u8, project_uri: []const u8, language_server: []const u8) !void {\n    const handler: struct {\n        language_server: []const u8,\n        lsp: LSP,\n        project: *Self,\n\n        pub fn deinit(self_: *@This()) void {\n            self_.lsp.pid.deinit();\n            std.heap.c_allocator.free(self_.language_server);\n        }"}
{"instruction":"Write a Zig function similar to init from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn init(b: *Builder, user_config: ?UserConfig, toolchains: ToolchainVersions) *Sdk {\n    const actual_user_config_err = user_config orelse auto_detect.findUserConfig(b, toolchains);\n    const actual_user_config = actual_user_config_err catch |err| @panic(@errorName(err));\n    // const actual_user_config = user_config orelse auto_detect.findUserConfig(b, toolchains) catch |err| @panic(@errorName(err));\n\n    const system_tools = blk: {\n        const exe = if (builtin.os.tag == .windows) \".exe\" else \"\";\n        const bat = if (builtin.os.tag == .windows) \".bat\" else \"\";\n\n        const zipalign = std.fs.path.join(b.allocator, &[_][]const u8{ actual_user_config.android_sdk_root, \"build-tools\", toolchains.build_tools_version, \"zipalign\" ++ exe }"}
{"instruction":"Write a Zig function similar to deinit from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn deinit(self: *WindowsCommandLineCache) void {\n        if (self.cmd_line) |cmd_line| self.allocator.free(cmd_line);\n        if (self.script_cmd_line) |script_cmd_line| self.allocator.free(script_cmd_line);\n        if (self.cmd_exe_path) |cmd_exe_path| self.allocator.free(cmd_exe_path);\n    }"}
{"instruction":"Write a Zig function similar to get_state from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn get_state(self: *const Fd) State {\n        return .{\n            .read = self.read_frame != null,\n            .write = self.write_frame != null,\n        }"}
{"instruction":"Write a Zig function similar to parseStrExtra from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn parseStrExtra(c: *Compiler, tok: TokenIndex, slice: []const u8, buf: []u8) !usize {\n    var slice_i: u32 = 0;\n    var i: u32 = 0;\n    while (slice_i < slice.len) : (slice_i += 1) {\n        const char = slice[slice_i];\n        switch (char) {\n            '\\\\' => {\n                slice_i += 1;\n                buf[i] = switch (slice[slice_i]) {\n                    '\\\\' => '\\\\',\n                    'n' => '\\n',\n                    'r' => '\\r',\n                    't' => '\\t',\n                    '\\'' => '\\'',\n                    '\"' => '\"',\n                    'x' => {\n                        // validated by tokenizer\n                        buf[i] = std.fmt.parseInt(u8, slice[slice_i + 1 ..][0..2], 16) catch unreachable;\n                        i += 1;\n                        slice_i += 3;\n                        continue;\n                    }"}
{"instruction":"Write a Zig function similar to run from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/commands/database/drop.zig","output":"pub fn run(\n    allocator: std.mem.Allocator,\n    cwd: std.fs.Dir,\n    args: []const []const u8,\n    options: cli.database.Options,\n    T: type,\n    main_options: T,\n) !void {\n    _ = cwd;\n    _ = options;\n    if (main_options.options.help or args.len != 0) {\n        std.debug.print(\n            \\\\Drop database.\n            \\\\\n            \\\\Example:\n            \\\\\n            \\\\  jetzig database drop\n            \\\\  jetzig --environment=testing database drop\n            \\\\\n            \\\\To drop a production database, set the environment variable `{s}"}
{"instruction":"Write a Zig function similar to build from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: build.zig","output":"pub fn build(b: *std.Build) void {\n    const optimize = b.standardOptimizeOption(.{}"}
{"instruction":"Write a Zig const similar to scaleAlpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const scaleAlpha: if (has_alpha) fn (anytype) AlphaT else void =\n    //     if (has_alpha)\n    //         ScaleValue(AlphaT)\n    //     else {};"}
{"instruction":"Write a Zig struct similar to DeviceConfig from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig","output":"pub const DeviceConfig = struct {\n    // TODO: add common options, like clock polarity and phase, and CS polarity\n}"}
{"instruction":"Write a Zig function similar to nanoTime from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn nanoTime(self: Backend) i128 {\n    return self.impl.nanoTime();\n}"}
{"instruction":"Write a Zig function similar to initMem from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/arch.zig","output":"pub fn initMem(mb_info: BootPayload) Allocator.Error!MemProfile {\n    log.info(\"Init\\n\", .{}"}
{"instruction":"Write a Zig function similar to OP_RESOLVE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_RESOLVE(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_RESOLVE);\n}"}
{"instruction":"Write a Zig struct similar to registry_listener from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"const registry_listener = struct {\n    fn registryHandleGlobal(window_id: mach.ObjectID, registry: ?*c.struct_wl_registry, name: u32, interface_ptr: [*:0]const u8, version: u32) callconv(.C) void {\n        const interface = std.mem.span(interface_ptr);\n        var core_window = core_ptr.windows.getValue(window_id);\n        const wl = &core_window.native.?.wayland;\n\n        if (std.mem.eql(u8, \"wl_compositor\", interface)) {\n            wl.interfaces.wl_compositor = @ptrCast(c.wl_registry_bind(\n                registry,\n                name,\n                libwaylandclient.?.wl_compositor_interface,\n                @min(3, version),\n            ) orelse @panic(\"uh idk how to proceed\"));\n        }"}
{"instruction":"Write a Zig function similar to zErrFunc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn zErrFunc(comptime f: fn (vm: *cy.VM) anyerror!Value) cy.ZHostFuncFn {\n    const S = struct {\n        pub fn genFunc(vm: *cy.VM) callconv(.C) Value {\n            return @call(.always_inline, f, .{vm}"}
{"instruction":"Write a Zig struct similar to Data from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"const Data = struct {\n            result: ResultT = undefined,\n            frame: ?Frame = null,\n\n            fn callback(\n                userdata: ?*@This(),\n                l: *xev.Loop,\n                c: *xev.Completion,\n                s: xev.TCP,\n                result: ResultT,\n            ) xev.CallbackAction {\n                _ = l;\n                _ = c;\n                _ = s;\n                const data = userdata.?;\n                data.result = result;\n                if (data.frame != null) libcoro.xresume(data.frame.?);\n                return .disarm;\n            }"}
{"instruction":"Write a Zig struct similar to State from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/FFI.zig","output":"pub const State = struct {\n    script: []const u8,\n    source: Ast.TokenIndex,\n    ast: Ast,\n    buzz_ast: ?BuzzAst.Slice = null,\n    parser: ?*Parser,\n    type_expr: ?[]const u8 = null,\n    structs: std.StringHashMapUnmanaged(*Zdef) = .empty,\n}"}
{"instruction":"Write a Zig const similar to function_name from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"const function_name: []const u8 = switch (function_type) {\n        .EntryPoint => \"main\",\n        .ScriptEntryPoint, .Script => name,\n        .Repl => \"REPL\",\n        else => \"???\",\n    };"}
{"instruction":"Write a Zig struct similar to SessionNode from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"const SessionNode = struct {\n    type: enum { udp, tcp }"}
{"instruction":"Write a Zig function similar to popFiberBlock from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn popFiberBlock(c: *Chunk) !void {\n    try genReleaseBlock(c);\n\n    // Pop boundary index.\n    try popUnwindBoundary(c, c.curBlock.debugNode);\n\n    try popProc(c);\n}"}
{"instruction":"Write a Zig function similar to new from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: build.zig","output":"fn new(b: *Build) Self {\n        var params = BuildParams{}"}
{"instruction":"Write a Zig function similar to send_notification_raw from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"pub fn send_notification_raw(self: *const Self, method: []const u8, cb: []const u8) SendError!void {\n    self.pid.send(.{ \"NTFY\", method, cb }"}
{"instruction":"Write a Zig function similar to matchExact from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub fn matchExact(self: Key, cp: u21, mods: Modifiers) bool {\n    var self_mods = self.mods;\n    self_mods.caps_lock = false;\n    self_mods.num_lock = false;\n    var tgt_mods = mods;\n    tgt_mods.caps_lock = false;\n    tgt_mods.num_lock = false;\n    return self.codepoint == cp and std.meta.eql(self_mods, tgt_mods);\n}"}
{"instruction":"Write a Zig function similar to NES from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn NES(self: *Self, dest: m.MIR_op_t, left: m.MIR_op_t, right: m.MIR_op_t) void {\n    self.append(\n        m.MIR_new_insn_arr(\n            self.ctx,\n            @intFromEnum(m.MIR_Instruction.NES),\n            3,\n            &[_]m.MIR_op_t{\n                dest,\n                left,\n                right,\n            }"}
{"instruction":"Write a Zig function similar to prepareFunc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn prepareFunc(c: *cy.Compiler, opt_group: ?rt.FuncGroupId, func: *cy.Func) !void {\n    switch (func.type) {\n        .trait => return,\n        .userLambda => {\n            if (cy.Trace) {\n                const symPath = try cy.sym.allocSymName(&c.sema, c.alloc, func.parent, .{}"}
{"instruction":"Write a Zig function similar to name from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn name(self: CommandDispatchType) []const u8 {\n        return switch (self) {\n            .base => \"Base\",\n            .instance => \"Instance\",\n            .device => \"Device\",\n        }"}
{"instruction":"Write a Zig function similar to findBuildZigDirAlloc from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/taxonomy.zig","output":"fn findBuildZigDirAlloc(allocator: std.mem.Allocator) ![]const u8 {\n    const self_path = try std.fs.selfExePathAlloc(allocator);\n    defer allocator.free(self_path);\n\n    var current_path = std.fs.path.dirname(self_path) orelse \"/\";\n\n    while (true) {\n        const build_path = try std.fs.path.join(allocator, &.{ current_path, \"build.zig\" }"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn epoll_wait(epfd: c_int, evs: *anyopaque, n_evs: c_int, timeout: c_int) c_int;\n    }"}
{"instruction":"Write a Zig function similar to OP_MAP_FOREACH from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_MAP_FOREACH(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_MAP_FOREACH);\n}"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">const</span> err = <span class=\"tok-kw\">error</span>.FileNotFound;"}
{"instruction":"Write a Zig function similar to parseBitmaskType from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn parseBitmaskType(ty: *xml.Element) !registry.Declaration {\n    if (ty.getAttribute(\"name\")) |name| {\n        const alias = ty.getAttribute(\"alias\") orelse return error.InvalidRegistry;\n        return registry.Declaration{\n            .name = name,\n            .decl_type = .{ .alias = .{ .name = alias, .target = .other_type }"}
{"instruction":"Write a Zig function similar to generateSubscript from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateSubscript(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n    const location = locations[node];\n    const type_defs = self.ast.nodes.items(.type_def);\n    const components = self.ast.nodes.items(.components)[node].Subscript;\n\n    _ = try self.generateNode(components.subscripted, breaks);\n\n    const subscripted_type_def = type_defs[components.subscripted].?;\n    const index_type_def = type_defs[components.index].?;\n    const value_type_def = if (components.value) |value| type_defs[value] else null;\n\n    if (subscripted_type_def.def_type == .Placeholder) {\n        self.reporter.reportPlaceholder(self.ast, subscripted_type_def.resolved_type.?.Placeholder);\n    }"}
{"instruction":"Write a Zig function similar to paramLoc from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn paramLoc(tree: Ast, param: Ast.full.FnProto.Param, include_doc_comment: bool) offsets.Loc {\n    const first_token = paramFirstToken(tree, param, include_doc_comment);\n    const last_token = paramLastToken(tree, param);\n    return offsets.tokensToLoc(tree, first_token, last_token);\n}"}
{"instruction":"Write a Zig function similar to print from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn print(file: File, comptime fmt: []const u8, args: anytype) void {\n            var buf: [256]u8 = undefined;\n            var wrt = file.writer(&buf);\n            wrt.interface.print(fmt, args) catch return;\n            wrt.interface.flush() catch return;\n        }"}
{"instruction":"Write a Zig struct similar to local from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"const local = struct {\n        var active_grid: GridType = .styling;\n\n        fn tabSelected(grid_type: GridType) bool {\n            return active_grid == grid_type;\n        }"}
{"instruction":"Write a Zig function similar to as_path from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: ffi/ffi.zig","output":"pub fn as_path(path: []const u8) [std.fs.max_path_bytes:0]u8 {\n    var result: [std.fs.max_path_bytes:0]u8 = undefined;\n    @memcpy(result[0..path.len], path);\n    result[path.len] = 0;\n    return result;\n}"}
{"instruction":"Write a Zig function similar to init from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/NativeInvocationHandler.zig","output":"pub fn init(jni: *android.JNI, class: android.jobject) !Self {\n    const methods = [_]android.JNINativeMethod{\n        .{\n            .name = \"invoke0\",\n            .signature = \"(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;\",\n            .fnPtr = InvocationHandler.invoke0,\n        }"}
{"instruction":"Write a Zig function similar to is_good from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn is_good(msg: []const u8) bool {\n    return c.dns_is_good(msg.ptr);\n}"}
{"instruction":"Write a Zig const similar to ctx from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const ctx: *Ctx = @alignCast(@fieldParentPtr(\"writer\", w));"}
{"instruction":"Write a Zig function similar to isSlice from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/Odin.zig","output":"fn isSlice(params: *const encoding.Params) bool {\n    return switch (params.data_type.form) {\n        .@\"struct\" => |strct| strct.members.len == 2 and\n            encoding.memberNameIs(params, strct.members[0].name, \"data\") and\n            encoding.memberNameIs(params, strct.members[1].name, \"len\"),\n        else => false,\n    }"}
{"instruction":"Write a Zig const similar to properties from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"const properties: SDLBackend.c.SDL_PropertiesID = SDLBackend.c.SDL_GetWindowProperties(window.backend.impl.window);"}
{"instruction":"Write a Zig struct similar to ProgressBar from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/progress.zig","output":"pub const ProgressBar = struct {\n    const Self = @This();\n\n    spinner: Spinner,\n    current: u64,\n    estimate: u64,\n    stdout: std.fs.File,\n    buf: std.ArrayList(u8),\n    last_rendered: std.time.Instant,\n\n    pub fn init(allocator: std.mem.Allocator, stdout: std.fs.File) !Self {\n        const width = getScreenWidth(stdout.handle);\n        const buf = try std.ArrayList(u8).initCapacity(allocator, width + WIDTH_PADDING);\n        return Self{\n            .spinner = Spinner.init(),\n            .last_rendered = try std.time.Instant.now(),\n            .current = 0,\n            .estimate = 1,\n            .stdout = stdout,\n            .buf = buf,\n        }"}
{"instruction":"Write a Zig function similar to blockDrops from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn blockDrops(self: Block) []BlockDrop {\n\t\treturn _blockDrops[self.typ];\n\t}"}
{"instruction":"Write a Zig function similar to parseSibByte from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"fn parseSibByte(dis: *Disassembler) !Sib {\n    if (dis.code[dis.pos..].len == 0) return error.EndOfStream;\n    const sib_byte = dis.code[dis.pos];\n    dis.pos += 1;\n    const scale: u2 = @as(u2, @truncate(sib_byte >> 6));\n    const index: u3 = @as(u3, @truncate(sib_byte >> 3));\n    const base: u3 = @as(u3, @truncate(sib_byte));\n    return Sib{ .scale = scale, .index = index, .base = base }"}
{"instruction":"Write a Zig struct similar to Context from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"const Context = struct {\n        arena: *std.heap.ArenaAllocator,\n        out: *Writer,\n        fn testOne(ctx: @This(), input: []const u8) anyerror!void {\n            _ = ctx.arena.reset(.retain_capacity);\n            const gpa = ctx.arena.allocator();\n\n            var in: Reader = .fixed(input);\n            var out: Writer.Allocating = .init(gpa);\n            generator.generate(gpa, &in, &out.writer) catch |err| {\n                if (err == error.Skip) return;\n                return err;\n            }"}
{"instruction":"Write a Zig function similar to handleUnusedVariableOrConstant from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"fn handleUnusedVariableOrConstant(builder: *Builder, loc: offsets.Loc) !void {\n    const tracy_zone = tracy.trace(@src());\n    defer tracy_zone.end();\n\n    if (!builder.wantKind(.@\"source.fixAll\") and !builder.wantKind(.quickfix)) return;\n\n    const tree = builder.handle.tree;\n    const identifier_token = offsets.sourceIndexToTokenIndex(tree, loc.start).pickTokenTag(.identifier, &tree) orelse return;\n    const identifier_name = offsets.identifierTokenToNameSlice(tree, identifier_token);\n    const identifier_full_name = offsets.tokenToSlice(tree, identifier_token);\n\n    const decl = (try builder.analyser.lookupSymbolGlobal(\n        builder.handle,\n        identifier_name,\n        loc.start,\n    )) orelse return;\n\n    const node = switch (decl.decl) {\n        .ast_node => |node| node,\n        .assign_destructure => |payload| payload.node,\n        else => return,\n    }"}
{"instruction":"Write a Zig function similar to readAllBlueprints from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"pub fn readAllBlueprints(addon: Addon, allocator: NeverFailingAllocator, subPath: []const u8, output: *BytesHashMap) void {\n\t\t\tvar assetsDirectory = addon.dir.openIterableDir(subPath) catch |err| {\n\t\t\t\tif(err != error.FileNotFound) {\n\t\t\t\t\tstd.log.err(\"Could not open addon directory {s}"}
{"instruction":"Write Zig 0.13.0 code for: Optionals §","input":"One area that Zig provides safety without compromising efficiency or readability is with the optional type. The question mark symbolizes the optional type. You can convert a type to an optional type by putting a question mark in front of it, like this: optional_integer.zig Now the variable optional_int could be an i32 , or null . Instead of integers, let's talk about pointers. Null references are the source of many runtime exceptions, and even stand accused of being the worst mistake of computer","output":"<span class=\"tok-comment\">// normal integer</span>\n<span class=\"tok-kw\">const</span> normal_int: <span class=\"tok-type\">i32</span> = <span class=\"tok-number\">1234</span>;\n\n<span class=\"tok-comment\">// optional integer</span>\n<span class=\"tok-kw\">const</span> optional_int: ?<span class=\"tok-type\">i32</span> = <span class=\"tok-number\">5678</span>;"}
{"instruction":"Write a Zig function similar to generateIntWidth from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn generateIntWidth(comp: *Compilation, w: *std.Io.Writer, name: []const u8, qt: QualType) !void {\n    try w.print(\"#define __{s}"}
{"instruction":"Write a Zig function similar to invalid_field from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn invalid_field(field: []const u8) error{InvalidMessage}"}
{"instruction":"Write a Zig function similar to genUnOp from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genUnOp(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .preUnOp).unOp;\n    const ret_t = c.ir.getExprType(idx).id;\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, false, node);\n\n    const childv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, childv, node);\n\n    switch (data.op) {\n        .not => {\n            try c.buf.pushOp2(.not, childv.reg, inst.dst);\n        }"}
{"instruction":"Write a Zig function similar to deinit from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Project.zig","output":"pub fn deinit(self: *Project, allocator: std.mem.Allocator) void {\n    if (read) |r| allocator.free(r);\n\n    if (parsed) |p| {\n        p.deinit();\n        parsed = null;\n    }"}
{"instruction":"Write a Zig struct similar to Rename from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"const Rename = struct {\n    uri: []const u8,\n    new_text: []const u8,\n    range: Range,\n}"}
{"instruction":"Write a Zig function similar to server_fetchArray from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/zpm.zig","output":"pub fn server_fetchArray(url: string) ![]const Package {\n    const doc = try server_fetch(url);\n    doc.acquire();\n    defer doc.release();\n    var list = std.ArrayList(Package).init(gpa);\n    errdefer list.deinit();\n\n    for (doc.root.array()) |item| {\n        const obj = item.object();\n        if (obj.getS(\"root_file\") == null) continue;\n        try list.append(Package{\n            .name = obj.getS(\"name\").?,\n            .author = obj.getS(\"author\").?,\n            .description = obj.getS(\"description\").?,\n            .tags = try valueStrArray(obj.getA(\"tags\").?),\n            .git = obj.getS(\"git\").?,\n            .root_file = obj.getS(\"root_file\").?,\n            .source = obj.getN(\"source\").?.get(u32),\n            .links = try valueLinks(obj.getO(\"links\").?),\n        }"}
{"instruction":"Write a Zig function similar to parse from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig","output":"fn parse(args: []const []const u8) Command {\n        var check: bool = false;\n        var mode: ?Mode = null;\n        var syntax_only: ?bool = null;\n\n        var idx: usize = 0;\n        while (idx < args.len) : (idx += 1) {\n            const arg = args[idx];\n            if (std.mem.eql(u8, arg, \"--help\") or\n                std.mem.eql(u8, arg, \"-h\"))\n            {\n                fatalHelp();\n            }"}
{"instruction":"Write a Zig function similar to toLinear from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn toLinear(value: f32) f32 {\n            if (value <= params.transition_point) {\n                return value / params.delta;\n            }"}
{"instruction":"Write a Zig function similar to genLvalError from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genLvalError(c: *Compiler, node: Node.Index, lval: Lval) Error!void {\n    const val = switch (lval) {\n        .let, .assign => |val| val,\n        .aug_assign => return c.reportErr(\"invalid left hand side to augmented assignment\", node),\n    }"}
{"instruction":"Write a Zig function similar to bind from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn bind(fd: c_int, addr: *const SockAddr) ?void {\n    const raw = struct {\n        extern fn bind(fd: c_int, addr: *const anyopaque, addrlen: c.socklen_t) c_int;\n    }"}
{"instruction":"Write a Zig function similar to getWindowInfo from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/window_management/main.zig","output":"fn getWindowInfo(e: *webui.Event) void {\n    const win = e.getWindow();\n    \n    const port = win.getPort() catch 0;\n    const url = win.getUrl() catch \"\";\n    const is_shown = win.isShown();\n    \n    var buffer: [512]u8 = undefined;\n    const info = std.fmt.bufPrint(buffer[0..], \n        \"Port: {}"}
{"instruction":"Write a Zig function similar to deinit from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"pub fn deinit(self: *Loop) void {\n        _ = self;\n    }"}
{"instruction":"Write a Zig function similar to create from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn create(allocator: Allocator) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to addNames from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/params.zig","output":"pub fn addNames(self: *Params, noalias names: [][]const u8) void {\n        std.debug.assert(names.len == self.len);\n        @memcpy(self.names[0..self.len], names);\n    }"}
{"instruction":"Write a Zig function similar to parseUserType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseUserType(self: *Self, instance: bool, mutable: bool) Error!Ast.Node.Index {\n    const node_slot = try self.ast.nodes.addOne(self.ast.allocator);\n\n    const user_type_name = try self.qualifiedName();\n    var var_type: ?*obj.ObjTypeDef = null;\n    var global_slot: ?usize = null;\n\n    // Search for a global with that name\n    if (try self.resolveGlobal(@intCast(node_slot), user_type_name)) |slot| {\n        const global = self.globals.items[slot];\n\n        var_type = global.type_def;\n        global_slot = @intCast(slot);\n\n        if (global.imported_from != null and self.script_imports.get(global.imported_from.?) != null) {\n            const imported_from = global.imported_from.?;\n\n            try self.script_imports.put(\n                self.gc.allocator,\n                imported_from,\n                .{\n                    .location = self.script_imports.get(imported_from).?.location,\n                    .end_location = self.script_imports.get(imported_from).?.end_location,\n                    .referenced = true,\n                }"}
{"instruction":"Write a Zig function similar to BEQ from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn BEQ(self: *Self, label: m.MIR_op_t, left: m.MIR_op_t, right: m.MIR_op_t) void {\n    self.append(\n        m.MIR_new_insn_arr(\n            self.ctx,\n            @intFromEnum(m.MIR_Instruction.BEQ),\n            3,\n            &[_]m.MIR_op_t{\n                label,\n                left,\n                right,\n            }"}
{"instruction":"Write a Zig function similar to move_buffer_first from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"fn move_buffer_first(self: *Self, root: Buffer.Root, metrics: Metrics) void {\n    self.row = 0;\n    self.follow_target(root, metrics);\n}"}
{"instruction":"Write a Zig function similar to renderBitmaskBits from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderBitmaskBits(self: *Self, name: []const u8, bits: reg.Enum) !void {\n        try self.writer.writeAll(\"pub const \");\n        try self.renderName(name);\n        const flags_type = try bitmaskFlagsType(bits.bitwidth);\n        try self.writer.print(\" = packed struct({s}"}
{"instruction":"Write a Zig function similar to readDefaultCompiler from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn readDefaultCompiler(allocator: Allocator, buffer: *[std.fs.max_path_bytes + 1]u8) !?[]const u8 {\n    const path_link = try makeZigPathLinkString(allocator);\n    defer allocator.free(path_link);\n\n    if (builtin.os.tag == .windows) {\n        var file = std.fs.openFileAbsolute(path_link, .{}"}
{"instruction":"Write a Zig function similar to hash from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn hash(self: @This(), item: Type.Data.EitherEntry) u32 {\n                _ = self;\n                const ty: Type = .{ .data = item.type_data, .is_type_val = true }"}
{"instruction":"Write a Zig struct similar to Directory from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/fs.zig","output":"pub const Directory = struct {\n    name: []u8,\n\n    const Self = @This();\n    const Error = error{Failed}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn callback(\n            ud: ?*anyopaque,\n            l: *Loop,\n            _: *Completion,\n            r: Result,\n        ) CallbackAction {\n            _ = l;\n            const ptr = @as(*?TimerTrigger, @ptrCast(@alignCast(ud.?)));\n            ptr.* = r.timer catch unreachable;\n            return .disarm;\n        }"}
{"instruction":"Write a Zig function similar to follow_target from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"fn follow_target(self: *Self, root: Buffer.Root, metrics: Metrics) void {\n    self.col = @min(self.target, root.line_width(self.row, metrics) catch 0);\n}"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn model(block: Block) ModelIndex {\n\t\treturn block.mode().model(block);\n\t}"}
{"instruction":"Write a Zig function similar to Compressor from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"pub fn Compressor(comptime container: Container) type {\n    return Deflate(container);\n}"}
{"instruction":"Write a Zig function similar to free from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: ffi/zig_allocator.zig","output":"pub fn free(ctx: ?*const anyopaque, ptr: ?*anyopaque, elem: usize, nelems: usize, alignment: usize) callconv(.c) void {\n        const self: *const std.mem.Allocator = @ptrCast(@alignCast(ctx));\n        const memory: [*c]u8 = @ptrCast(ptr);\n        const size = elem * nelems;\n        self.rawFree(memory[0..size], std.math.log2_int(usize, alignment), @returnAddress());\n    }"}
{"instruction":"Write a Zig function similar to _getPropertyValue from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"pub fn _getPropertyValue(self: *const CSSStyleDeclaration, name: []const u8) []const u8 {\n    if (self.properties.getPtr(name)) |property| {\n        return property.value;\n    }"}
{"instruction":"Write a Zig const similar to offset from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const offset: u32 = @intCast(c.strings.items.len);"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn read(fd: c_int, buf: [*]u8, len: usize) isize;\n    }"}
{"instruction":"Write a Zig function similar to parse from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: common/flags.zig","output":"pub fn parse(args: []const Arg) !Result {\n            var result_flags: Result.Flags = .{}"}
{"instruction":"Write a Zig function similar to sub from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn sub(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjList.cast(ctx.vm.peek(2).obj()).?;\n    const start = @min(\n        @max(\n            0,\n            ctx.vm.peek(1).integer(),\n        ),\n        self.items.items.len - 1,\n    );\n    const upto = if (ctx.vm.peek(0).integerOrNull()) |u|\n        @max(0, u)\n    else\n        null;\n\n    const limit: usize = if (upto != null and @as(usize, @intCast(start + upto.?)) < self.items.items.len)\n        @intCast(start + upto.?)\n    else\n        self.items.items.len;\n    const substr = self.items.items[@intCast(start)..limit];\n\n    var methods = std.ArrayList(?*o.ObjNative)\n        .fromOwnedSlice(self.methods)\n        .clone(ctx.vm.gc.allocator) catch {\n        ctx.vm.panic(\"Out of memory\");\n        unreachable;\n    }"}
{"instruction":"Write a Zig function similar to testArgvToCommandLineWindows from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn testArgvToCommandLineWindows(argv: []const []const u8, expected_cmd_line: []const u8) !void {\n    const cmd_line_w = try argvToCommandLineWindows(std.testing.allocator, argv);\n    defer std.testing.allocator.free(cmd_line_w);\n\n    const cmd_line = try unicode.wtf16LeToWtf8Alloc(std.testing.allocator, cmd_line_w);\n    defer std.testing.allocator.free(cmd_line);\n\n    try std.testing.expectEqualStrings(expected_cmd_line, cmd_line);\n}"}
{"instruction":"Write a Zig function similar to pushCallSymDyn from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushCallSymDyn(c: *cy.Chunk, ret: u8, numArgs: u32, numRet: u8, symId: u32, node: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    try c.pushFCode(.call_sym_dyn, &.{ ret, @as(u8, @intCast(numArgs)), numRet, 0, 0, 0, 0, 0, 0, 0, 0 }"}
{"instruction":"Write a Zig struct similar to TestTask from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/Scheduler.zig","output":"const TestTask = struct {\n    allocator: Allocator,\n    calls: std.ArrayListUnmanaged(u32) = .{}"}
{"instruction":"Write a Zig function similar to set_flag from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"fn set_flag(set_field: std.meta.FieldEnum(BasicProperties)) u16 {\n            var properties: BasicProperties = .{}"}
{"instruction":"Write a Zig const similar to base_ptr from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"const base_ptr: [*]const u8 = @ptrCast(@alignCast(base.data));"}
{"instruction":"Write a Zig struct similar to Scope from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub const Scope = struct {\n    pub const Tag = enum(u3) {\n        /// `tree.nodeTag(ast_node)` is ContainerDecl or Root or ErrorSetDecl\n        container,\n        /// `tree.nodeTag(ast_node)` is FnProto\n        function,\n        /// `tree.nodeTag(ast_node)` is Block\n        block,\n        other,\n\n        pub fn isContainer(self: @This()) bool {\n            return switch (self) {\n                .container => true,\n                .block, .function, .other => false,\n            }"}
{"instruction":"Write a Zig function similar to iterateEnclosingScopes from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn iterateEnclosingScopes(document_scope: *const DocumentScope, source_index: usize) EnclosingScopeIterator {\n    return .{\n        .document_scope = document_scope,\n        .current_scope = .root,\n        .source_index = source_index,\n    }"}
{"instruction":"Write a Zig struct similar to BunInfo from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"pub const BunInfo = struct {\n    bun_version: string,\n    platform: analytics.GenerateHeader.GeneratePlatform.Platform,\n\n    const analytics = bun.analytics;\n    const JSON = bun.json;\n    const JSAst = bun.ast;\n    pub fn generate(comptime Bundler: type, _: Bundler, allocator: std.mem.Allocator) !JSAst.Expr {\n        const info = BunInfo{\n            .bun_version = Global.package_json_version,\n            .platform = analytics.GenerateHeader.GeneratePlatform.forOS(),\n        }"}
{"instruction":"Write a Zig function similar to _info from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/console/console.zig","output":"pub fn _info(values: []js.Object, page: *Page) !void {\n        return _log(values, page);\n    }"}
{"instruction":"Write a Zig function similar to __android_log_write from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-bind.zig","output":"fn __android_log_write(prio: c_int, tag: [*c]const u8, text: [*c]const u8) c_int;\npub extern fn __android_log_print(prio: c_int, tag: [*c]const u8, fmt: [*c]const u8, ...) c_int;\npub extern fn __android_log_vprint(prio: c_int, tag: [*c]const u8, fmt: [*c]const u8, ap: va_list) c_int;\npub extern fn __android_log_assert(cond: [*c]const u8, tag: [*c]const u8, fmt: [*c]const u8, ...) noreturn;\npub const LOG_ID_MIN = @intFromEnum(enum_log_id.LOG_ID_MIN);\npub const LOG_ID_MAIN = @intFromEnum(enum_log_id.LOG_ID_MAIN);\npub const LOG_ID_RADIO = @intFromEnum(enum_log_id.LOG_ID_RADIO);\npub const LOG_ID_EVENTS = @intFromEnum(enum_log_id.LOG_ID_EVENTS);\npub const LOG_ID_SYSTEM = @intFromEnum(enum_log_id.LOG_ID_SYSTEM);\npub const LOG_ID_CRASH = @intFromEnum(enum_log_id.LOG_ID_CRASH);\npub const LOG_ID_STATS = @intFromEnum(enum_log_id.LOG_ID_STATS);\npub const LOG_ID_SECURITY = @intFromEnum(enum_log_id.LOG_ID_SECURITY);\npub const LOG_ID_KERNEL = @intFromEnum(enum_log_id.LOG_ID_KERNEL);\npub const LOG_ID_MAX = @intFromEnum(enum_log_id.LOG_ID_MAX);\npub const enum_log_id = enum(c_int) {\n    LOG_ID_MIN = 0,\n    LOG_ID_MAIN = 0,\n    LOG_ID_RADIO = 1,\n    LOG_ID_EVENTS = 2,\n    LOG_ID_SYSTEM = 3,\n    LOG_ID_CRASH = 4,\n    LOG_ID_STATS = 5,\n    LOG_ID_SECURITY = 6,\n    LOG_ID_KERNEL = 7,\n    LOG_ID_MAX = 8,\n    _,\n}"}
{"instruction":"Write a Zig function similar to sleep from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/gil.zig","output":"pub fn sleep(args: struct { millis: u64 }) void {\n    std.Thread.sleep(args.millis * 1_000_000);\n}"}
{"instruction":"Write a Zig const similar to new_index from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const new_index: u32 = @intCast(c.instructions.len);"}
{"instruction":"Write a Zig function similar to indexOfBreakTarget from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn indexOfBreakTarget(\n    tree: Ast,\n    nodes: []const Ast.Node.Index,\n    break_label_maybe: ?[]const u8,\n) ?usize {\n    for (nodes, 0..) |node, index| {\n        if (fullFor(tree, node)) |for_node| {\n            const break_label = break_label_maybe orelse return index;\n            const for_label = tree.tokenSlice(for_node.label_token orelse continue);\n            if (std.mem.eql(u8, break_label, for_label)) return index;\n        }"}
{"instruction":"Write a Zig function similar to update from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/document.zig","output":"pub fn update(self: *Document) !void {\n        if (self.node.has_dirty) {\n            const force = try self.updateStyleSheets();\n            self.updateTree(&self.node, force);\n        }"}
{"instruction":"Write a Zig function similar to __divmod__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __divmod__(self: *const Self, other: *const Self) !py.PyTuple(root) {\n        return py.PyTuple(root).create(.{ self.num_ / other.num_, std.math.mod(u64, self.num_, other.num_) }"}
{"instruction":"Write a Zig const similar to REGISTER_MINUTE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/cmos.zig","output":"const REGISTER_MINUTE: u8 = 0x02;"}
{"instruction":"Write a Zig function similar to option_strip from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn option_strip() void {\n    const default = switch (_mode) {\n        .ReleaseFast, .ReleaseSmall => true,\n        else => false,\n    }"}
{"instruction":"Write a Zig function similar to hash from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn hash(self: StringIndexInsertContext, s: []const u8) u64 {\n        _ = self;\n        return std.hash.Wyhash.hash(0, s);\n    }"}
{"instruction":"Write a Zig function similar to string_concat from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn string_concat(str_list: []const []const u8, sep: []const u8) []const u8 {\n    return std.mem.join(_b.allocator, sep, str_list) catch unreachable;\n}"}
{"instruction":"Write a Zig struct similar to Binary from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const Binary = struct {\n    left: Node.Index,\n    right: Node.Index,\n    operator: Token.Type,\n}"}
{"instruction":"Write a Zig function similar to findProblemWithAndroidNdk from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build/auto-detect.zig","output":"fn findProblemWithAndroidNdk(b: *Builder, versions: Sdk.ToolchainVersions, path: []const u8) ?[]const u8 {\n    std.fs.cwd().access(path, .{}"}
{"instruction":"Write a Zig const similar to originalCorners from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig","output":"const originalCorners: [4]Vec2f = .{\n\t\t.{0, 0},\n\t\t.{0, 1},\n\t\t.{1, 0},\n\t\t.{1, 1},\n\t};"}
{"instruction":"Write a Zig function similar to cmp from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn cmp(_: void, a: []const u8, b: []const u8) bool {\n            return std.mem.order(u8, a, b).compare(.lt);\n        }"}
{"instruction":"Write a Zig const similar to b from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"const b: f64 = @floatFromInt((raw_pixel >> 16) & 0xFF);"}
{"instruction":"Write a Zig function similar to UserVM_new from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"pub fn UserVM_new(vm: *cy.VM) anyerror!cy.Value {\n    const core_data = vm.getData(*cy.builtins.CoreData, \"core\");\n\n    // Create an isolated VM.\n    const new: *cy.VM = @ptrCast(@alignCast(C.create()));\n\n    // Use the same printers as the parent VM.\n    C.setPrinter(@ptrCast(new), C.getPrinter(@ptrCast(vm)));\n    C.setErrorPrinter(@ptrCast(new), C.getErrorPrinter(@ptrCast(vm)));\n\n    const uvm: *UserVM = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.VMT, @sizeOf(UserVM))));\n    uvm.* = .{\n        .vm = new,\n    }"}
{"instruction":"Write a Zig function similar to create_syntax_guess_file_type from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_type_config.zig","output":"pub fn create_syntax_guess_file_type(\n    allocator: std.mem.Allocator,\n    content: []const u8,\n    file_path: ?[]const u8,\n    query_cache: *syntax.QueryCache,\n) !?*syntax {\n    const file_type = guess(file_path, content) orelse return error.NotFound;\n    return create_syntax(file_type, allocator, query_cache);\n}"}
{"instruction":"Write a Zig function similar to timer_next from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn timer_next(self: Loop, next_ms: u64) posix.timespec {\n        // Get the timestamp of the absolute time that we'll execute this timer.\n        // There are lots of failure scenarios here in math. If we see any\n        // of them we just use the maximum value.\n        const max: posix.timespec = .{\n            .sec = std.math.maxInt(isize),\n            .nsec = std.math.maxInt(isize),\n        }"}
{"instruction":"Write a Zig function similar to add_ip from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn add_ip(msg: []const u8, qnamelen: c_int, addctx: *ipset.addctx_t) void {\n    return c.dns_add_ip(msg.ptr, cc.to_isize(msg.len), qnamelen, addctx);\n}"}
{"instruction":"Write a Zig function similar to getNumBytes from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/wav.zig","output":"pub fn getNumBytes(self: Format) u16 {\n        return switch (self) {\n            .U8 => 1,\n            .S16_LE => 2,\n            .S24_LE => 3,\n            .S32_LE => 4,\n        }"}
{"instruction":"Write a Zig struct similar to VmExt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig","output":"pub const VmExt = struct {\n    pub const retainObject = Root.retainObject;\n    pub const retain = Root.retain;\n    pub const releaseObject = Root.releaseObject;\n    pub const release = Root.release;\n}"}
{"instruction":"Write a Zig struct similar to Options from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"pub const Options = struct {\n    selinux: bool,\n    trackGlobalRc: bool,\n    trace: bool,\n    log_mem: bool,\n    target: std.Target,\n    optimize: std.builtin.OptimizeMode,\n    malloc: config.Allocator,\n    static: bool,\n    gc: bool,\n    ffi: bool,\n    cli: bool,\n    jit: bool,\n    rt: config.Runtime,\n\n    /// Link with the lib when building test root.\n    /// Disable to see better Zig stack traces.\n    link_test: bool,\n\n    export_vmz: bool,\n\n    fn applyOverrides(self: *Options) void {\n        if (optMalloc) |malloc| {\n            self.malloc = malloc;\n        }"}
{"instruction":"Write a Zig function similar to __and__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __and__(self: *const Self, other: *const Self) !*Self {\n        return py.init(root, Self, .{ .num_ = self.num_ & other.num_ }"}
{"instruction":"Write a Zig struct similar to PciDevice from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pci.zig","output":"const PciDevice = struct {\n    /// The bus on which the device is on\n    bus: u8,\n\n    /// The device number.\n    device: u5,\n\n    const Self = @This();\n\n    ///\n    /// Get the PCI address for this device and for a function and register.\n    ///\n    /// Argument:\n    ///     IN self: Self                     - This device.\n    ///     IN function: u3                   - The function.\n    ///     IN comptime pci_reg: PciRegisters - The register.\n    ///\n    /// Return: PciAddress\n    ///     The PCI address that can be used to read the register offset for this device and function.\n    ///\n    pub fn getAddress(self: Self, function: u3, comptime pci_reg: PciRegisters) PciAddress {\n        return PciAddress{\n            .bus = self.bus,\n            .device = self.device,\n            .function = function,\n            .register_offset = @enumToInt(pci_reg),\n        }"}
{"instruction":"Write a Zig function similar to beginFrame from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn beginFrame(self: *Self, function_type: obj.ObjFunction.FunctionType, function_node: Ast.Node.Index, this: ?*obj.ObjTypeDef) !void {\n    const enclosing = self.current;\n    // FIXME: is this ever deallocated?\n    self.current = try self.gc.allocator.create(Frame);\n    self.current.?.* = Frame{\n        .locals = [_]Local{undefined}"}
{"instruction":"Write a Zig const similar to import from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"const import: ImportDecl = found_decl: while (true) {\n                const token = tree.nodeMainToken(current_node);"}
{"instruction":"Write a Zig function similar to deinit from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn deinit(self: *BufferPool) void {\n        const allocator = self.allocator;\n\n        var node = self.available.first;\n        while (node) |n| {\n            const container: *Container = @fieldParentPtr(\"node\", n);\n            container.buf.deinit(allocator);\n            node = n.next;\n        }"}
{"instruction":"Write a Zig function similar to import from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"fn import(vm: *Vm, caller_frame: *Frame, id: []const u8) Error!*Value {\n    const mod = vm.imported_modules.get(id) orelse if (mem.endsWith(u8, id, bog.extension))\n        vm.importFile(id) catch |err| switch (err) {\n            error.ImportingDisabled => {\n                try caller_frame.throwFmt(\n                    vm,\n                    \"cannot import '{s}"}
{"instruction":"Write a Zig function similar to ignoreHttpCallback from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn ignoreHttpCallback(request: []const u8) void {\n    _ = request;\n}"}
{"instruction":"Write a Zig function similar to isFloat from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn isFloat(ip: *InternPool, ty: Index) bool {\n    _ = ip;\n    return switch (ty) {\n        .c_longdouble_type,\n        .f16_type,\n        .f32_type,\n        .f64_type,\n        .f80_type,\n        .f128_type,\n        .comptime_float_type,\n        => true,\n        else => false,\n    }"}
{"instruction":"Write a Zig function similar to write_file from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/diff.zig","output":"fn write_file(data: []const u8, file_name: []const u8) !void {\n    var file = try std.fs.cwd().createFile(file_name, .{ .truncate = true }"}
{"instruction":"Write a Zig function similar to generateList from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateList(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n    const components = self.ast.nodes.items(.components)[node].List;\n    const type_defs = self.ast.nodes.items(.type_def);\n\n    const item_type = type_defs[node].?.resolved_type.?.List.item_type;\n\n    try self.OP_LIST(\n        locations[node],\n        type_defs[node].?.toValue(),\n    );\n\n    for (components.items) |item| {\n        if (item_type.def_type == .Placeholder) {\n            self.reporter.reportPlaceholder(self.ast, type_defs[item].?.resolved_type.?.Placeholder);\n        }"}
{"instruction":"Write a Zig function similar to advance_unsafe from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig","output":"fn advance_unsafe(self: *@This(), bytes: usize) void {\n        self.pos += bytes;\n    }"}
{"instruction":"Write a Zig function similar to sendCommandMaster from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"fn sendCommandMaster(cmd: u8) void {\n    arch.out(MASTER_COMMAND_REG, cmd);\n}"}
{"instruction":"Write a Zig struct similar to pointer_listener from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"const pointer_listener = struct {\n    fn handlePointerAxis(window_id: mach.ObjectID, pointer: ?*c.struct_wl_pointer, time: u32, axis: u32, value: c.wl_fixed_t) callconv(.C) void {\n        _ = window_id;\n        _ = pointer;\n        _ = time;\n        _ = axis;\n        _ = value;\n    }"}
{"instruction":"Write a Zig struct similar to Client from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/ping-pongs.zig","output":"const Client = struct {\n    loop: *xev.Loop,\n    completion_pool: CompletionPool,\n    read_buf: [1024]u8,\n    pongs: u64,\n    state: usize = 0,\n    stop: bool = false,\n\n    pub const PING = \"PING\\n\";\n\n    pub fn init(alloc: Allocator, loop: *xev.Loop) !Client {\n        return .{\n            .loop = loop,\n            .completion_pool = CompletionPool.init(alloc),\n            .read_buf = undefined,\n            .pongs = 0,\n            .state = 0,\n            .stop = false,\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> native_arch = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"builtin\"</span>).target.cpu.arch;\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"@wasmMemoryGrow\"</span> {\n    <span class=\"tok-kw\">if</span> (native_arch != .wasm32) <span class=\"tok-kw\">return</span> <span class=\"tok-kw\">error</span>.SkipZigTest;\n\n    <span class=\"tok-kw\">const</span> prev = <span class=\"tok-builtin\">@wasmMemorySize</span>(<span class=\"tok-number\">0</span>);\n    <span class=\"tok-kw\">try</span> expect(prev == <span class=\"tok-builtin\">@wasmMemoryGrow</span>(<span class=\"tok-number\">0</span>, <span class=\"tok-number\">1</span>));\n    <span class=\"tok-kw\">try</span> expect(prev + <span class=\"tok-number\">1</span> == <span class=\"tok-builtin\">@wasmMemorySize</span>(<span class=\"tok-number\">0</span>));\n}"}
{"instruction":"Write a Zig struct similar to WatchEntry from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/WindowsWatcher.zig","output":"const WatchEntry = struct {\n    dir_path: [:0]const u8,\n    dir_handle: windows.HANDLE,\n\n    overlap: windows.OVERLAPPED = std.mem.zeroes(windows.OVERLAPPED),\n    buf_idx: ReadBufferIndex,\n}"}
{"instruction":"Write a Zig function similar to device_endpoint_transfer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig","output":"fn device_endpoint_transfer(ep_addr: u8, data: []const u8) void {\n            if (Endpoint.dir_from_address(ep_addr) == .In) {\n                f.usb_start_tx(ep_addr, data);\n            }"}
{"instruction":"Write a Zig function similar to init from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/params.zig","output":"pub fn init(allocator: Allocator, max: usize) !Params {\n        const allocation = try allocator.alloc([]const u8, 2 * max);\n        return .{\n            .len = 0,\n            .names = allocation[0..max],\n            .values = allocation[max..],\n        }"}
{"instruction":"Write a Zig function similar to genLvalRange from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genLvalRange(c: *Compiler, node: Node.Index, lval: Lval) Error!void {\n    const val = switch (lval) {\n        .let, .assign => |val| val,\n        .aug_assign => return c.reportErr(\"invalid left hand side to augmented assignment\", node),\n    }"}
{"instruction":"Write a Zig struct similar to MsgQueue from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"const MsgQueue = struct {\n        head: ?*Msg = null,\n        tail: ?*Msg = null,\n        waiter: ?anyframe = null,\n\n        const Msg = struct {\n            msg: *RcMsg,\n            next: *Msg,\n        }"}
{"instruction":"Write a Zig struct similar to User from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: examples/table.zig","output":"pub const User = struct {\n    first: []const u8,\n    last: []const u8,\n    user: []const u8,\n    email: ?[]const u8 = null,\n    phone: ?[]const u8 = null,\n}"}
{"instruction":"Write a Zig function similar to unchecked from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/conversions.zig","output":"fn unchecked(comptime root: type, comptime T: type, obj: py.PyObject) T {\n    const Definition = @typeInfo(T).pointer.child;\n    const definition = State.getDefinition(root, Definition);\n    if (definition.type != .class) {\n        @compileError(\"Can only perform unchecked cast into a PyDust class type. Found \" ++ @typeName(Definition));\n    }"}
{"instruction":"Write a Zig struct similar to CommandArgs from electric-capital/crypto-ecosystems","input":"Repository: electric-capital/crypto-ecosystems (1900 ⭐)\nFile: src/commands.zig","output":"const CommandArgs = struct {\n    command: Command,\n    run_options: ?RunOptions = null,\n}"}
{"instruction":"Write a Zig function similar to deinit from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"pub fn deinit(self: *SpiceTreeSum) void {\n        self.thread_pool.deinit();\n    }"}
{"instruction":"Write a Zig struct similar to Symbol from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const Symbol = struct {\n    name: []const u8,\n    val: Value,\n    ref: Ref,\n    mut: bool,\n}"}
{"instruction":"Write a Zig function similar to toOptional from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn toOptional(i: Decl.Index) OptionalIndex {\n            return @enumFromInt(@intFromEnum(i));\n        }"}
{"instruction":"Write a Zig function similar to pushUnwindBoundary from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn pushUnwindBoundary(c: *Chunk) !void {\n    try c.unwind_stack.append(c.alloc, .{\n        .created = false,\n        .type = .boundary,\n    }"}
{"instruction":"Write a Zig function similar to StaticHashMap from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn StaticHashMap(comptime K: type, comptime V: type, comptime Context: type, comptime capacity: usize) type {\n    assert(math.isPowerOfTwo(capacity));\n\n    const shift = 63 - math.log2_int(u64, capacity) + 1;\n    const overflow = capacity / 10 + (63 - @as(u64, shift) + 1) << 1;\n\n    return struct {\n        const empty_hash = math.maxInt(u64);\n\n        pub const Entry = struct {\n            hash: u64 = empty_hash,\n            key: K = std.mem.zeroes(K),\n            value: V = std.mem.zeroes(V),\n\n            pub fn isEmpty(self: Entry) bool {\n                return self.hash == empty_hash;\n            }"}
{"instruction":"Write a Zig struct similar to FillFromCreative from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const FillFromCreative = struct { // MARK: FillFromCreative\n\t\tdest: InventoryAndSlot,\n\t\titem: ?Item,\n\t\tamount: u16 = 0,\n\n\t\tfn run(self: FillFromCreative, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, mode: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig struct similar to vectorcall from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const vectorcall = struct {}"}
{"instruction":"Write a Zig function similar to dot from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context.zig","output":"pub fn dot(\n        self: *Value,\n        gpa: Allocator,\n        path: []const u8,\n    ) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to getStatus from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"fn getStatus(self: *const Handle) Status {\n        return @bitCast(self.impl.status.load(.acquire));\n    }"}
{"instruction":"Write a Zig function similar to listGet from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn listGet(vm: *ZVM, list: Value, idx: usize) Value {\n    return c.clListGet(@ptrCast(vm), list, idx);\n}"}
{"instruction":"Write a Zig function similar to bindToPort from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn bindToPort(self: *Self, port: u16) !void {\n        return switch (self.family) {\n            .ipv4 => self.bind(EndPoint{\n                .address = Address{ .ipv4 = Address.IPv4.any }"}
{"instruction":"Write a Zig function similar to writeToMemory from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/Image/Managed.zig","output":"pub fn writeToMemory(self: Managed, write_buffer: []u8, encoder_options: EncoderOptions) WriteError![]u8 {\n    return Image.writeToMemory(self.toUnmanaged(), self.allocator, write_buffer, encoder_options);\n}"}
{"instruction":"Write a Zig function similar to generateImport from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateImport(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const components = self.ast.nodes.items(.components)[node].Import;\n    const location = self.ast.nodes.items(.location)[node];\n\n    if (components.import) |import| {\n        try self.emitConstant(location, import.absolute_path.toValue());\n\n        _ = try self.generateNode(import.function, breaks);\n\n        // FIXME: avoid generating the same import function more than once!\n        try self.OP_IMPORT(location);\n    }"}
{"instruction":"Write a Zig const similar to old from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig","output":"const old: FenceData = @bitCast(@as(u4, @intCast(rotationTable[a - 1][i])));"}
{"instruction":"Write a Zig function similar to get_ownerNode from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/StyleSheet.zig","output":"pub fn get_ownerNode(self: *const StyleSheet) ?*parser.Node {\n    return self.owner_node;\n}"}
{"instruction":"Write a Zig function similar to __imod__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __imod__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ = try std.math.mod(u64, self.num_, other.num_);\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to __init__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/classes.zig","output":"pub fn __init__(self: *Self, args: struct { x: i32 }) void {\n        self.number = args.x;\n    }"}
{"instruction":"Write a Zig function similar to indexes from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"fn indexes(header: *IndexHeader, comptime I: type) []Index(I) {\n        const start_ptr: [*]Index(I) = @ptrCast(@alignCast(@as([*]u8, @ptrCast(header)) + @sizeOf(IndexHeader)));\n        return start_ptr[0..header.length()];\n    }"}
{"instruction":"Write a Zig function similar to fail from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn fail(_: *TestHandlerDefaultDispatch, _: *Request, _: *Response) !void {\n        return error.TestUnhandledError;\n    }"}
{"instruction":"Write a Zig function similar to sqrt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn sqrt(vm: *cy.VM) Value {\n    return Value.initF64(std.math.sqrt(vm.getFloat(0)));\n}"}
{"instruction":"Write a Zig function similar to send_goto_request from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn send_goto_request(self: *Self, from: tp.pid_ref, file_path: []const u8, row: usize, col: usize, method: []const u8) SendGotoRequestError!void {\n    const lsp = try self.get_language_server(file_path);\n    const uri = try self.make_URI(file_path);\n    defer self.allocator.free(uri);\n\n    const handler: struct {\n        from: tp.pid,\n        name: []const u8,\n        project: *Self,\n\n        pub fn deinit(self_: *@This()) void {\n            std.heap.c_allocator.free(self_.name);\n            self_.from.deinit();\n        }"}
{"instruction":"Write a Zig function similar to getRgbComponent from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn getRgbComponent(self: Hsl, n: f32) f32 {\n        const a = self.saturation * @min(self.luminance, 1.0 - self.luminance);\n        const k = @mod(n + self.hue / 30, 12);\n\n        return self.luminance - a * @max(-1, @min(k - 3.0, @min(9.0 - k, 1.0)));\n    }"}
{"instruction":"Write a Zig function similar to Positionals from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"fn Positionals(\n    comptime Id: type,\n    comptime params: []const Param(Id),\n    comptime value_parsers: anytype,\n    comptime multi_arg_kind: MultiArgKind,\n) type {\n    var fields_len: usize = 0;\n    for (params) |param| {\n        const longest = param.names.longest();\n        if (longest.kind != .positional)\n            continue;\n        fields_len += 1;\n    }"}
{"instruction":"Write a Zig const similar to rect from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/sdl-ontop.zig","output":"const rect: if (SDLBackend.sdl3) c.SDL_FRect else c.SDL_Rect = .{ .x = 10, .y = 10, .w = 20, .h = 20 };"}
{"instruction":"Write a Zig function similar to calculatePixelColorDeltaSimd from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"pub fn calculatePixelColorDeltaSimd(pixel_a: u32, pixel_b: u32) i64 {\n    const pixels: @Vector(2, u32) = .{ pixel_a, pixel_b }"}
{"instruction":"Write a Zig function similar to internString from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn internString(comp: *Compilation, str: []const u8) !StringInterner.StringId {\n    return comp.string_interner.intern(comp.gpa, str);\n}"}
{"instruction":"Write a Zig function similar to collectGarbage from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn collectGarbage(self: *GC) !void {\n    var timer = if (!is_wasm) std.time.Timer.start() catch unreachable else {}"}
{"instruction":"Write a Zig function similar to parseStyleRule from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"fn parseStyleRule(s: *State) !Rule.Style {\n    try s.selectors.append(s.allocator, try parseSelector(s));\n    const sel_start = s.selectors.items.len - 1;\n\n    while (true) {\n        if (try s.consume()) |token| {\n            if (token == .comma) {\n                if (try s.peek() != null and (try s.peek()).? == .open_curly) break;\n\n                try s.selectors.append(s.allocator, try parseSelector(s));\n            }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn forward(self: ModernBertForMaskedLM, input_ids: Tensor) zml.Tensor.ArgMaxRes {\n        const outputs: Tensor = zml.call(self.model, .forward, .{input_ids}"}
{"instruction":"Write a Zig function similar to create from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn create(family: AddressFamily, protocol: Protocol) !Self {\n        const socket_fn = if (is_windows) windows.socket else std.posix.socket;\n\n        // std provides a shim for Darwin to set SOCK_NONBLOCK.\n        // Socket creation will only set the flag if we provide the shim rather than the actual flag.\n        const socket_type = if (is_unix)\n            protocol.toSocketType() | std.posix.SOCK.CLOEXEC\n        else\n            protocol.toSocketType();\n\n        return Self{\n            .family = family,\n            .internal = try socket_fn(family.toNativeAddressFamily(), socket_type, 0),\n            .endpoint = null,\n        }"}
{"instruction":"Write Zig 0.14.1 code for: comptime §","input":"Zig places importance on the concept of whether an expression is known at compile-time. There are a few different places this concept is used, and these building blocks are used to keep the language small, readable, and powerful. Introducing the Compile-Time Concept § Compile-Time Parameters § Compile-time parameters is how Zig implements generics. It is compile-time duck typing. compile-time_duck_typing.zig In Zig, types are first-class citizens. They can be assigned to variables, passed as par","output":"<span class=\"tok-kw\">const</span> Writer = <span class=\"tok-kw\">struct</span> {\n    <span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">printValue</span>(self: *Writer, value: <span class=\"tok-kw\">anytype</span>) !<span class=\"tok-type\">void</span> {\n        <span class=\"tok-kw\">switch</span> (<span class=\"tok-builtin\">@typeInfo</span>(<span class=\"tok-builtin\">@TypeOf</span>(value))) {\n            .int => {\n                <span class=\"tok-kw\">return</span> self.writeInt(value);\n            },\n            .float => {\n                <span class=\"tok-kw\">return</span> self.writeFloat(value);\n            },\n            .pointer => {\n                <span class=\"tok-kw\">return</span> self.write(value);\n            },\n            <span class=\"tok-kw\">else</span> => {\n                <span class=\"tok-builtin\">@compileError</span>(<span class=\"tok-str\">\"Unable to print type '\"</span> ++ <span class=\"tok-builtin\">@typeName</span>(<span class=\"tok-builtin\">@TypeOf</span>(value)) ++ <span class=\"tok-str\">\"'\"</span>);\n            },\n        }\n    }\n\n    <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">write</span>(self: *Writer, value: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) !<span class=\"tok-type\">void</span> {\n        _ = self;\n        _ = value;\n    }\n    <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">writeInt</span>(self: *Writer, value: <span class=\"tok-kw\">anytype</span>) !<span class=\"tok-type\">void</span> {\n        _ = self;\n        _ = value;\n    }\n    <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">writeFloat</span>(self: *Writer, value: <span class=\"tok-kw\">anytype</span>) !<span class=\"tok-type\">void</span> {\n        _ = self;\n        _ = value;\n    }\n};"}
{"instruction":"Write a Zig function similar to inlinedFunc from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/ziginline/main.zig","output":"fn inlinedFunc() i32 {\n    print(\"inlinedFunc called 1\\n\", .{}"}
{"instruction":"Write a Zig const similar to palette_len from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/animations/ColorMix.zig","output":"const palette_len: usize = 12;"}
{"instruction":"Write Zig 0.14.1 code for: Casting §","input":"A type cast converts a value of one type to another. Zig has Type Coercion for conversions that are known to be completely safe and unambiguous, and Explicit Casts for conversions that one would not want to happen on accident. There is also a third kind of type conversion called Peer Type Resolution for the case when a result type must be decided given multiple operand types. Type Coercion § Type coercion occurs when one type is expected, but different type is provided: test_type_coercion.zig Sh","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">const</span> Tuple = <span class=\"tok-kw\">struct</span> { <span class=\"tok-type\">u8</span>, <span class=\"tok-type\">u8</span> };\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"coercion from homogeneous tuple to array\"</span> {\n    <span class=\"tok-kw\">const</span> tuple: Tuple = .{ <span class=\"tok-number\">5</span>, <span class=\"tok-number\">6</span> };\n    <span class=\"tok-kw\">const</span> array: [<span class=\"tok-number\">2</span>]<span class=\"tok-type\">u8</span> = tuple;\n    _ = array;\n}"}
{"instruction":"Write a Zig function similar to spawn from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub fn spawn(self: *ChildProcess) SpawnError!void {\n    if (!process.can_spawn) {\n        @compileError(\"the target operating system cannot spawn processes\");\n    }"}
{"instruction":"Write a Zig function similar to queueTask from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn queueTask(vm: *cy.VM) anyerror!Value {\n    const cb = vm.getValue(0);\n    vm.retain(cb);\n    const task = cy.heap.AsyncTask{\n        .type = .callback,\n        .data = .{ .callback = cb }"}
{"instruction":"Write a Zig const similar to PLAYER_JUMP_SPD from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/2d_camera_platformer.zig","output":"const PLAYER_JUMP_SPD: f32 = 350;"}
{"instruction":"Write a Zig function similar to createPath from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"fn createPath(self: *Self) ![]const u8 {\n        var hash: [20]u8 = undefined;\n        self.hasher.final(&hash);\n\n        const path = if (self.subdir) |subdir|\n            try std.fmt.allocPrint(\n                self.builder.allocator,\n                \"{s}"}
{"instruction":"Write a Zig function similar to serialize_patches from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"fn serialize_patches(b: *Build, patches: []const regz.patch.Patch) []const u8 {\n            var buf: std.Io.Writer.Allocating = .init(b.allocator);\n\n            for (patches) |patch| {\n                buf.writer.print(\"{f}"}
{"instruction":"Write a Zig function similar to isMain from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/fiber.zig","output":"pub fn isMain(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjFiber.cast(ctx.vm.peek(0).obj()).?;\n\n    ctx.vm.push(v.Value.fromBoolean(self.fiber.parent_fiber == null));\n\n    return 1;\n}"}
{"instruction":"Write a Zig function similar to create from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/stack.zig","output":"pub fn create(self: *PooledStackAllocator) !Stack {\n        return Stack.init(try self.pool.create());\n    }"}
{"instruction":"Write a Zig function similar to parseCharData from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn parseCharData(parser: *Parser, alloc: Allocator) !?[]const u8 {\n    const begin = parser.offset;\n\n    while (parser.peek()) |ch| {\n        switch (ch) {\n            '<' => break,\n            else => _ = parser.consumeNoEof(),\n        }"}
{"instruction":"Write a Zig function similar to vendorId from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/pci.zig","output":"fn vendorId(self: *const Self) u16 {\n        return self.read16(0);\n    }"}
{"instruction":"Write a Zig function similar to decompressBuffer from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"fn decompressBuffer(self: Blueprint, data: []const u8, blockPaletteSizeBytes: usize, compression: BlueprintCompression) ![]u8 {\n\t\tconst blockArraySizeBytes = self.blocks.width*self.blocks.depth*self.blocks.height*@sizeOf(BlockStorageType);\n\t\tconst decompressedDataSizeBytes = blockPaletteSizeBytes + blockArraySizeBytes;\n\n\t\tconst decompressedData = main.stackAllocator.alloc(u8, decompressedDataSizeBytes);\n\n\t\tswitch(compression) {\n\t\t\t.deflate => {\n\t\t\t\tconst sizeAfterDecompression = try Compression.inflateTo(decompressedData, data);\n\t\t\t\tstd.debug.assert(sizeAfterDecompression == decompressedDataSizeBytes);\n\t\t\t}"}
{"instruction":"Write a Zig function similar to hid_output from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub fn hid_output(data: u8) [2]u8 {\n    return hid_report_item(\n        1,\n        @intFromEnum(ReportItemTypes.Main),\n        @intFromEnum(ReportItemMainGroup.Output),\n        std.mem.toBytes(data),\n    );\n}"}
{"instruction":"Write a Zig function similar to initRawPixels from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn initRawPixels(pixels: []const u8, pixel_format: PixelFormat) !PixelStorage {\n        return switch (pixel_format) {\n            .grayscale1 => {\n                return .{\n                    .grayscale1 = @constCast(std.mem.bytesAsSlice(Grayscale1, pixels)),\n                }"}
{"instruction":"Write a Zig struct similar to User from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: src/http/form.zig","output":"const User = struct { id: u32, name: []const u8, age: u8, role: UserRole }"}
{"instruction":"Write a Zig function similar to rotateZ from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\t@setEvalBranchQuota(65_536);\n\n\tcomptime var rotationTable: [4][256]u8 = undefined;\n\tcomptime for(0..4) |a| {\n\t\tfor(0..256) |old| {\n\t\t\tvar new: u8 = 0b11_11_11_11;\n\n\t\t\tfor(0..2) |i| for(0..2) |j| for(0..2) |k| {\n\t\t\t\tconst sin: f32 = @sin((std.math.pi/2.0)*@as(f32, @floatFromInt(a)));\n\t\t\t\tconst cos: f32 = @cos((std.math.pi/2.0)*@as(f32, @floatFromInt(a)));\n\n\t\t\t\tconst x: f32 = (@as(f32, @floatFromInt(i)) - 0.5)*2.0;\n\t\t\t\tconst y: f32 = (@as(f32, @floatFromInt(j)) - 0.5)*2.0;\n\n\t\t\t\tconst rX = @intFromBool(x*cos - y*sin > 0);\n\t\t\t\tconst rY = @intFromBool(x*sin + y*cos > 0);\n\n\t\t\t\tif(hasSubBlock(@intCast(old), @intCast(i), @intCast(j), @intCast(k))) {\n\t\t\t\t\tnew &= ~subBlockMask(rX, rY, @intCast(k));\n\t\t\t\t}"}
{"instruction":"Write a Zig function similar to copyTo from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn copyTo(file: *const OutputFile, _: string, rel_path: []const u8, dir: FileDescriptorType) !void {\n    const fd_out = bun.FD.fromStdFile(try dir.stdDir().createFile(rel_path, .{}"}
{"instruction":"Write a Zig function similar to expect from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"fn expect(as: *Assembler, id: Tokenizer.Token.Id) ParseError!Tokenizer.Token {\n        const next_tok_id = try as.peek();\n        if (next_tok_id == id) return as.it.next();\n        return error.UnexpectedToken;\n    }"}
{"instruction":"Write a Zig function similar to ev_del from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"fn ev_del(self: *EvLoop, fdobj: *const Fd) bool {\n    return self.ev_ctl(c.EPOLL_CTL_DEL, fdobj.fd, null);\n}"}
{"instruction":"Write a Zig struct similar to DesktopUsage from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const DesktopUsage = struct {\n    pub const keyboard: [1]u8 = \"\\x06\".*;\n}"}
{"instruction":"Write a Zig function similar to toSlice from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn toSlice(comptime T: type, s: []const T) Slice {\n    return .{\n        .ptr = @constCast(s.ptr),\n        .len = s.len,\n    }"}
{"instruction":"Write a Zig const similar to minute from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: src/http/date.zig","output":"const minute: u8 = @intCast(@mod(@divFloor(remsecs, 60), 60));"}
{"instruction":"Write a Zig function similar to getAllIdentifiers from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"fn getAllIdentifiers(comptime definition: type) [countDefinitions(definition) + 1]Identifier {\n    const qualifiedName = &.{@import(\"pyconf\").module_name}"}
{"instruction":"Write a Zig function similar to fromCompareOperator from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub fn fromCompareOperator(\n        signedness: std.builtin.Signedness,\n        op: std.math.CompareOperator,\n    ) Condition {\n        return switch (signedness) {\n            .signed => fromCompareOperatorSigned(op),\n            .unsigned => fromCompareOperatorUnsigned(op),\n        }"}
{"instruction":"Write a Zig function similar to reset from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn reset(self: *ResetEventSingle) void {\n            self.waiter.store(&State.unset_state, .seq_cst);\n        }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = l;\n                _ = c;\n                const ptr = @as(*usize, @ptrCast(@alignCast(ud.?)));\n                ptr.* = r.read catch unreachable;\n                return .disarm;\n            }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> float: <span class=\"tok-type\">f32</span> = <span class=\"tok-number\">4294967296</span>; <span class=\"tok-comment\">// runtime-known</span>\n    _ = &float;\n    <span class=\"tok-kw\">const</span> int: <span class=\"tok-type\">i32</span> = <span class=\"tok-builtin\">@intFromFloat</span>(float);\n    _ = int;\n}"}
{"instruction":"Write a Zig function similar to sys_rename from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_rename(file: [*]const fs.Path) isize {\n    return call(.SYS_RENAME, file);\n}"}
{"instruction":"Write a Zig function similar to sib_baseDisp8 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn sib_baseDisp8(self: Self, base: u3) !void {\n            // scale is ignored\n            // index = 4 means no index\n            try self.sib(0, 4, base);\n        }"}
{"instruction":"Write a Zig function similar to deinit from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn deinit(self: *Self) void {\n        self.read_fds.deinit(self.allocator);\n        self.write_fds.deinit(self.allocator);\n\n        self.read_fd_set.deinit(self.allocator);\n        self.write_fd_set.deinit(self.allocator);\n        self.except_fd_set.deinit(self.allocator);\n    }"}
{"instruction":"Write a Zig function similar to move_begin from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn move_begin(self: *Self) void {\n    self.col = 0;\n    self.target = self.col;\n}"}
{"instruction":"Write a Zig function similar to onWriteHTML from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig","output":"pub fn onWriteHTML(_: *HTMLScanner, bytes: []const u8) void {\n    _ = bytes; // bytes are not written in scan phase\n}"}
{"instruction":"Write a Zig function similar to mapSize from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn mapSize(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.MapInner, &obj.map.inner);\n    return Value.initInt(@intCast(inner.size));\n}"}
{"instruction":"Write a Zig function similar to isStillNeeded from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"pub fn isStillNeeded(_: *MusicLoadTask) bool {\n\t\treturn true;\n\t}"}
{"instruction":"Write a Zig function similar to show_or_log_message from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn show_or_log_message(self: *Self, operation: enum { show, log }, params_cb: []const u8) !void {\n    if (!tp.env.get().is(\"lsp_verbose\")) return;\n    var type_: i32 = 0;\n    var message: ?[]const u8 = null;\n    var iter = params_cb;\n    var len = try cbor.decodeMapHeader(&iter);\n    while (len > 0) : (len -= 1) {\n        var field_name: []const u8 = undefined;\n        if (!(try cbor.matchString(&iter, &field_name))) return error.InvalidMessage;\n        if (std.mem.eql(u8, field_name, \"type\")) {\n            if (!(try cbor.matchValue(&iter, cbor.extract(&type_)))) return error.InvalidMessageField;\n        }"}
{"instruction":"Write a Zig struct similar to Context from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"const Context = struct {\n        allocator: std.mem.Allocator,\n        nodes: std.ArrayList(Ast.Node.Index) = .empty,\n        locs: std.ArrayList(offsets.Loc) = .empty,\n\n        pub fn append(self: *@This(), ast: Ast, node: Ast.Node.Index) !void {\n            std.debug.assert(node != .root);\n            try self.nodes.append(self.allocator, node);\n            try self.locs.append(self.allocator, offsets.nodeToLoc(ast, node));\n        }"}
{"instruction":"Write a Zig function similar to init from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/platform.zig","output":"pub fn init(title: [*:0]const u8, width: i32, height: i32) !*Self {\n        if (builtin.is_test) return undefined;\n\n        // requested GL features\n        c.glfwWindowHint(c.GLFW_CONTEXT_VERSION_MAJOR, 2);\n        c.glfwWindowHint(c.GLFW_CONTEXT_VERSION_MINOR, 0);\n\n        const window = c.glfwCreateWindow(width, height, title, null, null) orelse return error.GlfwCreateWindowFailed;\n        _ = c.glfwSetWindowCloseCallback(window, &handleGlfwWindowClose);\n        _ = c.glfwSetCursorPosCallback(window, &handleGlfwCursorPos);\n        _ = c.glfwSetScrollCallback(window, &handleGlfwScroll);\n        _ = c.glfwSetMouseButtonCallback(window, &handleGlfwMouseButton);\n        _ = c.glfwSetCharCallback(window, &handleGlfwChar);\n        _ = c.glfwSetKeyCallback(window, &handleGlfwKey);\n\n        c.glfwMakeContextCurrent(window);\n        _ = gladLoadGL();\n\n        return @ptrCast(window);\n    }"}
{"instruction":"Write a Zig function similar to deinit from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"pub fn deinit(self: *Palette) void {\n\t\tfor(self.palette.items) |item| {\n\t\t\tself.palette.allocator.free(item);\n\t\t}"}
{"instruction":"Write a Zig function similar to genList from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genList(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .list);\n    const args = c.ir.getArray(data.args, u32, data.nargs);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n    const argStart = numSlots(c);\n\n    for (args) |argIdx| {\n        const arg_t = c.ir.getExprType(argIdx).id;\n        const temp = try bc.reserveTemp(c, arg_t);\n        const argv = try genExpr(c, argIdx, Cstr.toTempRetain(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }"}
{"instruction":"Write a Zig function similar to udp from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn udp(self: *SessionNode) *UDP {\n        assert(self.type == .udp);\n        return @fieldParentPtr(UDP, \"session_node\", self);\n    }"}
{"instruction":"Write a Zig struct similar to Runner from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"const Runner = struct {\n    allocator: std.mem.Allocator,\n    n: usize,\n    csv: ?std.fs.File = null,\n\n    pub fn run(self: *Runner, bench: anytype, input: anytype) !void {\n        var out = std.io.getStdOut();\n\n        var name_buf: [255]u8 = undefined;\n        var fbs = std.io.fixedBufferStream(&name_buf);\n        try bench.writeName(fbs.writer());\n        const name = fbs.getWritten();\n\n        try out.writer().print(\"{s}"}
{"instruction":"Write a Zig const similar to opts from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"const opts: Options = .{};"}
{"instruction":"Write a Zig function similar to dumpList from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Bytecode.zig","output":"fn dumpList(list: []const Ref) void {\n    for (list, 0..) |item, i| {\n        if (i != 0) std.debug.print(\", \", .{}"}
{"instruction":"Write a Zig function similar to truncate from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn truncate(msg: []const u8) []u8 {\n    const res_msg = cc.static_buf(c.DNS_QMSG_MAXSIZE);\n    const len = c.dns_truncate(msg.ptr, cc.to_isize(msg.len), res_msg.ptr);\n    return res_msg[0..len];\n}"}
{"instruction":"Write a Zig struct similar to GenericResolve from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const GenericResolve = struct {\n    expression: Node.Index,\n    resolved_types: []const Node.Index,\n}"}
{"instruction":"Write a Zig const similar to max from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"const max: f32 = (8.0 + radius)/16.0;"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/simple_layer/main.zig","output":"pub fn forward(self: Layer, x: zml.Tensor) zml.Tensor {\n        var y = self.weight.mul(x);\n        if (self.bias) |bias| {\n            y = y.add(bias);\n        }"}
{"instruction":"Write a Zig function similar to header_len from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn header_len() u16 {\n    return c.dns_header_len();\n}"}
{"instruction":"Write a Zig const similar to bits from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins/eval.zig","output":"const bits: switch (T) {\n        f32 => u23,\n        f64 => u52,\n        f80 => u63,\n        f128 => u112,\n        else => @compileError(\"Invalid type for makeNan\"),\n    } = @truncate(parsed);"}
{"instruction":"Write a Zig function similar to start from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig","output":"pub fn start(comptime func: anytype, args: anytype) void {\n    const buf = g.allocator.alignedAlloc(u8, std.Target.stack_align, @frameSize(func)) catch unreachable;\n    _ = @asyncCall(buf, {}"}
{"instruction":"Write a Zig function similar to initTempValue from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn initTempValue(reg: SlotId, retained: bool) GenValue {\n        return .{\n            .type = .temp,\n            .reg = reg,\n            .retained = retained,\n        }"}
{"instruction":"Write a Zig struct similar to CellSize from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Image.zig","output":"pub const CellSize = struct {\n    rows: u16,\n    cols: u16,\n}"}
{"instruction":"Write a Zig struct similar to BreakpointAndPID from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"const BreakpointAndPID = struct {\n            bp: ?types.Breakpoint,\n            pid: types.PID,\n        }"}
{"instruction":"Write a Zig function similar to main from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: example/streaming-clap.zig","output":"pub fn main() !void {\n    const allocator = std.heap.page_allocator;\n\n    // First we specify what parameters our program can take.\n    const params = [_]clap.Param(u8){\n        .{\n            .id = 'h',\n            .names = .{ .short = 'h', .long = \"help\" }"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn open(file: ConstStr, oflag: c_int, ...) c_int;\n    }"}
{"instruction":"Write a Zig function similar to getFileFromPath from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn getFileFromPath(editor: *Editor, path: []const u8) ?*pixi.Internal.File {\n    if (editor.open_files.values().len == 0) return null;\n\n    for (editor.open_files.values()) |*file| {\n        if (std.mem.eql(u8, file.path, path)) {\n            return file;\n        }"}
{"instruction":"Write a Zig function similar to findProblemWithAndroidSdk from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build/auto-detect.zig","output":"fn findProblemWithAndroidSdk(b: *Builder, versions: Sdk.ToolchainVersions, path: []const u8) ?[]const u8 {\n    std.fs.cwd().access(path, .{}"}
{"instruction":"Write a Zig function similar to checkParent from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/node.zig","output":"fn checkParent(self: *Node, node: *Node, parent: ?*Node) !void {\n        if (node.owner_document != self.owner_document or node.parent_node != parent) {\n            return error.InvalidChild;\n        }"}
{"instruction":"Write a Zig function similar to json from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"pub fn json(self: *Request, comptime T: type) !?T {\n        const b = self.body() orelse return null;\n        return try std.json.parseFromSliceLeaky(T, self.arena, b, .{}"}
{"instruction":"Write a Zig function similar to getSourceMTimeUncached from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"pub fn getSourceMTimeUncached(comp: *const Compilation, source_id: Source.Id) ?u64 {\n    const source = comp.getSource(source_id);\n    if (comp.cwd.statFile(source.path)) |stat| {\n        const mtime = @divTrunc(stat.mtime, std.time.ns_per_s);\n        return std.math.cast(u64, mtime);\n    }"}
{"instruction":"Write a Zig const similar to slice_luv from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const slice_luv: []CIELuvAlpha = @ptrCast(colors);"}
{"instruction":"Write a Zig struct similar to Config from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig","output":"pub const Config = struct {\n    /// TODO: Make this optional, to support STM32F303 et al. auto baud-rate detection?\n    baud_rate: u32,\n    stop_bits: StopBits = .one,\n    parity: ?Parity = null,\n    data_bits: DataBits = .eight,\n}"}
{"instruction":"Write a Zig const similar to R_COEFF_VEC from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const R_COEFF_VEC: @Vector(SIMD_SIZE, u32) = @splat(R_COEFF);"}
{"instruction":"Write a Zig const similar to kp_9 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_9: u21 = 57408;"}
{"instruction":"Write a Zig function similar to set_windows_dll from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn set_windows_dll(allocator: std.mem.Allocator, java_home: []const u8) void {\n    comptime assert(builtin.os.tag == .windows);\n\n    const java_bin_path = std.fs.path.joinZ(\n        allocator,\n        &.{ java_home, \"\\\\bin\" }"}
{"instruction":"Write a Zig function similar to navigate from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn navigate(self: webui, url: [:0]const u8) void {\n    c.webui_navigate(self.window_handle, url.ptr);\n}"}
{"instruction":"Write a Zig struct similar to UndefinedValue from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const UndefinedValue = struct {\n        ty: Index,\n    }"}
{"instruction":"Write a Zig function similar to apply from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputConfig.zig","output":"fn apply(tap_button_map: TapButtonMap, device: *c.libinput_device) void {\n        _ = c.libinput_device_config_tap_set_button_map(device, switch (tap_button_map) {\n            .@\"left-right-middle\" => c.LIBINPUT_CONFIG_TAP_MAP_LRM,\n            .@\"left-middle-right\" => c.LIBINPUT_CONFIG_TAP_MAP_LMR,\n        }"}
{"instruction":"Write a Zig function similar to parsePtrSize from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"fn parsePtrSize(as: *Assembler) ParseError!Instruction.Memory.PtrSize {\n        const size = try as.expect(.string);\n        try as.skip(1, .{.space}"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn socket(family: c_int, type: c_int, protocol: c_int) c_int;\n    }"}
{"instruction":"Write a Zig struct similar to DebugOptions from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"const DebugOptions = struct {\n        debug: bool,\n        stack: bool,\n        current_instruction: bool,\n        perf: bool,\n        stop_on_report: bool,\n        placeholders: bool,\n        type_registry: bool,\n\n        pub fn step(self: DebugOptions, options: *Build.Step.Options) void {\n            options.addOption(@TypeOf(self.debug), \"debug\", self.debug);\n            options.addOption(@TypeOf(self.stack), \"debug_stack\", self.stack);\n            options.addOption(@TypeOf(self.current_instruction), \"debug_current_instruction\", self.current_instruction);\n            options.addOption(@TypeOf(self.perf), \"show_perf\", self.perf);\n            options.addOption(@TypeOf(self.stop_on_report), \"stop_on_report\", self.stop_on_report);\n            options.addOption(@TypeOf(self.placeholders), \"debug_placeholders\", self.placeholders);\n            options.addOption(@TypeOf(self.type_registry), \"debug_type_registry\", self.type_registry);\n        }"}
{"instruction":"Write a Zig function similar to generateSizeofType from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn generateSizeofType(comp: *Compilation, w: *std.Io.Writer, name: []const u8, qt: QualType) !void {\n    try w.print(\"#define {s}"}
{"instruction":"Write a Zig struct similar to Win64 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/abi.zig","output":"pub const Win64 = struct {\n    /// Note that .rsp and .rbp also belong to this set, however, we never expect to use them\n    /// for anything else but stack offset tracking therefore we exclude them from this set.\n    pub const callee_preserved_regs = [_]Register{ .rbx, .rsi, .rdi, .r12, .r13, .r14, .r15 }"}
{"instruction":"Write a Zig function similar to getStateSnapshot from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn getStateSnapshot(self: *Self, req: proto.GetStateRequest) !types.StateSnapshot {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            self.data.mu.lock();\n            defer self.data.mu.unlock();\n\n            //\n            // Copy all non-internal breakpoints\n            //\n\n            var breakpoints = ArrayList(types.Breakpoint).init(req.alloc);\n            errdefer breakpoints.deinit();\n\n            for (self.data.state.breakpoints.items) |bp| {\n                if (bp.flags.internal) continue;\n                try breakpoints.append(bp);\n            }"}
{"instruction":"Write a Zig function similar to helpCatchMemoryIssues from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MimallocArena.zig","output":"pub fn helpCatchMemoryIssues(self: Borrowed) void {\n        if (comptime bun.FeatureFlags.help_catch_memory_issues) {\n            self.gc();\n            bun.mimalloc.mi_collect(false);\n        }"}
{"instruction":"Write a Zig function similar to restore_state from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn restore_state(self: *Self, data: []const u8) !void {\n    tp.trace(tp.channel.debug, .{\"restore_state\"}"}
{"instruction":"Write a Zig const similar to ty from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/completions.zig","output":"const ty: InternPool.Index = ip.typeOf(index);"}
{"instruction":"Write a Zig function similar to addBreakpoint from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn addBreakpoint(\n            self: *Self,\n            scratch: Allocator,\n            req: proto.UpdateBreakpointRequest,\n        ) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            var source_loc: ?types.SourceLocation = null;\n            const base_addr = switch (req.loc) {\n                .addr => |addr| addr,\n                .source => |r| blk: {\n                    const addr = self.addressForSourceLine(r) orelse return error.BreakpointAddrNotFound;\n                    source_loc = .{\n                        .file_hash = r.file_hash,\n                        .line = r.line,\n                        .column = 0,\n                    }"}
{"instruction":"Write a Zig function similar to create from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputPopup.zig","output":"pub fn create(wlr_popup: *wlr.InputPopupSurfaceV2, input_relay: *InputRelay) !void {\n    const input_popup = try util.gpa.create(InputPopup);\n    errdefer util.gpa.destroy(input_popup);\n\n    input_popup.* = .{\n        .link = undefined,\n        .input_relay = input_relay,\n        .wlr_popup = wlr_popup,\n        .surface_tree = try server.root.hidden.tree.createSceneSubsurfaceTree(wlr_popup.surface),\n    }"}
{"instruction":"Write a Zig function similar to black from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn black(comptime message: []const u8) []const u8 {\n    return wrap(codes.black, message);\n}"}
{"instruction":"Write a Zig function similar to alloc from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: ffi/zig_allocator.zig","output":"pub fn alloc(ctx: ?*const anyopaque, elem: usize, nelems: usize, alignment: usize) callconv(.c) ?*anyopaque {\n        const self: *const std.mem.Allocator = @ptrCast(@alignCast(ctx));\n        const ret = self.rawAlloc(elem * nelems, std.math.log2_int(usize, alignment), @returnAddress()) orelse return null;\n        return @ptrCast(ret);\n    }"}
{"instruction":"Write a Zig function similar to resolve_target from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn resolve_target(b: *std.Build, target_requested: ?[]const u8) !std.Build.ResolvedTarget {\n    const target_host = @tagName(builtin.target.cpu.arch) ++ \"-\" ++ @tagName(builtin.target.os.tag);\n    const target = target_requested orelse target_host;\n    const triples = .{\n        \"aarch64-linux\",\n        \"aarch64-macos\",\n        \"x86_64-linux\",\n        \"x86_64-macos\",\n        \"x86_64-windows\",\n    }"}
{"instruction":"Write a Zig function similar to resolveUnwrapErrorUnionType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveUnwrapErrorUnionType(analyser: *Analyser, ty: Type, side: ErrorUnionSide) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to items from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn items(self: Self, comptime field: Field) []FieldType(field) {\n            return self.slice().items(field);\n        }"}
{"instruction":"Write a Zig function similar to deinit from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/debug.zig","output":"pub fn deinit(co: *const Command, gpa: Allocator) void {\n        var ba = co.build_assets;\n        ba.deinit(gpa);\n    }"}
{"instruction":"Write a Zig function similar to init from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"pub fn init(allocator: NeverFailingAllocator, zon: ZonElement, firstElement: ?[]const u8) !*Palette {\n\t\tconst self = switch(zon) {\n\t\t\t.object => try loadFromZonLegacy(allocator, zon),\n\t\t\t.array, .null => try loadFromZon(allocator, zon),\n\t\t\telse => return error.InvalidPaletteFormat,\n\t\t}"}
{"instruction":"Write a Zig function similar to get_qname from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn get_qname(msg: []const u8, qnamelen: c_int) []const u8 {\n    return msg[header_len() .. header_len() + cc.to_usize(qnamelen) - 1];\n}"}
{"instruction":"Write a Zig function similar to walkOtherNode from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn walkOtherNode(\n    context: *ScopeContext,\n    tree: Ast,\n    node_idx: Ast.Node.Index,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to result_size from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"const result_size: u32 = StateMachine.result_size_bytes(operation);"}
{"instruction":"Write a Zig function similar to ttl_ok from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig","output":"fn ttl_ok(ttl: i32) bool {\n    return ttl > 0 or (g.cache_stale > 0 and -ttl <= g.cache_stale);\n}"}
{"instruction":"Write a Zig function similar to nextNumber from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/main.zig","output":"fn nextNumber(self: *IdMapParser) ?i64 {\n        while (self.index < self.bytes.len and (self.bytes[self.index] < '0' or self.bytes[self.index] > '9')) {\n            self.index += 1;\n        }"}
{"instruction":"Write a Zig struct similar to Symbol from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub const Symbol = struct {\n    /// Index of the containing atom.\n    atom_index: u32,\n    /// Index into the linker's symbol table.\n    sym_index: u32,\n\n    pub fn format(\n        sym: Symbol,\n        comptime fmt: []const u8,\n        options: std.fmt.FormatOptions,\n        writer: anytype,\n    ) @TypeOf(writer).Error!void {\n        try writer.writeAll(\"Symbol(\");\n        try std.fmt.formatType(sym.atom_index, fmt, options, writer, 0);\n        try writer.writeAll(\", \");\n        try std.fmt.formatType(sym.sym_index, fmt, options, writer, 0);\n        try writer.writeByte(')');\n    }"}
{"instruction":"Write a Zig function similar to getStdIn from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn getStdIn() !File {\n    return File.initStreaming(std.fs.File.stdin()) catch @panic(\"Unable to open stdin\");\n}"}
{"instruction":"Write a Zig function similar to popLoopBlock from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn popLoopBlock(c: *Chunk) !void {\n    const b = c.blocks.pop().?;\n\n    try popLocals(c, b.num_locals, b.node);\n\n    c.curBlock.block_depth -= 1;\n\n    if (cy.Trace) {\n        c.indent -= 1;\n    }"}
{"instruction":"Write a Zig function similar to format from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn format(\n    encoding: Encoding,\n    comptime fmt: []const u8,\n    options: std.fmt.FormatOptions,\n    writer: anytype,\n) !void {\n    _ = options;\n    _ = fmt;\n\n    var opc = encoding.opcode();\n    if (encoding.data.mode.isVex()) {\n        try writer.writeAll(\"VEX.\");\n\n        try writer.writeAll(switch (encoding.data.mode) {\n            .vex_128_w0, .vex_128_w1, .vex_128_wig => \"128\",\n            .vex_256_w0, .vex_256_w1, .vex_256_wig => \"256\",\n            .vex_lig_w0, .vex_lig_w1, .vex_lig_wig => \"LIG\",\n            .vex_lz_w0, .vex_lz_w1, .vex_lz_wig => \"LZ\",\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig function similar to commonInterruptHandler from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/interrupt.zig","output":"fn commonInterruptHandler(trapno: u8, frame: *InterruptFrame) callconv(.c) void {\n    switch (trapno) {\n        T_BRKPT => {\n            const buf = @as([*]u8, @ptrFromInt(frame.rdi))[0..1000];\n            printMessage(buf);\n            while (true) {}"}
{"instruction":"Write a Zig function similar to diff from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"pub fn diff(\n    base: *const Image,\n    comp: *const Image,\n    options: DiffOptions,\n    allocator: std.mem.Allocator,\n) !DiffVariant {\n    if (options.fail_on_layout_change and (base.width != comp.width or base.height != comp.height)) {\n        return DiffVariant.layout;\n    }"}
{"instruction":"Write a Zig const similar to BYTES_PER_PIXEL_32 from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/bmp.zig","output":"const BYTES_PER_PIXEL_32: u8 = 4;"}
{"instruction":"Write a Zig function similar to findSlot from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/SlotChangeMonitor.zig","output":"pub fn findSlot(element: *parser.Element, page: *const Page) !?*parser.Slot {\n    const target_name = (try parser.elementGetAttribute(element, \"slot\")) orelse return null;\n    return findNamedSlot(element, target_name, page);\n}"}
{"instruction":"Write a Zig function similar to sum from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"fn sum(t: *spice.Task, node: *Node) i64 {\n    var res: i64 = node.val;\n\n    if (node.left) |left_child| {\n        if (node.right) |right_child| {\n            var fut = spice.Future(*Node, i64).init();\n            fut.fork(t, sum, right_child);\n            res += t.call(i64, sum, left_child);\n            if (fut.join(t)) |val| {\n                res += val;\n            }"}
{"instruction":"Write a Zig function similar to deinit from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"fn deinit(self: *@This(), allocator: std.mem.Allocator) void {\n                    allocator.free(self.potential_build_files);\n                    self.has_been_checked.deinit(allocator);\n                    self.* = undefined;\n                }"}
{"instruction":"Write a Zig function similar to popProc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn popProc(c: *Chunk) !void {\n    log.tracev(\"pop gen block\", .{}"}
{"instruction":"Write a Zig const similar to base_w from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"const base_w: usize = base.width;"}
{"instruction":"Write a Zig function similar to clBody from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn clBody(_: *TestHandlerDefaultDispatch, req: *Request, res: *Response) !void {\n        res.header(\"Echo-Body\", req.body().?);\n    }"}
{"instruction":"Write a Zig const similar to g from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"const g: f32 = @as(f32, @floatFromInt(color.g)) / 255.0;"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn callback(ud: ?*anyopaque, l: *Loop, c: *Completion, r: Result) CallbackAction {\n                const ptr = @as(*Result, @ptrCast(@alignCast(ud)));\n                ptr.* = r;\n                _ = c;\n                _ = l;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to parseImm from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"fn parseImm(dis: *Disassembler, kind: Encoding.Op) !Immediate {\n    var stream = std.io.fixedBufferStream(dis.code[dis.pos..]);\n    var creader = std.io.countingReader(stream.reader());\n    const reader = creader.reader();\n    const imm = switch (kind) {\n        .imm8s, .rel8 => Immediate.s(try reader.readInt(i8, .little)),\n        .imm16s, .rel16 => Immediate.s(try reader.readInt(i16, .little)),\n        .imm32s, .rel32 => Immediate.s(try reader.readInt(i32, .little)),\n        .imm8 => Immediate.u(try reader.readInt(u8, .little)),\n        .imm16 => Immediate.u(try reader.readInt(u16, .little)),\n        .imm32 => Immediate.u(try reader.readInt(u32, .little)),\n        .imm64 => Immediate.u(try reader.readInt(u64, .little)),\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig struct similar to FuncParam from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const FuncParam = struct {\n    name_type: *Node align(8),\n    type: ?*Node,\n\n    // Used by sema to indicate that the parameter's type is inferred.\n    sema_infer_tparam: bool = false,\n    sema_tparam: bool = false,\n}"}
{"instruction":"Write a Zig const similar to r from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"const r: f32 = std.math.lerp(@as(f32, @floatFromInt(self.r)) / 255, @as(f32, @floatFromInt(other.r)) / 255, t);"}
{"instruction":"Write a Zig function similar to allocator from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/MainAllocator.zig","output":"pub fn allocator(self: Self) Allocator {\n    return self.alloc;\n}"}
{"instruction":"Write a Zig function similar to isInstance from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/LinuxMemFdAllocator.zig","output":"pub fn isInstance(allocator_: std.mem.Allocator) bool {\n    return allocator_.vtable == AllocatorInterface.VTable;\n}"}
{"instruction":"Write a Zig function similar to assert from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"fn assert(loc: std.builtin.SourceLocation, condition: bool) void {\n//     if (!condition) {\n//         std.debug.print(\"assertion error in {s}"}
{"instruction":"Write a Zig function similar to jsonObject from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"pub fn jsonObject(self: *Request) !?std.json.ObjectMap {\n        const value = try self.jsonValue() orelse return null;\n        switch (value) {\n            .object => |o| return o,\n            else => return null,\n        }"}
{"instruction":"Write a Zig const similar to comp_ptr from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"const comp_ptr: [*]const u8 = @ptrCast(@alignCast(comp.data));"}
{"instruction":"Write a Zig function similar to array from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn array(to: *const To) [4]RedT {\n            if (comptime multiple_channel_types) {\n                @compileError(\"Color.to.array may only be used when all channels in the color are the same type.\");\n            }"}
{"instruction":"Explain Result Location Semantics § in Zig 0.14.1","input":"","output":"During compilation, every Zig expression and sub-expression is assigned optional result location information. This information dictates what type the expression should have (its result type), and where the resulting value should be placed in memory (its result location). The information is optional in the sense that not every expression has this information: assignment to _ , for instance, does not provide any information about the type of an expression, nor does it provide a concrete memory location to place it in. As a motivating example, consider the statement const x: u32 = 42 ; . The type annotation here provides a result type of u32 to the initialization expression 42 , instructing the compiler to coerce this integer (initially of type comptime_int ) to this type. We will see more examples shortly. This is not an implementation detail: the logic outlined above is codified into the Zig language specification, and is the primary mechanism of type inference in the language. This sys"}
{"instruction":"Write a Zig function similar to register from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/echo_client.zig","output":"pub fn register(\n            self: *EchoClient,\n            callback: Request.RegisterCallback,\n            user_data: u128,\n        ) void {\n            assert(self.request_inflight == null);\n            assert(self.request_number == 0);\n\n            const message = self.get_message().build(.request);\n            errdefer self.release_message(message.base());\n\n            // We will set parent, session, view and checksums only when sending for the first time:\n            message.header.* = .{\n                .client = self.id,\n                .request = self.request_number,\n                .cluster = self.cluster,\n                .command = .request,\n                .operation = .register,\n                .release = vsr.Release.minimum,\n                .previous_request_latency = 0,\n            }"}
{"instruction":"Write a Zig struct similar to Command from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/init.zig","output":"const Command = struct {\n    multilingual: bool,\n    fn parse(args: []const []const u8) Command {\n        var multilingual: ?bool = null;\n        for (args) |a| {\n            if (std.mem.eql(u8, a, \"--multilingual\")) {\n                multilingual = true;\n            }"}
{"instruction":"Write a Zig function similar to breakStmt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn breakStmt(c: *Chunk, node: *ast.Node) !void {\n    // Release from startLocal of the first parent loop block.\n    var idx = c.blocks.items.len-1;\n    while (true) {\n        const b = c.blocks.items[idx];\n        if (b.isLoopBlock) {\n            try genReleaseSlots(c, c.curBlock.slot_start, b.slot_off, node);\n            break;\n        }"}
{"instruction":"Write a Zig function similar to writeStructEndian from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"fn writeStructEndian(writer: anytype, value: anytype, endian: std.builtin.Endian) anyerror!void {\n    // TODO: make sure this value is not a reference type\n    if (native_endian == endian) {\n        return writer.writeStruct(value);\n    }"}
{"instruction":"Write a Zig function similar to join from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"fn join(\n            self: *Self,\n            task: *Task,\n        ) ?Output {\n            std.debug.assert(self.job.state() != .pending);\n            return self.tryJoin(task);\n        }"}
{"instruction":"Write a Zig function similar to allocator from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig","output":"pub fn allocator(this: *MemoryReportingAllocator) std.mem.Allocator {\n    return std.mem.Allocator{\n        .ptr = this,\n        .vtable = &MemoryReportingAllocator.VTable,\n    }"}
{"instruction":"Write a Zig function similar to drawShape from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/renderer.zig","output":"fn drawShape(self: *Renderer, shape: *const Shape) void {\n        self.vg.beginPath();\n\n        if (std.meta.eql(shape.radii, .{ 0, 0, 0, 0 }"}
{"instruction":"Write a Zig function similar to parseDeclarationValue from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"fn parseDeclarationValue(s: *State) !Span {\n    var start: ?u32 = null;\n    var end: u32 = undefined;\n\n    while (try s.peek()) |token| {\n        switch (token) {\n            .semicolon, .close_curly => break,\n            else => {\n                std.debug.assert(try s.consume() != null);\n                if (start == null) {\n                    start = token.span().start;\n                }"}
{"instruction":"Write a Zig function similar to genTryUnwrapTupleList from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genTryUnwrapTupleList(c: *Compiler, node: Node.Index, val: *const Value) Error!void {\n    if (!val.isRt()) {\n        return c.reportErr(\"expected a tuple/list\", node);\n    }"}
{"instruction":"Write a Zig function similar to self from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"pub fn self(comptime root: type, comptime Class: type) !py.PyType {\n    if (State.getDefinition(root, Class).type != .class) {\n        @compileError(\"Not a class definition: \" ++ Class);\n    }"}
{"instruction":"Write a Zig function similar to OP_MULTIPLY_F from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_MULTIPLY_F(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_MULTIPLY_F);\n}"}
{"instruction":"Write a Zig function similar to peek from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn peek(self: *Parser) ?u8 {\n        return if (self.offset < self.source.len) self.source[self.offset] else null;\n    }"}
{"instruction":"Write a Zig function similar to initKeystore from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn initKeystore(sdk: Sdk, key_store: KeyStore, key_config: KeyConfig) *Step {\n    if (auto_detect.fileExists(key_store.file)) {\n        std.log.warn(\"keystore already exists: {s}"}
{"instruction":"Write a Zig struct similar to TraitDecl from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const TraitDecl = struct {\n    name: *Node align(8),\n    attrs: []*Attribute,\n    funcs: []*FuncDecl,\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to write from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Selection.zig","output":"pub fn write(self: *const Self, writer: *Writer) !void {\n    try cbor.writeArrayHeader(writer, 2);\n    try self.begin.write(writer);\n    try self.end.write(writer);\n}"}
{"instruction":"Write a Zig const similar to unreached from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"const unreached: *o.Obj = obj;"}
{"instruction":"Write a Zig function similar to processMotionEvent from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"fn processMotionEvent(self: *Self, event: *android.AInputEvent) !bool {\n        const event_type = @as(android.AMotionEventActionType, @enumFromInt(android.AMotionEvent_getAction(event)));\n\n        {\n            var native_activity = NativeActivity.init(self.activity);\n            defer native_activity.deinit();\n\n            // Show/Hide keyboard\n            // _ = native_activity.AndroidDisplayKeyboard(true);\n\n            // this allows you to send the app in the background\n            // const success = native_activity.AndroidSendToBack(true);\n            // _ = success;\n            // std.log.scoped(.input).debug(\"SendToBack() = {}"}
{"instruction":"Write a Zig function similar to balancedTree from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"fn balancedTree(allocator: std.mem.Allocator, from: i64, to: i64) !*Node {\n    var node = try allocator.create(Node);\n    node.* = .{ .val = from + @divTrunc(to - from, 2) }"}
{"instruction":"Write a Zig const similar to f22 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f22: u21 = 57385;"}
{"instruction":"Write a Zig const similar to seat from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputManager.zig","output":"const seat: *Seat = @ptrFromInt(virtual_keyboard.seat.data);"}
{"instruction":"Write Zig 0.13.0 code for: while §","input":"A while loop is used to repeatedly execute an expression until some condition is no longer true. test_while.zig Shell Use break to exit a while loop early. test_while_break.zig Shell Use continue to jump back to the beginning of the loop. test_while_continue.zig Shell While loops support a continue expression which is executed when the loop is continued. The continue keyword respects this expression. test_while_continue_expression.zig Shell While loops are expressions. The result of the expressi","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"while loop continue expression\"</span> {\n    <span class=\"tok-kw\">var</span> i: <span class=\"tok-type\">usize</span> = <span class=\"tok-number\">0</span>;\n    <span class=\"tok-kw\">while</span> (i < <span class=\"tok-number\">10</span>) : (i += <span class=\"tok-number\">1</span>) {}\n    <span class=\"tok-kw\">try</span> expect(i == <span class=\"tok-number\">10</span>);\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"while loop continue expression, more complicated\"</span> {\n    <span class=\"tok-kw\">var</span> i: <span class=\"tok-type\">usize</span> = <span class=\"tok-number\">1</span>;\n    <span class=\"tok-kw\">var</span> j: <span class=\"tok-type\">usize</span> = <span class=\"tok-number\">1</span>;\n    <span class=\"tok-kw\">while</span> (i * j < <span class=\"tok-number\">2000</span>) : ({\n        i *= <span class=\"tok-number\">2</span>;\n        j *= <span class=\"tok-number\">3</span>;\n    }) {\n        <span class=\"tok-kw\">const</span> my_ij = i * j;\n        <span class=\"tok-kw\">try</span> expect(my_ij < <span class=\"tok-number\">2000</span>);\n    }\n}"}
{"instruction":"Write a Zig function similar to generateBreak from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateBreak(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    // Close scope(s), then jump\n    try self.endScope(node);\n    try breaks.?.append(\n        self.gc.allocator,\n        .{\n            .ip = try self.OP_JUMP(self.ast.nodes.items(.location)[node]),\n            .label_node = self.ast.nodes.items(.components)[node].Break.destination,\n        }"}
{"instruction":"Write a Zig function similar to send_clear_diagnostics from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn send_clear_diagnostics(_: *Self, to: tp.pid_ref, file_path: []const u8) ClientError!void {\n    to.send(.{ \"cmd\", \"clear_diagnostics\", .{file_path}"}
{"instruction":"Write a Zig function similar to dwarfNum from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/bits.zig","output":"pub fn dwarfNum(reg: Register) u6 {\n        return switch (reg.class()) {\n            .general_purpose => if (reg.isExtended())\n                reg.enc()\n            else\n                @as(u3, @truncate(@as(u24, 0o54673120) >> @as(u5, reg.enc()) * 3)),\n            .sse => 17 + @as(u6, reg.enc()),\n            .x87 => 33 + @as(u6, reg.enc()),\n            .mmx => 41 + @as(u6, reg.enc()),\n            .segment => 50 + @as(u6, reg.enc()),\n        }"}
{"instruction":"Write a Zig function similar to hasNext from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/common.zig","output":"fn hasNext(self: *const volatile Self) bool {\n        return (self.flags & @intFromEnum(VirtqDescFlag.NEXT)) != 0;\n    }"}
{"instruction":"Write a Zig function similar to toVarSym from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn toVarSym(id: u32, retain: bool) Cstr {\n        return .{ .type = .varSym, .data = .{\n            .varSym = .{\n                .id = id,\n                .retain = retain,\n            }"}
{"instruction":"Write a Zig function similar to walkBlockNodeKeepOpen from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn walkBlockNodeKeepOpen(\n    context: *ScopeContext,\n    tree: Ast,\n    node_idx: Ast.Node.Index,\n    start_token: Ast.TokenIndex,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to readULEB128 from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn readULEB128(self: *Self) ReadError!u64 {\n    return try leb.readULEB128(u64, self.io_reader);\n}"}
{"instruction":"Write a Zig function similar to load from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/png.zig","output":"pub fn load(allocator: std.mem.Allocator, data: []const u8) !Image {\n    const ctx = c.spng_ctx_new(0) orelse return error.OutOfMemory;\n    defer c.spng_ctx_free(ctx);\n\n    // Ignore and don't calculate chunk CRC's for better performance\n    _ = c.spng_set_crc_action(ctx, c.SPNG_CRC_USE, c.SPNG_CRC_USE);\n\n    const limit = 1024 * 1024 * 64;\n    _ = c.spng_set_chunk_limits(ctx, limit, limit);\n\n    if (c.spng_set_png_buffer(ctx, @ptrCast(data.ptr), @intCast(data.len)) != 0)\n        return error.InvalidData;\n\n    var ihdr: c.spng_ihdr = undefined;\n    if (c.spng_get_ihdr(ctx, &ihdr) != 0) return error.InvalidData;\n\n    var out_size: usize = 0;\n    if (c.spng_decoded_image_size(ctx, c.SPNG_FMT_RGBA8, &out_size) != 0)\n        return error.InvalidData;\n\n    const result_data = try allocator.alignedAlloc(u8, .of(u32), out_size);\n    errdefer allocator.free(result_data);\n\n    if (c.spng_decode_image(ctx, @ptrCast(result_data.ptr), out_size, c.SPNG_FMT_RGBA8, c.SPNG_DECODE_TRNS) != 0)\n        return error.InvalidData;\n\n    return Image{\n        .width = ihdr.width,\n        .height = ihdr.height,\n        .data = @ptrCast(result_data),\n        .len = result_data.len / @sizeOf(u32),\n    }"}
{"instruction":"Write a Zig function similar to eql from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/InternalScreen.zig","output":"pub fn eql(self: InternalCell, cell: Cell) bool {\n\n        // fastpath when both cells are default\n        if (self.default and cell.default) return true;\n\n        return std.mem.eql(u8, self.char.items, cell.char.grapheme) and\n            Style.eql(self.style, cell.style) and\n            std.mem.eql(u8, self.uri.items, cell.link.uri) and\n            std.mem.eql(u8, self.uri_id.items, cell.link.params);\n    }"}
{"instruction":"Write a Zig function similar to zigToMIRType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn zigToMIRType(zig_type: ZigType) m.MIR_type_t {\n    return switch (zig_type) {\n        .Int => if (zig_type.Int.signedness == .signed)\n            switch (zig_type.Int.bits) {\n                8 => m.MIR_T_I8,\n                16 => m.MIR_T_I16,\n                32 => m.MIR_T_I32,\n                64 => m.MIR_T_I64,\n                else => unreachable,\n            }"}
{"instruction":"Write a Zig function similar to at from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn at(slice: Slice, index: u32, ip: *InternPool) Index {\n            assert(index < slice.len);\n            ip.lock.lockShared();\n            defer ip.lock.unlockShared();\n            return @enumFromInt(ip.extra.items[slice.start + index]);\n        }"}
{"instruction":"Write a Zig const similar to elem_t from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const elem_t: cy.TypeId = @intCast(vm.getInt(2));"}
{"instruction":"Write a Zig function similar to reset from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub fn reset() void {\n\tsize = 0;\n\tores.clearAndFree();\n\tmeshes.reset();\n\t_ = arenaAllocator.reset(.free_all);\n\treverseIndices = .init(arena.allocator);\n}"}
{"instruction":"Write a Zig function similar to initJitCondFlag from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn initJitCondFlag(condt: jitgen.JitCondFlagType) GenValue {\n        return .{ .type = .jitCondFlag,\n            .reg = undefined, .retained = false,\n            .data = .{ .jitCondFlag = .{\n                .type = condt,\n            }"}
{"instruction":"Write a Zig const similar to BREAKPOINT_DEBUG from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const BREAKPOINT_DEBUG: u8 = 3;"}
{"instruction":"Write a Zig function similar to setGamemode from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn setGamemode(user: ?*main.server.User, gamemode: Gamemode) void {\n\t\tif(user == null) {\n\t\t\tClientSide.setGamemode(gamemode);\n\t\t}"}
{"instruction":"Write a Zig function similar to dispatch from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"fn dispatch(context: *Client) void {\n                assert(context.action == .publish);\n                assert(context.action.publish.phase == .sending);\n                context.action.publish.phase = .awaiting_confirmation;\n            }"}
{"instruction":"Write a Zig function similar to next from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub fn next(self: *Tokenizer, src: []const u8) ?Token {\n    if (self.deferred_token) |t| {\n        const token_copy = t;\n        self.deferred_token = null;\n        return token_copy;\n    }"}
{"instruction":"Write a Zig function similar to deinit from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"pub fn deinit(self: *GetResult) void {\n        // if the result is shared, don't deinit.\n        if (self.shared) {\n            return;\n        }"}
{"instruction":"Write a Zig const similar to af from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const af: c_ulong = 32;"}
{"instruction":"Write a Zig function similar to getIdentifier from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"pub fn getIdentifier(\n        comptime root: type,\n        comptime definition: type,\n    ) Identifier {\n        return findIdentifier(root, definition) orelse @compileError(\"Definition not yet identified \" ++ @typeName(definition));\n    }"}
{"instruction":"Write a Zig function similar to conv from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"fn conv(dcol: dvui.Color) tvg.Color {\n                return tvg.Color{\n                    .r = @as(f32, @floatFromInt(dcol.r)) / 255.0,\n                    .g = @as(f32, @floatFromInt(dcol.g)) / 255.0,\n                    .b = @as(f32, @floatFromInt(dcol.b)) / 255.0,\n                    .a = @as(f32, @floatFromInt(dcol.a)) / 255.0,\n                }"}
{"instruction":"Write a Zig const similar to colon from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"const colon: Key = .{\n        .codepoint = ':',\n        .mods = .{},\n    };"}
{"instruction":"Write a Zig const similar to max from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"const max: u128 = switch (qt.bitSizeof(comp)) {\n        8 => if (unsigned) std.math.maxInt(u8) else std.math.maxInt(i8),\n        16 => if (unsigned) std.math.maxInt(u16) else std.math.maxInt(i16),\n        32 => if (unsigned) std.math.maxInt(u32) else std.math.maxInt(i32),\n        64 => if (unsigned) std.math.maxInt(u64) else std.math.maxInt(i64),\n        128 => if (unsigned) std.math.maxInt(u128) else std.math.maxInt(i128),\n        else => unreachable,\n    };"}
{"instruction":"Write a Zig function similar to build from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: build.zig","output":"pub fn build(b: *std.Build) void {\n    const all_targets = b.option(bool, \"all_targets\", \"Build all known good targets during release builds (default: no)\") orelse false;\n    const tracy_enabled = b.option(bool, \"enable_tracy\", \"Enable tracy client library (default: no)\") orelse false;\n    const use_tree_sitter = b.option(bool, \"use_tree_sitter\", \"Enable tree-sitter (default: yes)\") orelse true;\n    const strip = b.option(bool, \"strip\", \"Disable debug information (default: no)\");\n    const use_llvm = b.option(bool, \"use_llvm\", \"Enable llvm backend (default: none)\");\n    const pie = b.option(bool, \"pie\", \"Produce an executable with position independent code (default: none)\");\n    const gui = b.option(bool, \"gui\", \"Standalone GUI mode\") orelse false;\n    const test_filters = b.option([]const []const u8, \"test-filter\", \"Skip tests that do not match any filter\") orelse &[0][]const u8{}"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn init(self: *ModernBertForMaskedLM, options: ModernBertOptions) void {\n        self.model.init(options);\n        self.head.norm.eps = 1e-5;\n\n        self.head.dense.weight = self.head.dense.weight.withSharding(.{0}"}
{"instruction":"Write a Zig function similar to bog_Errors_deinit from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/lib.zig","output":"fn bog_Errors_deinit(errors: *bog.Errors) void {\n    errors.deinit();\n}"}
{"instruction":"Write a Zig function similar to defaultDispatcherWithHandler from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn defaultDispatcherWithHandler(handler: H, action: ActionArg, req: *Request, res: *Response) !void {\n            if (comptime std.meta.hasFn(Handler, \"dispatch\")) {\n                return handler.dispatch(action, req, res);\n            }"}
{"instruction":"Write a Zig struct similar to HasPopup from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub const HasPopup = struct {\n    pub const menu = c.ACCESSKIT_HAS_POPUP_MENU;\n    pub const listbox = c.ACCESSKIT_HAS_POPUP_LISTBOX;\n    pub const tree = c.ACCESSKIT_HAS_POPUP_TREE;\n    pub const grid = c.ACCESSKIT_HAS_POPUP_GRID;\n    pub const dialog = c.ACCESSKIT_HAS_POPUP_DIALOG;\n}"}
{"instruction":"Write a Zig function similar to getSourceEndIndex from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"pub fn getSourceEndIndex(self: ImportDecl, tree: Ast, include_line_break: bool) usize {\n        var last_token = ast.lastToken(tree, self.var_decl);\n        if (last_token + 1 < tree.tokens.len - 1 and tree.tokenTag(last_token + 1) == .semicolon) {\n            last_token += 1;\n        }"}
{"instruction":"Write a Zig struct similar to AssignDestructure from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub const AssignDestructure = struct {\n        /// tag is .assign_destructure\n        node: Ast.Node.Index,\n        index: u32,\n\n        pub fn getVarDeclNode(self: AssignDestructure, tree: Ast) Ast.Node.Index {\n            const extra_index = tree.nodeData(self.node).extra_and_node[0];\n            return @enumFromInt(tree.extra_data[@intFromEnum(extra_index) + 1 ..][self.index]);\n        }"}
{"instruction":"Write a Zig function similar to identifier from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Token.zig","output":"pub fn identifier(name: []const u8) Self {\n    return .{\n        .tag = .Identifier,\n        .lexeme = name,\n        .line = 0,\n        .column = 0,\n        .source = \"\",\n        .script_name = \"\",\n        .literal = .{\n            .String = name,\n        }"}
{"instruction":"Write a Zig function similar to uidgidmap_helper from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/main.zig","output":"fn uidgidmap_helper(child_allocator: Allocator, helper: []const u8, pid: i64, uid_mappings: IDMappings) !void {\n    var arena = std.heap.ArenaAllocator.init(child_allocator);\n    const allocator = arena.allocator();\n    defer arena.deinit();\n\n    var argv = try std.ArrayList([]const u8).initCapacity(allocator, 2 + 3 * uid_mappings.len);\n    argv.appendAssumeCapacity(helper);\n    // TODO: specify pid using fd:N to avoid a TOCTTOU, see newuidmap(1)\n    argv.appendAssumeCapacity(try intToString(allocator, pid));\n\n    for (uid_mappings) |uid_mapping| {\n        argv.appendAssumeCapacity(try intToString(allocator, uid_mapping.containerID));\n        argv.appendAssumeCapacity(try intToString(allocator, uid_mapping.hostID));\n        argv.appendAssumeCapacity(try intToString(allocator, uid_mapping.size));\n    }"}
{"instruction":"Write a Zig struct similar to Test from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"const Test = struct {\n\tvar parseBlockLikeTest: *const @TypeOf(parseBlockLike) = &defaultParseBlockLike;\n\n\tfn defaultParseBlockLike(_: []const u8) !Mask.Entry.Inner {\n\t\tunreachable;\n\t}"}
{"instruction":"Write a Zig function similar to my_function_integer from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/call_zig_from_js/main.zig","output":"fn my_function_integer(e: *webui.Event) void {\n    // JavaScript:\n    // my_function_integer(123, 456, 789, 12345.6789);\n\n    const count = e.getCount();\n\n    std.debug.print(\"my_function_integer: There is {}"}
{"instruction":"Write a Zig function similar to walkWhileNode from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn walkWhileNode(\n    context: *ScopeContext,\n    tree: Ast,\n    node_idx: Ast.Node.Index,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to write_log from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn write_log(self: *Process, comptime format: []const u8, args: anytype) void {\n        if (!debug_lsp) return;\n        const file_writer = if (self.log_file_writer) |*writer| writer else return;\n        file_writer.interface.print(format, args) catch {}"}
{"instruction":"Write a Zig function similar to init from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputRelay.zig","output":"pub fn init(relay: *InputRelay) void {\n    relay.* = .{ .text_inputs = undefined, .input_popups = undefined }"}
{"instruction":"Write a Zig const similar to target_white_float4 from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const target_white_float4: math.float4 = .{ target_white_xyz.x, target_white_xyz.y, target_white_xyz.z, 1.0 };"}
{"instruction":"Write a Zig function similar to fatalHelp from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig","output":"fn fatalHelp() noreturn {\n        std.debug.print(\n            \\\\Usage: superhtml check PATH [PATH...] [OPTIONS]\n            \\\\\n            \\\\   Checks documents for errors. If PATH is a directory, it will\n            \\\\   be searched recursively for HTML and SuperHTML files.\n            \\\\   If any syntax or validation error is found, the program will\n            \\\\   exit with a non-zero exit code.\n            \\\\     \n            \\\\   Detected extensions:     \n            \\\\        HTML          .html, .htm \n            \\\\        SuperHTML     .shtml \n            \\\\\n            \\\\Options:\n            \\\\\n            \\\\   --stdin          Validate a HTML document coming from stdin.\n            \\\\                    Mutually exclusive with other input arguments.\n            \\\\   --stdin-super    Same as --stdin but for SuperHTML files.\n            \\\\   --syntax-only    Disable HTML element and attribute validation.\n            \\\\   --help, -h       Print this help and exit.\n            \\\\\n        , .{}"}
{"instruction":"Write a Zig const similar to text_value from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"const text_value: []const u8 = value: {\n                        switch (request.data.value.tag) {\n                            ActionData.value => break :value std.mem.span(request.data.value.unnamed_0.unnamed_1.value),\n                            ActionData.numeric_value => {\n                                var writer: std.io.Writer.Allocating = .init(window.arena());"}
{"instruction":"Write a Zig struct similar to AddCompilerModOptions from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"const AddCompilerModOptions = struct {\n    optimize: std.builtin.OptimizeMode,\n    target: std.Build.ResolvedTarget,\n    strip: ?bool = null,\n    valgrind: ?bool = null,\n    sanitize_thread: ?bool = null,\n    single_threaded: ?bool = null,\n}"}
{"instruction":"Write a Zig function similar to newFuncInfo from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn newFuncInfo(ivm: *cy.VM, kind: u8, type_e: cy.types.Type) C.Value {\n    const vm: *C.ZVM = @ptrCast(ivm);\n    const func_info_t = vm.findType(\"FuncInfo\");\n    const list_tmpl = ivm.sema.list_tmpl.head.toC();\n    const param_t = vm.findType(\"FuncParam\");\n    const param_tv = vm.newType(param_t);\n    defer vm.release(param_tv);\n    var list_t: cy.TypeId = undefined;\n    _ = vm.expandTemplateType(list_tmpl, &.{param_tv}"}
{"instruction":"Write a Zig struct similar to T from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"const T = struct {\n        fn invoke(activity: *android.ANativeActivity, comptime func: []const u8, args: anytype) void {\n            if (@hasDecl(App, func)) {\n                if (activity.instance) |instance| {\n                    const result = @call(.auto, @field(App, func), .{@as(*App, @ptrCast(@alignCast(@alignOf(App), instance)))}"}
{"instruction":"Write a Zig function similar to getUnprotectedSlice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn getUnprotectedSlice(slice: StringSlice, ip: *const InternPool) []const String {\n        if (slice.len == 0) return &.{}"}
{"instruction":"Write a Zig function similar to __imul__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __imul__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ *= other.num_;\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to genConst from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genConst(c: *cy.Chunk, idx: usize, dst: u8, retain: bool, node: *ast.Node) !void {\n    const pc = c.buf.len();\n    if (retain) {\n        try c.pushCode(.constRetain, &.{ 0, 0, dst }"}
{"instruction":"Write a Zig function similar to handleNewPopup from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/LayerSurface.zig","output":"fn handleNewPopup(listener: *wl.Listener(*wlr.XdgPopup), wlr_xdg_popup: *wlr.XdgPopup) void {\n    const layer_surface: *LayerSurface = @fieldParentPtr(\"new_popup\", listener);\n\n    XdgPopup.create(\n        wlr_xdg_popup,\n        layer_surface.popup_tree,\n        layer_surface.popup_tree,\n    ) catch {\n        wlr_xdg_popup.resource.postNoMemory();\n        return;\n    }"}
{"instruction":"Write a Zig function similar to init from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig","output":"pub fn init() void {\n\tfenceModels = .init(main.globalAllocator.allocator);\n}"}
{"instruction":"Write a Zig function similar to OP_UNWRAP from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_UNWRAP(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_UNWRAP);\n}"}
{"instruction":"Write a Zig function similar to execute from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/init.zig","output":"pub fn execute(self_name: []const u8, args: [][:0]u8) !void {\n    _ = self_name;\n\n    std.debug.print(\"This utility will walk you through creating a zigmod.yml file.\\n\", .{}"}
{"instruction":"Write a Zig function similar to wakeup from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn wakeup(self: *Loop) !void {\n        try self.eventfd.notify();\n    }"}
{"instruction":"Write a Zig struct similar to arch from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/lib.zig","output":"pub const arch = struct {\n    pub const x86_64 = struct {\n        pub const abi = @import(\"arch/x86_64/abi.zig\");\n        pub const bits = @import(\"arch/x86_64/bits.zig\");\n    }"}
{"instruction":"Write a Zig function similar to nameLower from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn nameLower(self: CommandDispatchType) []const u8 {\n        return switch (self) {\n            .base => \"base\",\n            .instance => \"instance\",\n            .device => \"device\",\n        }"}
{"instruction":"Write a Zig function similar to append from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/String.zig","output":"pub fn append(b: *Builder, data: []const u8) !void {\n        try b.inner.appendSlice(data);\n    }"}
{"instruction":"Write a Zig function similar to extract from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Selection.zig","output":"pub fn extract(self: *Self, iter: *[]const u8) !bool {\n    var iter2 = iter.*;\n    const len = cbor.decodeArrayHeader(&iter2) catch return false;\n    if (len != 2) return false;\n    if (!try self.begin.extract(&iter2)) return false;\n    if (!try self.end.extract(&iter2)) return false;\n    iter.* = iter2;\n    return true;\n}"}
{"instruction":"Write a Zig struct similar to Debouncer from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub const Debouncer = struct {\n    cascade_window_ms: i64,\n\n    cascade_mutex: std.Thread.Mutex = .{}"}
{"instruction":"Write a Zig struct similar to CompiledModuleGraphFile from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub const CompiledModuleGraphFile = struct {\n        name: Schema.StringPointer = .{}"}
{"instruction":"Write a Zig function similar to rebuildWorkspaces from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn rebuildWorkspaces(editor: *Editor) !void {\n\n    // Create workspaces for each grouping ID\n    for (editor.open_files.values()) |*file| {\n        if (!editor.workspaces.contains(file.editor.grouping)) {\n            var workspace: pixi.Editor.Workspace = .init(file.editor.grouping);\n            for (editor.open_files.values()) |*f| {\n                if (f.editor.grouping == file.editor.grouping) {\n                    workspace.open_file_index = editor.open_files.getIndex(f.id) orelse 0;\n                }"}
{"instruction":"Write a Zig function similar to send_query from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn send_query(self: *UDP, qmsg: *RcMsg) void {\n        if (self.is_retire()) {\n            const new_session = new(self.upstream);\n            self.upstream.session = new_session;\n\n            if (new_session) |s|\n                nosuspend s.send_query(qmsg);\n\n            if (self.is_idle())\n                self.free();\n\n            return;\n        }"}
{"instruction":"Write a Zig function similar to sliceTrim from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn sliceTrim(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.Array, 0);\n    const slice = obj.getSlice();\n\n    const trimRunes = vm.getArray(2);\n\n    var res: []const u8 = undefined;\n    const mode = bindings.getBuiltinSymbol(vm.getSymbol(1)) orelse {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }"}
{"instruction":"Write a Zig function similar to render from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"pub fn render(ast: Ast, src: []const u8, w: *Writer) !void {\n    var first = true;\n    var rule = ast.rules[ast.first_rule orelse return];\n    while (true) {\n        if (!first) {\n            _ = try w.write(\"\\n\\n\");\n        }"}
{"instruction":"Write a Zig const similar to handler from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Loop.zig","output":"const handler: Tty.SignalHandler = .{\n                            .context = self,\n                            .callback = Self.winsizeCallback,\n                        };"}
{"instruction":"Write a Zig function similar to build_test_integration from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_test_integration(\n    b: *std.Build,\n    steps: struct {\n        test_integration: *std.Build.Step,\n        test_integration_build: *std.Build.Step,\n    },\n    options: struct {\n        tb_client_header: std.Build.LazyPath,\n        llvm_objcopy: ?[]const u8,\n        stdx_module: *std.Build.Module,\n        target: std.Build.ResolvedTarget,\n        mode: std.builtin.OptimizeMode,\n    },\n) void {\n    // For integration tests, we build an independent copy of TigerBeetle with \"real\" config and\n    // multiversioning.\n    const vsr_options, const vsr_module = build_vsr_module(b, .{\n        .stdx_module = options.stdx_module,\n        .git_commit = \"bee71e0000000000000000000000000000bee71e\".*, // Beetle-hash!\n        .config_verify = true,\n        .config_release = \"0.16.99\",\n        .config_release_client_min = \"0.16.4\",\n        .config_aof_recovery = false,\n    }"}
{"instruction":"Write a Zig function similar to new from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn new(upstream: *Upstream) *TCP {\n        const self = g.allocator.create(TCP) catch unreachable;\n        self.* = .{\n            .upstream = upstream,\n            .create_time = g.evloop.time,\n        }"}
{"instruction":"Write a Zig function similar to expectParseError from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"fn expectParseError(expected: anyerror, input: []const u8, config: Config) !void {\n    var ctx = t.Context.init(.{ .request = config }"}
{"instruction":"Write a Zig function similar to getParamRemovalRange from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"fn getParamRemovalRange(tree: Ast, param: Ast.full.FnProto.Param) offsets.Loc {\n    var loc = ast.paramLoc(tree, param, true);\n\n    var trim_end = false;\n    while (loc.start != 0) : (loc.start -= 1) {\n        switch (tree.source[loc.start - 1]) {\n            ' ', '\\n' => continue,\n            ',' => {\n                loc.start -= 1;\n                break;\n            }"}
{"instruction":"Write a Zig const similar to DENTRY_CACHE_DISABLED from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"const DENTRY_CACHE_DISABLED: u32 = 0x10;"}
{"instruction":"Write a Zig function similar to getIntAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getIntAt(_: *Event, _: usize) i64 {\n    @compileError(\"please use Event.getIntAt, this will be removed when zig-webui release\");\n}"}
{"instruction":"Write a Zig function similar to open from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"fn open(ptr: *anyopaque, cfg: []const u8) !usize {\n        var self: *HidClassDriver = @ptrCast(@alignCast(ptr));\n        var curr_cfg = cfg;\n\n        if (bos.try_get_desc_as(types.InterfaceDescriptor, curr_cfg)) |desc_itf| {\n            if (desc_itf.interface_class != @intFromEnum(types.ClassCode.Hid)) return types.DriverErrors.UnsupportedInterfaceClassType;\n        }"}
{"instruction":"Write a Zig function similar to from_cursor from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Selection.zig","output":"pub fn from_cursor(cursor: *const Cursor) Self {\n    return .{ .begin = cursor.*, .end = cursor.* }"}
{"instruction":"Write a Zig function similar to move_left from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn move_left(self: *Self, root: Buffer.Root, metrics: Metrics) !void {\n    try self.move_left_no_target(root, metrics);\n    self.target = self.col;\n}"}
{"instruction":"Write a Zig const similar to node from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/IdleInhibitor.zig","output":"const node: *std.TailQueue(IdleInhibitor).Node = @fieldParentPtr(\"data\", inhibitor);"}
{"instruction":"Write a Zig struct similar to TLS from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub const TLS = struct {\n    ssl: ?*c.WOLFSSL = null,\n\n    var _ctx: ?*c.WOLFSSL_CTX = null;\n\n    /// called at startup\n    pub fn init() void {\n        if (_ctx != null) return;\n\n        cc.SSL_library_init();\n\n        const ctx = cc.SSL_CTX_new();\n        _ctx = ctx;\n\n        if (g.cert_verify) {\n            const src = @src();\n            if (g.ca_certs.is_null())\n                cc.SSL_CTX_load_sys_CA_certs(ctx) orelse {\n                    log.err(src, \"failed to load system CA certs, please provide --ca-certs\", .{}"}
{"instruction":"Write a Zig const similar to this from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/allocators/MemoryReportingAllocator.zig","output":"const this: *MemoryReportingAllocator = @alignCast(@ptrCast(context));"}
{"instruction":"Write a Zig function similar to parseConfigH from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"fn parseConfigH(b: *std.Build, config_h_text: []const u8) ?CMakeConfig {\n    var ctx: CMakeConfig = .{\n        .llvm_linkage = undefined,\n        .cmake_binary_dir = undefined,\n        .cmake_prefix_path = undefined,\n        .cmake_static_library_prefix = undefined,\n        .cmake_static_library_suffix = undefined,\n        .cxx_compiler = undefined,\n        .cxx_compiler_arg1 = \"\",\n        .lld_include_dir = undefined,\n        .lld_libraries = undefined,\n        .clang_libraries = undefined,\n        .llvm_lib_dir = undefined,\n        .llvm_include_dir = undefined,\n        .llvm_libraries = undefined,\n        .dia_guids_lib = undefined,\n        .system_libcxx = undefined,\n    }"}
{"instruction":"Write a Zig function similar to checkIncludeDir from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn checkIncludeDir(find: *FindInclude, include_dir: []const u8, kind: Source.Kind) Allocator.Error!?Result {\n        if (find.wait_for) |wait_for| {\n            if (std.mem.eql(u8, include_dir, wait_for)) find.wait_for = null;\n            return null;\n        }"}
{"instruction":"Write a Zig function similar to from_RGB from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"fn from_RGB(v: RGB) RGBf {\n        return .{ .r = tof(v.r), .g = tof(v.g), .b = tof(v.b) }"}
{"instruction":"Write a Zig struct similar to TargetConfig from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub const TargetConfig = struct {\n    lib_dir: []const u8,\n    include_dir: []const u8,\n    out_dir: []const u8,\n    target: std.Target.Query,\n}"}
{"instruction":"Write a Zig function similar to blockId from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub fn blockId(node: Node) html.Tokenizer.Attr.Value {\n        std.debug.assert(node.kind == .block);\n        return node.id_template_parentid.?.value.?;\n    }"}
{"instruction":"Write a Zig function similar to __pos__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __pos__(self: *Self) !*Self {\n        py.incref(root, self);\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn forward(self: ModernBertMLP, hidden_states: Tensor) Tensor {\n        // Perform Wi\n        const wi_output: Tensor = zml.call(self.Wi, .forward, .{hidden_states}"}
{"instruction":"Write a Zig function similar to seek from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn seek(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const idx = vm.getInt(1);\n    const stype = obj.getType();\n    if (stype.isAstring()) {\n        if (idx < 0 or idx >= str.len) {\n            return error.OutOfBounds;\n        }"}