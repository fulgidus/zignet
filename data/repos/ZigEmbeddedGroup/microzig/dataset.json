[
  {
    "instruction": "Write a Zig function similar to build from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub fn build(b: *Build) void {\n    _ = b.addModule(\"build-internals\", .{\n        .root_source_file = b.path(\"build.zig\"),\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to derive from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub fn derive(from: *const Target, options: DeriveOptions) *Target {\n        const ret = from.dep.builder.allocator.create(Target) catch @panic(\"out of memory\");\n        ret.* = .{\n            .dep = from.dep,\n            .preferred_binary_format = options.preferred_binary_format orelse from.preferred_binary_format,\n            .zig_target = options.zig_target orelse from.zig_target,\n            .cpu = options.cpu orelse from.cpu,\n            .chip = options.chip orelse from.chip,\n            .single_threaded = options.single_threaded orelse from.single_threaded,\n            .bundle_compiler_rt = options.bundle_compiler_rt orelse from.bundle_compiler_rt,\n            .ram_image = options.ram_image orelse from.ram_image,\n            .hal = options.hal orelse from.hal,\n            .board = options.board orelse from.board,\n            .linker_script = options.linker_script orelse from.linker_script,\n            .entry = options.entry orelse from.entry,\n            .patch_elf = options.patch_elf orelse from.patch_elf,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "function",
      "name": "derive",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_extension from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub fn get_extension(format: BinaryFormat) []const u8 {\n        return switch (format) {\n            .elf => \".elf\",\n            .bin, .esp => \".bin\",\n            .hex => \".hex\",\n            .dfu => \".dfu\",\n            .uf2 => \".uf2\",\n\n            .custom => |c| c.extension,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "function",
      "name": "get_extension",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to validate_tag from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub fn validate_tag(region: MemoryRegion) void {\n        switch (region.tag) {\n            .flash => if (!region.access.read or !region.access.execute)\n                @panic(\"memory regions tagged as `flash` must be executable\"),\n            .ram => if (!region.access.read or !region.access.write)\n                @panic(\"memory regions tagged as `ram` must be both readable and writable\"),\n            else => {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "function",
      "name": "validate_tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DeriveOptions from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const DeriveOptions = struct {\n        preferred_binary_format: ?BinaryFormat = null,\n        zig_target: ?std.Target.Query = null,\n        cpu: ?Cpu = null,\n        chip: ?Chip = null,\n        single_threaded: ?bool = null,\n        bundle_compiler_rt: ?bool = null,\n        ram_image: ?bool = null,\n        hal: ?HardwareAbstractionLayer = null,\n        board: ?Board = null,\n        linker_script: ?LinkerScript = null,\n        entry: ?Build.Step.Compile.Entry = null,\n        patch_elf: ?*const fn (*Build.Dependency, LazyPath) LazyPath = null,\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "DeriveOptions",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Cpu from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const Cpu = struct {\n    /// Name of the cpu.\n    name: []const u8,\n\n    /// Provides the root source file for the cpu.\n    root_source_file: LazyPath,\n\n    /// (optional) Provides imports for the cpu. **Needs to be heap allocated.**\n    imports: []const Module.Import = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "Cpu",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Chip from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const Chip = struct {\n    /// The display name of the controller.\n    name: []const u8,\n\n    /// (optional) link to the documentation/vendor page of the controller.\n    url: ?[]const u8 = null,\n\n    /// The provider for register definitions.\n    register_definition: union(enum) {\n        /// Use `regz` to create a json file from a SVD schema.\n        svd: LazyPath,\n\n        /// Use `regz` to create a zig file from an ATDF schema.\n        atdf: LazyPath,\n\n        /// Use the provided file directly as the chip file.\n        zig: LazyPath,\n\n        /// Path to embassy stm32-data directory\n        embassy: LazyPath,\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "Chip",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to HardwareAbstractionLayer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const HardwareAbstractionLayer = struct {\n    /// Provides the root source file for the HAL.\n    root_source_file: LazyPath,\n\n    /// Provides imports for the HAL. **Needs to be heap allocated.**\n    imports: []const Module.Import = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "HardwareAbstractionLayer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Board from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const Board = struct {\n    /// Display name of the board.\n    name: []const u8,\n\n    /// (optional) link to the documentation/vendor page of the board.\n    url: ?[]const u8 = null,\n\n    /// Provides the root source file for the board definition.\n    root_source_file: LazyPath,\n\n    /// (optional) Provides imports for the board definition. **Needs to be heap allocated.**\n    imports: []const Module.Import = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "Board",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Custom from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const Custom = struct {\n        /// The standard extension of the format.\n        extension: []const u8,\n\n        /// A function that will convert a given `elf` file into the custom output format.\n        convert: *const fn (*Build.Dependency, elf: Build.LazyPath) Build.LazyPath,\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "Custom",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to LinkerScript from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const LinkerScript = struct {\n    /// Will anything be auto-generated for this linker script?\n    generate: GenerateOptions = .{ .memory_regions_and_sections = .{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "LinkerScript",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to MemoryRegion from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const MemoryRegion = struct {\n    name: ?[]const u8 = null,\n    tag: Tag = .none,\n    offset: u64,\n    length: u64,\n    access: Access,\n\n    pub fn validate_tag(region: MemoryRegion) void {\n        switch (region.tag) {\n            .flash => if (!region.access.read or !region.access.execute)\n                @panic(\"memory regions tagged as `flash` must be executable\"),\n            .ram => if (!region.access.read or !region.access.write)\n                @panic(\"memory regions tagged as `ram` must be both readable and writable\"),\n            else => {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "MemoryRegion",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Access from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const Access = struct {\n        pub const r: Access = .{ .read = true }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "struct",
      "name": "Access",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to r from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const r: Access = .{ .read = true };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "const",
      "name": "r",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to w from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const w: Access = .{ .write = true };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "const",
      "name": "w",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to x from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const x: Access = .{ .execute = true };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "const",
      "name": "x",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to rw from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const rw: Access = .{ .read = true, .write = true };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "const",
      "name": "rw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to rx from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const rx: Access = .{ .read = true, .execute = true };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "const",
      "name": "rx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to rwx from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig",
    "response": "pub const rwx: Access = .{ .read = true, .write = true, .execute = true };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build-internals/build.zig",
      "type": "const",
      "name": "rwx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to build from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn build(b: *Build) void {\n    const optimize = b.standardOptimizeOption(.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generate_release_steps from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "fn generate_release_steps(b: *Build) void {\n    const release_regz_step = b.step(\"release-regz\", \"Generate the release binaries for regz\");\n    const release_uf2_step = b.step(\"release-uf2\", \"Generate the release binaries for uf2\");\n    const release_esp_image_step = b.step(\"release-esp-image\", \"Generate the release binaries for esp image\");\n\n    for (exe_targets) |t| {\n        const release_target = b.resolveTargetQuery(t);\n\n        const regz_dep = b.dependency(\"tools/regz\", .{\n            .optimize = .ReleaseSafe,\n            .target = release_target,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "generate_release_steps",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to build from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn build(b: *std.Build) void {\n///     const optimize = b.standardOptimizeOption(.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to MicroBuild from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn MicroBuild(port_select: PortSelect) type {\n    return struct {\n        builder: *Build,\n        dep: *Build.Dependency,\n        core_dep: *Build.Dependency,\n        drivers_dep: *Build.Dependency,\n\n        /// Contains all the ports you selected.\n        ports: SelectedPorts,\n\n        const Self = @This();\n\n        const SelectedPorts = blk: {\n            var fields: []const std.builtin.Type.StructField = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "MicroBuild",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn init(b: *Build, dep: *Build.Dependency) ?InitReturnType {\n            if (InitReturnType == noreturn) {\n                inline for (port_list) |port| {\n                    if (@field(port_select, port.name)) {\n                        _ = dep.builder.lazyDependency(port.dep_name, .{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize_patches from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "fn serialize_patches(b: *Build, patches: []const regz.patch.Patch) []const u8 {\n            var buf: std.Io.Writer.Allocating = .init(b.allocator);\n\n            for (patches) |patch| {\n                buf.writer.print(\"{f}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "serialize_patches",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_firmware from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_firmware(mb: *Self, options: CreateFirmwareOptions) *Firmware {\n            const b = mb.dep.builder;\n\n            const target = options.target;\n\n            // validate that tagged memory regions meet the requirements\n            for (target.chip.memory_regions) |region| {\n                region.validate_tag();\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_firmware",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to install_firmware from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn install_firmware(mb: *Self, fw: *Firmware, options: InstallFirmwareOptions) void {\n            std.debug.assert(mb == fw.mb);\n\n            const install_step = add_install_firmware(mb, fw, options);\n            mb.builder.getInstallStep().dependOn(&install_step.step);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "install_firmware",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_install_firmware from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_install_firmware(mb: *Self, fw: *Firmware, options: InstallFirmwareOptions) *Build.Step.InstallFile {\n            std.debug.assert(mb == fw.mb);\n\n            const format = options.format orelse fw.target.preferred_binary_format orelse .elf;\n\n            const basename = mb.builder.fmt(\"{s}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_install_firmware",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_emitted_elf from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn get_emitted_elf(fw: *Firmware) LazyPath {\n                if (fw.emitted_elf == null) {\n                    const raw_elf = fw.artifact.getEmittedBin();\n                    fw.emitted_elf = if (fw.target.patch_elf) |patch_elf|\n                        patch_elf(fw.target.dep, raw_elf)\n                    else\n                        raw_elf;\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "get_emitted_elf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_emitted_bin from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn get_emitted_bin(fw: *Firmware, format: ?BinaryFormat) LazyPath {\n                const resolved_format = format orelse fw.target.preferred_binary_format orelse .elf;\n\n                const result = fw.emitted_files.getOrPut(resolved_format) catch @panic(\"out of memory\");\n                if (!result.found_existing) {\n                    const elf_file = fw.get_emitted_elf();\n\n                    const basename = fw.mb.builder.fmt(\"{s}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "get_emitted_bin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_emitted_docs from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn get_emitted_docs(fw: *Firmware) LazyPath {\n                if (fw.emitted_docs == null) {\n                    const docs_test = fw.mb.builder.addTest(.{\n                        .name = fw.artifact.name,\n                        .root_module = fw.app_mod,\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "get_emitted_docs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_app_import from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_app_import(fw: *Firmware, name: []const u8, module: *Build.Module, options: AppDependencyOptions) void {\n                if (options.depend_on_microzig) {\n                    module.addImport(\"microzig\", fw.core_mod);\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_app_import",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_include_path from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_include_path(fw: *Firmware, path: LazyPath) void {\n                fw.artifact.addIncludePath(path);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_include_path",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_system_include_path from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_system_include_path(fw: *Firmware, path: LazyPath) void {\n                fw.artifact.addSystemIncludePath(path);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_system_include_path",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_c_source_file from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_c_source_file(fw: *Firmware, source: Build.Module.CSourceFile) void {\n                fw.artifact.addCSourceFile(source);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_c_source_file",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_options from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_options(fw: *Firmware, module_name: []const u8, options: *Build.Step.Options) void {\n                fw.app_mod.addOptions(module_name, options);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_options",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_object_file from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub fn add_object_file(fw: *Firmware, source: LazyPath) void {\n                fw.artifact.addObjectFile(source);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "add_object_file",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_default_cpu from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "fn get_default_cpu(mb: *Self, target: std.Target) Cpu {\n            if (std.mem.eql(u8, target.cpu.model.name, \"avr5\")) {\n                return .{\n                    .name = \"avr5\",\n                    .root_source_file = mb.core_dep.namedLazyPath(\"cpu_avr5\"),\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "get_default_cpu",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to custom_lazy_import from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "fn custom_lazy_import(\n    comptime dep_name: []const u8,\n) ?type {\n    const build_runner = @import(\"root\");\n    const deps = build_runner.dependencies;\n    const pkg_hash = custom_find_import_pkg_hash_or_fatal(dep_name);\n\n    inline for (@typeInfo(deps.packages).@\"struct\".decls) |decl| {\n        if (comptime std.mem.eql(u8, decl.name, pkg_hash)) {\n            const pkg = @field(deps.packages, decl.name);\n            const available = !@hasDecl(pkg, \"available\") or pkg.available;\n            if (!available) {\n                return null;\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "custom_lazy_import",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to custom_find_import_pkg_hash_or_fatal from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "fn custom_find_import_pkg_hash_or_fatal(comptime dep_name: []const u8) []const u8 {\n    @setEvalBranchQuota(5000);\n    const build_runner = @import(\"root\");\n    const deps = build_runner.dependencies;\n\n    const pkg_deps = comptime for (@typeInfo(deps.packages).@\"struct\".decls) |decl| {\n        const pkg_hash = decl.name;\n        const pkg = @field(deps.packages, pkg_hash);\n        if (@hasDecl(pkg, \"build_zig\") and pkg.build_zig == @This()) break pkg.deps;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "function",
      "name": "custom_find_import_pkg_hash_or_fatal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CreateFirmwareOptions from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub const CreateFirmwareOptions = struct {\n            /// The name of the firmware file.\n            name: []const u8,\n\n            /// The MicroZig target that the firmware is built for. Either a board or a chip.\n            target: *const Target,\n\n            /// The optimization level that should be used. Usually `ReleaseSmall` or `Debug` is a good choice.\n            /// Also using `std.Build.standardOptimizeOption` is a good idea.\n            optimize: std.builtin.OptimizeMode,\n\n            /// The root source file for the application. This is your `src/main.zig` file.\n            root_source_file: LazyPath,\n\n            /// Imports for the application.\n            imports: []const Build.Module.Import = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "struct",
      "name": "CreateFirmwareOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to EndOfStack from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "const EndOfStack = struct {\n                address: ?usize = null,\n                symbol_name: ?[]const u8 = null,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "struct",
      "name": "EndOfStack",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InstallFirmwareOptions from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub const InstallFirmwareOptions = struct {\n            format: ?BinaryFormat = null,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "struct",
      "name": "InstallFirmwareOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Firmware from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub const Firmware = struct {\n            pub const EmittedFiles = std.AutoHashMap(BinaryFormat, LazyPath);\n\n            mb: *Self,\n\n            /// The artifact that is built by MicroZig.\n            artifact: *Build.Step.Compile,\n\n            /// The app module that is built by Zig.\n            app_mod: *Build.Module,\n\n            // The @import(\"microzig\") module\n            core_mod: *Build.Module,\n\n            /// The target to which the firmware is built.\n            target: *const Target,\n\n            emitted_elf: ?LazyPath = null,\n            emitted_files: EmittedFiles,\n            emitted_docs: ?LazyPath = null,\n\n            /// Returns the emitted ELF file for this firmware. This is useful if you need debug information\n            /// or want to use a debugger like Segger, ST-Link or similar.\n            ///\n            /// **NOTE:** This is similar, but not equivalent to `std.Build.Step.Compile.getEmittedBin`. The call on the compile step does\n            ///           not include post processing of the ELF files necessary by certain targets.\n            pub fn get_emitted_elf(fw: *Firmware) LazyPath {\n                if (fw.emitted_elf == null) {\n                    const raw_elf = fw.artifact.getEmittedBin();\n                    fw.emitted_elf = if (fw.target.patch_elf) |patch_elf|\n                        patch_elf(fw.target.dep, raw_elf)\n                    else\n                        raw_elf;\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "struct",
      "name": "Firmware",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AppDependencyOptions from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "pub const AppDependencyOptions = struct {\n                depend_on_microzig: bool = false,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "struct",
      "name": "AppDependencyOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to exe_targets from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "const exe_targets: []const std.Target.Query = &.{\n    .{ .cpu_arch = .aarch64, .os_tag = .macos },\n    .{ .cpu_arch = .aarch64, .os_tag = .linux },\n    .{ .cpu_arch = .aarch64, .os_tag = .windows },\n    .{ .cpu_arch = .x86_64, .os_tag = .macos },\n    .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .musl },\n    .{ .cpu_arch = .x86_64, .os_tag = .windows },\n};",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "const",
      "name": "exe_targets",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to end_of_stack from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "const end_of_stack: EndOfStack = switch (options.stack orelse options.target.stack) {\n                .address => |address| .{ .address = address },\n                .ram_region_index => |index| blk: {\n                    var i: usize = 0;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "const",
      "name": "end_of_stack",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to generate_linker_script_args from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig",
    "response": "const generate_linker_script_args: GenerateLinkerScriptArgs = .{\n                    .cpu_name = cpu.name,\n                    .cpu_arch = zig_resolved_target.result.cpu.arch,\n                    .chip_name = target.chip.name,\n                    .memory_regions = target.chip.memory_regions,\n                    .generate = linker_script_options.generate,\n                    .ram_image = target.ram_image,\n                };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "build.zig",
      "type": "const",
      "name": "generate_linker_script_args",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to build from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/build.zig",
    "response": "pub fn build(b: *std.Build) !void {\n    b.addNamedLazyPath(\"cpu_cortex_m\", b.path(\"src/cpus/cortex_m.zig\"));\n    b.addNamedLazyPath(\"cpu_riscv32\", b.path(\"src/cpus/riscv32.zig\"));\n    b.addNamedLazyPath(\"cpu_avr5\", b.path(\"src/cpus/avr5.zig\"));\n\n    const unit_tests = b.addTest(.{\n        // We're not using the `start.zig` entrypoint as it overrides too much\n        // configuration\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/microzig.zig\"),\n            .target = b.graph.host,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to AtomicStaticBitSet from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "pub fn AtomicStaticBitSet(comptime size: usize) type {\n    return struct {\n        const Size = size;\n        const BlockType = usize;\n        const BlockNum = (size + @bitSizeOf(BlockType) - 1) / @bitSizeOf(BlockType);\n        const Bit = std.math.Log2Int(BlockType);\n        const Self = @This();\n\n        blocks: [BlockNum]std.atomic.Value(BlockType) = .{std.atomic.Value(BlockType){ .raw = 0 }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "function",
      "name": "AtomicStaticBitSet",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "fn set(self: *Self, bit_index: usize) bool {\n            std.debug.assert(bit_index < Size);\n            return self.blocks[block_index(bit_index)].bitSet(bit_offset(bit_index), .seq_cst) == 0;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "function",
      "name": "set",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "fn reset(self: *Self, bit_index: usize) bool {\n            std.debug.assert(bit_index < Size);\n            return self.blocks[block_index(bit_index)].bitReset(bit_offset(bit_index), .seq_cst) == 1;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to test_bit from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "fn test_bit(self: *Self, bit_index: usize) u1 {\n            std.debug.assert(bit_index < Size);\n            const mask: BlockType = @as(BlockType, 1) << bit_offset(bit_index);\n            return @intFromBool(self.blocks[block_index(bit_index)].load(.seq_cst) & mask != 0);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "function",
      "name": "test_bit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_first_available from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "fn set_first_available(self: *Self) AtomicStaticBitSetError!usize {\n            for (0..Size) |bit_index| {\n                if (self.set(bit_index)) {\n                    return bit_index;\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "function",
      "name": "set_first_available",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to block_index from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "fn block_index(bit_index: usize) usize {\n            return bit_index / @bitSizeOf(BlockType);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "function",
      "name": "block_index",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bit_offset from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "fn bit_offset(bit_index: usize) Bit {\n            return @truncate(bit_index % @bitSizeOf(BlockType));\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "function",
      "name": "bit_offset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to mask from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "const mask: BlockType = @as(BlockType, 1) << bit_offset(bit_index);",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "const",
      "name": "mask",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to bit_to_set1 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "const bit_to_set1: usize = 5;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "const",
      "name": "bit_to_set1",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to bit_to_set2 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "const bit_to_set2: usize = 65;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "const",
      "name": "bit_to_set2",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to bit_already_zero from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig",
    "response": "const bit_already_zero: usize = 10;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/concurrency.zig",
      "type": "const",
      "name": "bit_already_zero",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ensure from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/clock.zig",
    "response": "pub fn ensure() void {\n    if (!has_clock)\n        @compileError(\"microzig requires the clock frequency to perform this operation. Please export a const or var clock_frequencies from your root file that contains the clock frequency for all chip clock domains in hertz!\");\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/clock.zig",
      "type": "function",
      "name": "ensure",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/clock.zig",
    "response": "fn get() Clocks {\n    ensure();\n    return @field(clock_source_type, freq_decl_name);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/clock.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to source from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/clock.zig",
    "response": "pub const source: Source = switch (clock_source_type) {\n    app => .application,\n    board => .board,\n    hal => .hal,\n    cpu => .cpu,\n    no_clock_source_type => .none,\n    else => unreachable,\n};",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/clock.zig",
      "type": "const",
      "name": "source",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to busy_sleep from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/debug.zig",
    "response": "pub fn busy_sleep(comptime limit: comptime_int) void {\n    if (limit <= 0) @compileError(\"limit must be non-negative!\");\n\n    comptime var bits = 0;\n    inline while ((1 << bits) <= limit) {\n        bits += 1;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/debug.zig",
      "type": "function",
      "name": "busy_sleep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writer_write from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/debug.zig",
    "response": "fn writer_write(ctx: void, string: []const u8) DebugErr!usize {\n    _ = ctx;\n    write(string);\n    return string.len;\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/debug.zig",
      "type": "function",
      "name": "writer_write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/debug.zig",
    "response": "pub fn write(string: []const u8) void {\n    if (!config.has_board)\n        return;\n    if (!@hasDecl(board, \"debug_write\"))\n        return;\n\n    board.debug_write(string);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/debug.zig",
      "type": "function",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/debug.zig",
    "response": "pub fn writer() DebugWriter {\n    return DebugWriter{ .context = {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/debug.zig",
      "type": "function",
      "name": "writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to value from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "pub fn value(self: State) u1 {\n        return @intFromEnum(self);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "value",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Gpio from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "pub fn Gpio(comptime pin: type, comptime config: anytype) type {\n    const mode = @as(Mode, config.mode);\n    const Generic = struct {\n        // all pins:\n        fn init() void {\n            switch (mode) {\n                .input, .generic, .input_output => {\n                    set_direction(.input, undefined);\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "Gpio",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn read() State {\n            return hal.gpio.read(pin.source_pin);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn write(state: State) void {\n            hal.gpio.write(pin.source_pin, state);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_to_high from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn set_to_high() void {\n            write(.high);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "set_to_high",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_to_low from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn set_to_low() void {\n            write(.low);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "set_to_low",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toggle from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn toggle() void {\n            if (comptime @hasDecl(hal.gpio, \"toggle\")) {\n                hal.gpio.toggle(pin.source_pin);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "toggle",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_direction from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn set_direction(dir: Direction, output_state: State) void {\n            switch (dir) {\n                .output => {\n                    hal.gpio.setOutput(pin.source_pin);\n                    write(output_state);\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "set_direction",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_direction from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn get_direction() Direction {\n            if (hal.gpio.isOutput(pin.source_pin)) {\n                return .output;\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "get_direction",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_drive from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn set_drive(drive: Drive) void {\n            _ = drive;\n            @compileError(\"open drain not implemented yet!\");\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "set_drive",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_drive from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn get_drive() Drive {\n            @compileError(\"open drain not implemented yet!\");\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "get_drive",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_alternate_function from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "fn set_alternate_function(af: hal.gpio.AlternateFunction) void {\n            hal.gpio.setAlternateFunction(pin.source_pin, af);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "function",
      "name": "set_alternate_function",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Generic from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig",
    "response": "const Generic = struct {\n        // all pins:\n        fn init() void {\n            switch (mode) {\n                .input, .generic, .input_output => {\n                    set_direction(.input, undefined);\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/gpio.zig",
      "type": "struct",
      "name": "Generic",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to I2CController from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn I2CController(comptime index: usize, comptime pins: Pins) type {\n    const SystemI2CController = hal.I2CController(index, pins);\n\n    const I2CDevice = struct {\n        const Device = @This();\n\n        internal: SystemI2CController,\n        address: u7,\n\n        const Direction = enum { read, write }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "I2CController",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "fn Transfer(comptime direction: Direction) type {\n            return switch (direction) {\n                .read => struct {\n                    const Self = @This();\n\n                    state: SystemI2CController.ReadState,\n\n                    pub const Reader = std.io.Reader(*Self, ReadError, read_some);\n\n                    /// NOTE that some platforms, notably most (all?) STM32 microcontrollers,\n                    /// allow only a single read call per transfer.\n                    pub fn reader(self: *Self) Reader {\n                        return Reader{ .context = self }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "Transfer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_some from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "fn read_some(self: *Self, buffer: []u8) ReadError!usize {\n                        try self.state.read_no_eof(buffer);\n                        return buffer.len;\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "read_some",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to stop from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn stop(self: *Self) !void {\n                        try self.state.stop();\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "stop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to restart_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn restart_transfer(self: *Self, comptime new_direction: Direction) !Transfer(new_direction) {\n                        return Transfer(direction){ .state = try self.state.restart_transfer(new_direction) }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "restart_transfer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn writer(self: *Self) Writer {\n                        return Writer{ .context = self }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_some from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "fn write_some(self: *Self, buffer: []const u8) WriteError!usize {\n                        try self.state.write_all(buffer);\n                        return buffer.len;\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "write_some",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to stop from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn stop(self: *Self) !void {\n                        try self.state.stop();\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "stop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to restart_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn restart_transfer(self: *Self, comptime new_direction: Direction) !Transfer(new_direction) {\n                        return switch (new_direction) {\n                            .read => Transfer(new_direction){ .state = try self.state.restart_read() }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "restart_transfer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to start_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn start_transfer(self: Device, comptime direction: Direction) !Transfer(direction) {\n            return switch (direction) {\n                .read => Transfer(direction){ .state = try SystemI2CController.ReadState.start(self.address) }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "start_transfer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_register from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn write_register(self: Device, register_address: u8, byte: u8) ReadError!void {\n            try self.write_registers(register_address, &.{byte}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "write_register",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_registers from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn write_registers(self: Device, register_address: u8, buffer: []const u8) ReadError!void {\n            var wt = try self.start_transfer(.write);\n            defer wt.stop() catch {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "write_registers",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_register from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn read_register(self: Device, register_address: u8) ReadError!u8 {\n            var buffer: [1]u8 = undefined;\n            try self.read_registers(register_address, &buffer);\n            return buffer[0];\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "read_register",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_registers from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn read_registers(self: Device, register_address: u8, buffer: []u8) ReadError!void {\n            var rt = write_and_restart: {\n                var wt = try self.start_transfer(.write);\n                errdefer wt.stop() catch {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "read_registers",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn init(config: Config) InitError!Self {\n            return Self{\n                .internal = try SystemI2CController.init(config),\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to device from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub fn device(self: Self, address: u7) I2CDevice {\n            return I2CDevice{ .internal = self.internal, .address = address }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "function",
      "name": "device",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to I2CDevice from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "const I2CDevice = struct {\n        const Device = @This();\n\n        internal: SystemI2CController,\n        address: u7,\n\n        const Direction = enum { read, write }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "struct",
      "name": "I2CDevice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Pins from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub const Pins = struct {\n    scl: ?type = null,\n    sda: ?type = null,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "struct",
      "name": "Pins",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Config from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig",
    "response": "pub const Config = struct {\n    /// The target speed in bit/s. Note that the actual speed can differ from this, due to prescaler rounding.\n    target_speed: u32,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/i2c.zig",
      "type": "struct",
      "name": "Config",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Pin from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/pin.zig",
    "response": "pub fn Pin(comptime spec: []const u8) type {\n    // TODO: Depened on board and chip here\n\n    const board_namespace = \"board:\";\n    const chip_namespace = \"chip:\";\n\n    // Pins can be namespaced with \"board:\" for board and \"chip:\" for chip\n    // These namespaces are not passed to hal.parse_pin()\n    const pin = if (std.mem.startsWith(u8, spec, board_namespace))\n        hal.parse_pin(@field(board.pin_map, spec[board_namespace.len..]))\n    else if (std.mem.startsWith(u8, spec, chip_namespace))\n        hal.parse_pin(spec[chip_namespace.len..])\n    else if (config.has_board and @hasField(@TypeOf(board.pin_map), spec))\n        hal.parse_pin(@field(board.pin_map, spec))\n    else\n        hal.parse_pin(spec);\n\n    return struct {\n        pub const name = if (std.mem.startsWith(u8, spec, board_namespace))\n            // Remove the board: prefix\n            spec[board_namespace.len..]\n        else if (std.mem.startsWith(u8, spec, chip_namespace))\n            // Remove the chip: prefix\n            spec[chip_namespace.len..]\n        else\n            spec;\n\n        pub const source_pin = pin;\n\n        pub fn route(target: pin.Targets) void {\n            hal.route_pin(source_pin, target);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/pin.zig",
      "type": "function",
      "name": "Pin",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn writer(buffer: []u8) Writer {\n        return .{\n            .interface = .{\n                .vtable = &.{\n                    .drain = drain,\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to drain from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn drain(io_w: *std.Io.Writer, data: []const []const u8, splat: usize) std.Io.Writer.Error!usize {\n        const buf = io_w.buffered();\n\n        var ret: usize = 0;\n        if (buf.len > 0) {\n            ret += try writerfn({}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "drain",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to writerfn from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn writerfn(_: void, data: []const u8) std.Io.Writer.Error!usize {\n        const len = data.len;\n        if (len == 0) return 0;\n\n        if (len != 1) {\n            const tmp_c = data[len - 1]; //check if last char is a sentinel\n            if (tmp_c != 0) {\n                // Temporarily change last char to null byte\n                var tmp_data: []u8 = @constCast(data);\n                tmp_data[len - 1] = 0;\n                write0(@ptrCast(tmp_data.ptr));\n                tmp_data[len - 1] = tmp_c;\n                // Write the last character separately\n                write_byte(tmp_c);\n                return len;\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "writerfn",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to print from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn print(comptime fmt: []const u8, args: anytype) void {\n        var buf: [256]u8 = undefined;\n        var dbg_w = writer(&buf);\n        dbg_w.interface.print(fmt, args) catch return;\n        dbg_w.interface.flush() catch return;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "print",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_errno from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn get_errno() usize {\n        resume @as(usize, @bitCast(sys_errno()));\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "get_errno",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_cmd_args from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn get_cmd_args(buffer: []u8) anyerror![]const u8 {\n        var cmd = Argv{\n            .buffer = buffer.ptr,\n            .len = buffer.len,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "get_cmd_args",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to check_extensions from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn check_extensions(feature_byte: usize, feature_bit: u3) bool {\n        const MAGIC: [4]u8 = .{ 0x53, 0x48, 0x46, 0x42 }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "check_extensions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to stdout from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn stdout() fs.FileError!fs.File {\n        if (!check_extensions(0, 1)) return error.InvalidFile;\n        return try fs.open(\":tt\", .@\"W+\");\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "stdout",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to stderr from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn stderr() fs.FileError!fs.File {\n        if (!check_extensions(0, 1)) return error.InvalidFile;\n        return try fs.open(\":tt\", .@\"A+\");\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "stderr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to system_memory from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn system_memory() MemInfo {\n        var mem: MemInfo = undefined;\n        sys_heapinfo(&mem);\n        return mem;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "system_memory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to panic from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn panic(reason: PanicCodes, subcode: usize) void {\n        const data = PanicData{\n            .reason = @intFromEnum(reason) + 0x20000,\n            .subcode = subcode,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "panic",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exit from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn exit(code: usize) void {\n        panic(.ApplicationExit, code);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "exit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to system_time from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn system_time() usize {\n        return @as(usize, @bitCast(sys_time()));\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "system_time",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to absolute from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn absolute() TimeError!usize {\n        const ret = sys_clock();\n        return if (ret == -1) TimeError.ReadTicksFail else @as(usize, @bitCast(ret));\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "absolute",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to elapsed from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn elapsed() TimeError!u64 {\n        var ticks = Elapsed{ .low = 0, .high = 0 }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "elapsed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_tick_freq from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn get_tick_freq() TimeError!usize {\n        const ret = sys_tickfreq();\n        return if (ret == -1) TimeError.UnknownTickFreq else @as(usize, @bitCast(ret));\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "get_tick_freq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writefn from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn writefn(ctx: File, data: []const u8) std.Io.Writer.Error!usize {\n            const w_file = RWFile{\n                .file = ctx,\n                .buf = @constCast(data.ptr),\n                .buf_len = data.len,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "writefn",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to readfn from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn readfn(ctx: File, out: []u8) std.Io.Reader.Error!usize {\n            var r_file = RWFile{\n                .file = ctx,\n                .buf = out.ptr,\n                .buf_len = out.len,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "readfn",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn writer(file: File, buffer: []u8) Writer {\n            return .{\n                .file = file,\n                .interface = .{\n                    .vtable = &.{\n                        .drain = drain,\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reader from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn reader(file: File, buffer: []u8) Reader {\n            return .{\n                .file = file,\n                .interface = .{\n                    .vtable = &.{\n                        .stream = stream,\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "reader",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to drain from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn drain(io_w: *std.Io.Writer, data: []const []const u8, splat: usize) std.Io.Writer.Error!usize {\n            const w: *Writer = @fieldParentPtr(\"interface\", io_w);\n            _ = splat;\n            // TODO: implement splat\n            var ret: usize = 0;\n            for (data) |d| {\n                const n = try writefn(w.file, d);\n                ret += n;\n                if (n != d.len)\n                    return ret;\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "drain",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stream from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn stream(io_r: *std.Io.Reader, w: *std.Io.Writer, limit: std.Io.Limit) std.Io.Reader.StreamError!usize {\n            const r: *Reader = @fieldParentPtr(\"interface\", io_r);\n            // TODO: limit\n            _ = limit;\n\n            var buf: [256]u8 = undefined;\n            const n = try r.file.readfn(&buf);\n            try w.writeAll(buf[0..n]);\n            return n;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "stream",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to print from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn print(file: File, comptime fmt: []const u8, args: anytype) void {\n            var buf: [256]u8 = undefined;\n            var wrt = file.writer(&buf);\n            wrt.interface.print(fmt, args) catch return;\n            wrt.interface.flush() catch return;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "print",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_type from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn get_type(file: File) FileError!FType {\n            return switch (sys_istty(&file)) {\n                0 => FType.FIle,\n                1 => FType.Device,\n                else => FileError.InvalidFile,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "get_type",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to seek from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn seek(file: File, offset: usize) FileError!void {\n            return if (sys_seek(&Seek{ .file = file, .seek = offset }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "seek",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to size from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn size(file: File) FileError!usize {\n            const ret = sys_flen(&file);\n            return if (ret < 0) FileError.InvalidFile else @as(usize, @bitCast(ret));\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "size",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to close from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn close(file: File) FileError!void {\n            return if (sys_close(&file) < 0) FileError.InvalidFile else {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "close",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to open from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn open(path: [:0]const u8, mode: OpenMode) FileError!File {\n        const file = OpenFile{\n            .path = path,\n            .mode = mode,\n            .path_len = path.len,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "open",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to remove from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn remove(path: [:0]const u8) FileError!void {\n        const rm = Path{\n            .path = path.ptr,\n            .len = path.len,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "remove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rename from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub fn rename(old: [:0]const u8, new: [:0]const u8) FileError!void {\n        const re: [2]Path = .{\n            Path{ .path = old.ptr, .len = old.len }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "rename",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to call from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn call(number: Syscalls, param: *const anyopaque) isize {\n    return asm volatile (\n        \\\\mov r0, %[num]\n        \\\\mov r1, %[p]\n        \\\\bkpt #0xAB\n        \\\\mov %[ret], r0\n        : [ret] \"=r\" (-> isize),\n        : [num] \"r\" (number),\n          [p] \"r\" (param),\n        : .{ .memory = true, .r0 = true, .r1 = true }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "call",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_byte from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn write_byte(c: u8) void {\n    _ = call(.WRITEC, &c);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "write_byte",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write0 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn write0(str: [*:0]const u8) void {\n    _ = call(.WRITE0, str);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "write0",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_open from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_open(file: *const fs.OpenFile) isize {\n    return call(.SYS_OPEN, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_open",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_close from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_close(file: *const fs.File) isize {\n    return call(.SYS_CLOSE, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_close",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_write from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_write(file: *const fs.RWFile) isize {\n    return call(.SYS_WRITE, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_read from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_read(file: *fs.RWFile) isize {\n    return call(.SYS_READ, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_seek from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_seek(file: *const fs.Seek) isize {\n    return call(.SYS_SEEK, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_seek",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_flen from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_flen(file: *const fs.File) isize {\n    return call(.SYS_FLEN, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_flen",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_remove from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_remove(file: *const fs.Path) isize {\n    return call(.SYS_REMOVE, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_remove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_rename from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_rename(file: [*]const fs.Path) isize {\n    return call(.SYS_RENAME, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_rename",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_iserror from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_iserror(ret_code: *const isize) bool {\n    return call(.SYS_ISERROR, ret_code) != 0;\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_iserror",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_istty from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_istty(file: *const fs.File) isize {\n    return call(.SYS_ISTTY, file);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_istty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_clock from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_clock() isize {\n    return call(.SYS_CLOCK, &0);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_clock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_time from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_time() isize {\n    return call(.SYS_TIME, &0);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_time",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_errno from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_errno() isize {\n    return call(.SYS_ERRNO, &0);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_errno",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_cmd_line from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_cmd_line(args: *Debug.Argv) isize {\n    return call(.SYS_GET_CMD_LINE, args);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_cmd_line",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_heapinfo from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_heapinfo(args: *Debug.MemInfo) void {\n    _ = call(.SYS_HEAPINFO, args);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_heapinfo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_exit from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_exit(args: *const Debug.PanicData) isize {\n    return call(.SYS_EXIT, args);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_exit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_exit_ext from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_exit_ext(args: *const Debug.PanicData) isize {\n    return call(.SYS_EXIT_EXTENDED, args);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_exit_ext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_elapsed from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_elapsed(time: *Time.Elapsed) isize {\n    return call(.SYS_ELAPSED, time);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_elapsed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sys_tickfreq from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "fn sys_tickfreq() isize {\n    return call(.SYS_TICKFREQ, &0);\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "function",
      "name": "sys_tickfreq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Debug from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub const Debug = struct {\n    pub const PanicCodes = enum(usize) {\n        //Hardware vector reason codes: 0x0..0x7\n        BranchThroughZero,\n        UndefinedInstr,\n        SoftwareInterrupt,\n        PrefetchAbort,\n        DataAbort,\n        AddressException,\n        IRQ,\n        FIQ,\n\n        //Software reason codes (0x20 - 0x29)\n        BreakPoint = 0x20,\n        WatchPoint,\n        StepComplete,\n        RunTimeErrorUnknown,\n        InternalError,\n        UserInterruption,\n        ApplicationExit,\n        StackOverflow,\n        DivisionByZero,\n        OSSpecific,\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "struct",
      "name": "Debug",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub const Writer = struct {\n        interface: std.Io.Writer,\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "struct",
      "name": "Writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Time from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub const Time = struct {\n    pub const TimeError = error{\n        ReadTicksFail,\n        UnknownTickFreq,\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "struct",
      "name": "Time",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to fs from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub const fs = struct {\n    pub const FileError = error{\n        OpenFail,\n        RenameFail,\n        RemoveFail,\n        InvalidFile,\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "struct",
      "name": "fs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub const Writer = struct {\n            file: File,\n            interface: std.Io.Writer,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "struct",
      "name": "Writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Reader from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "pub const Reader = struct {\n            file: File,\n            interface: std.Io.Reader,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "struct",
      "name": "Reader",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to MAGIC from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "const MAGIC: [4]u8 = .{ 0x53, 0x48, 0x46, 0x42 };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "const",
      "name": "MAGIC",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ret from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "const ret: usize = @bitCast(sys_write(&w_file));",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "const",
      "name": "ret",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to w from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "const w: *Writer = @fieldParentPtr(\"interface\", io_w);",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "const",
      "name": "w",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to r from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "const r: *Reader = @fieldParentPtr(\"interface\", io_r);",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "const",
      "name": "r",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to re from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig",
    "response": "const re: [2]Path = .{\n            Path{ .path = old.ptr, .len = old.len },\n            Path{ .path = new.ptr, .len = new.len },\n        };",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/semihosting.zig",
      "type": "const",
      "name": "re",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SpiBus from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn SpiBus(comptime index: usize) type {\n    const SystemSpi = hal.SpiBus(index);\n\n    return struct {\n        /// A SPI 'slave' device, selected via the given CS pin.\n        /// (Default is CS=low to select.)\n        pub fn SpiDevice(comptime cs_pin: type, comptime config: DeviceConfig) type {\n            return struct {\n                const SelfSpiDevice = @This();\n\n                internal: SystemSpi,\n\n                /// A 'transfer' is defined as a sequence of reads/writes that require\n                /// the SPI device to be continuously enabled via its 'chip select' (CS) line.\n                const Transfer = struct {\n                    const SelfTransfer = @This();\n\n                    device: SelfSpiDevice,\n\n                    fn transceive_byte(self: *SelfTransfer, write_byte: u8, read_pointer: *u8) !void {\n                        try self.device.internal.transceive_byte(write_byte, read_pointer);\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "SpiBus",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn writer(self: *SelfTransfer) Writer {\n                        return Writer{ .context = self }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_some from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "fn write_some(self: *SelfTransfer, buffer: []const u8) WriteError!usize {\n                        try self.device.internal.write_all(buffer);\n                        return buffer.len;\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "write_some",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reader from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn reader(self: *SelfTransfer) Reader {\n                        return Reader{ .context = self }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "reader",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_some from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "fn read_some(self: *SelfTransfer, buffer: []u8) ReadError!usize {\n                        try self.device.internal.read_into(buffer);\n                        return buffer.len;\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "read_some",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to end from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn end(self: *SelfTransfer) void {\n                        self.device.internal.end_transfer(cs_pin, config);\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "end",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to begin_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn begin_transfer(self: SelfSpiDevice) !Transfer {\n                    self.internal.switch_to_device(cs_pin, config);\n                    self.internal.begin_transfer(cs_pin, config);\n                    return Transfer{ .device = self }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "begin_transfer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to transceive from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn transceive(self: SelfSpiDevice, write_buffer: []const u8, read_buffer: []u8) !void {\n                    std.debug.assert(write_buffer.len == read_buffer.len);\n                    var transfer = try self.begin_transfer();\n                    defer transfer.end();\n                    for (write_buffer, 0..) |_, i| {\n                        try transfer.transceive_byte(write_buffer[i], &read_buffer[i]);\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "transceive",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_register from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn write_register(self: SelfSpiDevice, register_address: u8, byte: u8) ReadError!void {\n                    try self.write_registers(register_address, &.{byte}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "write_register",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_registers from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn write_registers(self: SelfSpiDevice, register_address: u8, buffer: []const u8) ReadError!void {\n                    var transfer = try self.begin_transfer();\n                    defer transfer.end();\n                    // write auto-increment, starting at given register\n                    try transfer.writer().writeByte(0b01_000000 | register_address);\n                    try transfer.writer().writeAll(buffer);\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "write_registers",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_register from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn read_register(self: SelfSpiDevice, register_address: u8) ReadError!u8 {\n                    var buffer: [1]u8 = undefined;\n                    try self.read_registers(register_address, &buffer);\n                    return buffer[0];\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "read_register",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_registers from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn read_registers(self: SelfSpiDevice, register_address: u8, buffer: []u8) ReadError!void {\n                    var transfer = try self.begin_transfer();\n                    defer transfer.end();\n                    // read auto-increment, starting at given register\n                    try transfer.writer().writeByte(0b11_000000 | register_address);\n                    try transfer.reader().readNoEof(buffer);\n                }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "read_registers",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn init(config: BusConfig) InitError!SelfSpiBus {\n            clock.ensure(); // TODO: Wat?\n            return SelfSpiBus{\n                .internal = try SystemSpi.init(config),\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to device from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub fn device(self: SelfSpiBus, comptime cs_pin: type, config: DeviceConfig) SpiDevice(cs_pin, config) {\n            return SpiDevice(cs_pin, config){ .internal = self.internal }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "function",
      "name": "device",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "const Transfer = struct {\n                    const SelfTransfer = @This();\n\n                    device: SelfSpiDevice,\n\n                    fn transceive_byte(self: *SelfTransfer, write_byte: u8, read_pointer: *u8) !void {\n                        try self.device.internal.transceive_byte(write_byte, read_pointer);\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "struct",
      "name": "Transfer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BusConfig from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub const BusConfig = struct {\n    // Later: add common options\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "struct",
      "name": "BusConfig",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DeviceConfig from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/spi.zig",
    "response": "pub const DeviceConfig = struct {\n    // TODO: add common options, like clock polarity and phase, and CS polarity\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/spi.zig",
      "type": "struct",
      "name": "DeviceConfig",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Uart from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub fn Uart(comptime index: usize, comptime pins: Pins) type {\n    const SystemUart = hal.Uart(index, pins);\n    return struct {\n        const Self = @This();\n\n        internal: SystemUart,\n\n        /// Initializes the UART with the given config and returns a handle to the uart.\n        pub fn init(config: Config) InitError!Self {\n            clock.ensure();\n            return Self{\n                .internal = try SystemUart.init(config),\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "Uart",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_or_init from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub fn get_or_init(config: Config) InitError!Self {\n            if (!@hasDecl(SystemUart, \"get_or_init\")) {\n                // fallback to reinitializing the UART\n                return init(config);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "get_or_init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to can_read from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub fn can_read(self: Self) bool {\n            return self.internal.can_read();\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "can_read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to can_write from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub fn can_write(self: Self) bool {\n            return self.internal.can_write();\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "can_write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reader from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub fn reader(self: Self) Reader {\n            return Reader{ .context = self }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "reader",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub fn writer(self: Self) Writer {\n            return Writer{ .context = self }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "writer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_some from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "fn read_some(self: Self, buffer: []u8) ReadError!usize {\n            for (buffer) |*c| {\n                c.* = self.internal.rx();\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "read_some",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_some from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "fn write_some(self: Self, buffer: []const u8) WriteError!usize {\n            for (buffer) |c| {\n                self.internal.tx(c);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "function",
      "name": "write_some",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Pins from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub const Pins = struct {\n    tx: ?type = null,\n    rx: ?type = null,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "struct",
      "name": "Pins",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Config from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig",
    "response": "pub const Config = struct {\n    /// TODO: Make this optional, to support STM32F303 et al. auto baud-rate detection?\n    baud_rate: u32,\n    stop_bits: StopBits = .one,\n    parity: ?Parity = null,\n    data_bits: DataBits = .eight,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/experimental/uart.zig",
      "type": "struct",
      "name": "Config",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Usb from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn Usb(comptime f: anytype) type {\n    return struct {\n        /// The usb configuration set\n        var usb_config: ?*DeviceConfiguration = null;\n        /// The clock has been initialized [Y/n]\n        var clk_init: bool = false;\n        var itf_to_drv: [f.cfg_max_interfaces_count]u8 = @splat(0);\n        var ep_to_drv: [f.cfg_max_endpoints_count][2]u8 = @splat(@splat(0));\n        pub const max_packet_size = if (f.high_speed) 512 else 64;\n        const drvid_invalid = 0xff;\n\n        /// The callbacks passed provided by the caller\n        pub const callbacks = f;\n\n        // We'll keep some state in Plain Old Static Local Variables:\n        const S = struct {\n            var debug_mode = false;\n            // When the host gives us a new address, we can't just slap it into\n            // registers right away, because we have to do an acknowledgement step using\n            // our _old_ address.\n            var new_address: ?u8 = null;\n            // 0 - no config set\n            var cfg_num: u16 = 0;\n            // Flag recording whether the host has configured us with a\n            // `SetConfiguration` message.\n            var configured = false;\n            // Flag recording whether we've set up buffer transfers after being\n            // configured.\n            var started = false;\n            // Some scratch space that we'll use for things like preparing string\n            // descriptors for transmission.\n            var tmp: [128]u8 = @splat(0);\n            // Keeps track of sent data from tmp buffer\n            var buffer_reader = BufferReader{ .buffer = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "Usb",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to send_cmd_response from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn send_cmd_response(data: []const u8, expected_max_length: u16) void {\n                S.buffer_reader = BufferReader{ .buffer = data[0..@min(data.len, expected_max_length)] }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "send_cmd_response",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to send_cmd_ack from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn send_cmd_ack() void {\n                f.usb_start_tx(Endpoint.EP0_IN_ADDR, &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "send_cmd_ack",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init_clk from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn init_clk() void {\n            f.usb_init_clk();\n            clk_init = true;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "init_clk",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init_device from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn init_device(device_config: *DeviceConfiguration) !void {\n            if (!clk_init) return error.UninitializedClock;\n\n            f.usb_init_device(device_config);\n            usb_config = device_config;\n\n            const device_interface = device();\n            for (usb_config.?.drivers) |*driver| {\n                driver.init(device_interface);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "init_device",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to device from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn device() types.UsbDevice {\n            return .{\n                .fn_ready = device_ready,\n                .fn_control_transfer = device_control_transfer,\n                .fn_control_ack = device_control_ack,\n                .fn_endpoint_open = device_endpoint_open,\n                .fn_endpoint_transfer = device_endpoint_transfer,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "device",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to device_ready from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn device_ready() bool {\n            return S.started;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "device_ready",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to device_control_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn device_control_transfer(setup: *const types.SetupPacket, data: []const u8) void {\n            CmdEndpoint.send_cmd_response(data, setup.length);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "device_control_transfer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to device_control_ack from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn device_control_ack(_: *const types.SetupPacket) void {\n            CmdEndpoint.send_cmd_ack();\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "device_control_ack",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to device_endpoint_open from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn device_endpoint_open(ep_desc: []const u8) void {\n            const ep_addr = BosConfig.get_data_u8(ep_desc, 2);\n            const ep_transfer_type = BosConfig.get_data_u8(ep_desc, 3);\n            const ep_max_packet_size = @as(u11, @intCast(BosConfig.get_data_u16(ep_desc, 4) & 0x7FF));\n\n            f.endpoint_open(ep_addr, ep_max_packet_size, types.TransferType.from_u8(ep_transfer_type) orelse types.TransferType.Bulk);\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "device_endpoint_open",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to device_endpoint_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn device_endpoint_transfer(ep_addr: u8, data: []const u8) void {\n            if (Endpoint.dir_from_address(ep_addr) == .In) {\n                f.usb_start_tx(ep_addr, data);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "device_endpoint_transfer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_driver from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn get_driver(drv_idx: u8) ?*types.UsbClassDriver {\n            if (drv_idx == drvid_invalid) {\n                return null;\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "get_driver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_setup_packet from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn get_setup_packet() types.SetupPacket {\n            const setup = f.get_setup_packet();\n            S.setup_packet = setup;\n            S.driver = null;\n            return setup;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "get_setup_packet",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to configuration_reset from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn configuration_reset() void {\n            @memset(&itf_to_drv, drvid_invalid);\n            @memset(&ep_to_drv, .{ drvid_invalid, drvid_invalid }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "configuration_reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to task from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn task(debug: bool) !void {\n            if (usb_config == null) return error.UninitializedDevice;\n\n            S.debug_mode = debug;\n\n            // Device Specific Request\n            const DeviceRequestProcessor = struct {\n                fn process_setup_request(setup: *const types.SetupPacket) !void {\n                    switch (setup.request_type.type) {\n                        .Class => {\n                            //const itfIndex = setup.index & 0x00ff;\n                            std.log.info(\"Device.Class\", .{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "task",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to process_get_descriptor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn process_get_descriptor(setup: *const types.SetupPacket, descriptor_type: DescType) !void {\n                    switch (descriptor_type) {\n                        .Device => {\n                            if (S.debug_mode) std.log.info(\"        Device\", .{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "process_get_descriptor",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to process_set_config from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn process_set_config(_: u16) !void {\n                    // TODO: we support just one config for now so ignore config index\n                    const bos_cfg = usb_config.?.config_descriptor;\n\n                    var curr_bos_cfg = bos_cfg;\n                    var curr_drv_idx: u8 = 0;\n\n                    if (BosConfig.try_get_desc_as(types.ConfigurationDescriptor, curr_bos_cfg)) |_| {\n                        curr_bos_cfg = BosConfig.get_desc_next(curr_bos_cfg);\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "process_set_config",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bind_endpoints_to_driver from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn bind_endpoints_to_driver(drv_bos_cfg: []const u8, drv_idx: u8) void {\n                    var curr_bos_cfg = drv_bos_cfg;\n                    while (curr_bos_cfg.len > 0) : ({\n                        curr_bos_cfg = BosConfig.get_desc_next(curr_bos_cfg);\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "bind_endpoints_to_driver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to process_setup_request from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn process_setup_request(setup: *const types.SetupPacket) !void {\n                    const itf: u8 = @intCast(setup.index & 0xFF);\n                    var driver = get_driver(itf_to_drv[itf]);\n                    if (driver == null) return;\n                    S.driver = driver;\n\n                    if (driver.?.class_control(.Setup, setup) == false) {\n                        // TODO\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "process_setup_request",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to process_setup_request from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn process_setup_request(_: *const types.SetupPacket) !void {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "process_setup_request",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to advance from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn advance(self: *@This(), bytes: usize) Error!void {\n        try self.bound_check(bytes);\n        self.advance_unsafe(bytes);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "advance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn write(self: *@This(), data: []const u8) Error!void {\n        try self.bound_check(data.len);\n        defer self.advance_unsafe(data.len);\n        @memcpy(self.buffer[self.pos .. self.pos + data.len], data);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_int from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn write_int(self: *@This(), comptime T: type, value: T) Error!void {\n        const size = @divExact(@typeInfo(T).int.bits, 8);\n        try self.bound_check(size);\n        defer self.advance_unsafe(size);\n        std.mem.writeInt(T, self.buffer[self.pos..][0..size], value, self.endian);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "write_int",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_int_unsafe from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn write_int_unsafe(self: *@This(), comptime T: type, value: T) void {\n        const size = @divExact(@typeInfo(T).int.bits, 8);\n        defer self.advance_unsafe(size);\n        std.mem.writeInt(T, self.buffer[self.pos..][0..size], value, self.endian);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "write_int_unsafe",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_written_slice from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn get_written_slice(self: *const @This()) []const u8 {\n        return self.buffer[0..self.pos];\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "get_written_slice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bound_check from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn bound_check(self: *const @This(), bytes: usize) Error!void {\n        if (self.pos + bytes > self.buffer.len) return error.EndOfBuffer;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "bound_check",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to advance_unsafe from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn advance_unsafe(self: *@This(), bytes: usize) void {\n        self.pos += bytes;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "advance_unsafe",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to try_advance from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn try_advance(self: *@This(), bytes: usize) usize {\n        const size = @min(bytes, self.buffer.len - self.pos);\n        self.advance_unsafe(size);\n        return size;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "try_advance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to try_read from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn try_read(self: *@This(), bytes: usize) []const u8 {\n        const size = @min(bytes, self.buffer.len - self.pos);\n        defer self.advance_unsafe(size);\n        return self.buffer[self.pos .. self.pos + size];\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "try_read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to try_peek from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn try_peek(self: *@This(), bytes: usize) []const u8 {\n        const size = @min(bytes, self.buffer.len - self.pos);\n        return self.buffer[self.pos .. self.pos + size];\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "try_peek",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_remaining_bytes_count from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn get_remaining_bytes_count(self: *const @This()) usize {\n        return self.buffer.len - self.pos;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "get_remaining_bytes_count",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to advance_unsafe from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "fn advance_unsafe(self: *@This(), bytes: usize) void {\n        self.pos += bytes;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "advance_unsafe",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to utf8_to_utf16_le from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub fn utf8_to_utf16_le(comptime s: []const u8) [s.len << 1]u8 {\n        const l = s.len << 1;\n        var ret: [l]u8 = @splat(0);\n        var i: usize = 0;\n        while (i < s.len) : (i += 1) {\n            ret[i << 1] = s[i];\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "function",
      "name": "utf8_to_utf16_le",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to S from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const S = struct {\n            var debug_mode = false;\n            // When the host gives us a new address, we can't just slap it into\n            // registers right away, because we have to do an acknowledgement step using\n            // our _old_ address.\n            var new_address: ?u8 = null;\n            // 0 - no config set\n            var cfg_num: u16 = 0;\n            // Flag recording whether the host has configured us with a\n            // `SetConfiguration` message.\n            var configured = false;\n            // Flag recording whether we've set up buffer transfers after being\n            // configured.\n            var started = false;\n            // Some scratch space that we'll use for things like preparing string\n            // descriptors for transmission.\n            var tmp: [128]u8 = @splat(0);\n            // Keeps track of sent data from tmp buffer\n            var buffer_reader = BufferReader{ .buffer = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "S",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CmdEndpoint from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const CmdEndpoint = struct {\n            /// Command response utility function that can split long data in multiple packets\n            fn send_cmd_response(data: []const u8, expected_max_length: u16) void {\n                S.buffer_reader = BufferReader{ .buffer = data[0..@min(data.len, expected_max_length)] }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "CmdEndpoint",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DeviceRequestProcessor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const DeviceRequestProcessor = struct {\n                fn process_setup_request(setup: *const types.SetupPacket) !void {\n                    switch (setup.request_type.type) {\n                        .Class => {\n                            //const itfIndex = setup.index & 0x00ff;\n                            std.log.info(\"Device.Class\", .{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "DeviceRequestProcessor",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InterfaceRequestProcessor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const InterfaceRequestProcessor = struct {\n                fn process_setup_request(setup: *const types.SetupPacket) !void {\n                    const itf: u8 = @intCast(setup.index & 0xFF);\n                    var driver = get_driver(itf_to_drv[itf]);\n                    if (driver == null) return;\n                    S.driver = driver;\n\n                    if (driver.?.class_control(.Setup, setup) == false) {\n                        // TODO\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "InterfaceRequestProcessor",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to EndpointRequestProcessor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const EndpointRequestProcessor = struct {\n                fn process_setup_request(_: *const types.SetupPacket) !void {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "EndpointRequestProcessor",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DeviceConfiguration from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub const DeviceConfiguration = struct {\n    device_descriptor: *const types.DeviceDescriptor,\n    config_descriptor: []const u8,\n    lang_descriptor: []const u8,\n    descriptor_strings: []const []const u8,\n    drivers: []types.UsbClassDriver,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "DeviceConfiguration",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InterruptStatus from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub const InterruptStatus = struct {\n    ///  Host: raised every time the host sends a SOF (Start of Frame)\n    BuffStatus: bool = false,\n    BusReset: bool = false,\n    ///  Set when the device connection state changes\n    DevConnDis: bool = false,\n    ///  Set when the device suspend state changes\n    DevSuspend: bool = false,\n    ///  Set when the device receives a resume from the host\n    DevResumeFromHost: bool = false,\n    /// Setup Request\n    SetupReq: bool = false,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "InterruptStatus",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to EPB from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub const EPB = struct {\n    /// The endpoint the data belongs to\n    endpoint_address: u8,\n    /// Data buffer\n    buffer: []u8,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "EPB",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to EPBIter from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub const EPBIter = struct {\n    /// Bitmask of the input buffers to handle\n    bufbits: u32,\n    /// The last input buffer handled. This can be used to flag the input buffer as handled on the\n    /// next call.\n    last_bit: ?u32 = null,\n    /// Point to the device configuration (to get access to the endpoint buffers defined by the user)\n    device_config: *const DeviceConfiguration,\n    /// Get the next available input buffer\n    next: *const fn (self: *@This()) ?EPB,\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "EPBIter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BufferWriter from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const BufferWriter = struct {\n    buffer: []u8,\n    pos: usize = 0,\n    endian: std.builtin.Endian = builtin.cpu.arch.endian(),\n\n    pub const Error = error{EndOfBuffer}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "BufferWriter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BufferReader from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const BufferReader = struct {\n    buffer: []const u8,\n    pos: usize = 0,\n    endian: std.builtin.Endian = builtin.cpu.arch.endian(),\n\n    /// Attempts to move read cursor forward by the specified number of bytes.\n    /// Returns the actual number of bytes advanced, up to the specified number.\n    pub fn try_advance(self: *@This(), bytes: usize) usize {\n        const size = @min(bytes, self.buffer.len - self.pos);\n        self.advance_unsafe(size);\n        return size;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "BufferReader",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UsbUtils from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "pub const UsbUtils = struct {\n    /// Convert an utf8 into an utf16 (little endian) string\n    pub fn utf8_to_utf16_le(comptime s: []const u8) [s.len << 1]u8 {\n        const l = s.len << 1;\n        var ret: [l]u8 = @splat(0);\n        var i: usize = 0;\n        while (i < s.len) : (i += 1) {\n            ret[i << 1] = s[i];\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "struct",
      "name": "UsbUtils",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to i from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const i: usize = @intCast(setup.value & 0xff);",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "const",
      "name": "i",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to itf from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig",
    "response": "const itf: u8 = @intCast(setup.index & 0xFF);",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb.zig",
      "type": "const",
      "name": "itf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u16 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn from_u16(v: u16) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "from_u16",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u8 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn from_u8(v: u8) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "from_u8",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn serialize(self: *const @This()) [5]u8 {\n        var out: [5]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intFromEnum(self.descriptor_subtype);\n        out[3] = @intCast(self.bcd_cdc & 0xff);\n        out[4] = @intCast((self.bcd_cdc >> 8) & 0xff);\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn serialize(self: *const @This()) [5]u8 {\n        var out: [5]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intFromEnum(self.descriptor_subtype);\n        out[3] = self.capabilities;\n        out[4] = self.data_interface;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn serialize(self: *const @This()) [4]u8 {\n        var out: [4]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intFromEnum(self.descriptor_subtype);\n        out[3] = self.capabilities;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn serialize(self: *const @This()) [5]u8 {\n        var out: [5]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intFromEnum(self.descriptor_subtype);\n        out[3] = self.master_interface;\n        out[4] = self.slave_interface_0;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to CdcClassDriver from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn CdcClassDriver(comptime usb: anytype) type {\n    const FIFO = utilities.CircularBuffer(u8, usb.max_packet_size);\n\n    return struct {\n        device: ?types.UsbDevice = null,\n        ep_notif: u8 = 0,\n        ep_in: u8 = 0,\n        ep_out: u8 = 0,\n\n        line_state: u8 = 0,\n        line_coding: CdcLineCoding = undefined,\n\n        rx: FIFO = .empty,\n        tx: FIFO = .empty,\n\n        epin_buf: [usb.max_packet_size]u8 = undefined,\n\n        pub fn available(self: *@This()) usize {\n            return self.rx.get_readable_len();\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "CdcClassDriver",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn read(self: *@This(), dst: []u8) usize {\n            const read_count = self.rx.read(dst);\n            self.prep_out_transaction();\n            return read_count;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn write(self: *@This(), data: []const u8) []const u8 {\n            const write_count = @min(self.tx.get_writable_len(), data.len);\n\n            if (write_count > 0) {\n                self.tx.write_assume_capacity(data[0..write_count]);\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write_flush from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn write_flush(self: *@This()) usize {\n            if (self.device.?.ready() == false) {\n                return 0;\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "write_flush",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to prep_out_transaction from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "fn prep_out_transaction(self: *@This()) void {\n            if (self.rx.get_writable_len() >= usb.max_packet_size) {\n                // Let endpoint know that we are ready for next packet\n                self.device.?.endpoint_transfer(self.ep_out, &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "prep_out_transaction",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "fn init(ptr: *anyopaque, device: types.UsbDevice) void {\n            var self: *@This() = @ptrCast(@alignCast(ptr));\n            self.device = device;\n            self.line_coding = .{\n                .bit_rate = 115200,\n                .stop_bits = 0,\n                .parity = 0,\n                .data_bits = 8,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to open from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "fn open(ptr: *anyopaque, cfg: []const u8) !usize {\n            var self: *@This() = @ptrCast(@alignCast(ptr));\n            var curr_cfg = cfg;\n\n            if (bos.try_get_desc_as(types.InterfaceDescriptor, curr_cfg)) |desc_itf| {\n                if (desc_itf.interface_class != @intFromEnum(types.ClassCode.Cdc)) return types.DriverErrors.UnsupportedInterfaceClassType;\n                if (desc_itf.interface_subclass != @intFromEnum(CdcCommSubClassType.AbstractControlModel)) return types.DriverErrors.UnsupportedInterfaceSubClassType;\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "open",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to class_control from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "fn class_control(ptr: *anyopaque, stage: types.ControlStage, setup: *const types.SetupPacket) bool {\n            var self: *@This() = @ptrCast(@alignCast(ptr));\n\n            if (CdcManagementRequestType.from_u8(setup.request)) |request| {\n                switch (request) {\n                    .SetLineCoding => {\n                        switch (stage) {\n                            .Setup => {\n                                // HACK, we should handle data phase somehow to read sent line_coding\n                                self.device.?.control_ack(setup);\n                            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "class_control",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "fn transfer(ptr: *anyopaque, ep_addr: u8, data: []u8) void {\n            var self: *@This() = @ptrCast(@alignCast(ptr));\n\n            if (ep_addr == self.ep_out) {\n                self.rx.write(data) catch {}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "transfer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to driver from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig",
    "response": "pub fn driver(self: *@This()) types.UsbClassDriver {\n            return .{\n                .ptr = self,\n                .fn_init = init,\n                .fn_open = open,\n                .fn_class_control = class_control,\n                .fn_transfer = transfer,\n            }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/cdc.zig",
      "type": "function",
      "name": "driver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u8 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn from_u8(v: u8) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "from_u8",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u8 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn from_u8(v: u8) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "from_u8",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn serialize(self: *const @This()) [9]u8 {\n        var out: [9]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intCast(self.bcd_hid & 0xff);\n        out[3] = @intCast((self.bcd_hid >> 8) & 0xff);\n        out[4] = self.country_code;\n        out[5] = self.num_descriptors;\n        out[6] = @intFromEnum(self.report_type);\n        out[7] = @intCast(self.report_length & 0xff);\n        out[8] = @intCast((self.report_length >> 8) & 0xff);\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_report_item from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_report_item(\n    comptime n: u2,\n    typ: u2,\n    tag: u4,\n    data: [n]u8,\n) [n + 1]u8 {\n    var out: [n + 1]u8 = undefined;\n\n    out[0] = (@as(u8, @intCast(tag)) << 4) | (@as(u8, @intCast(typ)) << 2) | n;\n\n    var i: usize = 0;\n    while (i < n) : (i += 1) {\n        out[i + 1] = data[i];\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_report_item",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_collection from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_collection(data: CollectionItem) [2]u8 {\n    return hid_report_item(\n        1,\n        @intFromEnum(ReportItemTypes.Main),\n        @intFromEnum(ReportItemMainGroup.Collection),\n        std.mem.toBytes(@intFromEnum(data)),\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_collection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_input from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_input(data: u8) [2]u8 {\n    return hid_report_item(\n        1,\n        @intFromEnum(ReportItemTypes.Main),\n        @intFromEnum(ReportItemMainGroup.Input),\n        std.mem.toBytes(data),\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_input",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_output from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_output(data: u8) [2]u8 {\n    return hid_report_item(\n        1,\n        @intFromEnum(ReportItemTypes.Main),\n        @intFromEnum(ReportItemMainGroup.Output),\n        std.mem.toBytes(data),\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_output",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_collection_end from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_collection_end() [1]u8 {\n    return hid_report_item(\n        0,\n        @intFromEnum(ReportItemTypes.Main),\n        @intFromEnum(ReportItemMainGroup.CollectionEnd),\n        .{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_collection_end",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_usage_page from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_usage_page(comptime n: u2, usage: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Global),\n        @intFromEnum(GlobalItem.UsagePage),\n        usage,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_usage_page",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_logical_min from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_logical_min(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Global),\n        @intFromEnum(GlobalItem.LogicalMin),\n        data,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_logical_min",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_logical_max from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_logical_max(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Global),\n        @intFromEnum(GlobalItem.LogicalMax),\n        data,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_logical_max",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_report_size from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_report_size(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Global),\n        @intFromEnum(GlobalItem.ReportSize),\n        data,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_report_size",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_report_count from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_report_count(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Global),\n        @intFromEnum(GlobalItem.ReportCount),\n        data,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_report_count",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_usage from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_usage(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Local),\n        @intFromEnum(LocalItem.Usage),\n        data,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_usage",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_usage_min from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_usage_min(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Local),\n        @intFromEnum(LocalItem.UsageMin),\n        data,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_usage_min",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_usage_max from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn hid_usage_max(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Local),\n        @intFromEnum(LocalItem.UsageMax),\n        data,\n    );\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "hid_usage_max",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "fn init(ptr: *anyopaque, device: types.UsbDevice) void {\n        var self: *HidClassDriver = @ptrCast(@alignCast(ptr));\n        self.device = device;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to open from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "fn open(ptr: *anyopaque, cfg: []const u8) !usize {\n        var self: *HidClassDriver = @ptrCast(@alignCast(ptr));\n        var curr_cfg = cfg;\n\n        if (bos.try_get_desc_as(types.InterfaceDescriptor, curr_cfg)) |desc_itf| {\n            if (desc_itf.interface_class != @intFromEnum(types.ClassCode.Hid)) return types.DriverErrors.UnsupportedInterfaceClassType;\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "open",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to class_control from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "fn class_control(ptr: *anyopaque, stage: types.ControlStage, setup: *const types.SetupPacket) bool {\n        var self: *HidClassDriver = @ptrCast(@alignCast(ptr));\n\n        switch (setup.request_type.type) {\n            .Standard => {\n                if (stage == .Setup) {\n                    const hid_desc_type = HidDescType.from_u8(@intCast((setup.value >> 8) & 0xff));\n                    const request_code = types.SetupRequest.from_u8(setup.request);\n\n                    if (hid_desc_type == null or request_code == null) {\n                        return false;\n                    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "class_control",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to driver from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub fn driver(self: *@This()) types.UsbClassDriver {\n        return .{\n            .ptr = self,\n            .fn_init = init,\n            .fn_open = open,\n            .fn_class_control = class_control,\n            .fn_transfer = transfer,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "function",
      "name": "driver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to HidDescriptor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const HidDescriptor = struct {\n    pub const const_descriptor_type = HidDescType.Hid;\n\n    length: u8 = 9,\n    /// Type of this descriptor\n    descriptor_type: HidDescType = const_descriptor_type,\n    /// Numeric expression identifying the HID Class Specification release\n    bcd_hid: u16 align(1),\n    /// Numeric expression identifying country code of the localized hardware\n    country_code: u8,\n    /// Numeric expression specifying the number of class descriptors\n    num_descriptors: u8,\n    /// Type of HID class report\n    report_type: HidDescType = HidDescType.Report,\n    /// The total size of the Report descriptor\n    report_length: u16 align(1),\n\n    pub fn serialize(self: *const @This()) [9]u8 {\n        var out: [9]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intCast(self.bcd_hid & 0xff);\n        out[3] = @intCast((self.bcd_hid >> 8) & 0xff);\n        out[4] = self.country_code;\n        out[5] = self.num_descriptors;\n        out[6] = @intFromEnum(self.report_type);\n        out[7] = @intCast(self.report_length & 0xff);\n        out[8] = @intCast((self.report_length >> 8) & 0xff);\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "struct",
      "name": "HidDescriptor",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UsageTable from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const UsageTable = struct {\n    pub const desktop: [1]u8 = \"\\x01\".*;\n    pub const keyboard: [1]u8 = \"\\x07\".*;\n    pub const led: [1]u8 = \"\\x08\".*;\n    pub const fido: [2]u8 = \"\\xD0\\xF1\".*;\n    pub const vendor: [2]u8 = \"\\x00\\xFF\".*;\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "struct",
      "name": "UsageTable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to FidoAllianceUsage from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const FidoAllianceUsage = struct {\n    pub const u2fhid: [1]u8 = \"\\x01\".*;\n    pub const data_in: [1]u8 = \"\\x20\".*;\n    pub const data_out: [1]u8 = \"\\x21\".*;\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "struct",
      "name": "FidoAllianceUsage",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DesktopUsage from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const DesktopUsage = struct {\n    pub const keyboard: [1]u8 = \"\\x06\".*;\n}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "struct",
      "name": "DesktopUsage",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to HidClassDriver from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const HidClassDriver = struct {\n    device: ?types.UsbDevice = null,\n    ep_in: u8 = 0,\n    ep_out: u8 = 0,\n    hid_descriptor: []const u8 = &.{}",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "struct",
      "name": "HidClassDriver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to desktop from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const desktop: [1]u8 = \"\\x01\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "desktop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to keyboard from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const keyboard: [1]u8 = \"\\x07\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "keyboard",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to led from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const led: [1]u8 = \"\\x08\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "led",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to fido from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const fido: [2]u8 = \"\\xD0\\xF1\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "fido",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to vendor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const vendor: [2]u8 = \"\\x00\\xFF\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "vendor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to u2fhid from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const u2fhid: [1]u8 = \"\\x01\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "u2fhid",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to data_in from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const data_in: [1]u8 = \"\\x20\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "data_in",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to data_out from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const data_out: [1]u8 = \"\\x21\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "data_out",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to keyboard from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const keyboard: [1]u8 = \"\\x06\".*;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "keyboard",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to HID_DATA from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const HID_DATA: u8 = 0 << 0;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "HID_DATA",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to HID_CONSTANT from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig",
    "response": "pub const HID_CONSTANT: u8 = 1 << 0;",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/hid.zig",
      "type": "const",
      "name": "HID_CONSTANT",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to config_descriptor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig",
    "response": "pub fn config_descriptor(config_num: u8, interfaces_num: u8, string_index: u8, total_len: u16, attributes: u8, max_power_ma: u9) [9]u8 {\n        const desc1 = types.ConfigurationDescriptor{ .total_length = total_len, .num_interfaces = interfaces_num, .configuration_value = config_num, .configuration_s = string_index, .attributes = 0b01000000 | attributes, .max_power = max_power_ma / 2 }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/templates.zig",
      "type": "function",
      "name": "config_descriptor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cdc_descriptor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig",
    "response": "pub fn cdc_descriptor(interface_number: u8, string_index: u8, endpoint_notifi_address: u8, endpoint_notifi_size: u16, endpoint_out_address: u8, endpoint_in_address: u8, endpoint_size: u16) [cdc_descriptor_len]u8 {\n        const desc1 = types.InterfaceAssociationDescriptor{ .first_interface = interface_number, .interface_count = 2, .function_class = 2, .function_subclass = 2, .function_protocol = 0, .function = 0 }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/templates.zig",
      "type": "function",
      "name": "cdc_descriptor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_in_descriptor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig",
    "response": "pub fn hid_in_descriptor(interface_number: u8, string_index: u8, boot_protocol: u8, report_desc_len: u16, endpoint_in_address: u8, endpoint_size: u16, endpoint_interval: u16) [hid_in_descriptor_len]u8 {\n        const desc1 = types.InterfaceDescriptor{ .interface_number = interface_number, .alternate_setting = 0, .num_endpoints = 1, .interface_class = 3, .interface_subclass = if (boot_protocol > 0) 1 else 0, .interface_protocol = boot_protocol, .interface_s = string_index }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/templates.zig",
      "type": "function",
      "name": "hid_in_descriptor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hid_in_out_descriptor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig",
    "response": "pub fn hid_in_out_descriptor(interface_number: u8, string_index: u8, boot_protocol: u8, report_desc_len: u16, endpoint_out_address: u8, endpoint_in_address: u8, endpoint_size: u16, endpoint_interval: u16) [hid_in_out_descriptor_len]u8 {\n        const desc1 = types.InterfaceDescriptor{ .interface_number = interface_number, .alternate_setting = 0, .num_endpoints = 2, .interface_class = 3, .interface_subclass = if (boot_protocol > 0) 1 else 0, .interface_protocol = boot_protocol, .interface_s = string_index }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/templates.zig",
      "type": "function",
      "name": "hid_in_out_descriptor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to vendor_descriptor from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig",
    "response": "pub fn vendor_descriptor(interface_number: u8, string_index: u8, endpoint_out_address: u8, endpoint_in_address: u8, endpoint_size: u16) [vendor_descriptor_len]u8 {\n        const desc1 = types.InterfaceDescriptor{ .interface_number = interface_number, .alternate_setting = 0, .num_endpoints = 2, .interface_class = 0xff, .interface_subclass = 0, .interface_protocol = 0, .interface_s = string_index }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/templates.zig",
      "type": "function",
      "name": "vendor_descriptor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DescriptorsConfigTemplates from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig",
    "response": "pub const DescriptorsConfigTemplates = struct {\n    pub const config_descriptor_len = 9;\n\n    pub fn config_descriptor(config_num: u8, interfaces_num: u8, string_index: u8, total_len: u16, attributes: u8, max_power_ma: u9) [9]u8 {\n        const desc1 = types.ConfigurationDescriptor{ .total_length = total_len, .num_interfaces = interfaces_num, .configuration_value = config_num, .configuration_s = string_index, .attributes = 0b01000000 | attributes, .max_power = max_power_ma / 2 }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/templates.zig",
      "type": "struct",
      "name": "DescriptorsConfigTemplates",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u8 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn from_u8(v: u8) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "from_u8",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u8 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn from_u8(v: u8) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "from_u8",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to as_number from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "fn as_number(self: @This()) u2 {\n        return @intFromEnum(self);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "as_number",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u8 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn from_u8(v: u8) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "from_u8",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_u8 from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn from_u8(v: u8) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "from_u8",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to as_number from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "fn as_number(self: @This()) u1 {\n        return @intFromEnum(self);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "as_number",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to as_number_reversed from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "fn as_number_reversed(self: @This()) u1 {\n        return ~@intFromEnum(self);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "as_number_reversed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_address from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "fn to_address(num: u8, dir: Dir) u8 {\n        return switch (dir) {\n            .Out => num,\n            .In => num | Dir.DIR_IN_MASK,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "to_address",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to num_from_address from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "fn num_from_address(addr: u8) u8 {\n        return addr & ~@as(u8, @intCast(Dir.DIR_IN_MASK));\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "num_from_address",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dir_from_address from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "fn dir_from_address(addr: u8) Dir {\n        return if (addr & Dir.DIR_IN_MASK != 0) Dir.In else Dir.Out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "dir_from_address",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn serialize(self: *const @This()) [7]u8 {\n        var out: [7]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = self.endpoint_address;\n        out[3] = self.attributes;\n        out[4] = @intCast(self.max_packet_size & 0xff);\n        out[5] = @intCast((self.max_packet_size >> 8) & 0xff);\n        out[6] = self.interval;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn serialize(self: *const @This()) [9]u8 {\n        var out: [9]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = self.interface_number;\n        out[3] = self.alternate_setting;\n        out[4] = self.num_endpoints;\n        out[5] = self.interface_class;\n        out[6] = self.interface_subclass;\n        out[7] = self.interface_protocol;\n        out[8] = self.interface_s;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn serialize(self: *const @This()) [8]u8 {\n        var out: [8]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = self.first_interface;\n        out[3] = self.interface_count;\n        out[4] = self.function_class;\n        out[5] = self.function_subclass;\n        out[6] = self.function_protocol;\n        out[7] = self.function;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn serialize(self: *const @This()) [9]u8 {\n        var out: [9]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intCast(self.total_length & 0xff);\n        out[3] = @intCast((self.total_length >> 8) & 0xff);\n        out[4] = self.num_interfaces;\n        out[5] = self.configuration_value;\n        out[6] = self.configuration_s;\n        out[7] = self.attributes;\n        out[8] = self.max_power;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn serialize(self: *const @This()) [18]u8 {\n        var out: [18]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intCast(self.bcd_usb & 0xff);\n        out[3] = @intCast((self.bcd_usb >> 8) & 0xff);\n        out[4] = self.device_class;\n        out[5] = self.device_subclass;\n        out[6] = self.device_protocol;\n        out[7] = self.max_packet_size0;\n        out[8] = @intCast(self.vendor & 0xff);\n        out[9] = @intCast((self.vendor >> 8) & 0xff);\n        out[10] = @intCast(self.product & 0xff);\n        out[11] = @intCast((self.product >> 8) & 0xff);\n        out[12] = @intCast(self.bcd_device & 0xff);\n        out[13] = @intCast((self.bcd_device >> 8) & 0xff);\n        out[14] = self.manufacturer_s;\n        out[15] = self.product_s;\n        out[16] = self.serial_s;\n        out[17] = self.num_configurations;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn serialize(self: *const @This()) [10]u8 {\n        var out: [10]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intCast(self.bcd_usb & 0xff);\n        out[3] = @intCast((self.bcd_usb >> 8) & 0xff);\n        out[4] = self.device_class;\n        out[5] = self.device_subclass;\n        out[6] = self.device_protocol;\n        out[7] = self.max_packet_size0;\n        out[8] = self.num_configurations;\n        out[9] = self.reserved;\n        return out;\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ready from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn ready(self: *@This()) bool {\n        return self.fn_ready();\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "ready",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to control_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn control_transfer(self: *@This(), setup: *const SetupPacket, data: []const u8) void {\n        return self.fn_control_transfer(setup, data);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "control_transfer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to control_ack from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn control_ack(self: *@This(), setup: *const SetupPacket) void {\n        return self.fn_control_ack(setup);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "control_ack",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to endpoint_open from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn endpoint_open(self: *@This(), ep_desc: []const u8) void {\n        return self.fn_endpoint_open(ep_desc);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "endpoint_open",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to endpoint_transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn endpoint_transfer(self: *@This(), ep_addr: u8, data: []const u8) void {\n        return self.fn_endpoint_transfer(ep_addr, data);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "endpoint_transfer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn init(self: *@This(), device: UsbDevice) void {\n        return self.fn_init(self.ptr, device);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to open from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn open(self: *@This(), cfg: []const u8) !usize {\n        return self.fn_open(self.ptr, cfg);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "open",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to class_control from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn class_control(self: *@This(), stage: ControlStage, setup: *const SetupPacket) bool {\n        return self.fn_class_control(self.ptr, stage, setup);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "class_control",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to transfer from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub fn transfer(self: *@This(), ep_addr: u8, data: []u8) void {\n        return self.fn_transfer(self.ptr, ep_addr, data);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "function",
      "name": "transfer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Endpoint from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub const Endpoint = struct {\n    pub inline fn to_address(num: u8, dir: Dir) u8 {\n        return switch (dir) {\n            .Out => num,\n            .In => num | Dir.DIR_IN_MASK,\n        }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "struct",
      "name": "Endpoint",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UsbDevice from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub const UsbDevice = struct {\n    fn_ready: *const fn () bool,\n    fn_control_transfer: *const fn (setup: *const SetupPacket, data: []const u8) void,\n    fn_control_ack: *const fn (setup: *const SetupPacket) void,\n    fn_endpoint_open: *const fn (ep_desc: []const u8) void,\n    fn_endpoint_transfer: *const fn (ep_addr: u8, data: []const u8) void,\n\n    pub fn ready(self: *@This()) bool {\n        return self.fn_ready();\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "struct",
      "name": "UsbDevice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UsbClassDriver from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub const UsbClassDriver = struct {\n    ptr: *anyopaque,\n    fn_init: *const fn (ptr: *anyopaque, device: UsbDevice) void,\n    fn_open: *const fn (ptr: *anyopaque, cfg: []const u8) anyerror!usize,\n    fn_class_control: *const fn (ptr: *anyopaque, stage: ControlStage, setup: *const SetupPacket) bool,\n    fn_transfer: *const fn (ptr: *anyopaque, ep_addr: u8, data: []u8) void,\n\n    pub fn init(self: *@This(), device: UsbDevice) void {\n        return self.fn_init(self.ptr, device);\n    }",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "struct",
      "name": "UsbClassDriver",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to EP0_IN_ADDR from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub const EP0_IN_ADDR: u8 = to_address(0, .In);",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "const",
      "name": "EP0_IN_ADDR",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to EP0_OUT_ADDR from ZigEmbeddedGroup/microzig",
    "context": "Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig",
    "response": "pub const EP0_OUT_ADDR: u8 = to_address(0, .Out);",
    "metadata": {
      "repo": "ZigEmbeddedGroup/microzig",
      "stars": 1852,
      "file": "core/src/core/usb/types.zig",
      "type": "const",
      "name": "EP0_OUT_ADDR",
      "difficulty": "easy"
    }
  }
]