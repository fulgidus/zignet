{"instruction":"Write a Zig function similar to compress from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"pub fn compress(comptime container: Container, reader: *std.Io.Reader, writer: *std.Io.Writer) !void {\n        var c = try huffman.compressor(container, writer);\n        try c.compress(reader);\n        try c.finish();\n    }"}
{"instruction":"Write a Zig const similar to cursor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const cursor: *Cursor = @fieldParentPtr(\"touch_down\", listener);"}
{"instruction":"Write a Zig function similar to addOne from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn addOne(self: *Self, allocator: Allocator) Allocator.Error!*T {\n            const new_length = self.len + 1;\n            try self.growCapacity(allocator, new_length);\n            const result = uncheckedAt(self, self.len);\n            self.len = new_length;\n            return result;\n        }"}
{"instruction":"Write a Zig const similar to base_h from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"const base_h: usize = base.height;"}
{"instruction":"Write a Zig function similar to script from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn script(self: webui, script_content: [:0]const u8, timeout: usize, buffer: []u8) !void {\n    const success = c.webui_script(\n        self.window_handle,\n        script_content.ptr,\n        timeout,\n        buffer.ptr,\n        buffer.len,\n    );\n    if (!success) return WebUIError.ScriptError;\n}"}
{"instruction":"Write a Zig function similar to listAppend from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn listAppend(vm: *ZVM, list: Value, val: Value) void {\n    c.clListAppend(@ptrCast(vm), list, val);\n}"}
{"instruction":"Write a Zig struct similar to Memory from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Mir.zig","output":"pub const Memory = struct {\n    info: Info,\n    base: u32,\n    off: u32,\n    extra: u32,\n\n    pub const Info = packed struct(u32) {\n        base: @typeInfo(bits.Memory.Base).Union.tag_type.?,\n        mod: @typeInfo(bits.Memory.Mod).Union.tag_type.?,\n        size: bits.Memory.Size,\n        index: Register,\n        scale: bits.Memory.Scale,\n        _: u16 = undefined,\n    }"}
{"instruction":"Write a Zig function similar to hsl from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/values/color.zig","output":"pub fn hsl(h: Angle, s: NumberOrPercentage, l: NumberOrPercentage) Color {\n        return hsla(h, s, l, .{ .value = 1.0 }"}
{"instruction":"Write a Zig function similar to getDevices from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pci.zig","output":"pub fn getDevices(allocator: Allocator) Allocator.Error![]PciDeviceInfo {\n    // Create an array list for the devices.\n    var pci_device_infos = ArrayList(PciDeviceInfo).init(allocator);\n    defer pci_device_infos.deinit();\n\n    // Iterate through all the possible devices\n    var _bus: u32 = 0;\n    while (_bus < 8) : (_bus += 1) {\n        const bus = @intCast(u8, _bus);\n        var _device: u32 = 0;\n        while (_device < 32) : (_device += 1) {\n            const device = @intCast(u5, _device);\n            // Devices have at least 1 function\n            const pci_device = PciDevice{\n                .bus = bus,\n                .device = device,\n            }"}
{"instruction":"Write a Zig function similar to dump from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"pub fn dump(self: *const CacheMsg, file: *cc.FILE) void {\n    const h: Header = .{\n        .update_time = cc.to_i64(self.update_time),\n        .hashv = self.hashv,\n        .ttl = self.ttl,\n        .ttl_r = self.ttl_r,\n        .msg_len = self.msg_len,\n        .qnamelen = self.qnamelen,\n    }"}
{"instruction":"Write a Zig function similar to push from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/stack.zig","output":"pub fn push(self: *Stack, comptime T: type) !*T {\n        const ptr_i = std.mem.alignBackward(\n            usize,\n            @intFromPtr(self.used.ptr - @sizeOf(T)),\n            coro_base.stack_alignment,\n        );\n        if (ptr_i <= @intFromPtr(&self.full.data[0])) {\n            return error.StackTooSmall;\n        }"}
{"instruction":"Write a Zig function similar to writeFifoDataToArrayList from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn writeFifoDataToArrayList(allocator: Allocator, list: *std.ArrayListUnmanaged(u8), fifo: *std.io.PollFifo) !void {\n    if (fifo.head != 0) fifo.realign();\n    if (list.capacity == 0) {\n        list.* = .{\n            .items = fifo.buf[0..fifo.count],\n            .capacity = fifo.buf.len,\n        }"}
{"instruction":"Write a Zig const similar to lab_alpha from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const lab_alpha: OklabAlpha = @bitCast(rgba.*);"}
{"instruction":"Write a Zig function similar to jetzigInit from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: build.zig","output":"pub fn jetzigInit(b: *std.Build, exe: *std.Build.Step.Compile, options: JetzigInitOptions) !void {\n    if (options.zmpl_version == .v1) {\n        std.debug.print(\"Zmpl v1 has now been removed. Please upgrade to v2.\\n\", .{}"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn init(exec: *Executor, file: xev.File) Self {\n        return .{ .exec = exec, .file = file }"}
{"instruction":"Write a Zig function similar to execute from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/middleware/Cors.zig","output":"pub fn execute(self: *const Cors, req: *httpz.Request, res: *httpz.Response, executor: anytype) !void {\n    res.header(\"Access-Control-Allow-Origin\", self.origin);\n    if (req.method != .OPTIONS) {\n        return executor.next();\n    }"}
{"instruction":"Write a Zig const similar to x from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"const x: f32 = std.math.round(width / 2.0 + radius * std.math.cos(angle) - width / 2.0);"}
{"instruction":"Write a Zig function similar to jsonParse from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn jsonParse(allocator: std.mem.Allocator, source: anytype, options: std.json.ParseOptions) !EndPoint {\n        _ = allocator;\n\n        var buffer: [256]u8 = undefined;\n        var fba = std.heap.FixedBufferAllocator.init(&buffer);\n\n        const str = try std.json.innerParse([]const u8, fba.allocator(), source, options);\n\n        return parse(str) catch return error.UnexpectedToken;\n    }"}
{"instruction":"Write a Zig const similar to device from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputDevice.zig","output":"const device: *InputDevice = @fieldParentPtr(\"destroy\", listener);"}
{"instruction":"Write a Zig const similar to self from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"const self: *Reader = @alignCast(@fieldParentPtr(\"interface\", r));"}
{"instruction":"Write a Zig function similar to resultPtr from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"fn resultPtr(self: *JobExecuteState, comptime T: type) *T {\n        if (@sizeOf(T) > @sizeOf(ResultType)) {\n            @compileError(\"value is too big to be returned by background thread\");\n        }"}
{"instruction":"Write a Zig function similar to handle_output from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn handle_output(self: *Process, bytes: []const u8) Error!void {\n        try self.recv_buf.appendSlice(self.allocator, bytes);\n        self.write_log(\"### RECV:\\n{s}"}
{"instruction":"Write a Zig function similar to bun_is_exiting from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"fn bun_is_exiting() c_int {\n    return @intFromBool(isExiting());\n}"}
{"instruction":"Write a Zig function similar to drain from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"fn drain(w: *std.Io.Writer, data: []const []const u8, splat: usize) std.Io.Writer.Error!usize {\n            const self: *Self = @alignCast(@fieldParentPtr(\"writer\", w));\n\n            if (data.len == 0) {\n                return 0;\n            }"}
{"instruction":"Write a Zig const similar to tab from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const tab: u21 = 0x09;"}
{"instruction":"Write a Zig function similar to registerItem from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn registerItem(assetFolder: []const u8, id: []const u8, zon: ZonElement) !void {\n\tvar split = std.mem.splitScalar(u8, id, ':');\n\tconst mod = split.first();\n\tvar texturePath: []const u8 = &.{}"}
{"instruction":"Write a Zig struct similar to ModernBertPredictionHead from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertPredictionHead = struct {\n    dense: zml.nn.Linear,\n    norm: zml.nn.LayerNorm,\n\n    pub fn forward(self: ModernBertPredictionHead, hidden_states: Tensor) Tensor {\n        const dense_output: Tensor = zml.call(self.dense, .forward, .{hidden_states}"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@atomicLoad</span>(<span class=\"tok-kw\">comptime</span> T: <span class=\"tok-type\">type</span>, ptr: *<span class=\"tok-kw\">const</span> T, <span class=\"tok-kw\">comptime</span> ordering: AtomicOrder) T"}
{"instruction":"Write a Zig const similar to cmd from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/debug.zig","output":"const cmd: Command = try .parse(gpa, args);"}
{"instruction":"Write a Zig function similar to calcNumbers from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: build/generate_def.zig","output":"fn calcNumbers(db: *const DafsaBuilder) void {\n        db.root.calcNumbers();\n    }"}
{"instruction":"Write a Zig function similar to renderSprite from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/dvui.zig","output":"pub fn renderSprite(source: dvui.ImageSource, s: pixi.Sprite, data_point: dvui.Point, scale: f32, opts: dvui.RenderTextureOptions) !void {\n    const atlas_size = dvui.imageSize(source) catch {\n        std.log.err(\"Failed to get atlas size\", .{}"}
{"instruction":"Write a Zig function similar to readInstallDir from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn readInstallDir(allocator: Allocator) !?[]const u8 {\n    const settings_dir_path = getSettingsDir(allocator) orelse return null;\n    defer allocator.free(settings_dir_path);\n    const setting_path = std.fs.path.join(allocator, &.{ settings_dir_path, \"install-dir\" }"}
{"instruction":"Write a Zig struct similar to huffman from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/consts.zig","output":"pub const huffman = struct {\n    // The odd order in which the codegen code sizes are written.\n    pub const codegen_order = [_]u32{ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 }"}
{"instruction":"Write a Zig function similar to init from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn init(\n    gpa: Allocator,\n    src: []const u8,\n    language: Language,\n    syntax_only: bool,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to genString from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genString(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .string);\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.String, true, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }"}
{"instruction":"Write a Zig function similar to waitUnwrappedWindows from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn waitUnwrappedWindows(self: *ChildProcess) WaitError!void {\n    const result = windows.WaitForSingleObjectEx(self.id, windows.INFINITE, false);\n\n    self.term = @as(SpawnError!Term, x: {\n        var exit_code: windows.DWORD = undefined;\n        if (windows.kernel32.GetExitCodeProcess(self.id, &exit_code) == 0) {\n            break :x Term{ .Unknown = 0 }"}
{"instruction":"Write a Zig const similar to VEC_YIQ_Q_B_COEFF from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"const VEC_YIQ_Q_B_COEFF: @Vector(2, i64) = @splat(@as(i64, @intFromFloat(YIQ_Q_B_COEFF * SHIFTED_1)));"}
{"instruction":"Write a Zig function similar to unsupported_lsp_request from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn unsupported_lsp_request(self: *Self, from: tp.pid_ref, cbor_id: []const u8, method: []const u8) ClientError!void {\n    return LSP.send_error_response(self.allocator, from, cbor_id, LSP.ErrorCode.MethodNotFound, method) catch error.ClientFailed;\n}"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn close(fd: c_int) c_int;\n    }"}
{"instruction":"Write a Zig function similar to syscall4 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn syscall4(syscall: usize, arg1: usize, arg2: usize, arg3: usize, arg4: usize) anyerror!usize {\n    const res = asm volatile (\n        \\\\int $0x80\n        : [ret] \"={eax}"}
{"instruction":"Write a Zig const similar to INV_SHADE_FACTOR from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const INV_SHADE_FACTOR: u32 = 255 - WHITE_SHADE_FACTOR;"}
{"instruction":"Write a Zig function similar to max from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/compiler_generated_function.zig","output":"fn max(a: bool, b: bool) bool {\n    {\n        return a or b;\n    }"}
{"instruction":"Write a Zig function similar to uncaughtError from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/02_handler.zig","output":"pub fn uncaughtError(_: *Handler, req: *httpz.Request, res: *httpz.Response, err: anyerror) void {\n        std.debug.print(\"uncaught http error at {s}"}
{"instruction":"Write a Zig const similar to aa from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const aa: c_short = 27;"}
{"instruction":"Write a Zig function similar to type_ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"pub fn type_(comptime root: type, object: anytype) py.PyType {\n    return .{ .obj = .{ .py = @as(\n        ?*ffi.PyObject,\n        @ptrCast(@alignCast(py.object(root, object).py.ob_type)),\n    ).? }"}
{"instruction":"Write a Zig const similar to slice_lab from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"const slice_lab: []OklabAlpha = @ptrCast(colors);"}
{"instruction":"Write a Zig function similar to pushStructInit from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushStructInit(c: *cy.Chunk, typeId: cy.TypeId, startLocal: u8, val_size: u8, fields: []const cy.sym.FieldInfo, dst: SlotId, debugNode: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    if (val_size <= 4) {\n        try c.pushCode(.struct_small, &.{ 0, 0, startLocal, @intCast(fields.len), dst }"}
{"instruction":"Write a Zig function similar to setImgColor from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"pub fn setImgColor(self: *Image, x: u32, y: u32, color: u32) void {\n        const offset = y * self.width + x;\n        self.data[offset] = color;\n    }"}
{"instruction":"Write a Zig function similar to getIdentifiers from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"fn getIdentifiers(\n    comptime definition: type,\n    comptime qualifiedName: []const [:0]const u8,\n    comptime parent: type,\n) [countDefinitions(definition)]Identifier {\n    comptime var identifiers: [countDefinitions(definition)]Identifier = undefined;\n    comptime var count = 0;\n    switch (@typeInfo(definition)) {\n        .@\"struct\" => |info| {\n            // Iterate over the fields of the struct\n            for (info.fields) |f| {\n                for (getIdentifiers(f.type, qualifiedName ++ .{f.name}"}
{"instruction":"Write a Zig function similar to oomPanic from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/main.zig","output":"fn oomPanic() noreturn {\n    @panic(\"Out of memory\");\n}"}
{"instruction":"Write a Zig function similar to getUserInfo from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/event_handling/main.zig","output":"fn getUserInfo(e: *webui.Event) void {\n    // Get user context from global storage\n    const context = getContextsMap().get(e.client_id) orelse {\n        e.returnString(\"{\\\"error\\\":\\\"No active session\\\"}"}
{"instruction":"Write a Zig function similar to removeChild from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"fn removeChild(\n    self: *LinuxWatcher,\n    parent: std.posix.fd_t,\n    child: std.posix.fd_t,\n) ?std.posix.fd_t {\n    if (self.children_fds.getEntry(parent)) |entry| {\n        for (0.., entry.value_ptr.items) |i, fd| {\n            if (child == fd) {\n                return entry.value_ptr.swapRemove(i);\n            }"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn writev(fd: c_int, iovec: [*]const iovec_t, iovec_n: c_int) isize;\n    }"}
{"instruction":"Write a Zig const similar to tag from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"const tag: Tag = @enumFromInt(@as(u32, @bitCast(header)));"}
{"instruction":"Write a Zig function similar to readU16LE from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/bmp.zig","output":"fn readU16LE(data: []const u8, offset: usize) !u16 {\n    if (offset + 2 > data.len) return BmpError.FileCorrupted;\n    return std.mem.readInt(u16, data[offset .. offset + 2], .little);\n}"}
{"instruction":"Write a Zig struct similar to MatchLength from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/Token.zig","output":"const MatchLength = struct {\n    code: u16,\n    base_scaled: u8, // base - 3, scaled to fit into u8 (0-255), same as lit_len field in Token.\n    base: u16, // 3-258\n    extra_length: u8 = 0,\n    extra_bits: u4,\n}"}
{"instruction":"Write a Zig function similar to device_control_ack from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig","output":"fn device_control_ack(_: *const types.SetupPacket) void {\n            CmdEndpoint.send_cmd_ack();\n        }"}
{"instruction":"Write a Zig struct similar to UsbUtils from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig","output":"pub const UsbUtils = struct {\n    /// Convert an utf8 into an utf16 (little endian) string\n    pub fn utf8_to_utf16_le(comptime s: []const u8) [s.len << 1]u8 {\n        const l = s.len << 1;\n        var ret: [l]u8 = @splat(0);\n        var i: usize = 0;\n        while (i < s.len) : (i += 1) {\n            ret[i << 1] = s[i];\n        }"}
{"instruction":"Write a Zig function similar to create from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn create(b: *Builder) *Self {\n        const options = b.allocator.create(Self) catch @panic(\"out of memory\");\n\n        options.* = Self{\n            .builder = b,\n            .step = Step.init(.{\n                .id = .custom,\n                .name = \"render build options\",\n                .owner = b,\n                .makeFn = make,\n            }"}
{"instruction":"Write a Zig function similar to init from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"pub fn init(config: Config) ThreadPool {\n    return .{\n        .stack_size = @max(1, config.stack_size),\n        .max_threads = if (config.max_threads > 0)\n            config.max_threads\n        else\n            @intCast(std.Thread.getCpuCount() catch 1),\n    }"}
{"instruction":"Write a Zig function similar to nodeItems from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Tree.zig","output":"pub fn nodeItems(tree: Tree, node: Node.Index, buf: *[2]Node.Index) []const Node.Index {\n    const data = tree.nodes.items(.data);\n    switch (tree.nodes.items(.id)[node]) {\n        .tuple_expr_two,\n        .list_expr_two,\n        .map_expr_two,\n        .block_stmt_two,\n        .try_expr_one,\n        .fn_expr_one,\n        .call_expr_one,\n        .async_call_expr_one,\n        .match_expr_one,\n        .match_case_one,\n        => {\n            buf[0] = data[node].bin.lhs;\n            buf[1] = data[node].bin.rhs;\n            if (buf[1] != 0) {\n                return buf[0..2];\n            }"}
{"instruction":"Write a Zig function similar to abs from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn abs(vm: *cy.VM) Value {\n    return Value.initF64(@abs(vm.getFloat(0)));\n}"}
{"instruction":"Write a Zig function similar to constructor from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSRuleList.zig","output":"pub fn constructor() CSSRuleList {\n    return .{ .list = .empty }"}
{"instruction":"Write a Zig function similar to pointerFromCstr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn pointerFromCstr(vm: *cy.VM) anyerror!Value {\n    if (cy.isWasm) return vm.prepPanic(\"Unsupported.\");\n    const ptr: [*]const u8 = @ptrCast(vm.getPointer(0));\n    const off: u64 = @bitCast(vm.getInt(1));\n    const bytes = std.mem.span(@as([*:0]const u8, @ptrCast(ptr + off)));\n    return vm.allocString(bytes);\n}"}
{"instruction":"Write a Zig function similar to bind from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn bind(\n    self: webui,\n    element: [:0]const u8,\n    comptime func: fn (e: *Event) void,\n) !usize {\n    const tmp_struct = struct {\n        fn handle(tmp_e: *Event) callconv(.c) void {\n            func(tmp_e);\n        }"}
{"instruction":"Write a Zig function similar to unmapServerId from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn unmapServerId(serverId: InventoryId, clientId: InventoryId) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tstd.debug.assert(serverToClientMap.fetchRemove(serverId).?.value.id == clientId);\n\t\t}"}
{"instruction":"Write a Zig struct similar to Ctx from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const Ctx = struct {\n            allocator: Allocator,\n            col: usize,\n            abs_col: usize = 0,\n            s: []const u8,\n            eol: bool,\n\n            fn walker(ctx: *anyopaque, leaf: *const Leaf, metrics: Metrics) WalkerMut {\n                const Ctx = @as(*@This(), @ptrCast(@alignCast(ctx)));\n                const leaf_wcwidth = leaf.width(Ctx.abs_col, metrics);\n                const base_col = Ctx.abs_col;\n                Ctx.abs_col += leaf_wcwidth;\n\n                if (Ctx.col == 0) {\n                    const left = Leaf.new(Ctx.allocator, Ctx.s, leaf.bol, Ctx.eol) catch |e| return .{ .err = e }"}
{"instruction":"Write a Zig function similar to toJS from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn toJS(\n    this: *OutputFile,\n    owned_pathname: ?[]const u8,\n    globalObject: *jsc.JSGlobalObject,\n) bun.jsc.JSValue {\n    return switch (this.value) {\n        .move, .pending => @panic(\"Unexpected pending output file\"),\n        .noop => .js_undefined,\n        .copy => |copy| brk: {\n            const file_blob = jsc.WebCore.Blob.Store.initFile(\n                if (copy.fd.isValid())\n                    jsc.Node.PathOrFileDescriptor{\n                        .fd = copy.fd,\n                    }"}
{"instruction":"Write a Zig function similar to deinit from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/params.zig","output":"pub fn deinit(self: *Params, allocator: Allocator) void {\n        allocator.free(self.names.ptr[0 .. 2 * self.names.len]);\n    }"}
{"instruction":"Write a Zig function similar to parseTypeDefFrom from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub fn parseTypeDefFrom(self: *Self, source: []const u8) Error!*obj.ObjTypeDef {\n    const type_scanner = Scanner.init(self.gc.allocator, self.script_name, source);\n    // Replace parser scanner with one that only looks at that substring\n    const scanner = self.scanner;\n    self.scanner = type_scanner;\n    const current_token = self.current_token;\n    const tokens_count = self.ast.tokens.len;\n\n    // If Eof, manually add new token\n    if (self.ast.tokens.items(.tag)[self.current_token.?] == .Eof) {\n        _ = try self.ast.appendToken(try self.scanner.?.scanToken());\n        self.current_token = self.current_token.? + 1;\n    }"}
{"instruction":"Write a Zig function similar to clearAndReset from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/circularBuffer.zig","output":"pub fn clearAndReset(self: *Self, alloc: Allocator) !void {\n            self.read_ndx = 0;\n            self.write_ndx = 0;\n            self.len = 0;\n\n            const size = self.items.len;\n            alloc.free(self.items);\n            self.items = try alloc.alloc(T, size);\n        }"}
{"instruction":"Write a Zig struct similar to ctx_ from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const ctx_ = struct {\n            pos: usize,\n            line: usize = 0,\n            col: usize = 0,\n            eol_mode: EolMode,\n            fn walker(ctx_: *anyopaque, egc: []const u8, wcwidth: usize, _: Metrics) Walker {\n                const ctx = @as(*@This(), @ptrCast(@alignCast(ctx_)));\n                if (egc[0] == '\\n') {\n                    ctx.pos -= switch (ctx.eol_mode) {\n                        .lf => 1,\n                        .crlf => @min(2, ctx.pos),\n                    }"}
{"instruction":"Write a Zig function similar to matches from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub fn matches(self: Key, cp: u21, mods: Modifiers) bool {\n    // rule 1\n    if (self.matchExact(cp, mods)) return true;\n\n    // rule 2\n    if (self.matchText(cp, mods)) return true;\n\n    // rule 3\n    if (self.matchShiftedCodepoint(cp, mods)) return true;\n\n    return false;\n}"}
{"instruction":"Write a Zig const similar to configuration_items from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const configuration_items: [1]types.ConfigurationItem = .{\n        .{\n            .section = \"zls\",\n            .scopeUri = if (server.workspaces.items.len == 1) server.workspaces.items[0].uri else null,\n        },\n    };"}
{"instruction":"Write a Zig struct similar to ExampleOptions from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: build.zig","output":"const ExampleOptions = struct {\n    dvui_mod: *std.Build.Module,\n    backend_name: []const u8,\n    backend_mod: *std.Build.Module,\n}"}
{"instruction":"Write a Zig function similar to nameFromUniqueIndex from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: build/generate_def.zig","output":"pub fn nameFromUniqueIndex(index: u16, buf: []u8) []u8 {\n        \\\\    std.debug.assert(index >= 1 and index <= data.len);\n        \\\\\n        \\\\    var node_index: u16 = 0;\n        \\\\    var count: u16 = index;\n        \\\\    var w = std.Io.Writer.fixed(buf);\n        \\\\\n        \\\\    while (true) {\n        \\\\        var sibling_index = dafsa[node_index].child_index;\n        \\\\        while (true) {\n        \\\\            if (dafsa[sibling_index].number > 0 and dafsa[sibling_index].number < count) {\n        \\\\                count -= dafsa[sibling_index].number;\n        \\\\            }"}
{"instruction":"Write a Zig function similar to setWriter from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"pub fn setWriter(self: *Self, new_writer: *std.Io.Writer) void {\n            self.block_writer.setWriter(new_writer);\n            self.source_writer = new_writer;\n        }"}
{"instruction":"Write a Zig function similar to writeToDisk from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn writeToDisk(f: OutputFile, root_dir: std.fs.Dir, root_dir_path: []const u8) !void {\n    switch (f.value) {\n        .noop => {}"}
{"instruction":"Write a Zig function similar to isSet from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn isSet(rex: Rex) bool {\n        return rex.w or rex.r or rex.x or rex.b;\n    }"}
{"instruction":"Write a Zig function similar to parse from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"pub fn parse(allocator: std.mem.Allocator, css_text: []const u8) !Self {\n            var parser = Parser.init(allocator, css_text);\n            return try parser.parse(Self);\n        }"}
{"instruction":"Write a Zig const similar to method from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"const method: spec.ServerMethod = .{ .basic_publish = .{\n            .exchange = options.exchange,\n            .routing_key = options.routing_key,\n            .mandatory = options.mandatory,\n            .immediate = options.immediate,\n        } };"}
{"instruction":"Write a Zig function similar to completions from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig","output":"pub fn completions(\n    arena: Allocator,\n    src: []const u8,\n    stt: *Ast.Node.TagIterator,\n    element_tag: Ast.Kind,\n    offset: u32,\n) ![]const Ast.Completion {\n    assert(element_tag.isElement());\n\n    const elem_attrs = element_attrs.get(element_tag);\n    const total_count = global.list.len + elem_attrs.list.len;\n\n    var seen: std.DynamicBitSetUnmanaged = try .initEmpty(arena, total_count);\n    var seen_count: u32 = 0;\n    while (stt.next(src)) |attr| {\n        log.debug(\"completions attr: {any}"}
{"instruction":"Write a Zig const similar to min from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"const min: f32 = (8.0 - radius)/16.0;"}
{"instruction":"Write a Zig struct similar to Imm64 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Mir.zig","output":"pub const Imm64 = struct {\n    msb: u32,\n    lsb: u32,\n\n    pub fn encode(v: u64) Imm64 {\n        return .{\n            .msb = @truncate(v >> 32),\n            .lsb = @truncate(v),\n        }"}
{"instruction":"Write a Zig function similar to send_notification from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn send_notification(self: *Process, method: []const u8, params_cb: []const u8) Error!void {\n        const sp = if (self.sp) |*sp| sp else return error.Closed;\n\n        const have_params = !(cbor.match(params_cb, cbor.null_) catch false);\n\n        var notification: std.Io.Writer.Allocating = .init(self.allocator);\n        defer notification.deinit();\n        const msg_writer = &notification.writer;\n        try cbor.writeMapHeader(msg_writer, 3);\n        try cbor.writeValue(msg_writer, \"jsonrpc\");\n        try cbor.writeValue(msg_writer, \"2.0\");\n        try cbor.writeValue(msg_writer, \"method\");\n        try cbor.writeValue(msg_writer, method);\n        try cbor.writeValue(msg_writer, \"params\");\n        if (have_params) {\n            _ = try msg_writer.write(params_cb);\n        }"}
{"instruction":"Write a Zig function similar to is from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"fn is(str1: []const u8, str2: []const u8) bool {\n    return std.ascii.eqlIgnoreCase(str1, str2);\n}"}
{"instruction":"Write a Zig function similar to get_run_length from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/ccitt.zig","output":"pub fn get_run_length(self: *Decoder, code: u13, length: u8) ?u16 {\n        const rle = self.get_make_up_code(code, length);\n\n        if (rle == null) {\n            return self.get_terminating_code(code, length);\n        }"}
{"instruction":"Write a Zig function similar to getServerToClientData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn getServerToClientData(pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tdefer StorageServer.mutex.unlock();\n\n\t\t\tconst data = StorageServer.get(pos, chunk) orelse return;\n\t\t\twriter.writeSlice(data.text);\n\t\t}"}
{"instruction":"Write a Zig struct similar to Pins from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub const Pins = struct {\n    scl: ?type = null,\n    sda: ?type = null,\n}"}
{"instruction":"Write a Zig function similar to pushCallSym from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushCallSym(c: *cy.Chunk, ret: u8, numArgs: u32, numRet: u8, symId: u32, node: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    try c.pushFCode(.callSym, &.{ ret, @as(u8, @intCast(numArgs)), numRet, 0, 0, 0, 0, 0, 0, 0, 0 }"}
{"instruction":"Write a Zig function similar to LTS from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn LTS(self: *Self, dest: m.MIR_op_t, left: m.MIR_op_t, right: m.MIR_op_t) void {\n    self.append(\n        m.MIR_new_insn_arr(\n            self.ctx,\n            @intFromEnum(m.MIR_Instruction.LTS),\n            3,\n            &[_]m.MIR_op_t{\n                dest,\n                left,\n                right,\n            }"}
{"instruction":"Write a Zig function similar to body from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/request.zig","output":"pub fn body(self: *const Request) ?[]const u8 {\n        const buf = self.body_buffer orelse return null;\n        return buf.data[0..self.body_len];\n    }"}
{"instruction":"Write a Zig function similar to OP_JUMP from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_JUMP(self: *Self, location: Ast.TokenIndex) !usize {\n    return try self.emitJump(\n        location,\n        .OP_JUMP,\n    );\n}"}
{"instruction":"Write a Zig function similar to OP_THROW from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_THROW(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_THROW);\n}"}
{"instruction":"Write a Zig function similar to writeSpecEntry from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig","output":"fn writeSpecEntry(file: std.fs.File, entry: SpecEntry) !void {\n    const w = file.writer();\n    try std.fmt.format(w, \"@{s}"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn init(args: Sig.ArgsT, stack_: StackT) !Self {\n                var coro_stack = stack_;\n                const inner = try coro_stack.push(InnerStorage);\n                inner.* = .{\n                    .args = args,\n                }"}
{"instruction":"Write a Zig function similar to add from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn add(self: *Group, tag: Tag, url: []const u8) ?void {\n        @setCold(true);\n\n        var rest = url;\n\n        // proto\n        const proto = b: {\n            if (std.mem.indexOf(u8, rest, \"://\")) |i| {\n                const proto = rest[0 .. i + 3];\n                rest = rest[i + 3 ..];\n                break :b Proto.from_str(proto) orelse\n                    return parse_failed(\"invalid proto\", proto);\n            }"}
{"instruction":"Write a Zig const similar to kp_decimal from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_decimal: u21 = 57409;"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = l;\n                _ = c;\n                const ptr = @as(*?bool, @ptrCast(@alignCast(ud.?)));\n                ptr.* = if (r.recv) |_| false else |err| switch (err) {\n                    error.EOF => true,\n                    else => false,\n                }"}
{"instruction":"Write a Zig function similar to isSlice from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/C.zig","output":"fn isSlice(_: *const encoding.Params) bool {\n    return false;\n}"}
{"instruction":"Write a Zig function similar to notifySlow from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"fn notifySlow(self: *ThreadPool, is_waking: bool) void {\n    var sync: Sync = @bitCast(self.sync.load(.monotonic));\n    while (sync.state != .shutdown) {\n        const can_wake = is_waking or (sync.state == .pending);\n        if (is_waking) {\n            assert(sync.state == .waking);\n        }"}
{"instruction":"Write a Zig function similar to getPropertyValue from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"pub fn getPropertyValue(self: *Self, allocator: std.mem.Allocator, prop_name: []const u8) ![]const u8 {\n            inline for (std.meta.fields(Property)) |f| {\n                if (std.mem.eql(u8, cssName(f.name), prop_name)) {\n                    const prop = self.properties.items[self.find(@field(Property, f.name)) orelse return \"\"];\n                    return std.fmt.allocPrint(allocator, \"{}"}
{"instruction":"Write a Zig function similar to resolveUnionTag from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn resolveUnionTag(analyser: *Analyser, ty: Type) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to tableIndex from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn tableIndex(vm: *cy.VM) Value {\n    const table = vm.getValue(0).asHeapObject();\n    if (table.table.map().get(vm.getValue(1))) |val| {\n        vm.retain(val);\n        return val;\n    }"}
{"instruction":"Write a Zig struct similar to CSSDeclaration from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSParser.zig","output":"const CSSDeclaration = struct {\n    name: []const u8,\n    value: []const u8,\n    is_important: bool,\n}"}
{"instruction":"Write a Zig const similar to handle from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/ForeignToplevelHandle.zig","output":"const handle: *ForeignToplevelHandle = @fieldParentPtr(\"foreign_activate\", listener);"}
{"instruction":"Write a Zig const similar to lx from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const lx: f64 = @floatFromInt(target_box.x + @divTrunc(target_box.width, 2));"}
{"instruction":"Write a Zig function similar to hash from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn hash(self: @This(), s: DeclarationLookup) u32 {\n        _ = self;\n        var hasher: std.hash.Wyhash = .init(0);\n        std.hash.autoHash(&hasher, s.scope);\n        hasher.update(s.name);\n        std.hash.autoHash(&hasher, s.kind);\n        return @truncate(hasher.final());\n    }"}
{"instruction":"Write a Zig function similar to next from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn next(c: *Cursor) ?Node {\n        if (c.idx == 0 and c.dir == .out) return null;\n\n        var n = c.node();\n        if (c.ast.child(n)) |ch| {\n            c.idx = n.first_child_idx;\n            c.dir = .in;\n            c.depth += 1;\n            return ch;\n        }"}
{"instruction":"Write a Zig function similar to transfer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig","output":"fn transfer(ptr: *anyopaque, ep_addr: u8, data: []u8) void {\n            var self: *@This() = @ptrCast(@alignCast(ptr));\n\n            if (ep_addr == self.ep_out) {\n                self.rx.write(data) catch {}"}
{"instruction":"Write a Zig function similar to rt_waitTicks2 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"fn rt_waitTicks2() void {\n    // Set the ticks to 16 less than the max\n    const waiting = 1000;\n    const epsilon = 2 * getFrequency() / 10000;\n\n    ticks = 0xFFFFFFF0;\n    const previous_count = getTicks() - 0xFFFFFFF0;\n\n    waitTicks(waiting);\n\n    // maxInt(u32) - u32(0xFFFFFFF0) = 15\n    const difference = getTicks() + 15 - waiting;\n\n    if (previous_count + epsilon < difference or previous_count > difference + epsilon) {\n        panic(@errorReturnTrace(), \"FAILURE: Waiting failed. difference: {}"}
{"instruction":"Write a Zig const similar to std_options from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/async1.zig","output":"pub const std_options: std.Options = .{\n    .log_level = .info,\n};"}
{"instruction":"Write a Zig function similar to genTrue from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genTrue(c: *Chunk, cstr: Cstr, node: *ast.Node) !GenValue {\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Boolean, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }"}
{"instruction":"Write a Zig struct similar to pcs from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const pcs = struct {\n        kind: enum {\n            aapcs,\n            @\"aapcs-vfp\",\n\n            const opts = struct {\n                const enum_kind = .string;\n            }"}
{"instruction":"Write a Zig struct similar to match from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/consts.zig","output":"pub const match = struct {\n    pub const base_length = 3; // smallest match length per the RFC section 3.2.5\n    pub const min_length = 4; // min length used in this algorithm\n    pub const max_length = 258;\n\n    pub const min_distance = 1;\n    pub const max_distance = 32768;\n}"}
{"instruction":"Write a Zig const similar to decl from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"const decl: Declaration = if (if_node.error_token != null)\n            .{ .error_union_payload = .{ .identifier = name_token, .condition = if_node.ast.cond_expr } }\n        else\n            .{ .optional_payload = .{ .identifier = name_token, .condition = if_node.ast.cond_expr } };"}
{"instruction":"Write a Zig function similar to init from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Control.zig","output":"pub fn init(control: *Control) !void {\n    control.* = .{\n        .global = try wl.Global.create(server.wl_server, zriver.ControlV1, 1, *Control, control, bind),\n        .args_map = ArgMap.init(util.gpa),\n    }"}
{"instruction":"Write a Zig function similar to fstat_size from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn fstat_size(fd: c_int) ?usize {\n    const sz = c.fstat_size(fd);\n    return if (sz >= 0) to_usize(sz) else null;\n}"}
{"instruction":"Write a Zig struct similar to RGBf from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"pub const RGBf = struct {\n    r: f32,\n    g: f32,\n    b: f32,\n\n    pub inline fn from_RGB(v: RGB) RGBf {\n        return .{ .r = tof(v.r), .g = tof(v.g), .b = tof(v.b) }"}
{"instruction":"Write a Zig function similar to download from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn download(allocator: std.mem.Allocator, target: *const CompileTarget, env: *bun.DotEnv.Loader) ![:0]const u8 {\n        var exe_path_buf: bun.PathBuffer = undefined;\n        var version_str_buf: [1024]u8 = undefined;\n        const version_str = try std.fmt.bufPrintZ(&version_str_buf, \"{}"}
{"instruction":"Write a Zig struct similar to do from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const do = struct {\n            result: usize = 0,\n            fn walker(ctx: *anyopaque, leaf: *const Leaf, metrics: Metrics) Walker {\n                const do = @as(*@This(), @ptrCast(@alignCast(ctx)));\n                do.result += leaf.width(do.result, metrics);\n                return if (!leaf.eol) Walker.keep_walking else Walker.stop;\n            }"}
{"instruction":"Write a Zig function similar to toColor from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn toColor(self: HSV) Color {\n        const c = self.v * self.s;\n        const x = c * (1 - @abs(@mod(self.h / 60, 2) - 1));\n        const m = self.v - c;\n\n        const step: i8 = @intFromFloat(self.h / 60);\n\n        const r, const g, const b = switch (step) {\n            0 => .{ c, x, 0 }"}
{"instruction":"Explain opaque § in Zig 0.13.0","input":"","output":"opaque {} declares a new type with an unknown (but non-zero) size and alignment. It can contain declarations the same as structs , unions , and enums . This is typically used for type safety when interacting with C code that does not expose struct details. Example: test_opaque.zig Shell"}
{"instruction":"Write a Zig function similar to step from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn step(self: *Self, scratch: Allocator, req: proto.StepRequest) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            // @NOTE (jrc): All step operations must be atomic,\n            // which is why we take a giant critical section\n            self.data.mu.lock();\n            defer self.data.mu.unlock();\n\n            if (self.data.subordinate == null) {\n                log.warn(\"cannot step: subordinate is not running\");\n                return;\n            }"}
{"instruction":"Write a Zig struct similar to Weights from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub const Weights = struct {\n    bols: u32 = 0,\n    eols: u32 = 0,\n    len: u32 = 0,\n    depth: u32 = 1,\n\n    fn add(self: *Weights, other: Weights) void {\n        self.bols += other.bols;\n        self.eols += other.eols;\n        self.len += other.len;\n        self.depth = @max(self.depth, other.depth);\n    }"}
{"instruction":"Write Zig 0.13.0 code for: struct §","input":"test_structs.zig Shell Default Field Values § Each struct field may have an expression indicating the default field value. Such expressions are executed at comptime , and allow the field to be omitted in a struct literal expression: struct_default_field_values.zig Shell Default field values are only appropriate when the data invariants of a struct cannot be violated by omitting that field from an initialization. For example, here is an inappropriate use of default struct field initialization: ba","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> Foo = <span class=\"tok-kw\">struct</span> {};\n    std.debug.print(<span class=\"tok-str\">\"variable: {s}\\n\"</span>, .{<span class=\"tok-builtin\">@typeName</span>(Foo)});\n    std.debug.print(<span class=\"tok-str\">\"anonymous: {s}\\n\"</span>, .{<span class=\"tok-builtin\">@typeName</span>(<span class=\"tok-kw\">struct</span> {})});\n    std.debug.print(<span class=\"tok-str\">\"function: {s}\\n\"</span>, .{<span class=\"tok-builtin\">@typeName</span>(List(<span class=\"tok-type\">i32</span>))});\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">List</span>(<span class=\"tok-kw\">comptime</span> T: <span class=\"tok-type\">type</span>) <span class=\"tok-type\">type</span> {\n    <span class=\"tok-kw\">return</span> <span class=\"tok-kw\">struct</span> {\n        x: T,\n    };\n}"}
{"instruction":"Write a Zig const similar to my_str from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const my_str: [*:0]const u8 = webui_get_string_at(e, 0);"}
{"instruction":"Write a Zig function similar to yield from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn yield(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    if (self.current.?.scope_depth == 0) {\n        const location = self.ast.tokens.get(self.current_token.? - 1);\n        self.reporter.reportErrorAt(\n            .syntax,\n            location,\n            location,\n            \"`yield` not allowed in global scope\",\n        );\n    }"}
{"instruction":"Write a Zig function similar to next2 from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"fn next2(self: *Tokenizer, src: []const u8) ?struct {\n    token: Token,\n    deferred: ?Token = null,\n}"}
{"instruction":"Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn serialize(self: *const @This()) [9]u8 {\n        var out: [9]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = @intCast(self.total_length & 0xff);\n        out[3] = @intCast((self.total_length >> 8) & 0xff);\n        out[4] = self.num_interfaces;\n        out[5] = self.configuration_value;\n        out[6] = self.configuration_s;\n        out[7] = self.attributes;\n        out[8] = self.max_power;\n        return out;\n    }"}
{"instruction":"Write a Zig function similar to DECL_TYPE_GET from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"fn DECL_TYPE_GET(out_type_id: *Type) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_DECL,\n        .data = .{ .decl = .{\n            .type_id = NullId,\n            .out_type_id = out_type_id,\n        }"}
{"instruction":"Write a Zig const similar to RED_PIXEL from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"const RED_PIXEL: u32 = 0xFF0000FF;"}
{"instruction":"Write a Zig function similar to at from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"fn at(p: Parser, idx: u32) ?Node {\n        if (idx == 0) return null;\n        return p.nodes.items[idx];\n    }"}
{"instruction":"Write a Zig function similar to main from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/triangle.zig","output":"pub fn main() !void {\n    if (c.glfwInit() != c.GLFW_TRUE) return error.GlfwInitFailed;\n    defer c.glfwTerminate();\n\n    if (c.glfwVulkanSupported() != c.GLFW_TRUE) {\n        std.log.err(\"GLFW could not find libvulkan\", .{}"}
{"instruction":"Write a Zig function similar to main from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigbacktrace/main.zig","output":"pub fn main() !void {\n    funcA();\n    funcB();\n    funcC();\n    funcD();\n    funcE();\n}"}
{"instruction":"Write a Zig function similar to countFieldsWithType from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"pub fn countFieldsWithType(\n        comptime root: type,\n        comptime definition: type,\n        deftype: DefinitionType,\n    ) usize {\n        var cnt = 0;\n        for (std.meta.fields(definition)) |field| {\n            if (hasType(root, field.type, deftype)) {\n                cnt += 1;\n            }"}
{"instruction":"Write a Zig struct similar to DepositToAny from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const DepositToAny = struct { // MARK: DepositToAny\n\t\tdest: Inventory,\n\t\tsource: InventoryAndSlot,\n\t\tamount: u16,\n\n\t\tfn run(self: DepositToAny, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, _: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig function similar to is_tc from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn is_tc(msg: []const u8) bool {\n    return c.dns_is_tc(msg.ptr);\n}"}
{"instruction":"Write a Zig struct similar to TemplateDecl from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const TemplateDecl = struct {\n    params: []*FuncParam align(8),\n    child_decl: *Node,\n\n    pub fn getAttrs(self: *TemplateDecl) []const *Attribute {\n        switch (self.child_decl.type()) {\n            .funcDecl => {\n                return self.child_decl.cast(.funcDecl).attrs;\n            }"}
{"instruction":"Write a Zig function similar to reply_receiver from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn reply_receiver(self: *TCP) void {\n        defer co.terminate(@frame(), @frameSize(reply_receiver));\n\n        defer self.stop();\n\n        var free_rmsg: ?*RcMsg = null;\n        defer if (free_rmsg) |rmsg| rmsg.free();\n\n        while (true) {\n            // read the len\n            var len: u16 = undefined;\n            self.recv(std.mem.asBytes(&len)) orelse return;\n\n            // check the len\n            len = cc.ntohs(len);\n            if (len < dns.header_len()) {\n                log.warn(@src(), \"recv(%s) failed: invalid len:%u\", .{ self.upstream.url, cc.to_uint(len) }"}
{"instruction":"Write a Zig function similar to nodeCreateFake from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"fn nodeCreateFake(_: *AccessKit, _: *dvui.WidgetData, _: Role) ?*Node {\n    return null;\n}"}
{"instruction":"Write a Zig function similar to compare from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"fn compare(a: py.PyObject, b: py.PyObject, op: py.CompareOp) !bool {\n    const res = ffi.PyObject_RichCompareBool(a.py, b.py, @intFromEnum(op));\n    if (res == -1) {\n        return PyError.PyRaised;\n    }"}
{"instruction":"Write a Zig function similar to reader from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn reader(self: Self, buffer: []u8) Reader {\n        return .{\n            .context = self,\n            .interface = .{\n                .buffer = buffer,\n                .seek = 0,\n                .end = 0,\n                .vtable = &.{\n                    .stream = Reader.stream,\n                }"}
{"instruction":"Write a Zig function similar to rgb2q from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"fn rgb2q(pixel: Pixel) f64 {\n    return (pixel.r * YIQ_Q_R_COEFF) + (pixel.g * YIQ_Q_G_COEFF) + (pixel.b * YIQ_Q_B_COEFF);\n}"}
{"instruction":"Write a Zig function similar to guess_path_file_type from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn guess_path_file_type(path: []const u8, file_name: []const u8) struct { []const u8, []const u8, u24 }"}
{"instruction":"Write a Zig struct similar to CliArgs from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/benchmark/main.zig","output":"const CliArgs = struct {\n        pub const help =\n            \\\\ benchmark --size=4096 --dtype=f16\n        ;\n        size: usize = 4096,\n        dtype: zml.DataType = .f16,\n    }"}
{"instruction":"Write a Zig function similar to getContaining from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/discovery.zig","output":"pub fn getContaining(\n        comptime root: type,\n        comptime definition: type,\n        comptime deftype: DefinitionType,\n    ) type {\n        return findContaining(root, definition, deftype) orelse @compileError(\"Cannot find containing object\");\n    }"}
{"instruction":"Write a Zig function similar to build_rust_client from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_rust_client(\n    b: *std.Build,\n    step_clients_rust: *std.Build.Step,\n    options: struct {\n        vsr_module: *std.Build.Module,\n        vsr_options: *std.Build.Step.Options,\n        tb_client_header: *Generated,\n        mode: std.builtin.OptimizeMode,\n    },\n) void {\n    step_clients_rust.dependOn(&options.tb_client_header.step);\n\n    inline for (platforms) |platform| {\n        const query = Query.parse(.{\n            .arch_os_abi = platform[0],\n            .cpu_features = platform[2],\n        }"}
{"instruction":"Write a Zig function similar to generateTextureArray from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub fn generateTextureArray() void {\n\t\tconst c = graphics.c;\n\t\tblockTextureArray.generate(blockTextures.items, true, true);\n\t\tc.glTexParameterf(c.GL_TEXTURE_2D_ARRAY, c.GL_TEXTURE_MAX_ANISOTROPY, @floatFromInt(main.settings.anisotropicFiltering));\n\t\temissionTextureArray.generate(emissionTextures.items, true, false);\n\t\tc.glTexParameterf(c.GL_TEXTURE_2D_ARRAY, c.GL_TEXTURE_MAX_ANISOTROPY, @floatFromInt(main.settings.anisotropicFiltering));\n\t\tconst reflectivityAndAbsorptionTextures = main.stackAllocator.alloc(Image, reflectivityTextures.items.len);\n\t\tdefer main.stackAllocator.free(reflectivityAndAbsorptionTextures);\n\t\tdefer for(reflectivityAndAbsorptionTextures) |texture| {\n\t\t\ttexture.deinit(main.stackAllocator);\n\t\t}"}
{"instruction":"Write a Zig function similar to sys_remove from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_remove(file: *const fs.Path) isize {\n    return call(.SYS_REMOVE, file);\n}"}
{"instruction":"Write a Zig function similar to deinit from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"pub fn deinit(self: *Loop) void {\n        posix.close(self.kqueue_fd);\n        self.wakeup_state.deinit();\n    }"}
{"instruction":"Write a Zig function similar to generateHandlerForTag from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig","output":"fn generateHandlerForTag(comptime tag_info: TagHandler) fn (*T, *lol.Element) bool {\n            const Handler = struct {\n                pub fn handle(this: *T, element: *lol.Element) bool {\n                    // Handle URL attribute if present\n                    if (tag_info.url_attribute.len > 0) {\n                        if (element.hasAttribute(tag_info.url_attribute) catch false) {\n                            const value = element.getAttribute(tag_info.url_attribute);\n                            defer value.deinit();\n                            if (value.len > 0) {\n                                debug(\"{s}"}
{"instruction":"Write a Zig struct similar to IgnoreRegion from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"pub const IgnoreRegion = struct {\n    x1: u32,\n    y1: u32,\n    x2: u32,\n    y2: u32,\n}"}
{"instruction":"Write a Zig struct similar to ThreadPoolConfig from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: src/root.zig","output":"pub const ThreadPoolConfig = struct {\n    /// The number of background workers. If `null` this chooses a sensible\n    /// default based on your system (i.e. number of cores).\n    background_worker_count: ?usize = null,\n\n    /// How often a background thread is interrupted to find more work.\n    heartbeat_interval: usize = 100 * std.time.ns_per_us,\n}"}
{"instruction":"Write a Zig function similar to jsonRes from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn jsonRes(_: *Request, res: *Response) !void {\n        res.setStatus(.created);\n        try res.json(.{ .over = 9000, .teg = \"soup\" }"}
{"instruction":"Write a Zig function similar to from from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"fn from(ptr: anytype) Ptr(Ev, @TypeOf(ptr)) {\n        return @ptrCast(Ptr(Ev, @TypeOf(ptr)), ptr);\n    }"}
{"instruction":"Write a Zig const similar to ET from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub const ET: u32 = c.EPOLLET;"}
{"instruction":"Write a Zig const similar to map_values from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"const map_values: []v.Value = self.map.values();"}
{"instruction":"Write a Zig function similar to switchIn from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn switchIn(self: *ThreadState, target: Frame) void {\n        log(.debug, \"coro resume {f}"}
{"instruction":"Write Zig 0.13.0 code for: Memory §","input":"The Zig language performs no memory management on behalf of the programmer. This is why Zig has no runtime, and why Zig code works seamlessly in so many environments, including real-time software, operating system kernels, embedded devices, and low latency servers. As a consequence, Zig programmers must always be able to answer the question: Where are the bytes? Like Zig, the C programming language has manual memory management. However, unlike Zig, C has a default allocator - malloc , realloc ,","output":"<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(s: []<span class=\"tok-type\">u8</span>) <span class=\"tok-type\">void</span> {\n    _ = s;\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"string literal to mutable slice\"</span> {\n    foo(<span class=\"tok-str\">\"hello\"</span>);\n}"}
{"instruction":"Write a Zig function similar to sendCommandSlave from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"fn sendCommandSlave(cmd: u8) void {\n    arch.out(SLAVE_COMMAND_REG, cmd);\n}"}
{"instruction":"Write a Zig function similar to interfaceGetSizeAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn interfaceGetSizeAt(self: webui, event_number: usize, index: usize) usize {\n    return c.webui_interface_get_size_at(self.window_handle, event_number, index);\n}"}
{"instruction":"Write a Zig struct similar to xdg_surface_listener from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"const xdg_surface_listener = struct {\n    fn xdgSurfaceHandleConfigure(window_id: mach.ObjectID, xdg_surface: ?*c.struct_xdg_surface, serial: u32) callconv(.C) void {\n        c.xdg_surface_ack_configure(xdg_surface, serial);\n        var core_window = core_ptr.windows.getValue(window_id);\n        const wl = &core_window.native.?.wayland;\n\n        if (wl.configured) {\n            c.wl_surface_commit(wl.surface);\n        }"}
{"instruction":"Write a Zig function similar to dispatch from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/03_dispatch.zig","output":"pub fn dispatch(self: *Handler, action: httpz.Action(*Handler), req: *httpz.Request, res: *httpz.Response) !void {\n        // Our custom dispatch lets us add a log + timing for every request\n        // httpz supports middlewares, but in many cases, having a dispatch is good\n        // enough and is much more straightforward.\n\n        var start = try std.time.Timer.start();\n        // We don't _have_ to call the action if we don't want to. For example\n        // we could do authentication and set the response directly on error.\n        try action(self, req, res);\n\n        std.debug.print(\"ts={d}"}
{"instruction":"Write a Zig function similar to events from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/custom_spa_server_on_free_port/main.zig","output":"fn events(e: *webui.Event) void {\n    // This function gets called every time\n    // there is an event\n    switch (e.event_type) {\n        .EVENT_CONNECTED => {\n            std.debug.print(\"Connected. \\n\", .{}"}
{"instruction":"Write a Zig function similar to isString from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/C3.zig","output":"fn isString(params: *const encoding.Params) ?u64 {\n    // string slices\n    if (params.data_type.form == .@\"struct\" and strings.eql(params.data_type_name, \"char[]\")) {\n        const res = encoding.readUsizeStructMember(params, \"len\") catch |err| {\n            log.errf(\"unable to read c3 string length: {!}"}
{"instruction":"Write a Zig function similar to random from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"fn random(options: struct {\n        arena: std.mem.Allocator,\n        prng: *stdx.PRNG,\n        recursive: bool,\n    }) !*const TestingTable {\n        const ratio = stdx.PRNG.ratio;\n\n        const is_empty = options.prng.chance(ratio(5, 100));\n        if (is_empty) return &TestingTable.empty;\n\n        var object = try options.arena.create(TestingTable);\n        inline for (std.meta.fields(TestingTable)) |field| {\n            const is_null = options.prng.chance(ratio(5, 100));\n            if (is_null) {\n                @field(object, field.name) = null;\n            }"}
{"instruction":"Write a Zig function similar to createTracyModule from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: build.zig","output":"fn createTracyModule(\n    b: *Build,\n    options: struct {\n        target: Build.ResolvedTarget,\n        optimize: std.builtin.OptimizeMode,\n        enable: bool,\n        tracy_options: *std.Build.Module,\n    },\n) *Build.Module {\n    const tracy_module = b.createModule(.{\n        .root_source_file = b.path(\"src/tracy.zig\"),\n        .target = options.target,\n        .optimize = options.optimize,\n        .imports = &.{\n            .{ .name = \"options\", .module = options.tracy_options }"}
{"instruction":"Write a Zig function similar to forceKillSubordinate from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn forceKillSubordinate(self: *Self) void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            self.data.mu.lock();\n            defer self.data.mu.unlock();\n\n            self.resetSubordinateState();\n        }"}
{"instruction":"Write a Zig function similar to interfaceFormatter from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub fn interfaceFormatter(\n    ast: Ast,\n    html_ast: html.Ast,\n    path: ?[]const u8,\n) Formatter {\n    return .{ .ast = ast, .html = html_ast, .path = path }"}
{"instruction":"Write a Zig struct similar to funcs from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const funcs = struct {\n        fn do(\n            intern_pool: *InternPool,\n            wait_group: *std.Thread.WaitGroup,\n            allocator: std.mem.Allocator,\n            count: usize,\n        ) void {\n            defer wait_group.finish();\n            // insert float_32_value from 0 to count + random work\n            for (0..count) |i| {\n                _ = intern_pool.get(allocator, .{ .float_32_value = @floatFromInt(i) }"}
{"instruction":"Write a Zig function similar to waitForSocketEvent from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn waitForSocketEvent(set: *SocketSet, timeout: ?u64) !usize {\n    switch (builtin.os.tag) {\n        .windows => {\n            const read_set = try set.internal.getFdSet(.read);\n            const write_set = try set.internal.getFdSet(.write);\n            const except_set = try set.internal.getFdSet(.except);\n            if (read_set == null and write_set == null and except_set == null) return 0;\n\n            const tm: windows.timeval = if (timeout) |tout| block: {\n                const secs = @divFloor(tout, std.time.ns_per_s);\n                const usecs = @divFloor(tout - secs * std.time.ns_per_s, 1000);\n                break :block .{ .tv_sec = @intCast(secs), .tv_usec = @intCast(usecs) }"}
{"instruction":"Write Zig 0.14.1 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"error union\"</span> {\n    <span class=\"tok-kw\">var</span> foo: <span class=\"tok-type\">anyerror</span>!<span class=\"tok-type\">i32</span> = <span class=\"tok-null\">undefined</span>;\n\n    <span class=\"tok-comment\">// Coerce from child type of an error union:</span>\n    foo = <span class=\"tok-number\">1234</span>;\n\n    <span class=\"tok-comment\">// Coerce from an error set:</span>\n    foo = <span class=\"tok-kw\">error</span>.SomeError;\n\n    <span class=\"tok-comment\">// Use compile-time reflection to access the payload type of an error union:</span>\n    <span class=\"tok-kw\">try</span> <span class=\"tok-kw\">comptime</span> expect(<span class=\"tok-builtin\">@typeInfo</span>(<span class=\"tok-builtin\">@TypeOf</span>(foo)).error_union.payload == <span class=\"tok-type\">i32</span>);\n\n    <span class=\"tok-comment\">// Use compile-time reflection to access the error set type of an error union:</span>\n    <span class=\"tok-kw\">try</span> <span class=\"tok-kw\">comptime</span> expect(<span class=\"tok-builtin\">@typeInfo</span>(<span class=\"tok-builtin\">@TypeOf</span>(foo)).error_union.error_set == <span class=\"tok-type\">anyerror</span>);\n}"}
{"instruction":"Write a Zig function similar to module from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/fetch.zig","output":"pub fn module(self: *Package, exe: *std.Build.Step.Compile) *std.Build.Module {\n        \\\\        if (self.module_memo) |cached| {\n        \\\\            return cached;\n        \\\\        }"}
{"instruction":"Write a Zig const similar to body from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: src/http/form.zig","output":"const body: []const u8 = \"id=10\";"}
{"instruction":"Write a Zig function similar to deinit from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/stack.zig","output":"pub fn deinit(self: *PooledStackAllocator) void {\n        self.pool.deinit();\n    }"}
{"instruction":"Write a Zig struct similar to GetOrPutResult from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub const GetOrPutResult = struct {\n\t\t\tvaluePtr: *DataT,\n\t\t\tfoundExisting: bool,\n\t\t}"}
{"instruction":"Write a Zig function similar to blockingMode from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"pub fn blockingMode() bool {\n    if (force_blocking) {\n        return true;\n    }"}
{"instruction":"Write a Zig function similar to OP_TYPEOF from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_TYPEOF(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_TYPEOF);\n}"}
{"instruction":"Write a Zig function similar to eql from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/selector.zig","output":"pub fn eql(a: *const NodeTest, b: *const NodeTest) bool {\n        return a == b;\n    }"}
{"instruction":"Write a Zig const similar to cur_name from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"const cur_name: Span = blk: {\n                                        var temp_tok: Tokenizer = .{\n                                            .language = language,\n                                            .return_attrs = true,\n                                        };"}
{"instruction":"Write a Zig function similar to getPackage from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn getPackage(self: *Self, name: []const u8) std.Build.Pkg {\n        return self.builder.dupePkg(std.Build.Pkg{\n            .name = name,\n            .source = .{ .generated = &self.package_file }"}
{"instruction":"Write Zig 0.13.0 code for: Result Location Semantics §","input":"During compilation, every Zig expression and sub-expression is assigned optional result location information. This information dictates what type the expression should have (its result type), and where the resulting value should be placed in memory (its result location). The information is optional in the sense that not every expression has this information: assignment to _ , for instance, does not provide any information about the type of an expression, nor does it provide a concrete memory loc","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"attempt to swap array elements with array initializer\"</span> {\n    <span class=\"tok-kw\">var</span> arr: [<span class=\"tok-number\">2</span>]<span class=\"tok-type\">u32</span> = .{ <span class=\"tok-number\">1</span>, <span class=\"tok-number\">2</span> };\n    arr = .{ arr[<span class=\"tok-number\">1</span>], arr[<span class=\"tok-number\">0</span>] };\n    <span class=\"tok-comment\">// The previous line is equivalent to the following two lines:</span>\n    <span class=\"tok-comment\">//   arr[0] = arr[1];</span>\n    <span class=\"tok-comment\">//   arr[1] = arr[0];</span>\n    <span class=\"tok-comment\">// So this fails!</span>\n    <span class=\"tok-kw\">try</span> expect(arr[<span class=\"tok-number\">0</span>] == <span class=\"tok-number\">2</span>); <span class=\"tok-comment\">// succeeds</span>\n    <span class=\"tok-kw\">try</span> expect(arr[<span class=\"tok-number\">1</span>] == <span class=\"tok-number\">1</span>); <span class=\"tok-comment\">// fails</span>\n}"}
{"instruction":"Write a Zig function similar to parseOperandRule from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"fn parseOperandRule(as: *Assembler, rule: anytype, ops: *[4]Instruction.Operand) ParseError!void {\n        inline for (rule, 0..) |cond, i| {\n            comptime assert(i < 4);\n            if (i > 0) {\n                _ = try as.expect(.comma);\n                try as.skip(1, .{.space}"}
{"instruction":"Write a Zig function similar to interfaceGetFloatAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn interfaceGetFloatAt(self: webui, event_number: usize, index: usize) f64 {\n    // TODO: Error handling here\n    return c.webui_interface_get_float_at(self.window_handle, event_number, index);\n}"}
{"instruction":"Write a Zig function similar to isIdentStartChar from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig","output":"fn isIdentStartChar(char: u8) bool {\n    return switch (char) {\n        'A'...'Z', 'a'...'z', 0x80...0xff, '_' => true,\n        else => false,\n    }"}
{"instruction":"Write a Zig function similar to reconsume from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"fn reconsume(self: *State, token: Tokenizer.Token) void {\n        std.debug.assert(self.reconsumed == null);\n\n        self.reconsumed = token;\n    }"}
{"instruction":"Write a Zig function similar to closeCallback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/ping-pongs.zig","output":"fn closeCallback(\n        self_: ?*Server,\n        l: *xev.Loop,\n        c: *xev.Completion,\n        socket: xev.TCP,\n        r: xev.CloseError!void,\n    ) xev.CallbackAction {\n        _ = l;\n        _ = r catch unreachable;\n        _ = socket;\n\n        const self = self_.?;\n        self.stop = true;\n        self.completion_pool.destroy(c);\n        return .disarm;\n    }"}
{"instruction":"Write a Zig const similar to method from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"const method: spec.ServerMethod = .{ .basic_get = .{\n            .queue = options.queue,\n            .no_ack = options.no_ack,\n        } };"}
{"instruction":"Write a Zig function similar to getModule from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: build.zig","output":"fn getModule(b: *std.Build, target: std.Build.ResolvedTarget, optimize: std.builtin.OptimizeMode) *std.Build.Module {\n    if (b.modules.contains(\"raylib\")) {\n        return b.modules.get(\"raylib\").?;\n    }"}
{"instruction":"Write a Zig function similar to DADD from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn DADD(self: *Self, dest: m.MIR_op_t, left: m.MIR_op_t, right: m.MIR_op_t) void {\n    self.append(\n        m.MIR_new_insn_arr(\n            self.ctx,\n            @intFromEnum(m.MIR_Instruction.DADD),\n            3,\n            &[_]m.MIR_op_t{\n                dest,\n                left,\n                right,\n            }"}
{"instruction":"Write a Zig struct similar to Segment from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Cell.zig","output":"pub const Segment = struct {\n    text: []const u8,\n    style: Style = .{}"}
{"instruction":"Write a Zig function similar to build_ci from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: build.zig","output":"fn build_ci(\n    b: *std.Build,\n    step_ci: *std.Build.Step,\n    options: struct {\n        scripts: *std.Build.Step.Compile,\n        git_commit: []const u8,\n    },\n) void {\n    const CIMode = enum {\n        smoke, // Quickly check formatting and such.\n        @\"test\", // Main test suite, excluding VOPR and clients.\n        fuzz, // Smoke tests for fuzzers and VOPR.\n        aof, // Dedicated test for AOF, which is somewhat slow to run.\n\n        clients, // Tests for all language clients below.\n        dotnet,\n        go,\n        rust,\n        java,\n        node,\n        python,\n\n        devhub, // Things that run on known-good commit on main branch after merge.\n        @\"devhub-dry-run\",\n        amqp,\n        default, // smoke + test + building Zig parts of clients.\n        all,\n    }"}
{"instruction":"Write a Zig function similar to failing_middleware from tardy-org/zzz","input":"Repository: tardy-org/zzz (664 ⭐)\nFile: examples/middleware/main.zig","output":"fn failing_middleware(next: *Next, _: void) !Respond {\n    log.info(\"fail middleware: {s}"}
{"instruction":"Write a Zig function similar to move_buffer_end from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn move_buffer_end(self: *Self, root: Buffer.Root, metrics: Metrics) void {\n    self.row = root.lines() - 1;\n    self.move_end(root, metrics);\n    if (self.col == 0) self.target = 0;\n}"}
{"instruction":"Write a Zig function similar to distanceEncoding from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/Token.zig","output":"pub fn distanceEncoding(t: Token) MatchDistance {\n    var c = match_distances[t.distanceCode()];\n    c.extra_distance = t.dist - c.base_scaled;\n    return c;\n}"}
{"instruction":"Write a Zig const similar to file from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_type_config.zig","output":"const file: ?std.fs.File = std.fs.openFileAbsolute(file_name, .{ .mode = .read_only }) catch null;"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">doADifferentThing</span>(str: []<span class=\"tok-type\">u8</span>) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (parseU64(str, <span class=\"tok-number\">10</span>)) |number| {\n        doSomethingWithNumber(number);\n    } <span class=\"tok-kw\">else</span> |_| {\n        <span class=\"tok-comment\">// do as you'd like</span>\n    }\n}"}
{"instruction":"Write a Zig const similar to node_idx from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig","output":"const node_idx: u32 = for (doc.html.errors) |err| {\n        // Find erroneous end tags in the error list but also any other error that\n        // has a node associated that happens to match our offset.\n        const span = err.main_location;"}
{"instruction":"Write a Zig const similar to old_type from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const old_type: Type = .{ .data = old.type_data, .is_type_val = self.is_type_val };"}
{"instruction":"Write Zig 0.13.0 code for: Pointers §","input":"Zig has two kinds of pointers: single-item and many-item. *T - single-item pointer to exactly one item. Supports deref syntax: ptr.* [*]T - many-item pointer to unknown number of items. Supports index syntax: ptr[i] Supports slice syntax: ptr[start..end] and ptr[start..] Supports pointer arithmetic: ptr + x , ptr - x T must have a known size, which means that it cannot be anyopaque or any other opaque type . These types are closely related to Arrays and Slices : *[N]T - pointer to N items, same","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-comment\">// This is also available as `std.c.printf`.</span>\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">extern</span> <span class=\"tok-str\">\"c\"</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">printf</span>(format: [*:<span class=\"tok-number\">0</span>]<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>, ...) <span class=\"tok-type\">c_int</span>;\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">anyerror</span>!<span class=\"tok-type\">void</span> {\n    _ = printf(<span class=\"tok-str\">\"Hello, world!\\n\"</span>); <span class=\"tok-comment\">// OK</span>\n\n    <span class=\"tok-kw\">const</span> msg = <span class=\"tok-str\">\"Hello, world!\\n\"</span>;\n    <span class=\"tok-kw\">const</span> non_null_terminated_msg: [msg.len]<span class=\"tok-type\">u8</span> = msg.*;\n    _ = printf(&non_null_terminated_msg);\n}"}
{"instruction":"Write a Zig function similar to finish_header from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn finish_header(self: *Encoder, body_size: u64) void {\n        assert((body_size == 0) == (self.frame_reference == null));\n        assert(body_size == 0 or self.frame_reference.?.frame_header.type == .body);\n        assert(self.header_reference != null);\n\n        const reference = self.header_reference.?;\n        self.header_reference = null;\n        assert(reference.index + Header.size_total <= self.index);\n        const restore_index = self.index;\n        self.index = reference.index;\n        self.write_int(u16, reference.header.class);\n        self.write_int(u16, reference.header.weight);\n        self.write_int(u64, body_size);\n        self.index = restore_index;\n    }"}
{"instruction":"Write a Zig function similar to gen_files_package from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/common.zig","output":"pub fn gen_files_package(alloc: std.mem.Allocator, cachepath: string, mdir: std.fs.Dir, dirs: []const string) !void {\n    var map = std.StringHashMap(string).init(alloc);\n    defer map.deinit();\n\n    for (dirs) |dir_path| {\n        const dir = try mdir.openDir(dir_path, .{ .iterate = true }"}
{"instruction":"Write a Zig function similar to addColor from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/OctTreeQuantizer.zig","output":"pub fn addColor(self: *Node, source_color: anytype, level: i32, parent: *OctTreeQuantizer) Error!void {\n        if (level >= MaxDepth) {\n            const color_value = anyColorToRgb24(source_color);\n\n            self.red += color_value.r;\n            self.green += color_value.g;\n            self.blue += color_value.b;\n            self.reference_count += 1;\n            return;\n        }"}
{"instruction":"Write a Zig function similar to pushUnwindSlot from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn pushUnwindSlot(c: *Chunk, slot: u8) !void {\n    log.tracev(\"+push unwind: stack={}"}
{"instruction":"Write a Zig const similar to CONFIG_ADDRESS from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pci.zig","output":"const CONFIG_ADDRESS: u16 = 0x0CF8;"}
{"instruction":"Write a Zig function similar to finish from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"pub fn finish(self: *Self) !void {\n            try self.flushBuffer(true);\n            try self.block_writer.flush();\n            try container.writeFooter(&self.hasher, self.wrt);\n        }"}
{"instruction":"Write a Zig struct similar to Open from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const Open = struct { // MARK: Open\n\t\tinv: Inventory,\n\t\tsource: Source,\n\n\t\tfn run(_: Open, _: NeverFailingAllocator, _: *Command, _: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}"}
{"instruction":"Write Zig 0.13.0 code for: switch §","input":"test_switch.zig Shell switch can be used to capture the field values of a Tagged union . Modifications to the field values can be done by placing a * before the capture variable name, turning it into a pointer. test_switch_tagged_union.zig Shell See also: comptime enum @compileError Compile Variables Exhaustive Switching § When a switch expression does not have an else clause, it must exhaustively list all the possible values. Failure to do so is a compile error: test_unhandled_enumeration_value","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">const</span> Color = <span class=\"tok-kw\">enum</span> {\n    auto,\n    off,\n    on,\n};\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"enum literals with switch\"</span> {\n    <span class=\"tok-kw\">const</span> color = Color.off;\n    <span class=\"tok-kw\">const</span> result = <span class=\"tok-kw\">switch</span> (color) {\n        .auto => <span class=\"tok-null\">false</span>,\n        .on => <span class=\"tok-null\">false</span>,\n        .off => <span class=\"tok-null\">true</span>,\n    };\n    <span class=\"tok-kw\">try</span> expect(result);\n}"}
{"instruction":"Write a Zig function similar to set from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/huffman_encoder.zig","output":"fn set(self: *HuffCode, code: u16, length: u16) void {\n        self.len = length;\n        self.code = code;\n    }"}
{"instruction":"Write a Zig function similar to renderSnake from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/id_render.zig","output":"fn renderSnake(self: *IdRenderer, screaming: bool, id: []const u8, tag: ?[]const u8) !void {\n        var it = SegmentIterator.init(id);\n        var first = true;\n\n        while (it.next()) |segment| {\n            if (first) {\n                first = false;\n            }"}
{"instruction":"Write a Zig function similar to trimCommonIndentation from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn trimCommonIndentation(allocator: std.mem.Allocator, str: []const u8, preserved_indentation_amount: usize) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to Command from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/registry.zig","output":"pub const Command = struct {\n    pub const Param = struct {\n        name: []const u8,\n        param_type: TypeInfo,\n        is_buffer_len: bool,\n        is_optional: bool,\n    }"}
{"instruction":"Write a Zig function similar to currentLine from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn currentLine(self: Parser) []const u8 {\n        var begin: usize = 0;\n        if (mem.lastIndexOfScalar(u8, self.source[0..self.offset], '\\n')) |prev_nl| {\n            begin = prev_nl + 1;\n        }"}
{"instruction":"Write a Zig const similar to result from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig","output":"const result: u16 = @as(u4, @bitCast(currentData));"}
{"instruction":"Write a Zig function similar to parseOffset from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"fn parseOffset(dis: *Disassembler) !u64 {\n    var stream = std.io.fixedBufferStream(dis.code[dis.pos..]);\n    const reader = stream.reader();\n    const offset = try reader.readInt(u64, .little);\n    dis.pos += 8;\n    return offset;\n}"}
{"instruction":"Write a Zig function similar to errorCallback from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/aaudio.zig","output":"fn errorCallback(\n        stream: ?*c.AAudioStream,\n        user_data: ?*anyopaque,\n        err: c.aaudio_result_t,\n    ) callconv(.C) void {\n        _ = stream;\n        audio_log.err(\"AAudio Stream error! {}"}
{"instruction":"Write a Zig const similar to new_index from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"const new_index: usize = if (editor.workspaces.getIndex(workspace.grouping)) |index| if (index > 0) index - 1 else 0 else 0;"}
{"instruction":"Write a Zig function similar to terminate from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig","output":"pub fn terminate(top_frame: anyframe, frame_size: usize) void {\n    assert(_terminated == null);\n    _terminated = top_frame;\n    _frame_size = frame_size;\n}"}
{"instruction":"Write a Zig const similar to opt_cflags from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"const opt_cflags: [:0]const u8 = if (is_armv5()) \"-DWOLFSSL_NO_FENCE\" else \"\";"}
{"instruction":"Write a Zig struct similar to Token from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"pub const Token = struct {\n    kind: Kind,\n    text: []const u8,\n\n    const Kind = enum {\n        id, // Any id thats not a keyword\n        name, // Vulkan <name>...</name>\n        type_name, // Vulkan <type>...</type>\n        enum_name, // Vulkan <enum>...</enum>\n        int,\n        star,\n        comma,\n        semicolon,\n        colon,\n        minus,\n        tilde,\n        dot,\n        hash,\n        lparen,\n        rparen,\n        lbracket,\n        rbracket,\n        kw_typedef,\n        kw_const,\n        kw_vkapi_ptr,\n        kw_struct,\n    }"}
{"instruction":"Write a Zig function similar to assignExpr from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/parser.zig","output":"fn assignExpr(p: *Parser, skip_nl: SkipNl, level: u8) Error!Node.Index {\n        const lhs = try p.expr(skip_nl, level);\n        const tok = p.tok_i;\n        switch (p.tok_ids[tok]) {\n            .equal,\n            .plus_equal,\n            .minus_equal,\n            .asterisk_equal,\n            .asterisk_asterisk_equal,\n            .slash_equal,\n            .slash_slash_equal,\n            .percent_equal,\n            .l_arr_arr_equal,\n            .r_arr_arr_equal,\n            .ampersand_equal,\n            .pipe_equal,\n            .caret_equal,\n            => {\n                p.tok_i += 1;\n                return try p.addBin(switch (p.tok_ids[tok]) {\n                    .equal => .assign,\n                    .plus_equal => .add_assign,\n                    .minus_equal => .sub_assign,\n                    .asterisk_equal => .mul_assign,\n                    .asterisk_asterisk_equal => .pow_assign,\n                    .slash_equal => .div_assign,\n                    .slash_slash_equal => .div_floor_assign,\n                    .percent_equal => .rem_assign,\n                    .l_arr_arr_equal => .l_shift_assign,\n                    .r_arr_arr_equal => .r_shift_assign,\n                    .ampersand_equal => .bit_and_assign,\n                    .pipe_equal => .bit_or_assign,\n                    .caret_equal => .bit_xor_assign,\n                    else => unreachable,\n                }"}
{"instruction":"Write a Zig function similar to generateExactWidthIntMax from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn generateExactWidthIntMax(comp: *Compilation, w: *std.Io.Writer, original_qt: QualType) !void {\n    var qt = original_qt;\n    const bit_count: u8 = @intCast(qt.sizeof(comp) * 8);\n    const unsigned = qt.signedness(comp) == .unsigned;\n\n    if (bit_count == 64) {\n        qt = if (unsigned) try comp.type_store.int64.makeIntUnsigned(comp) else comp.type_store.int64;\n    }"}
{"instruction":"Write a Zig function similar to onHTMLParseError from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig","output":"pub fn onHTMLParseError(this: *HTMLScanner, message: []const u8) void {\n    this.log.addError(\n        this.source,\n        logger.Loc.Empty,\n        message,\n    ) catch |err| bun.handleOom(err);\n}"}
{"instruction":"Write a Zig struct similar to FdTable from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/stream.zig","output":"const FdTable = struct {\n    streams: SpinLock([STREAM_NUM]?Stream),\n    index: usize = 0,\n\n    const Self = @This();\n\n    pub fn get(self: *Self, fd: i32) ?*Stream {\n        const streams = self.streams.acquire();\n        defer self.streams.release();\n        const s = &streams.*[@as(usize, @intCast(fd))];\n        if (s.* == null) {\n            return null;\n        }"}
{"instruction":"Write a Zig function similar to getUrl from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getUrl(self: webui) ![:0]const u8 {\n    const ptr = c.webui_get_url(self.window_handle);\n    const len = std.mem.len(ptr);\n    if (len == 0) return WebUIError.UrlError;\n    return ptr[0..len :0];\n}"}
{"instruction":"Write a Zig function similar to _error from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/console/console.zig","output":"pub fn _error(values: []js.Object, page: *Page) !void {\n        if (values.len == 0) {\n            return;\n        }"}
{"instruction":"Write a Zig const similar to val from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"const val: Value = .{\n                .num = std.fmt.parseFloat(f64, slice) catch unreachable,\n            };"}
{"instruction":"Write a Zig function similar to deinit from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn deinit(self: *Addon, allocator: NeverFailingAllocator) void {\n\t\t\tself.dir.close();\n\t\t\tallocator.free(self.name);\n\t\t}"}
{"instruction":"Write a Zig function similar to kevent from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn kevent(self: *Completion) ?Kevent {\n        return switch (self.op) {\n            .noop => unreachable,\n\n            .cancel,\n            .close,\n            .timer,\n            .shutdown,\n            => null,\n\n            .accept => |v| kevent_init(.{\n                .ident = @intCast(v.socket),\n                .filter = std.c.EVFILT.READ,\n                .flags = std.c.EV.ADD | std.c.EV.ENABLE,\n                .fflags = 0,\n                .data = 0,\n                .udata = @intFromPtr(self),\n            }"}
{"instruction":"Write a Zig const similar to TSS_OFFSET from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/gdt.zig","output":"pub const TSS_OFFSET: u16 = 0x28;"}
{"instruction":"Write a Zig const similar to ptr from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const ptr: []align(8) u8 = @alignCast(self.memSlice());"}
{"instruction":"Write a Zig const similar to heartbeat_message from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"const heartbeat_message: [8]u8 = comptime heartbeat: {\n            var buffer: [8]u8 = undefined;"}
{"instruction":"Write a Zig const similar to n from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const n: usize = @intCast(ctx.ct_params.get(\"N\").?.asBoxInt());"}
{"instruction":"Write a Zig function similar to apply from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputConfig.zig","output":"fn apply(scroll_method: ScrollMethod, device: *c.libinput_device) void {\n        _ = c.libinput_device_config_scroll_set_method(device, switch (scroll_method) {\n            .none => c.LIBINPUT_CONFIG_SCROLL_NO_SCROLL,\n            .@\"two-finger\" => c.LIBINPUT_CONFIG_SCROLL_2FG,\n            .edge => c.LIBINPUT_CONFIG_SCROLL_EDGE,\n            .button => c.LIBINPUT_CONFIG_SCROLL_ON_BUTTON_DOWN,\n        }"}
{"instruction":"Write a Zig function similar to numeric from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig","output":"fn numeric(self: *Tokenizer, src: []const u8) Token {\n    const start = self.idx;\n\n    if (self.peek(src)) |c| {\n        if (c == '+' or c == '-') {\n            std.debug.assert(self.consume(src));\n        }"}
{"instruction":"Write a Zig struct similar to IfStmt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const IfStmt = struct {\n    cond: *Node align(8),\n    stmts: []const *Node,\n    else_blocks: []*ElseBlock,\n    pos: u32,\n}"}
{"instruction":"Write a Zig const similar to new_build_runner_path from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const new_build_runner_path: bool = result.did_change.build_runner_path;"}
{"instruction":"Write a Zig const similar to vtable from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/types.zig","output":"const vtable: Encoder.Body.VTable = comptime .{\n            .write = &struct {\n                fn write(context: *const anyopaque, buffer: []u8) usize {\n                    const auth: *const SASLPlainAuth = @ptrCast(@alignCast(context));"}
{"instruction":"Write a Zig function similar to init from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/InternalScreen.zig","output":"pub fn init(alloc: std.mem.Allocator, w: u16, h: u16) !InternalScreen {\n    const arena = try alloc.create(std.heap.ArenaAllocator);\n    arena.* = .init(alloc);\n    var screen = InternalScreen{\n        .arena = arena,\n        .buf = try arena.allocator().alloc(InternalCell, @as(usize, @intCast(w)) * h),\n    }"}
{"instruction":"Write a Zig function similar to renderCamel from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/id_render.zig","output":"fn renderCamel(self: *IdRenderer, title: bool, id: []const u8, tag: ?[]const u8) !void {\n        var it = SegmentIterator.init(id);\n        var lower_first = !title;\n\n        while (it.next()) |segment| {\n            var i: usize = 0;\n            while (i < segment.len and std.ascii.isDigit(segment[i])) {\n                try self.text_cache.writer.writeByte(segment[i]);\n                i += 1;\n            }"}
{"instruction":"Write a Zig function similar to parseTypeDef from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseTypeDef(\n    self: *Self,\n    generic_types: ?std.AutoArrayHashMapUnmanaged(*obj.ObjString, *obj.ObjTypeDef),\n    instance: bool,\n) Error!Ast.Node.Index {\n    const mutable = try self.match(.Mut);\n    const mutable_token = if (mutable) self.current_token.? else null;\n\n    if (try self.match(.Str)) {\n        const optional = try self.match(.Question);\n\n        if (mutable) {\n            self.reporter.report(\n                .mutable_forbidden,\n                self.ast.tokens.get(mutable_token.?),\n                self.ast.tokens.get(self.current_token.? - 1),\n                \"`str` can't be mutable\",\n            );\n        }"}
{"instruction":"Write a Zig function similar to read_int from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn read_int(self: *Decoder, comptime T: type) Error!T {\n        comptime assert(@typeInfo(T) == .int);\n        comptime assert(@typeInfo(T).int.signedness == .unsigned);\n        comptime assert(@sizeOf(T) == 1 or @sizeOf(T) == 2 or @sizeOf(T) == 4 or @sizeOf(T) == 8);\n        if (self.index + @sizeOf(T) > self.buffer.len) return error.BufferExhausted;\n        defer {\n            self.index += @sizeOf(T);\n            assert(self.index <= self.buffer.len);\n        }"}
{"instruction":"Write a Zig function similar to _getPropertyPriority from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"pub fn _getPropertyPriority(self: *const CSSStyleDeclaration, name: []const u8) []const u8 {\n    const property = self.properties.getPtr(name) orelse return \"\";\n    return if (property.priority) \"important\" else \"\";\n}"}
{"instruction":"Write a Zig function similar to parse from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/FFI.zig","output":"pub fn parse(self: *Self, parser: ?*Parser, source: Ast.TokenIndex, type_expr: ?[]const u8) !?[]*Zdef {\n    // TODO: maybe an Arena allocator for those kinds of things that can live for the whole process lifetime\n    const duped = self.gc.allocator.dupeZ(\n        u8,\n        type_expr orelse parser.?.ast.tokens.items(.literal)[source].String,\n    ) catch @panic(\"Out of memory\");\n    // defer self.gc.allocator.free(duped);\n\n    self.state = .{\n        .script = if (parser) |uparser|\n            try std.mem.replaceOwned(u8, self.gc.allocator, uparser.script_name, \"/\", \".\")\n        else\n            \"zdef\",\n        .type_expr = type_expr,\n        .source = source,\n        .parser = parser,\n        .buzz_ast = if (parser) |p|\n            p.ast.slice()\n        else\n            null,\n        .ast = Ast.parse(\n            self.gc.allocator,\n            duped,\n            .zig,\n        ) catch @panic(\"Could not parse zdef\"),\n    }"}
{"instruction":"Write a Zig function similar to drain from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn drain(\n            w: *std.Io.Writer,\n            data: []const []const u8,\n            splat: usize,\n        ) std.Io.Writer.Error!usize {\n            const self: *Writer = @fieldParentPtr(\"interface\", w);\n\n            const buffered = w.buffered();\n            if (buffered.len > 0) {\n                const drained = self.context.send(buffered) catch |e| {\n                    self.err = e;\n                    return error.WriteFailed;\n                }"}
{"instruction":"Write a Zig function similar to isIdtOpen from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/idt.zig","output":"pub fn isIdtOpen(entry: IdtEntry) bool {\n    return entry.present == 1;\n}"}
{"instruction":"Write a Zig function similar to genLValRangePart from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genLValRangePart(c: *Compiler, node: Node.Index, range_ref: Ref, lval: Lval, part: []const u8) Error!void {\n    const name_val: Value = .{ .str = part }"}
{"instruction":"Write a Zig struct similar to BakeExtra from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub const BakeExtra = struct {\n    is_route: bool = false,\n    fully_static: bool = false,\n    bake_is_runtime: bool = false,\n}"}
{"instruction":"Write a Zig const similar to MASTER_COMMAND_REG from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const MASTER_COMMAND_REG: u16 = 0x20;"}
{"instruction":"Write a Zig function similar to typeOfExpression from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn typeOfExpression(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    const expr = try self.parsePrecedence(.Unary, false);\n\n    return try self.ast.appendNode(\n        .{\n            .tag = .TypeOfExpression,\n            .location = start_location,\n            .end_location = self.current_token.? - 1,\n            .type_def = try self.gc.type_registry.getTypeDef(.{ .def_type = .Type }"}
{"instruction":"Write a Zig function similar to generateContinue from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateContinue(self: *Self, continue_node: Ast.Node.Index) Error!?m.MIR_op_t {\n    try self.closeScope(continue_node);\n\n    if (self.state.?.ast.nodes.items(.components)[continue_node].Continue.destination) |label_node| {\n        self.JMP(self.findBreakLabel(label_node).continue_label);\n    }"}
{"instruction":"Write a Zig function similar to atan from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn atan(vm: *cy.VM) Value {\n    return Value.initF64(std.math.atan(vm.getFloat(0)));\n}"}
{"instruction":"Write a Zig function similar to unpack from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn unpack(val: F80Value) f80 {\n            // F80Value -> u96 -> u80 -> f80\n            return @bitCast(@as(u80, @truncate(@as(u96, @bitCast(val)))));\n        }"}
{"instruction":"Write a Zig function similar to shuttingDown from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"pub fn shuttingDown(self: *Self) bool {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            return self.data.state.shutting_down.load(.seq_cst);\n        }"}
{"instruction":"Write a Zig function similar to completeFuture from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn completeFuture(vm: *cy.VM, future: *cy.heap.Future, val: cy.Value) !void {\n    future.val = val;\n    future.completed = true;\n\n    // Copy continuations to the ready queue.\n    var opt_node = future.cont_head;\n    while (opt_node) |node| {\n        try vm.ready_tasks.writeItem(node.task);\n        opt_node = node.next;\n        vm.alloc.destroy(node);\n    }"}
{"instruction":"Write a Zig function similar to flushTokens from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"fn flushTokens(self: *Self, flush_opt: FlushOption) !void {\n            // Pass tokens to the token writer\n            try self.block_writer.write(self.tokens.tokens(), flush_opt == .final, self.win.tokensBuffer());\n            // Stored block ensures byte alignment.\n            // It has 3 bits (final, block_type) and then padding until byte boundary.\n            // After that everything is aligned to the boundary in the stored block.\n            // Empty stored block is Ob000 + (0-7) bits of padding + 0x00 0x00 0xFF 0xFF.\n            // Last 4 bytes are byte aligned.\n            if (flush_opt == .flush) {\n                try self.block_writer.storedBlock(\"\", false);\n            }"}
{"instruction":"Write a Zig function similar to getSortName from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"pub fn getSortName(self: ImportDecl) []const u8 {\n        return self.parent_name orelse self.name;\n    }"}
{"instruction":"Write a Zig function similar to sys_open from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_open(file: *const fs.OpenFile) isize {\n    return call(.SYS_OPEN, file);\n}"}
{"instruction":"Write a Zig function similar to trimPrefix from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/generate.zig","output":"fn trimPrefix(comptime T: type, haystack: []const T, needle: []const T) []const T {\n        \\\\    if (std.mem.startsWith(T, haystack, needle)) {\n        \\\\        return haystack[needle.len .. haystack.len];\n        \\\\    }"}
{"instruction":"Write a Zig function similar to buildSetLocal from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn buildSetLocal(self: *Self, slot: usize, value: m.MIR_op_t) !void {\n    const ctx_reg = self.state.?.ctx_reg.?;\n    const index = try self.REG(\"index\", m.MIR_T_I64);\n    const base = try self.REG(\"base\", m.MIR_T_I64);\n\n    // Avoid intertwining the set local and its value expression\n    const value_reg = m.MIR_new_reg_op(\n        self.ctx,\n        try self.REG(\"value\", m.MIR_T_I64),\n    );\n    self.MOV(value_reg, value);\n\n    self.MOV(\n        m.MIR_new_reg_op(self.ctx, index),\n        m.MIR_new_uint_op(self.ctx, 0),\n    );\n\n    self.MOV(\n        m.MIR_new_reg_op(self.ctx, base),\n        m.MIR_new_mem_op(\n            self.ctx,\n            m.MIR_T_U64,\n            @offsetOf(o.NativeCtx, \"base\"),\n            ctx_reg,\n            index,\n            0,\n        ),\n    );\n\n    self.MOV(\n        m.MIR_new_reg_op(self.ctx, index),\n        m.MIR_new_uint_op(self.ctx, slot),\n    );\n\n    const local = m.MIR_new_mem_op(\n        self.ctx,\n        m.MIR_T_U64,\n        0,\n        base,\n        index,\n        @sizeOf(u64),\n    );\n\n    self.MOV(local, value_reg);\n}"}
{"instruction":"Write a Zig function similar to currentGroupingID from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn currentGroupingID(editor: *Editor) u64 {\n    return editor.open_workspace_grouping;\n}"}
{"instruction":"Write a Zig function similar to parsePointers from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"fn parsePointers(allocator: Allocator, xctok: *XmlCTokenizer, inner_const: bool, inner: TypeInfo, ptrs_optional: bool) !TypeInfo {\n    var type_info = inner;\n    var first_const = inner_const;\n\n    while (true) {\n        var tok = (try xctok.peek()) orelse return type_info;\n        var is_const = first_const;\n        first_const = false;\n\n        if (tok.kind == .kw_const) {\n            is_const = true;\n            _ = try xctok.nextNoEof();\n            tok = (try xctok.peek()) orelse return type_info;\n        }"}
{"instruction":"Write a Zig function similar to read from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn read(self: *EvLoop, fdobj: *Fd, buf: []u8) ReadErr!void {\n    var nread: usize = 0;\n\n    while (nread < buf.len) {\n        if (fdobj.is_canceled())\n            return ReadErr.errno; // ECANCELED\n\n        if (cc.read(fdobj.fd, buf[nread..])) |n| {\n            if (n == 0)\n                return ReadErr.eof;\n            nread += n;\n        }"}
{"instruction":"Write a Zig function similar to prev from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn prev(it: *@This()) ?ElementPtr {\n                    if (it.index == 0) return null;\n\n                    it.index -= 1;\n                    if (it.index < prealloc_item_count) return &it.list.prealloc_segment[it.index];\n\n                    if (it.box_index == 0) {\n                        it.shelf_index -= 1;\n                        it.shelf_size /= 2;\n                        it.box_index = it.shelf_size - 1;\n                    }"}
{"instruction":"Write a Zig function similar to printStderr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"fn printStderr(comptime format: []const u8, args: anytype) void {\n    if (!cy.isWasmFreestanding) {\n        std.debug.print(format, args);\n    }"}
{"instruction":"Write a Zig function similar to handleMap from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/LayerSurface.zig","output":"fn handleMap(listener: *wl.Listener(void)) void {\n    const layer_surface: *LayerSurface = @fieldParentPtr(\"map\", listener);\n    const wlr_surface = layer_surface.wlr_layer_surface;\n\n    log.debug(\"layer surface '{s}"}
{"instruction":"Write a Zig function similar to registerBlock from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn registerBlock(assetFolder: []const u8, id: []const u8, zon: ZonElement) !void {\n\tif(zon == .null) std.log.err(\"Missing block: {s}"}
{"instruction":"Write a Zig function similar to setConfiguration2 from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/configuration.zig","output":"pub fn setConfiguration2(\n        manager: *Manager,\n        tag: Tag,\n        config: *const Config,\n    ) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to isNull from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn isNull(ip: *InternPool, val: Index) bool {\n    return switch (ip.indexToKey(val)) {\n        .simple_value => |simple| switch (simple) {\n            .null_value => true,\n            else => false,\n        }"}
{"instruction":"Write a Zig function similar to float4 from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn float4(value: math.float4) T {\n            var res: T = .{\n                .r = scaleRed(value[0]),\n                .g = scaleGreen(value[1]),\n                .b = scaleBlue(value[2]),\n            }"}
{"instruction":"Write a Zig const similar to exe from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: build.zig","output":"const exe: *Step.Compile = if (is_zig) exe: {\n            const exe = b.addExecutable(.{\n                .name = name,\n                .root_module = b.createModule(.{\n                    .root_source_file = b.path(b.fmt(\n                        \"examples/{s}\",\n                        .{entry.name},\n                    )),\n                    .target = target,\n                    .optimize = optimize,\n                }),\n            });"}
{"instruction":"Write a Zig function similar to begin_header from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn begin_header(self: *Encoder, header: Header) void {\n        // Reserve the frame header bytes to be updated by `finish_header()`.\n        assert(self.frame_reference != null);\n        assert(self.frame_reference.?.frame_header.type == .header);\n        assert(self.header_reference == null);\n        const header_index = self.index;\n        self.index += Header.size_total;\n        self.header_reference = .{\n            .header = header,\n            .index = header_index,\n        }"}
{"instruction":"Write a Zig function similar to Compressor from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"pub fn Compressor(comptime container: Container) type {\n        return SimpleCompressor(.store, container);\n    }"}
{"instruction":"Write a Zig function similar to resolveSpecifier from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"pub fn resolveSpecifier(self: *ScriptManager, arena: Allocator, specifier: []const u8, base: []const u8) ![:0]const u8 {\n    // If the specifier is mapped in the importmap, return the pre-resolved value.\n    if (self.importmap.get(specifier)) |s| {\n        return s;\n    }"}
{"instruction":"Write a Zig function similar to callback from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn callback(context: *amqp.Client) void {\n                        const runner: *Runner = @alignCast(@fieldParentPtr(\n                            \"amqp_client\",\n                            context,\n                        ));\n                        switch (runner.state) {\n                            .recovering => |*recovering| {\n                                assert(recovering.phase == .nack_progress_message);\n                                assert(recovering.timestamp_last != null);\n                                assert(TimestampRange.valid(recovering.timestamp_last.?));\n\n                                const nack = recovering.phase.nack_progress_message;\n                                assert(nack.delivery_tag > 0);\n\n                                runner.state = .{ .last = .{\n                                    .consumer_timestamp = recovering.timestamp_last.?,\n                                    .producer_timestamp = recovering.timestamp_last.? + 1,\n                                }"}
{"instruction":"Write a Zig const similar to fd_set from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const fd_set: *align(8) FdSet = @ptrCast(mem);"}
{"instruction":"Write a Zig const similar to empty from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"pub const empty: CSSStyleDeclaration = .{\n    .properties = .empty,\n};"}
{"instruction":"Write a Zig const similar to vm from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig","output":"const vm: *c.ZVM = @ptrCast(ivm);"}
{"instruction":"Write a Zig function similar to empty from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn empty(self: *const Decoder) bool {\n        return self.index == self.buffer.len;\n    }"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/window_flags.zig","output":"pub fn main() anyerror!void {\n    // Initialization\n    // -------------------------------------------------------------------------\n\n    // Possible window flags\n    // flag_vsync_hint\n    // flag_fullscreen_mode    -> not working properly -> wrong scaling!\n    // flag_window_resizable\n    // flag_window_undecorated\n    // flag_window_transparent\n    // flag_window_hidden\n    // flag_window_minimized   -> Not supported on window creation\n    // flag_window_maximized   -> Not supported on window creation\n    // flag_window_unfocused\n    // flag_window_topmost\n    // flag_window_highdpi     -> errors after minimize-resize, fb size is recalculated\n    // flag_window_always_run\n    // flag_msaa_4x_hint\n\n    // Set configuration flags for window creation\n    // rl.setConfigFlags(\n    //     @enumFromInt(@intFromEnum(rl.ConfigFlags.flag_vsync_hint) | @intFromEnum(rl.ConfigFlags.flag_msaa_4x_hint) | @intFromEnum(rl.ConfigFlags.flag_window_highdpi)),\n    // );\n    rl.initWindow(\n        screen_width,\n        screen_height,\n        \"raylib-zig [core] example - window flags\",\n    );\n    defer rl.closeWindow(); // Close window and OpenGL context\n\n    var ball_position = rl.Vector2.init(\n        @floatFromInt(@divFloor(rl.getScreenWidth(), 2)),\n        @floatFromInt(@divFloor(rl.getScreenHeight(), 2)),\n    );\n    var ball_speed = rl.Vector2.init(5, 4);\n    const ball_radius: f32 = 20;\n\n    var frames_counter: i32 = 0;\n\n    rl.setTargetFPS(60); // Set our game to run at 60 frames-per-second\n\n    while (!rl.windowShouldClose()) {\n        // Update\n        // ---------------------------------------------------------------------\n        if (rl.isKeyPressed(.f)) rl.toggleFullscreen(); // Modifies window size when scaling!\n\n        if (rl.isKeyPressed(.r)) {\n            if (rl.isWindowState(rl.ConfigFlags { .window_resizable = true }"}
{"instruction":"Write a Zig function similar to getRt from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn getRt(val: Value) Ref {\n        switch (val) {\n            .ref, .mut => |r| return r,\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig function similar to init from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn init(tsa: *ThreadSafeAllocator) !Self {\n        return Self{\n            .state = try State.init(tsa.allocator()),\n            .target_arena = ArenaAllocator.init(tsa.allocator()),\n            .subordinate_arena = ArenaAllocator.init(tsa.allocator()),\n        }"}
{"instruction":"Write a Zig function similar to switchTo from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn switchTo(self: *ThreadState, target: Frame, set_resumer: bool) void {\n        const suspender = self.current();\n        if (suspender == target) {\n            return;\n        }"}
{"instruction":"Write a Zig function similar to call from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn call(self: *Self, _: bool, callee: Ast.Node.Index) Error!Ast.Node.Index {\n    const start_location = self.ast.nodes.items(.location)[callee];\n    const callee_type_def = self.ast.nodes.items(.type_def)[callee];\n\n    const arguments = try self.argumentList();\n    const catch_default = if (try self.match(.Catch))\n        try self.expression(false)\n    else\n        null;\n\n    // Node type is Function or Native return type or nothing/placeholder\n    var type_def = if (callee_type_def != null and callee_type_def.?.def_type == .Function)\n        callee_type_def.?.resolved_type.?.Function.return_type\n    else if (callee_type_def != null and callee_type_def.?.def_type == .Enum)\n        try (try callee_type_def.?.toInstance(&self.gc.type_registry, false))\n            .cloneOptional(&self.gc.type_registry)\n    else\n        null;\n\n    // If null, create placeholder\n    if (type_def == null) {\n        if (callee_type_def == null or callee_type_def.?.def_type != .Placeholder) {\n            self.reportErrorAtNode(\n                .callable,\n                callee,\n                \"Can't be called\",\n                .{}"}
{"instruction":"Write a Zig const similar to kind from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"const kind: Script.Kind = blk: {\n        const script_type = try parser.elementGetAttribute(element, \"type\") orelse break :blk .javascript;"}
{"instruction":"Write a Zig struct similar to ResourceUsageStatistics from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub const ResourceUsageStatistics = struct {\n    rusage: @TypeOf(rusage_init) = rusage_init,\n\n    /// Returns the peak resident set size of the child process, in bytes,\n    /// if available.\n    pub inline fn getMaxRss(rus: ResourceUsageStatistics) ?usize {\n        switch (native_os) {\n            .linux => {\n                if (rus.rusage) |ru| {\n                    return @as(usize, @intCast(ru.maxrss)) * 1024;\n                }"}
{"instruction":"Write a Zig function similar to get_errno from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn get_errno() usize {\n        resume @as(usize, @bitCast(sys_errno()));\n    }"}
{"instruction":"Write a Zig function similar to write_long_string_body from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn write_long_string_body(self: *Encoder, body: ?Body) void {\n        if (body == null) {\n            self.write_int(u32, 0); // Zero sized string.\n            return;\n        }"}
{"instruction":"Write a Zig struct similar to Player from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/2d_camera_platformer.zig","output":"const Player = struct {\n    can_jump: bool,\n    speed: f32,\n    position: rl.Vector2,\n}"}
{"instruction":"Write a Zig const similar to file from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const file: File = .{ .handle = fd };"}
{"instruction":"Write a Zig const similar to memory from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: ffi/zig_allocator.zig","output":"const memory: [*c]u8 = @ptrCast(ptr);"}
{"instruction":"Write a Zig const similar to FULL_ALPHA from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const FULL_ALPHA: u32 = 0xFF000000;"}
{"instruction":"Write a Zig function similar to onNativeWindowDestroyed from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"pub fn onNativeWindowDestroyed(self: *Self, window: *android.ANativeWindow) void {\n        _ = window;\n        self.egl_lock.lock();\n        defer self.egl_lock.unlock();\n\n        if (self.egl) |*old| {\n            old.deinit();\n        }"}
{"instruction":"Write a Zig struct similar to IdRenderer from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/id_render.zig","output":"pub const IdRenderer = struct {\n    tags: []const []const u8,\n    text_cache: std.Io.Writer.Allocating,\n\n    pub fn init(allocator: Allocator, tags: []const []const u8) IdRenderer {\n        return .{\n            .tags = tags,\n            .text_cache = .init(allocator),\n        }"}
{"instruction":"Write a Zig function similar to Arguments from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"fn Arguments(\n    comptime Id: type,\n    comptime params: []const Param(Id),\n    comptime value_parsers: anytype,\n    comptime multi_arg_kind: MultiArgKind,\n) type {\n    var fields_len: usize = 0;\n    for (params) |param| {\n        const longest = param.names.longest();\n        if (longest.kind == .positional)\n            continue;\n        fields_len += 1;\n    }"}
{"instruction":"Write a Zig function similar to is32Bit from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"fn is32Bit(target_: std.Target) bool {\n    switch (target_.cpu.arch) {\n        .wasm32, .x86 => return true,\n        else => return false,\n    }"}
{"instruction":"Write a Zig function similar to genTryUnwrapMap from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Compiler.zig","output":"fn genTryUnwrapMap(c: *Compiler, node: Node.Index, val: *const Value) Error!void {\n    if (!val.isRt()) {\n        return c.reportErr(\"expected a map\", node);\n    }"}
{"instruction":"Write a Zig const similar to virt_end from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"const virt_end: usize = virt + PAGE_SIZE_4MB;"}
{"instruction":"Write a Zig function similar to setIcon from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setIcon(self: webui, icon: [:0]const u8, icon_type: [:0]const u8) void {\n    c.webui_set_icon(self.window_handle, icon.ptr, icon_type);\n}"}
{"instruction":"Write a Zig function similar to replaceEntry from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"pub fn replaceEntry(self: *Palette, entryIndex: usize, newEntry: []const u8) void {\n\t\tself.palette.allocator.free(self.palette.items[entryIndex]);\n\t\tself.palette.items[entryIndex] = self.palette.allocator.dupe(u8, newEntry);\n\t}"}
{"instruction":"Write a Zig function similar to Writeable from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"fn Writeable(comptime T: type, comptime StreamT: type) fn (T, xev.WriteBuffer) anyerror!usize {\n    return struct {\n        const Self = T;\n        const WriteResult = xev.WriteError!usize;\n        pub fn write(self: Self, buf: xev.WriteBuffer) !usize {\n            const ResultT = WriteResult;\n            const Data = struct {\n                result: ResultT = undefined,\n                frame: ?Frame = null,\n\n                fn callback(\n                    userdata: ?*@This(),\n                    l: *xev.Loop,\n                    c: *xev.Completion,\n                    s: StreamT,\n                    b: xev.WriteBuffer,\n                    result: ResultT,\n                ) xev.CallbackAction {\n                    _ = l;\n                    _ = c;\n                    _ = s;\n                    _ = b;\n                    const data = userdata.?;\n                    data.result = result;\n                    if (data.frame != null) libcoro.xresume(data.frame.?);\n                    return .disarm;\n                }"}
{"instruction":"Write a Zig function similar to alloc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig","output":"fn alloc(\n        ptr: *anyopaque,\n        len: usize,\n        alignment: std.mem.Alignment,\n        ret_addr: usize,\n    ) ?[*]u8 {\n        _ = ptr;\n        _ = ret_addr;\n        return @ptrCast(c.mi_malloc_aligned(len, alignment.toByteUnits()));\n    }"}
{"instruction":"Write a Zig function similar to main from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/multicast_udp.zig","output":"pub fn main() !void {\n    try network.init();\n    defer network.deinit();\n\n    // Create a UDP socket\n    var sock = try network.Socket.create(.ipv4, .udp);\n    defer sock.close();\n\n    // Bind to 224.0.0.1:9999, allow port re-use so that multiple instances\n    // of this program can all subscribe to the UDP broadcasts\n    try sock.enablePortReuse(true);\n    const incoming_endpoint = network.EndPoint{\n        .address = network.Address{ .ipv4 = network.Address.IPv4.multicast_all }"}
{"instruction":"Write a Zig const similar to WHITE_CONTRIB_VEC from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const WHITE_CONTRIB_VEC: @Vector(SIMD_SIZE, u32) = @splat(WHITE_CONTRIBUTION);"}
{"instruction":"Write a Zig function similar to line_number from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/code.zig","output":"pub fn line_number() u32 {\n    return py.PyFrame(root).get().?.lineNumber();\n}"}
{"instruction":"Write a Zig function similar to set_cssText from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"pub fn set_cssText(self: *CSSStyleDeclaration, text: []const u8, page: *Page) !void {\n    self.properties.clearRetainingCapacity();\n\n    // call_arena is safe here, because _setProperty will dupe the name\n    // using the page's longer-living arena.\n    const declarations = try CSSParser.parseDeclarations(page.call_arena, text);\n\n    for (declarations) |decl| {\n        if (!isValidPropertyName(decl.name)) {\n            continue;\n        }"}
{"instruction":"Write a Zig function similar to load from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"pub fn load(data: *[]const u8) ?*CacheMsg {\n    const src = @src();\n\n    if (data.len == 0)\n        return null;\n\n    if (data.len <= header_len) {\n        log.warn(src, \"len:%zu <= header_len:%zu\", .{ data.len, header_len }"}
{"instruction":"Write a Zig function similar to finish from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: build/generate_def.zig","output":"pub fn finish(db: *DafsaBuilder) !void {\n        try db.minimize(0);\n    }"}
{"instruction":"Write a Zig const similar to KERNEL_DATA_INDEX from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/gdt.zig","output":"const KERNEL_DATA_INDEX: u16 = 0x02;"}
{"instruction":"Write a Zig function similar to hasRegistered from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub fn hasRegistered(id: []const u8) bool {\n\treturn reverseIndices.contains(id);\n}"}
{"instruction":"Write a Zig function similar to initTarget from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/deps/stbi/zstbi.zig","output":"pub fn initTarget(context: *Context, width: u32, height: u32, nodes: []Node) void {\n    stbrp_init_target(context, width, height, nodes.ptr, nodes.len);\n}"}
{"instruction":"Write a Zig function similar to rgbFromSpec from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Cell.zig","output":"pub fn rgbFromSpec(spec: []const u8) !Color {\n        var iter = std.mem.splitScalar(u8, spec, ':');\n        const prefix = iter.next() orelse return error.InvalidColorSpec;\n        if (!std.mem.eql(u8, \"rgb\", prefix)) return error.InvalidColorSpec;\n\n        const spec_str = iter.next() orelse return error.InvalidColorSpec;\n\n        var spec_iter = std.mem.splitScalar(u8, spec_str, '/');\n\n        const r_raw = spec_iter.next() orelse return error.InvalidColorSpec;\n        if (r_raw.len != 4) return error.InvalidColorSpec;\n\n        const g_raw = spec_iter.next() orelse return error.InvalidColorSpec;\n        if (g_raw.len != 4) return error.InvalidColorSpec;\n\n        const b_raw = spec_iter.next() orelse return error.InvalidColorSpec;\n        if (b_raw.len != 4) return error.InvalidColorSpec;\n\n        const r = try std.fmt.parseUnsigned(u8, r_raw[2..], 16);\n        const g = try std.fmt.parseUnsigned(u8, g_raw[2..], 16);\n        const b = try std.fmt.parseUnsigned(u8, b_raw[2..], 16);\n\n        return .{\n            .rgb = [_]u8{ r, g, b }"}
{"instruction":"Write a Zig function similar to decodeRawPixel from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"fn decodeRawPixel(raw_pixel: u32) Pixel {\n    const a: f64 = @floatFromInt((raw_pixel >> 24) & 0xFF);\n    const b: f64 = @floatFromInt((raw_pixel >> 16) & 0xFF);\n    const g: f64 = @floatFromInt((raw_pixel >> 8) & 0xFF);\n    const r: f64 = @floatFromInt(raw_pixel & 0xFF);\n\n    return Pixel{ .r = r, .g = g, .b = b, .a = a }"}
{"instruction":"Write a Zig function similar to close from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn close(self: webui) void {\n    c.webui_close(self.window_handle);\n}"}
{"instruction":"Write a Zig function similar to libc_getaddrinfo from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn libc_getaddrinfo(\n    name: [*:0]const u8,\n    port: [*:0]const u8,\n    hints: *const std.posix.addrinfo,\n    result: *?*std.posix.addrinfo,\n) GetAddrInfoError!void {\n    const rc = std.posix.system.getaddrinfo(name, port, hints, result);\n    if (rc != @as(std.posix.system.EAI, @enumFromInt(0)))\n        return switch (rc) {\n            .ADDRFAMILY => return error.HostLacksNetworkAddresses,\n            .AGAIN => return error.TemporaryNameServerFailure,\n            .BADFLAGS => unreachable, // Invalid hints\n            .FAIL => return error.NameServerFailure,\n            .FAMILY => return error.AddressFamilyNotSupported,\n            .MEMORY => return error.OutOfMemory,\n            .NODATA => return error.HostLacksNetworkAddresses,\n            .NONAME => return error.UnknownHostName,\n            .SERVICE => return error.ServiceUnavailable,\n            .SOCKTYPE => unreachable, // Invalid socket type requested in hints\n            .SYSTEM => switch (std.posix.errno(-1)) {\n                else => |e| return std.posix.unexpectedErrno(e),\n            }"}
{"instruction":"Write a Zig struct similar to nullability from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const nullability = struct {\n        kind: enum {\n            nonnull,\n            nullable,\n            nullable_result,\n            unspecified,\n\n            const opts = struct {\n                const enum_kind = .identifier;\n            }"}
{"instruction":"Write a Zig function similar to deinit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn deinit(self: *Node, allocator: std.mem.Allocator) void {\n        if (self.ends_scope) |ends_scope| {\n            allocator.free(ends_scope);\n        }"}
{"instruction":"Write a Zig struct similar to KvCache from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub const KvCache = struct {\n    k: zml.Tensor,\n    v: zml.Tensor,\n    layer_index: zml.Tensor,\n\n    pub fn init(kv_shape: zml.Shape) KvCache {\n        // The KV-cache is initialized with ones to detect reads of uninitialized memory.\n        return .{\n            .k = .constant(kv_shape, kv_shape.dtype().one()).withSharding(.{.h}"}
{"instruction":"Write a Zig function similar to localAttnMask from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn localAttnMask(global_mask: Tensor, window_size: u32) Tensor {\n        const mask_shape = global_mask.shape();\n\n        // Calculate distance between positions\n        const rows = Tensor.iota(mask_shape, .q);\n        const cols = Tensor.iota(mask_shape, .k);\n        const distance = rows.sub(cols).abs();\n\n        // Note: we divide by two because the BERT local attention is symetric around the query token.\n        // Create sliding window mask (1 for positions within window, 0 outside)\n        const window_mask = distance.cmp(.LE, Tensor.scalar(@divExact(window_size, 2), .i32));\n        const minus_inf = Tensor.constant(mask_shape, mask_shape.dtype().minValue());\n        return window_mask.select(global_mask, minus_inf);\n    }"}
{"instruction":"Write a Zig function similar to builder from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/String.zig","output":"pub fn builder(allocator: Allocator) Builder {\n    return Builder{\n        .inner = std.ArrayList(u8).init(allocator),\n    }"}
{"instruction":"Write a Zig function similar to match from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/pattern.zig","output":"pub fn match(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjPattern.cast(ctx.vm.peek(1).obj()).?;\n    const subject = o.ObjString.cast(ctx.vm.peek(0).obj()).?;\n\n    var offset: usize = 0;\n    if (rawMatch(\n        self,\n        ctx.vm,\n        subject,\n        &offset,\n    ) catch {\n        ctx.vm.panic(\"Out of memory\");\n        unreachable;\n    }"}
{"instruction":"Write a Zig function similar to set_id from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn set_id(msg: []u8, id: c.be16) void {\n    return c.dns_set_id(msg.ptr, id);\n}"}
{"instruction":"Write a Zig function similar to handleApiRequest from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/comprehensive/main.zig","output":"fn handleApiRequest(path: []const u8) ?[]const u8 {\n    if (std.mem.eql(u8, path, \"/api/stats\")) {\n        var buffer: [512]u8 = undefined;\n\n        const json = std.fmt.bufPrint(buffer[0..],\n            \\\\HTTP/1.1 200 OK\n            \\\\Content-Type: application/json\n            \\\\Access-Control-Allow-Origin: *\n            \\\\\n            \\\\{{\"users\":{}"}
{"instruction":"Write a Zig function similar to main from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/dotnet_bindings.zig","output":"pub fn main() !void {\n    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n\n    var buffer = std.ArrayList(u8).init(allocator);\n    try generate_bindings(&buffer);\n\n    try std.io.getStdOut().writeAll(buffer.items);\n}"}
{"instruction":"Write a Zig const similar to num_freed from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig","output":"const num_freed: u32 = 0;"}
{"instruction":"Write a Zig function similar to setProperty from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"pub fn setProperty(self: *Self, prop_name: []const u8, value: []const u8) !void {\n            var parser = Parser.init(self.properties.allocator, value);\n\n            inline for (std.meta.fields(Property)) |f| {\n                if (std.mem.eql(u8, cssName(f.name), prop_name)) {\n                    const val = try parser.parse(f.type);\n                    return self.add(@unionInit(Property, f.name, val));\n                }"}
{"instruction":"Write a Zig function similar to pwrite from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn pwrite(self: Self, buf: xev.WriteBuffer, offset: u64) !usize {\n        const ResultT = PWriteResult;\n        const Data = struct {\n            result: ResultT = undefined,\n            frame: ?Frame = null,\n\n            fn callback(\n                userdata: ?*@This(),\n                l: *xev.Loop,\n                c: *xev.Completion,\n                s: xev.File,\n                b: xev.WriteBuffer,\n                result: ResultT,\n            ) xev.CallbackAction {\n                _ = l;\n                _ = c;\n                _ = s;\n                _ = b;\n                const data = userdata.?;\n                data.result = result;\n                if (data.frame != null) libcoro.xresume(data.frame.?);\n                return .disarm;\n            }"}
{"instruction":"Write a Zig const similar to seq_len from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/main.zig","output":"const seq_len: u32 = cli.args.@\"seq-len\" orelse 256;"}
{"instruction":"Write a Zig function similar to draw from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Menu.zig","output":"pub fn draw() !dvui.App.Result {\n    var m = dvui.menu(@src(), .horizontal, .{}"}
{"instruction":"Write a Zig function similar to mul32 from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn mul32(vm: *cy.VM) Value {\n    return Value.initF64(@floatFromInt(@as(i32, @intFromFloat(vm.getFloat(0))) *% @as(i32, @intFromFloat(vm.getFloat(1)))));\n}"}
{"instruction":"Write a Zig const similar to t from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"const t: Token = .{\n                            .parse_error = .{\n                                .tag = .missing_attribute_value,\n                                .span = .{\n                                    .start = state.equal_sign,\n                                    .end = state.equal_sign + 1,\n                                },\n                            },\n                        };"}
{"instruction":"Write a Zig function similar to runtimeMagenta from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn runtimeMagenta(allocator: std.mem.Allocator, message: []const u8) ![]const u8 {\n    return try runtimeWrap(allocator, codes.magenta, message);\n}"}
{"instruction":"Write a Zig function similar to grayscaleAlphaToGrayscale from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn grayscaleAlphaToGrayscale(comptime T: type, gray: anytype) T {\n    const toF32 = color.ScaleValue(f32);\n    const scaleValue = color.ScaleValue(std.meta.fieldInfo(T, .value).type);\n    return .{ .value = scaleValue(toF32(gray.value) * toF32(gray.alpha)) }"}
{"instruction":"Write a Zig struct similar to EnumMember from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const EnumMember = struct {\n    name: *Node align(8),\n    typeSpec: ?*Node,\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to flipVertically from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/Image/Editor.zig","output":"pub fn flipVertically(pixels: *const color.PixelStorage, height: usize, allocator: std.mem.Allocator) Error!void {\n    var image_data = pixels.asBytes();\n    const row_size = image_data.len / height;\n\n    const temp = try allocator.alloc(u8, row_size);\n    defer allocator.free(temp);\n    while (image_data.len > row_size) : (image_data = image_data[row_size..(image_data.len - row_size)]) {\n        const row1_data = image_data[0..row_size];\n        const row2_data = image_data[image_data.len - row_size .. image_data.len];\n        @memcpy(temp, row1_data);\n        @memcpy(row1_data, row2_data);\n        @memcpy(row2_data, temp);\n    }"}
{"instruction":"Write a Zig function similar to renderApiConstantExpr from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderApiConstantExpr(self: *Self, expr: []const u8) !void {\n        const adjusted_expr = if (expr.len > 2 and expr[0] == '(' and expr[expr.len - 1] == ')')\n            expr[1 .. expr.len - 1]\n        else\n            expr;\n\n        var tokenizer = cparse.CTokenizer{ .source = adjusted_expr }"}
{"instruction":"Write a Zig function similar to init from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn init(allocator: std.mem.Allocator) !Self {\n        return Self{\n            .internal = try OSLogic.init(allocator),\n        }"}
{"instruction":"Write a Zig function similar to isSlice from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/C3.zig","output":"fn isSlice(params: *const encoding.Params) bool {\n    return switch (params.data_type.form) {\n        .@\"struct\" => |strct| strct.members.len == 2 and\n            encoding.memberNameIs(params, strct.members[0].name, \"ptr\") and\n            encoding.memberNameIs(params, strct.members[1].name, \"len\"),\n        else => false,\n    }"}
{"instruction":"Write a Zig function similar to __ipow__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __ipow__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ = std.math.pow(u64, self.num_, other.num_);\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to runtimeWhite from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn runtimeWhite(allocator: std.mem.Allocator, message: []const u8) ![]const u8 {\n    return try runtimeWrap(allocator, codes.white, message);\n}"}
{"instruction":"Write a Zig const similar to PARITY_BIT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/serial.zig","output":"const PARITY_BIT: bool = false;"}
{"instruction":"Write a Zig function similar to option_wolfssl_noasm from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn option_wolfssl_noasm() void {\n    _wolfssl_noasm = _b.option(bool, \"wolfssl-noasm\", \"disable the assembly acceleration option for wolfssl\") orelse false;\n}"}
{"instruction":"Write a Zig function similar to from_table from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"fn from_table(arena: std.mem.Allocator, decoder: Decoder.Table) !*const TestingTable {\n        var object = try arena.create(TestingTable);\n        object.* = TestingTable.empty;\n\n        var iterator = decoder.iterator();\n        while (try iterator.next()) |entry| {\n            const FieldEnum = std.meta.FieldEnum(TestingTable);\n            const entry_field = std.meta.stringToEnum(FieldEnum, entry.key).?;\n            switch (entry_field) {\n                inline else => |field| {\n                    const Field = @FieldType(TestingTable, @tagName(field));\n                    @field(object, @tagName(field)) = switch (std.meta.Child(Field)) {\n                        bool => entry.value.boolean,\n                        []const u8 => entry.value.string,\n                        i64 => entry.value.int64,\n                        u32 => entry.value.uint32,\n                        i32 => entry.value.int32,\n                        u16 => entry.value.uint16,\n                        i16 => entry.value.int16,\n                        u8 => entry.value.uint8,\n                        i8 => entry.value.int8,\n                        *const TestingTable => try from_table(arena, entry.value.field_table),\n                        Timestamp => @intCast(entry.value.timestamp),\n                        else => comptime unreachable,\n                    }"}
{"instruction":"Write a Zig const similar to argv from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/aquila/install.zig","output":"const argv: []const string = &.{\n        \"zig\",         \"build\",\n        \"--prefix\",    try std.fs.path.join(gpa, &.{ homepath, \".zigmod\" }),\n        \"--cache-dir\", try std.fs.path.join(gpa, &.{ cache.?, \"zigmod\", \"zig\" }),\n    };"}
{"instruction":"Write a Zig const similar to ly from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const ly: i32 = @intFromFloat(cursor.wlr_cursor.y);"}
{"instruction":"Write a Zig function similar to isVoid from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub fn isVoid(st: @This(), src: []const u8, language: Language) bool {\n            std.debug.assert(st.name.end != 0);\n\n            if (language == .xml) return false;\n            if (language == .superhtml) {\n                if (super_void_tag_names.has(st.name.slice(src))) {\n                    return true;\n                }"}
{"instruction":"Write a Zig const similar to VEC_2X_255 from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"const VEC_2X_255: @Vector(2, i64) = @splat(255);"}
{"instruction":"Write a Zig function similar to handleTabletToolProximity from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleTabletToolProximity(\n    _: *wl.Listener(*wlr.Tablet.event.Proximity),\n    event: *wlr.Tablet.event.Proximity,\n) void {\n    const device: *InputDevice = @ptrFromInt(event.device.data);\n    const tablet: *Tablet = @fieldParentPtr(\"device\", device);\n\n    device.seat.handleActivity();\n\n    const tool = TabletTool.get(device.seat.wlr_seat, event.tool) catch return;\n\n    tool.proximity(tablet, event);\n}"}
{"instruction":"Write a Zig function similar to isConnected from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"fn isConnected(self: @This(), neighbor: Neighbor) bool {\n\t\treturn (self.enabledConnections & Neighbor.bitMask(neighbor)) != 0;\n\t}"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">comptime</span> {\n    <span class=\"tok-kw\">const</span> float: <span class=\"tok-type\">f32</span> = <span class=\"tok-number\">4294967296</span>;\n    <span class=\"tok-kw\">const</span> int: <span class=\"tok-type\">i32</span> = <span class=\"tok-builtin\">@intFromFloat</span>(float);\n    _ = int;\n}"}
{"instruction":"Write a Zig function similar to getRegIndexAssumeFree from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"fn getRegIndexAssumeFree(\n            self: *Self,\n            tracked_index: TrackedIndex,\n            inst: ?Inst,\n        ) void {\n            log.debug(\"getRegAssumeFree {}"}
{"instruction":"Write a Zig function similar to handleInputMethodGrabKeyboardDestroy from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputRelay.zig","output":"fn handleInputMethodGrabKeyboardDestroy(\n    listener: *wl.Listener(*wlr.InputMethodV2.KeyboardGrab),\n    keyboard_grab: *wlr.InputMethodV2.KeyboardGrab,\n) void {\n    const relay: *InputRelay = @fieldParentPtr(\"grab_keyboard_destroy\", listener);\n    relay.grab_keyboard_destroy.link.remove();\n\n    if (keyboard_grab.keyboard) |keyboard| {\n        keyboard_grab.input_method.seat.keyboardNotifyModifiers(&keyboard.modifiers);\n    }"}
{"instruction":"Write a Zig function similar to IndexedSmallToLarge from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/PixelFormatConverter.zig","output":"fn IndexedSmallToLarge(comptime source_format: PixelFormat, comptime destination_format: PixelFormat) type {\n    return struct {\n        pub fn convert(source: *const color.PixelStorage, destination: *color.PixelStorage) void {\n            const source_indexed = @field(source, getFieldNameFromPixelFormat(source_format));\n            var destination_indexed = @field(destination, getFieldNameFromPixelFormat(destination_format));\n\n            for (0..source_indexed.palette.len) |index| {\n                destination_indexed.palette[index] = source_indexed.palette[index];\n            }"}
{"instruction":"Write a Zig function similar to tableInitPair from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn tableInitPair(vm: *cy.VM) anyerror!Value {\n    const table = vm.getValue(0).asHeapObject();\n    try table.table.set(vm, vm.getValue(1), vm.getValue(2));\n    return Value.Void;\n}"}
{"instruction":"Write a Zig function similar to getaddrinfo from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn getaddrinfo(\n        name: [*:0]const u8,\n        port: [*:0]const u8,\n        hints: *const posix.addrinfo,\n        result: *?*posix.addrinfo,\n    ) GetAddrInfoError!void {\n        const rc = funcs.getaddrinfo(name, port, hints, @ptrCast(result));\n        if (rc != 0)\n            return switch (ws2_32.WSAGetLastError()) {\n                .WSATRY_AGAIN => error.TemporaryNameServerFailure,\n                .WSAEINVAL => unreachable,\n                .WSANO_RECOVERY => error.NameServerFailure,\n                .WSAEAFNOSUPPORT => error.AddressFamilyNotSupported,\n                .WSA_NOT_ENOUGH_MEMORY => error.OutOfMemory,\n                .WSAHOST_NOT_FOUND => error.UnknownHostName,\n                .WSATYPE_NOT_FOUND => error.ServiceUnavailable,\n                .WSAESOCKTNOSUPPORT => unreachable,\n                else => |err| return unexpectedWSAError(err),\n            }"}
{"instruction":"Write a Zig struct similar to nodiscard from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const nodiscard = struct {}"}
{"instruction":"Write a Zig function similar to generateMap from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateMap(self: *Self, node: Ast.Node.Index) Error!?m.MIR_op_t {\n    const components = self.state.?.ast.nodes.items(.components)[node].Map;\n    const type_def = self.state.?.ast.nodes.items(.type_def)[node];\n\n    const new_map = m.MIR_new_reg_op(\n        self.ctx,\n        try self.REG(\"new_map\", m.MIR_T_I64),\n    );\n\n    try self.buildExternApiCall(\n        .bz_newMap,\n        new_map,\n        &[_]m.MIR_op_t{\n            m.MIR_new_reg_op(self.ctx, self.state.?.vm_reg.?),\n            m.MIR_new_uint_op(self.ctx, @constCast(type_def.?).toValue().val),\n        }"}
{"instruction":"Write a Zig function similar to sign from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn sign(vm: *cy.VM) Value {\n    return Value.initF64(std.math.sign(vm.getFloat(0)));\n}"}
{"instruction":"Write a Zig function similar to len from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn len(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const list = o.ObjList.cast(ctx.vm.peek(0).obj()).?;\n\n    ctx.vm.push(v.Value.fromInteger(@as(v.Integer, @intCast(list.items.items.len))));\n\n    return 1;\n}"}
{"instruction":"Write a Zig struct similar to RenderVariableParams from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"const RenderVariableParams = struct {\n            scratch: Allocator,\n            encoder: encoding.Encoding,\n            cu: *const types.CompileUnit,\n            pid: types.PID,\n            registers: *const arch.Registers,\n            load_addr: types.Address,\n            frame_base: types.Address,\n            func_frame_base: String,\n            variable: types.Variable,\n            expression: String,\n\n            /// This may be populated if we already know the bytes that represent this\n            /// variable (i.e. we're rendering an item in a slice). If it's not populated,\n            /// it follows the OS-specific mechanism to look up variable values.\n            variable_value_buf: ?[]const u8 = null,\n        }"}
{"instruction":"Write a Zig function similar to OP_NEGATE_I from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_NEGATE_I(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_NEGATE_I);\n}"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn decode(decoder: *Decoder) Decoder.Error!@This() {\n            const consumer_tag = try decoder.read_short_string();\n\n            return .{\n                .consumer_tag = consumer_tag,\n            }"}
{"instruction":"Write a Zig function similar to receive from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn receive(self_: @This(), response: tp.message) !void {\n            var link: []const u8 = undefined;\n            var locations: []const u8 = undefined;\n            if (try cbor.match(response.buf, .{ \"child\", tp.string, \"result\", tp.array }"}
{"instruction":"Write a Zig function similar to asZigCode from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn asZigCode(value: anytype) ZigCodeFormatter(@TypeOf(value)) {\n    return .{ .value = value }"}
{"instruction":"Write a Zig const similar to left_control from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const left_control: u21 = 57442;"}
{"instruction":"Write a Zig function similar to receive from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/EventHandler.zig","output":"pub fn receive(ctx: *anyopaque, from_: tp.pid_ref, m: tp.message) tp.result {\n                    return @call(.auto, f, .{ @as(*child, @ptrCast(@alignCast(ctx))), from_, m }"}
{"instruction":"Write a Zig const similar to empty_bol_leaf from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const empty_bol_leaf: Node = .{ .leaf = .{ .buf = \"\", .bol = true, .eol = false } };"}
{"instruction":"Write a Zig function similar to start from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub fn start(d: *Debouncer) !void {\n        const t = try std.Thread.spawn(.{}"}
{"instruction":"Write a Zig function similar to baseReg from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"fn baseReg(self: Sib, modrm: ModRm, prefixes: Prefixes) ?Register {\n        if (self.base == 0b101 and modrm.mod == 0) {\n            if (self.scaleIndex(prefixes.rex)) |_| return null;\n            return segmentRegister(prefixes.legacy);\n        }"}
{"instruction":"Write a Zig function similar to iterator from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn iterator(self: Table) Iterator {\n            return .{\n                .decoder = Decoder.init(self.slice()),\n            }"}
{"instruction":"Write a Zig struct similar to package_data from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: deps.zig","output":"pub const package_data = struct {\n    pub var _o6ogpor87xc2 = Package{\n        .store = \"/git/github.com/marlersoft/zigwin32/d21b419d808215e1f82605fdaddc49750bfa3bca\",\n        .name = \"win32\",\n        .entry = \"/git/github.com/marlersoft/zigwin32/d21b419d808215e1f82605fdaddc49750bfa3bca/win32.zig\",\n    }"}
{"instruction":"Write a Zig function similar to resolveFieldAccess from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveFieldAccess(analyser: *Analyser, lhs: Type, field_name: []const u8) !?Type {\n    const binding = try analyser.resolveFieldAccessBinding(.{ .type = lhs, .is_const = false }"}
{"instruction":"Write a Zig struct similar to features from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"pub const features = struct {\n            \\\\\n        );\n        for (self.registry.features) |feature| {\n            try self.writer.writeAll(\"pub const \");\n            try self.writeIdentifierWithCase(.snake, trimVkNamespace(feature.name));\n            try self.writer.writeAll(\"= ApiInfo {\\n\");\n            try self.writer.print(\".name = \\\"{s}"}
{"instruction":"Write a Zig function similar to memeql from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn memeql(a: []const u8, b: []const u8) bool {\n    return a.len == b.len and c.memcmp(a.ptr, b.ptr, a.len) == 0;\n}"}
{"instruction":"Write a Zig function similar to run from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn run(self: webui, script_content: [:0]const u8) void {\n    c.webui_run(self.window_handle, script_content.ptr);\n}"}
{"instruction":"Write a Zig function similar to addToken from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"fn addToken(self: *Self, token: Token) !void {\n            self.tokens.add(token);\n            if (self.tokens.full()) try self.flushTokens(.none);\n        }"}
{"instruction":"Write a Zig struct similar to AttributeValueUnquotedState from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"const AttributeValueUnquotedState = struct {\n        tag: Token.Tag,\n        name: Span,\n        value_start: u32,\n    }"}
{"instruction":"Write a Zig const similar to BYTES_PER_PIXEL_24 from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/bmp.zig","output":"const BYTES_PER_PIXEL_24: u8 = 3;"}
{"instruction":"Write a Zig function similar to format from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn format(\n        inst: Instruction,\n        comptime unused_format_string: []const u8,\n        options: std.fmt.FormatOptions,\n        writer: anytype,\n    ) @TypeOf(writer).Error!void {\n        _ = unused_format_string;\n        _ = options;\n        if (inst.prefix != .none) try writer.print(\"{s}"}
{"instruction":"Write a Zig function similar to format from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub fn format(f: Formatter, out_stream: *Writer) !void {\n        try f.ast.printInterfaceAsHtml(f.html, f.path, out_stream);\n    }"}
{"instruction":"Write a Zig function similar to cb from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"fn cb(ud: ?*anyopaque) void {\n        const self: *Self = @ptrCast(@alignCast(ud));\n        libcoro.xresume(self.coro);\n    }"}
{"instruction":"Write a Zig function similar to replacable from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn replacable(self: Block) bool {\n\t\treturn _replacable[self.typ];\n\t}"}
{"instruction":"Write a Zig function similar to toRetained from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn toRetained(self: Cstr) Cstr {\n        switch (self.type) {\n            .simple => {\n                var res = self;\n                res.data.simple.retain = true;\n                return res;\n            }"}
{"instruction":"Write a Zig function similar to renderContainerDefaultField from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderContainerDefaultField(self: *Self, name: []const u8, container: reg.Container, field: reg.Container.Field) !void {\n        if (mem.eql(u8, field.name, \"sType\")) {\n            if (container.stype == null) {\n                return;\n            }"}
{"instruction":"Write Zig 0.14.1 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@FieldType</span>(<span class=\"tok-kw\">comptime</span> Type: <span class=\"tok-type\">type</span>, <span class=\"tok-kw\">comptime</span> field_name: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) <span class=\"tok-type\">type</span>"}
{"instruction":"Write a Zig function similar to lineDist from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Tree.zig","output":"pub fn lineDist(tree: Tree, a: Token.Index, b: Token.Index) u32 {\n    var count: u32 = 0;\n    const ids = tree.tokens.items(.id);\n    var i = a;\n    while (i < b) : (i += 1) {\n        count += @intFromBool(ids[i] == .nl);\n    }"}
{"instruction":"Write a Zig const similar to const_buf from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const const_buf: [N]u8 = hello.*;"}
{"instruction":"Write a Zig function similar to init from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn init() void {\n        if (_ctx != null) return;\n\n        cc.SSL_library_init();\n\n        const ctx = cc.SSL_CTX_new();\n        _ctx = ctx;\n\n        if (g.cert_verify) {\n            const src = @src();\n            if (g.ca_certs.is_null())\n                cc.SSL_CTX_load_sys_CA_certs(ctx) orelse {\n                    log.err(src, \"failed to load system CA certs, please provide --ca-certs\", .{}"}
{"instruction":"Write a Zig struct similar to ForIterStmt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const ForIterStmt = struct {\n    iterable: *Node align(8),\n    each: ?*Node,\n    count: ?*Node,\n    stmts: []const *Node,\n    pos: u32,\n}"}
{"instruction":"Write a Zig const similar to unset_state from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"const unset_state: State = .unset;"}
{"instruction":"Write a Zig function similar to registerDatabaseSteps from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: build.zig","output":"fn registerDatabaseSteps(b: *std.Build, exe_database: *std.Build.Step.Compile) void {\n    const commands = .{\n        .{ \"migrate\", \"Migrate your Jetzig app's database.\" }"}
{"instruction":"Write a Zig const similar to G_COEFF_VEC from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const G_COEFF_VEC: @Vector(SIMD_SIZE, u32) = @splat(G_COEFF);"}
{"instruction":"Write a Zig function similar to byteNot from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn byteNot(vm: *cy.VM) Value {\n    return Value.initByte(~vm.getByte(0));\n}"}
{"instruction":"Write a Zig function similar to moveTo from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn moveTo(file: *const OutputFile, _: string, rel_path: []const u8, dir: FileDescriptorType) !void {\n    try bun.sys.moveFileZ(file.value.move.dir, bun.sliceTo(&(try std.posix.toPosixPath(file.value.move.getPathname())), 0), dir, bun.sliceTo(&(try std.posix.toPosixPath(rel_path)), 0));\n}"}
{"instruction":"Write a Zig function similar to blue from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn blue(comptime message: []const u8) []const u8 {\n    return wrap(codes.blue, message);\n}"}
{"instruction":"Write a Zig function similar to parse from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/debug.zig","output":"pub fn parse(gpa: Allocator, args: []const []const u8) !Command {\n        var build_assets: std.StringArrayHashMapUnmanaged(BuildAsset) = .empty;\n        var drafts = false;\n        var ids = false;\n\n        const eql = std.mem.eql;\n        const startsWith = std.mem.startsWith;\n        var idx: usize = 0;\n        while (idx < args.len) : (idx += 1) {\n            const arg = args[idx];\n            if (eql(u8, arg, \"-h\") or eql(u8, arg, \"--help\")) {\n                fatal.msg(help_message, .{}"}
{"instruction":"Write a Zig function similar to Transfer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"fn Transfer(comptime direction: Direction) type {\n            return switch (direction) {\n                .read => struct {\n                    const Self = @This();\n\n                    state: SystemI2CController.ReadState,\n\n                    pub const Reader = std.io.Reader(*Self, ReadError, read_some);\n\n                    /// NOTE that some platforms, notably most (all?) STM32 microcontrollers,\n                    /// allow only a single read call per transfer.\n                    pub fn reader(self: *Self) Reader {\n                        return Reader{ .context = self }"}
{"instruction":"Write a Zig function similar to visit from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn visit(self: *Visitor, rootId: *Node,\n//         comptime C: type, ctx: C, visitFn: *const fn(ctx: C, nodeId: NodeId, enter: bool) bool) !void {\n\n//         self.stack.clearRetainingCapacity();\n//         try self.pushNode(rootId);\n//         while (self.stack.items.len > 0) {\n//             const vnode = &self.stack.items[self.stack.items.len-1];\n//             if (!vnode.visited) {\n//                 if (visitFn(ctx, vnode.nodeId, true)) {\n//                     vnode.visited = true;\n//                     const node = self.ast.node(vnode.nodeId);\n//                     switch (node.type()) {\n//                         .objectField => {}"}
{"instruction":"Write a Zig function similar to fmtDebug from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn fmtDebug(index: Index, ip: *InternPool) std.fmt.Alt(FormatContext, format) {\n        return fmtOptions(index, ip, .{ .debug = true }"}
{"instruction":"Write a Zig const similar to cex from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"const cex: usize = 2;"}
{"instruction":"Write a Zig function similar to fopen from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn fopen(path: ConstStr, mode: ConstStr) ?*FILE;\n\n/// flush(file) and close(fd)\npub extern fn fclose(file: *FILE) c_int;\n\n/// return the number of bytes written \\\n/// `res < data.len` means write error\npub inline fn fwrite(file: *FILE, data: []const u8) usize {\n    const raw = struct {\n        extern fn fwrite(ptr: [*]const u8, size: usize, nitems: usize, file: *FILE) usize;\n    }"}
{"instruction":"Write a Zig function similar to renderSlice from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/C3.zig","output":"fn renderSlice(params: *const encoding.Params) encoding.EncodeVariableError!encoding.RenderSliceResult {\n    return encoding.renderSlice(\"ptr\", \"len\", params);\n}"}
{"instruction":"Write a Zig function similar to get_name from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub fn get_name(id: ID) ?[]const u8 {\n    if (tp.env.get().enabled(tp.channel.debug)) {\n        if (id >= commands.items.len)\n            tp.trace(tp.channel.debug, .{ \"command\", \"get_name\", \"too large\", id }"}
{"instruction":"Write a Zig function similar to dumpInst from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn dumpInst(vm: *cy.VM, pcOffset: u32, code: OpCode, pc: [*]const Inst, opts: DumpInstOptions) !void {\n    const w = vm.clearTempString();\n    var len: u64 = undefined;\n    if (opts.prefix) |prefix| {\n        len = try fmt.printCount(w, \"{}"}
{"instruction":"Write a Zig const similar to pid from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const pid: i32 = @intCast(pid_result);"}
{"instruction":"Write a Zig function similar to from_int from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn from_int(v: c_int) TestIpResult {\n        return @intToEnum(TestIpResult, v);\n    }"}
{"instruction":"Write a Zig function similar to echo from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn echo(h: *TestHandlerDefaultDispatch, req: *Request, res: *Response) !void {\n        return res.json(.{\n            .state = h.state,\n            .method = @tagName(req.method),\n            .path = req.url.path,\n        }"}
{"instruction":"Write a Zig function similar to generateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig","output":"pub fn generateData(_: *main.game.World, _: Vec3i, relativePlayerPos: Vec3f, playerDir: Vec3f, relativeDir: Vec3i, _: ?Neighbor, currentData: *Block, neighbor: Block, _: bool) bool {\n\tif(neighbor.mode() == currentData.mode()) parallelPlacing: {\n\t\tconst bit = closestRay(.bit, neighbor, null, relativePlayerPos - @as(Vec3f, @floatFromInt(relativeDir)), playerDir);\n\t\tconst bitData: CarpetData = @bitCast(@as(u6, @truncate(bit)));\n\t\tif((bitData.negX or bitData.posX) and relativeDir[0] != 0) break :parallelPlacing;\n\t\tif((bitData.negY or bitData.posY) and relativeDir[1] != 0) break :parallelPlacing;\n\t\tif((bitData.negZ or bitData.posZ) and relativeDir[2] != 0) break :parallelPlacing;\n\t\tif(currentData.data & bit == bit) return false;\n\t\tcurrentData.data |= bit;\n\t\treturn true;\n\t}"}
{"instruction":"Write a Zig function similar to must from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn must(vm: *cy.VM) anyerror!Value {\n    const val = vm.getValue(0);\n    if (!val.isError()) {\n        vm.retain(val);\n        return val;\n    }"}
{"instruction":"Write a Zig struct similar to TestingBasicProperties from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub const TestingBasicProperties = struct {\n    pub fn random(options: struct {\n        arena: std.mem.Allocator,\n        prng: *stdx.PRNG,\n        default: Encoder.BasicProperties = .{}"}
{"instruction":"Write a Zig function similar to wait from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"pub fn wait(self: *Condition) void {\n        var cr = CoroResume.init();\n        var cb = cr.func();\n        self.waiters.push(&cb);\n        libcoro.xsuspend();\n    }"}
{"instruction":"Write a Zig function similar to init from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/libdom.zig","output":"fn init(allocator: Allocator) MatcherTest {\n        return .{\n            .nodes = .empty,\n            .allocator = allocator,\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@embedFile</span>(<span class=\"tok-kw\">comptime</span> path: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) *<span class=\"tok-kw\">const</span> [N:<span class=\"tok-number\">0</span>]<span class=\"tok-type\">u8</span>"}
{"instruction":"Write a Zig const similar to TSS_INDEX from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/gdt.zig","output":"const TSS_INDEX: u16 = 0x05;"}
{"instruction":"Write a Zig function similar to addCommand from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"fn addCommand(cmd: *Vtable) !ID {\n    try commands.append(command_table_allocator, cmd);\n    return commands.items.len - 1;\n}"}
{"instruction":"Write a Zig function similar to firstChild from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/libdom.zig","output":"pub fn firstChild(n: Node) ?Node {\n        const c = parser.nodeFirstChild(n.node);\n        if (c) |cc| return .{ .node = cc }"}
{"instruction":"Write a Zig function similar to renderApiConstant from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderApiConstant(self: *Self, api_constant: reg.ApiConstant) !void {\n        try self.writer.writeAll(\"pub const \");\n        try self.renderName(api_constant.name);\n        try self.writer.writeAll(\" = \");\n\n        switch (api_constant.value) {\n            .expr => |expr| try self.renderApiConstantExpr(expr),\n            inline .version, .video_std_version => |version, kind| {\n                try self.writer.writeAll(\"makeApiVersion(\");\n                // For Vulkan Video, just re-use the API version and set the variant to 0.\n                if (kind == .video_std_version) {\n                    try self.writer.writeAll(\"0, \");\n                }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@hasDecl</span>(<span class=\"tok-kw\">comptime</span> Container: <span class=\"tok-type\">type</span>, <span class=\"tok-kw\">comptime</span> name: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) <span class=\"tok-type\">bool</span>"}
{"instruction":"Write a Zig function similar to pushDeclaration from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn pushDeclaration(\n            pushed: PushedScope,\n            identifier_token: Ast.TokenIndex,\n            declaration: Declaration,\n            kind: DeclarationLookup.Kind,\n        ) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to flush from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"fn flush(w: *std.Io.Writer) std.Io.Writer.Error!void {\n            const self: *Self = @alignCast(@fieldParentPtr(\"writer\", w));\n\n            try w.defaultFlush();\n\n            self.finish() catch return std.Io.Writer.Error.WriteFailed;\n        }"}
{"instruction":"Write a Zig const similar to cursor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const cursor: *Cursor = @fieldParentPtr(\"frame\", listener);"}
{"instruction":"Write a Zig function similar to CommandFlagsMixin from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"pub fn CommandFlagsMixin(comptime CommandFlags: type) type {\n    \\\\    return struct {\n    \\\\        pub fn merge(lhs: CommandFlags, rhs: CommandFlags) CommandFlags {\n    \\\\            var result: CommandFlags = .{}"}
{"instruction":"Write a Zig const similar to cmd from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/init.zig","output":"const cmd: Command = .parse(args);"}
{"instruction":"Write a Zig function similar to append from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/String.zig","output":"pub fn append(str: Value.This(*String), ctx: Vm.Context, strs: Value.Variadic([]const u8)) !void {\n        var b = builder(ctx.vm.gc.gpa);\n        errdefer b.cancel();\n\n        var len = str.t.data.len;\n        for (strs.t) |new| len += new.len;\n        try b.inner.ensureUnusedCapacity(len);\n\n        b.inner.appendSliceAssumeCapacity(str.t.data);\n        for (strs.t) |new| b.inner.appendSliceAssumeCapacity(new);\n\n        str.t.deinit(ctx.vm.gc.gpa);\n        str.t.* = b.finish();\n    }"}
{"instruction":"Write a Zig function similar to findExtVersion from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn findExtVersion(extension: *xml.Element) !registry.Extension.Version {\n    var req_it = extension.findChildrenByTag(\"require\");\n    while (req_it.next()) |req| {\n        var enum_it = req.findChildrenByTag(\"enum\");\n        while (enum_it.next()) |e| {\n            const name = e.getAttribute(\"name\") orelse continue;\n            const value = e.getAttribute(\"value\") orelse continue;\n            if (mem.endsWith(u8, name, \"_SPEC_VERSION\")) {\n                // Vulkan Video extensions are sometimes aliases.\n                // If we fail to parse it as integer, just assume that its an alias and return that.\n                const version = std.fmt.parseInt(u32, value, 10) catch return .{ .alias = value }"}
{"instruction":"Write a Zig function similar to renderSlice from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/C.zig","output":"fn renderSlice(_: *const encoding.Params) encoding.EncodeVariableError!encoding.RenderSliceResult {\n    unreachable;\n}"}
{"instruction":"Write a Zig function similar to log_and_reset from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn log_and_reset(metrics: *Metrics) void {\n        const Fields = enum { producer, consumer }"}
{"instruction":"Write Zig 0.13.0 code for: Optionals §","input":"One area that Zig provides safety without compromising efficiency or readability is with the optional type. The question mark symbolizes the optional type. You can convert a type to an optional type by putting a question mark in front of it, like this: optional_integer.zig Now the variable optional_int could be an i32 , or null . Instead of integers, let's talk about pointers. Null references are the source of many runtime exceptions, and even stand accused of being the worst mistake of computer","output":"// malloc prototype included for reference\nvoid *malloc(size_t size);\n\nstruct Foo *do_a_thing(void) {\n    char *ptr = malloc(1234);\n    if (!ptr) return NULL;\n    // ...\n}"}
{"instruction":"Write a Zig function similar to question_len from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn question_len(qnamelen: c_int) u16 {\n    return c.dns_question_len(qnamelen);\n}"}
{"instruction":"Write a Zig function similar to ev_add from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"fn ev_add(self: *EvLoop, fdobj: *const Fd, events: u32) bool {\n    var ev = Ev.V.init(events, fdobj);\n    return self.ev_ctl(c.EPOLL_CTL_ADD, fdobj.fd, ev.ptr());\n}"}
{"instruction":"Write a Zig struct similar to Text from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Event.zig","output":"pub const Text = struct {\n    txt: []u8,\n    selected: bool = false,\n    replace: bool = false,\n}"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn decode(decoder: *Decoder) Decoder.Error!@This() {\n            const reserved_1 = try decoder.read_long_string();\n\n            return .{\n                .reserved_1 = reserved_1,\n            }"}
{"instruction":"Write a Zig const similar to uvm from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"const uvm: *UserVM = @ptrCast(@alignCast(obj));"}
{"instruction":"Write a Zig struct similar to Encoder from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub const Encoder = struct {\n    pub const FrameHeader = struct {\n        /// Total size in bytes including the `size` field.\n        pub const size_total = @sizeOf(@FieldType(Decoder.FrameHeader, \"type\")) +\n            @sizeOf(@FieldType(Decoder.FrameHeader, \"channel\")) +\n            @sizeOf(@FieldType(Decoder.FrameHeader, \"size\"));\n\n        type: FrameType,\n        channel: Channel,\n    }"}
{"instruction":"Write a Zig function similar to configureStep from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn configureStep(\n    sdk: *const Sdk,\n    exe: *std.Build.Step.Compile,\n    app_config: AppConfig,\n    target: Target,\n) void {\n    const ndk_root = sdk.b.pathFromRoot(sdk.folders.android_ndk_root);\n\n    const config = target.getTargetConfig();\n    const lib_dir = sdk.b.fmt(\"{s}"}
{"instruction":"Write a Zig function similar to genLval from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"fn genLval(c: *CodeGen, node_index: Node.Index) Error!Ir.Ref {\n    assert(c.tree.isLval(node_index));\n    const node = node_index.get(c.tree);\n    switch (node) {\n        .string_literal_expr => {\n            const val = c.tree.value_map.get(node_index).?;\n            return c.builder.addConstant(val.ref(), .ptr);\n        }"}
{"instruction":"Write a Zig struct similar to EndpointList from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub const EndpointList = struct {\n    arena: std.heap.ArenaAllocator,\n    endpoints: []EndPoint,\n    canon_name: ?[]u8,\n\n    pub fn deinit(self: *EndpointList) void {\n        var arena = self.arena;\n        arena.deinit();\n    }"}
{"instruction":"Write a Zig function similar to setFrameless from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setFrameless(self: webui, status: bool) void {\n    c.webui_set_frameless(self.window_handle, status);\n}"}
{"instruction":"Write a Zig const similar to scale from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"const scale: u2 = @as(u2, @truncate(sib_byte >> 6));"}
{"instruction":"Write a Zig function similar to init from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/interrupt.zig","output":"pub fn init() void {\n    // Make interrupt descriptor table (IDT)\n    // It should be calculated at comptime, but cannot due to the Zig compiler\n    idt = init: {\n        var initial_value: [256]InterruptDescriptor = undefined;\n        var int_handler_pointer: usize = @intFromPtr(&interrupt_handlers);\n        for (&initial_value) |*pt| {\n            pt.* = InterruptDescriptor.new(false, SEG_KCODE << 3, int_handler_pointer, 0);\n            int_handler_pointer += 16;\n        }"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig","output":"pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@min(block.data, 5));\n}"}
{"instruction":"Write a Zig function similar to push from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"fn push(noalias self: *Buffer, noalias list: *List) error{Overflow}"}
{"instruction":"Write a Zig function similar to __P from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __P(args: anytype) @TypeOf(args) {\n    _ = &args;\n    return args;\n}"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@atomicRmw</span>(<span class=\"tok-kw\">comptime</span> T: <span class=\"tok-type\">type</span>, ptr: *T, <span class=\"tok-kw\">comptime</span> op: AtomicRmwOp, operand: T, <span class=\"tok-kw\">comptime</span> ordering: AtomicOrder) T"}
{"instruction":"Write a Zig function similar to update_ttl from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn update_ttl(msg: []u8, qnamelen: c_int, ttl_change: i32) void {\n    return c.dns_update_ttl(msg.ptr, cc.to_isize(msg.len), qnamelen, ttl_change);\n}"}
{"instruction":"Write a Zig struct similar to no_sanitize_thread from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const no_sanitize_thread = struct {}"}
{"instruction":"Write a Zig function similar to write from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn write(self: File, buf: []const u8) !usize {\n        return self.inner.write(.{ .slice = buf }"}
{"instruction":"Write a Zig function similar to fetch from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/generate.zig","output":"pub fn fetch(exe: *std.Build.Step.Compile) *std.Build.Step {\n        \\\\    const b = exe.step.owner;\n        \\\\    const step = b.step(\"fetch\", \"\");\n        \\\\    inline for (comptime std.meta.declarations(package_data)) |decl| {\n        \\\\          const path = &@field(package_data, decl.name).entry;\n        \\\\          const root = if (@field(package_data, decl.name).store) |_| b.cache_root.path.? else \".\";\n        \\\\          if (path.* != null) path.* = b.fmt(\"{s}"}
{"instruction":"Write a Zig function similar to writefn from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn writefn(ctx: File, data: []const u8) std.Io.Writer.Error!usize {\n            const w_file = RWFile{\n                .file = ctx,\n                .buf = @constCast(data.ptr),\n                .buf_len = data.len,\n            }"}
{"instruction":"Write a Zig function similar to add from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"pub fn add(self: *Loop, c: *Completion) void {\n        c.flags.state = .adding;\n        self.submissions.push(c);\n    }"}
{"instruction":"Write a Zig function similar to listRemove from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn listRemove(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (index < 0 or index >= inner.len) {\n        return rt.prepThrowError(vm, .OutOfBounds);\n    }"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn setsockopt(fd: c_int, level: c_int, opt: c_int, optval: *const anyopaque, optlen: c.socklen_t) c_int;\n    }"}
{"instruction":"Write a Zig struct similar to Header from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub const Header = struct {\n        /// Total size in bytes including the `body_size` field.\n        pub const size_total = @sizeOf(@FieldType(Decoder.Header, \"class\")) +\n            @sizeOf(@FieldType(Decoder.Header, \"weight\")) +\n            @sizeOf(@FieldType(Decoder.Header, \"body_size\"));\n\n        class: u16,\n        weight: u16,\n    }"}
{"instruction":"Write a Zig function similar to serializeValues from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/console/console.zig","output":"fn serializeValues(values: []js.Object, page: *Page) ![]const u8 {\n        if (values.len == 0) {\n            return \"\";\n        }"}
{"instruction":"Write a Zig struct similar to Native from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"pub const Native = struct {\n    surface_descriptor: gpu.Surface.DescriptorFromWaylandSurface,\n    configured: bool = false,\n\n    display: *c.wl_display,\n    surface: *c.wl_surface,\n    toplevel: *c.xdg_toplevel,\n    interfaces: Interfaces,\n\n    // input stuff\n    keyboard: ?*c.wl_keyboard = null,\n    pointer: ?*c.wl_pointer = null,\n\n    // keyboard stuff\n    xkb_context: *c.xkb_context,\n    xkb_state: ?*c.xkb_state = null,\n    compose_state: ?*c.xkb_compose_state = null,\n    keymap: ?*c.xkb_keymap = null,\n    modifiers: Core.KeyMods,\n    modifier_indices: KeyModInd,\n}"}
{"instruction":"Write a Zig const similar to cursor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const cursor: *Cursor = @fieldParentPtr(\"motion_absolute\", listener);"}
{"instruction":"Write a Zig struct similar to Options from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/cli.zig","output":"pub const Options = struct {\n    help: bool = false,\n    environment: Environment = .development,\n\n    pub const shorthands = .{\n        .h = \"help\",\n        .e = \"environment\",\n    }"}
{"instruction":"Write a Zig function similar to interfaceGetStringAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn interfaceGetStringAt(self: webui, event_number: usize, index: usize) [:0]const u8 {\n    const ptr = c.webui_interface_get_string_at(self.window_handle, event_number, index);\n    // TODO: Error handling here.\n    const len = std.mem.len(ptr);\n    return ptr[0..len :0];\n}"}
{"instruction":"Write a Zig function similar to __pow__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __pow__(self: *const Self, other: *const Self) !*Self {\n        return py.init(root, Self, .{ .num_ = std.math.pow(u64, self.num_, other.num_) }"}
{"instruction":"Write a Zig function similar to encode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn encode(self: *const @This(), encoder: *Encoder) void {\n            encoder.write_int(u64, self.delivery_tag);\n            var bitset_1: stdx.BitSetType(8) = .{}"}
{"instruction":"Write a Zig struct similar to Timer from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub const Timer = struct {\n    timeout: ?u64 = null,\n\n    /// return true if the `deadline` has been reached,\n    /// false otherwise (and update the timer state).\n    pub fn check_deadline(self: *Timer, deadline: u64) bool {\n        if (g.evloop.time >= deadline) {\n            return true;\n        }"}
{"instruction":"Write a Zig struct similar to ModernBertEmbeddings from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertEmbeddings = struct {\n    tok_embeddings: zml.nn.TokenEmbedding,\n    norm: zml.nn.LayerNorm,\n\n    pub fn forward(self: ModernBertEmbeddings, input_ids: Tensor) Tensor {\n        // Perform tok_embeddings\n        const hidden_states = zml.call(self.tok_embeddings, .forward, .{input_ids}"}
{"instruction":"Write a Zig const similar to media_track_next from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const media_track_next: u21 = 57435;"}
{"instruction":"Write a Zig function similar to ascii_to_wire from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn ascii_to_wire(ascii_name: []const u8, p_buf: *[c.DNS_NAME_WIRE_MAXLEN]u8, p_level: ?*u8) ?[]u8 {\n    const len = c.dns_ascii_to_wire(ascii_name.ptr, ascii_name.len, p_buf, p_level);\n    return if (len > 0) p_buf[0..len] else null;\n}"}
{"instruction":"Write a Zig function similar to main from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/main.zig","output":"pub fn main() !void {\n    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n\n    var args = std.process.argsWithAllocator(allocator) catch |err| switch (err) {\n        error.OutOfMemory => oomPanic(),\n    }"}
{"instruction":"Write a Zig function similar to finish from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"pub fn finish(self: *Self) !void {\n            try self.tokenize(.final);\n            try container.writeFooter(&self.hasher, self.source_writer);\n        }"}
{"instruction":"Write a Zig function similar to nextCharsAreIgnoreCase from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"fn nextCharsAreIgnoreCase(self: Tokenizer, needle: []const u8, src: []const u8) bool {\n    return std.ascii.startsWithIgnoreCase(src[self.idx..], needle);\n}"}
{"instruction":"Write a Zig function similar to StyleDeclaration from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"pub fn StyleDeclaration(comptime Property: type, comptime Shorthand: type) type {\n    return struct {\n        properties: std.ArrayList(Property),\n\n        const Self = @This();\n\n        /// Init a new instance.\n        pub fn init(allocator: std.mem.Allocator) Self {\n            return .{\n                .properties = std.ArrayList(Property).init(allocator),\n            }"}
{"instruction":"Write a Zig function similar to move_right from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn move_right(self: *Self, root: Buffer.Root, metrics: Metrics) !void {\n    try self.move_right_no_target(root, metrics);\n    self.target = self.col;\n}"}
{"instruction":"Write a Zig const similar to categories from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/elements/a.zig","output":"const categories: Categories = .{\n        .flow = true,\n        .phrasing = true,\n        .interactive = has_href,\n    };"}
{"instruction":"Write a Zig function similar to deinit from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"pub fn deinit(pool: *Pool, allocator: Allocator) void {\n            pool.bytes.deinit(allocator);\n            pool.map.deinit(allocator);\n            if (builtin.mode == .Debug and !builtin.single_threaded and config.thread_safe) {\n                // detect deadlock when calling deinit while holding the lock\n                pool.mutex.lock();\n                pool.mutex.unlock();\n            }"}
{"instruction":"Write a Zig function similar to current from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn current(self: *ThreadState) Frame {\n        return self.current_coro orelse &self.root_coro;\n    }"}
{"instruction":"Write a Zig function similar to rt_init from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/rtc.zig","output":"fn rt_init() void {\n    var irq_exists = false;\n    irq.registerIrq(pic.IRQ_REAL_TIME_CLOCK, rtcHandler) catch |err| switch (err) {\n        error.IrqExists => {\n            // We should get this error\n            irq_exists = true;\n        }"}
{"instruction":"Explain switch § in Zig 0.13.0","input":"","output":"test_switch.zig Shell switch can be used to capture the field values of a Tagged union . Modifications to the field values can be done by placing a * before the capture variable name, turning it into a pointer. test_switch_tagged_union.zig Shell See also: comptime enum @compileError Compile Variables Exhaustive Switching § When a switch expression does not have an else clause, it must exhaustively list all the possible values. Failure to do so is a compile error: test_unhandled_enumeration_value.zig Shell Switching with Enum Literals § Enum Literals can be useful to use with switch to avoid repetitively specifying enum or union types: test_exhaustive_switch.zig Shell Inline Switch Prongs § Switch prongs can be marked as inline to generate the prong's body for each possible value it could have, making the captured value comptime . test_inline_switch.zig Shell The inline keyword may also be combined with ranges: inline_prong_range.zig inline else prongs can be used as a type safe alterna"}
{"instruction":"Write a Zig function similar to reset from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn reset(self: *Iterator) void {\n                self.decoder.reset();\n            }"}
{"instruction":"Write a Zig struct similar to Brush from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Brushes.zig","output":"pub const Brush = struct {\n    name: []const u8,\n    source: dvui.ImageSource,\n    origin: dvui.Point,\n}"}
{"instruction":"Write a Zig struct similar to Timer from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"const Timer = struct {\n        /// The absolute time to fire this timer next.\n        next: std.os.linux.timespec,\n\n        /// Only used internally. If this is non-null and timer is\n        /// CANCELLED, then the timer is rearmed automatically with this\n        /// as the next time. The callback will not be called on the\n        /// cancellation.\n        reset: ?std.os.linux.timespec = null,\n\n        /// Internal heap fields.\n        heap: heap.IntrusiveField(Timer) = .{}"}
{"instruction":"Write a Zig function similar to createBuildOptions from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"fn createBuildOptions(b: *std.Build, opts: Options) !*std.Build.Module {\n    const buildTag = std.process.getEnvVarOwned(b.allocator, \"BUILD\") catch |err| b: {\n        if (err == error.EnvironmentVariableNotFound) {\n            break :b \"0\";\n        }"}
{"instruction":"Write a Zig function similar to cellSize from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Image.zig","output":"pub fn cellSize(self: Image, win: Window) !CellSize {\n    // cell geometry\n    const x_pix = win.screen.width_pix;\n    const y_pix = win.screen.height_pix;\n    const w = win.screen.width;\n    const h = win.screen.height;\n\n    const pix_per_col = try std.math.divCeil(u16, x_pix, w);\n    const pix_per_row = try std.math.divCeil(u16, y_pix, h);\n\n    const cell_width = std.math.divCeil(u16, self.width, pix_per_col) catch 0;\n    const cell_height = std.math.divCeil(u16, self.height, pix_per_row) catch 0;\n    return .{\n        .rows = cell_height,\n        .cols = cell_width,\n    }"}
{"instruction":"Write a Zig function similar to white from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn white(comptime message: []const u8) []const u8 {\n    return wrap(codes.white, message);\n}"}
{"instruction":"Write a Zig struct similar to Fields from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"pub const Fields = struct {\n    pub const len =\n        \\\\The length of the array.\n    ;\n    pub const empty =\n        \\\\True when len is 0.\n    ;\n}"}
{"instruction":"Write a Zig function similar to access from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn access(path: []const u8, flags: std.fs.File.OpenFlags) !void {\n        return try callBlocking(std.fs.Dir.access, .{ std.fs.cwd(), path, flags }"}
{"instruction":"Write a Zig function similar to OP_INSTANCE_TAIL_INVOKE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_INSTANCE_TAIL_INVOKE(self: *Self, location: Ast.TokenIndex, field_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_INSTANCE_TAIL_INVOKE,\n        field_idx,\n    );\n}"}
{"instruction":"Write a Zig function similar to requiredArgCount from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub fn requiredArgCount(attr: Tag) u32 {\n    switch (attr) {\n        inline else => |tag| {\n            comptime var needed = 0;\n            comptime {\n                const fields = @typeInfo(@field(attributes, @tagName(tag))).@\"struct\".fields;\n                for (fields) |arg_field| {\n                    if (!mem.eql(u8, arg_field.name, \"__name_tok\") and @typeInfo(arg_field.type) != .optional) needed += 1;\n                }"}
{"instruction":"Write a Zig function similar to funcB from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigbacktrace/main.zig","output":"fn funcB() void {\n    funcC();\n    std.debug.print(\"funcB\\n\", .{}"}
{"instruction":"Write a Zig struct similar to Options from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub const Options = struct {\n    loader: Loader,\n    input_loader: Loader,\n    hash: ?u64 = null,\n    source_map_index: ?u32 = null,\n    bytecode_index: ?u32 = null,\n    output_path: string,\n    source_index: Index.Optional = .none,\n    size: ?usize = null,\n    input_path: []const u8 = \"\",\n    display_size: u32 = 0,\n    output_kind: jsc.API.BuildArtifact.OutputKind,\n    is_executable: bool,\n    data: union(enum) {\n        buffer: struct {\n            allocator: std.mem.Allocator,\n            data: []const u8,\n        }"}
{"instruction":"Write a Zig struct similar to State from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"const State = struct {\n    allocator: std.mem.Allocator,\n    tokenizer: Tokenizer,\n    src: []const u8,\n    reconsumed: ?Tokenizer.Token,\n    errors: std.ArrayListUnmanaged(Error),\n    rules: std.ArrayListUnmanaged(Rule),\n    selectors: std.ArrayListUnmanaged(Rule.Style.Selector),\n    declarations: std.ArrayListUnmanaged(Rule.Style.Declaration),\n    specifiers: std.ArrayListUnmanaged(Rule.Style.Selector.Simple.Specifier),\n    media_queries: std.ArrayListUnmanaged(Span),\n\n    fn consume(self: *State) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to captureOutput from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn captureOutput(self: *Self, reader: anytype) void {\n            trace.initThread();\n            defer trace.deinitThread();\n\n            const z = trace.zone(@src());\n            defer z.end();\n\n            defer self.data.state.shutdown_wg.finish();\n\n            while (true) {\n                var buf = [_]u8{0}"}
{"instruction":"Write a Zig function similar to hash from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn hash(ctx: @This(), a: Key) u32 {\n        _ = a;\n        return ctx.precomputed_hash;\n    }"}
{"instruction":"Write a Zig function similar to flushBuffer from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"fn flushBuffer(self: *Self, final: bool) !void {\n            const buf = self.buffer[0..self.wp];\n            switch (kind) {\n                .huffman => try self.block_writer.huffmanBlock(buf, final),\n                .store => try self.block_writer.storedBlock(buf, final),\n            }"}
{"instruction":"Write a Zig function similar to exportStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn exportStatement(self: *Self, docblock: ?Ast.TokenIndex) Error!Ast.Node.Index {\n    const node_slot = try self.ast.nodes.addOne(self.gc.allocator);\n    const start_location = self.current_token.? - 1;\n\n    if (self.namespace == null) {\n        const location = self.ast.tokens.get(self.current_token.? - 1);\n        self.reporter.reportErrorAt(\n            .syntax,\n            location,\n            location,\n            \"A exporting script must provide a namespace\",\n        );\n    }"}
{"instruction":"Write a Zig const similar to new_zig_exe_path from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const new_zig_exe_path: bool = result.did_change.zig_exe_path;"}
{"instruction":"Write a Zig function similar to applyOverrides from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"fn applyOverrides(self: *Options) void {\n        if (optMalloc) |malloc| {\n            self.malloc = malloc;\n        }"}
{"instruction":"Write a Zig function similar to get from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig","output":"pub fn get(as: AttributeSet, name: []const u8) ?Attribute {\n        return as.list[as.map.get(name) orelse return null].model;\n    }"}
{"instruction":"Write a Zig function similar to runcoro from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn runcoro(from: *base.Coro, this: *base.Coro) callconv(.c) noreturn {\n        const from_coro: *Coro = @fieldParentPtr(\"impl\", from);\n        const this_coro: *Coro = @fieldParentPtr(\"impl\", this);\n        log(.debug, \"coro start {f}"}
{"instruction":"Write a Zig function similar to genField from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genField(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .field);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n\n    const rec_t = c.ir.getExprType(data.rec).id;\n    const rec_te = c.sema.getType(rec_t);\n    const rec_is_pointer = c.sema.isPointerType(rec_t);\n    const willRetain = c.sema.isRcCandidateType(ret_t);\n    if (rec_te.kind == .struct_t or rec_is_pointer) {\n        const addrv = try genAddressOf2(c, idx, Cstr.simple, node);\n        try initTempValue(c, addrv, node);\n\n        const ret_te = c.sema.getType(ret_t);\n        if (ret_te.kind == .struct_t) {\n            const numFields: u8 = @intCast(c.sema.types.items[ret_t].data.struct_t.nfields);\n            const start = c.buf.ops.items.len;\n            try c.pushCode(.deref_struct, &.{ addrv.reg, 0, 0, numFields, inst.dst }"}
{"instruction":"Write a Zig function similar to getPattern from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig","output":"fn getPattern(data: LogData, side: Neighbor) Pattern {\n\tif(data.isConnected(side)) {\n\t\treturn .cut;\n\t}"}
{"instruction":"Write a Zig function similar to init from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn init(loop: *xev.Loop) Executor {\n        return .{ .loop = loop }"}
{"instruction":"Write a Zig function similar to json from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/01_basic.zig","output":"fn json(req: *httpz.Request, res: *httpz.Response) !void {\n    const name = req.param(\"name\").?;\n\n    // the last parameter to res.json is an std.json.StringifyOptions\n    try res.json(.{ .hello = name }"}
{"instruction":"Write a Zig const similar to ty from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const ty: Type = .{ .data = .{ .type_parameter = token_handle }, .is_type_val = true };"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@atomicStore</span>(<span class=\"tok-kw\">comptime</span> T: <span class=\"tok-type\">type</span>, ptr: *T, value: T, <span class=\"tok-kw\">comptime</span> ordering: AtomicOrder) <span class=\"tok-type\">void</span>"}
{"instruction":"Write a Zig const similar to global from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"const global: *Global = &self.globals.items[i];"}
{"instruction":"Write a Zig function similar to resetSubordinateState from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn resetSubordinateState(self: *Self) void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            self.adapter.reset();\n\n            if (self.data.subordinate == null) return;\n            var sub = self.data.subordinate.?;\n\n            sub.child.extremeKillPosix() catch {}"}
{"instruction":"Write a Zig const similar to COUNTER_2_REGISTER from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const COUNTER_2_REGISTER: u16 = 0x42;"}
{"instruction":"Write a Zig struct similar to Builtins from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Asset.zig","output":"pub const Builtins = struct {\n    pub const link = struct {\n        pub const signature: Signature = .{ .ret = .String }"}
{"instruction":"Write a Zig function similar to count from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn count(self: Self) usize {\n            return self.len;\n        }"}
{"instruction":"Write a Zig function similar to add from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn add(self: *Self, comptime T: type, name: []const u8, value: T) void {\n        const out = self.file_content.writer();\n        switch (T) {\n            []const []const u8 => {\n                out.print(\"pub const {}"}
{"instruction":"Write a Zig struct similar to Tag from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub const Tag = struct {\n        span: Span,\n        name: Span,\n        attr_count: u32 = 0,\n        kind: enum {\n            start,\n            start_self,\n            end,\n            end_self,\n        }"}
{"instruction":"Write a Zig struct similar to Outline from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/parser.zig","output":"const Outline = struct { width: f32 = 3, style: enum { none, solid }"}
{"instruction":"Write a Zig function similar to parseNextArg from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/streaming.zig","output":"fn parseNextArg(parser: *@This()) !?ArgInfo {\n            const full_arg = parser.iter.next() orelse return null;\n            if (std.mem.eql(u8, full_arg, \"--\") or std.mem.eql(u8, full_arg, \"-\"))\n                return ArgInfo{ .arg = full_arg, .kind = .positional }"}
{"instruction":"Write a Zig const similar to outputs from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"const outputs: Tensor = zml.call(self.model, .forward, .{input_ids});"}
{"instruction":"Write a Zig const similar to f10 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f10: u21 = 57373;"}
{"instruction":"Write a Zig function similar to slice from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"pub fn slice(self: Image) []u32 {\n        return self.data[0..self.len];\n    }"}
{"instruction":"Write a Zig function similar to sizeof from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn sizeof(vm: *cy.VM) Value {\n    const type_id: cy.TypeId = @intCast(vm.getInt(0));\n    const type_e = vm.c.types[type_id];\n    if (type_e.kind == .struct_t) {\n        return Value.initInt(8 * type_e.data.struct_t.nfields);\n    }"}
{"instruction":"Write a Zig function similar to add from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn add(self: *Self, sock: Socket, events: SocketEvent) !void {\n        if (events.read) read_block: {\n            for (self.read_fds.items) |fd| {\n                if (fd == sock.internal) break :read_block;\n            }"}
{"instruction":"Write a Zig function similar to encode from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Mir.zig","output":"pub fn encode(v: u64) Imm64 {\n        return .{\n            .msb = @truncate(v >> 32),\n            .lsb = @truncate(v),\n        }"}
{"instruction":"Write a Zig function similar to mapSetIndex from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn mapSetIndex(vm: *cy.VM) anyerror!Value {\n    const map = vm.getValue(0).asHeapObject();\n    try map.map.set(vm, vm.getValue(1), vm.getValue(2));\n    return Value.Void;\n}"}
{"instruction":"Write a Zig function similar to getAttrs from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn getAttrs(self: *TemplateDecl) []const *Attribute {\n        switch (self.child_decl.type()) {\n            .funcDecl => {\n                return self.child_decl.cast(.funcDecl).attrs;\n            }"}
{"instruction":"Write a Zig function similar to intCall from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn intCall(vm: *cy.VM) Value {\n    const val = vm.getValue(0);\n    switch (val.getTypeId()) {\n        bt.Float => {\n            return Value.initInt(@intFromFloat(@trunc(val.asF64())));\n        }"}
{"instruction":"Write a Zig function similar to chunked from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/httpz.zig","output":"fn chunked(_: *Request, res: *Response) !void {\n        res.header(\"Over\", \"9000!\");\n        res.status = 200;\n        try res.chunk(\"Chunk 1\");\n        try res.chunk(\"and another chunk\");\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Optionals §","input":"One area that Zig provides safety without compromising efficiency or readability is with the optional type. The question mark symbolizes the optional type. You can convert a type to an optional type by putting a question mark in front of it, like this: optional_integer.zig Now the variable optional_int could be an i32 , or null . Instead of integers, let's talk about pointers. Null references are the source of many runtime exceptions, and even stand accused of being the worst mistake of computer","output":"void do_a_thing(struct Foo *foo) {\n    // do some stuff\n\n    if (foo) {\n        do_something_with_foo(foo);\n    }\n\n    // do some stuff\n}"}
{"instruction":"Write a Zig const similar to MASK_VEC from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const MASK_VEC: @Vector(SIMD_SIZE, u32) = @splat(0xFF);"}
{"instruction":"Write a Zig function similar to renderForError from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context.zig","output":"pub fn renderForError(v: Value, arena: Allocator, w: *Writer) !void {\n        _ = arena;\n\n        w.print(\n            \\\\Scripty evaluated to type: {t}"}
{"instruction":"Write a Zig function similar to seek from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn seek(self: *Self, off: usize) void {\n    self.off = off;\n}"}
{"instruction":"Write a Zig function similar to class_control from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig","output":"fn class_control(ptr: *anyopaque, stage: types.ControlStage, setup: *const types.SetupPacket) bool {\n            var self: *@This() = @ptrCast(@alignCast(ptr));\n\n            if (CdcManagementRequestType.from_u8(setup.request)) |request| {\n                switch (request) {\n                    .SetLineCoding => {\n                        switch (stage) {\n                            .Setup => {\n                                // HACK, we should handle data phase somehow to read sent line_coding\n                                self.device.?.control_ack(setup);\n                            }"}
{"instruction":"Write a Zig function similar to setSegmentOverride from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn setSegmentOverride(self: *LegacyPrefixes, reg: Register) void {\n        assert(reg.class() == .segment);\n        switch (reg) {\n            .cs => self.prefix_2e = true,\n            .ss => self.prefix_36 = true,\n            .es => self.prefix_26 = true,\n            .fs => self.prefix_64 = true,\n            .gs => self.prefix_65 = true,\n            .ds => {}"}
{"instruction":"Write a Zig const similar to out from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"const out: *C.Value = out_;"}
{"instruction":"Write a Zig struct similar to Socket from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub const Socket = struct {\n    pub const SendError = (std.posix.SendError || std.posix.SendToError);\n    pub const ReceiveError = std.posix.RecvFromError;\n\n    pub const Reader = struct {\n        context: Socket,\n        interface: std.Io.Reader,\n        err: ?ReceiveError = null,\n\n        fn stream(\n            r: *std.Io.Reader,\n            w: *std.Io.Writer,\n            limit: std.Io.Limit,\n        ) std.Io.Reader.StreamError!usize {\n            const self: *Reader = @fieldParentPtr(\"interface\", r);\n            const dest = limit.slice(try w.writableSliceGreedy(1));\n\n            const received = self.context.receive(dest) catch |e| {\n                self.err = e;\n                return error.ReadFailed;\n            }"}
{"instruction":"Write a Zig function similar to read_header from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn read_header(self: *Decoder, frame_size: usize) Error!Header {\n        const initial_index = self.index;\n\n        const class = try self.read_int(u16);\n        const weight = try self.read_int(u16);\n        const body_size = try self.read_int(u64);\n        const property_flags = try self.read_int(u16);\n\n        if (initial_index + frame_size > self.buffer.len) return error.BufferExhausted;\n        const properties = self.buffer[self.index .. initial_index + frame_size];\n        self.index += properties.len;\n\n        try self.read_frame_end();\n\n        return .{\n            .class = class,\n            .weight = weight,\n            .body_size = body_size,\n            .property_flags = @bitCast(property_flags),\n            .properties = properties,\n        }"}
{"instruction":"Write a Zig struct similar to Table from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub const Table = struct {\n        pub const VTable = struct {\n            write: *const fn (*const anyopaque, *TableEncoder) void,\n        }"}
{"instruction":"Write a Zig function similar to stderr from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn stderr() fs.FileError!fs.File {\n        if (!check_extensions(0, 1)) return error.InvalidFile;\n        return try fs.open(\":tt\", .@\"A+\");\n    }"}
{"instruction":"Write a Zig function similar to get from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn get() ?*StandaloneModuleGraph {\n        return Instance.instance;\n    }"}
{"instruction":"Write a Zig function similar to generateBreak from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateBreak(self: *Self, break_node: Ast.Node.Index) Error!?m.MIR_op_t {\n    try self.closeScope(break_node);\n\n    if (self.state.?.ast.nodes.items(.components)[break_node].Break.destination) |label_node| {\n        self.JMP(self.findBreakLabel(label_node).break_label);\n    }"}
{"instruction":"Write a Zig function similar to init from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn init(gpa: Allocator) Allocator.Error!InternPool {\n    var ip: InternPool = .{\n        .map = .empty,\n        .items = .empty,\n        .extra = .empty,\n        .string_pool = .empty,\n        .lock = .{}"}
{"instruction":"Write a Zig function similar to run from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn run(self: *EvLoop) void {\n    var evs: Ev.Array(100) = undefined;\n\n    while (true) {\n        self.time = cc.monotime();\n\n        // handling timeout events and get the next interval\n        var timer: Timer = .{}"}
{"instruction":"Write a Zig function similar to transform from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig","output":"fn transform(quad: *main.models.QuadInfo, data: u16) void {\n\tquad.textureSlot = data%16;\n}"}
{"instruction":"Write a Zig const similar to end_jump from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"const end_jump: usize = try self.OP_JUMP_IF_FALSE(locations[node]);"}
{"instruction":"Write a Zig struct similar to ParseCyberState from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"const ParseCyberState = struct {\n    comments: []const cy.IndexSlice(u32),\n    sb: std.ArrayListUnmanaged(u8),\n    commentIdx: u32,\n    pos: u32,\n    node: *ast.Node,\n}"}
{"instruction":"Write a Zig function similar to walkForNode from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn walkForNode(\n    context: *ScopeContext,\n    tree: Ast,\n    node_idx: Ast.Node.Index,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to ArchInfo from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro_base.zig","output":"const ArchInfo = struct {\n    num_registers: usize,\n    jump_idx: usize,\n    assembly: []const u8,\n}"}
{"instruction":"Write a Zig function similar to windowsCmdExePath from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn windowsCmdExePath(allocator: mem.Allocator) error{ OutOfMemory, Unexpected }"}
{"instruction":"Write a Zig function similar to atEOF from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/Reader.zig","output":"pub fn atEOF(self: *Self) bool {\n    return self.off >= self.buf.len;\n}"}
{"instruction":"Write a Zig function similar to rotateZ from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig","output":"pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tcomptime var rotationTable: [4][32]u8 = undefined;\n\tcomptime for(0..32) |i| {\n\t\trotationTable[0][i] = @intCast(i);\n\t}"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig","output":"pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@min(block.data, 3));\n}"}
{"instruction":"Write a Zig function similar to getPriority from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"pub fn getPriority(_: *MusicLoadTask) f32 {\n\t\treturn std.math.floatMax(f32);\n\t}"}
{"instruction":"Write a Zig function similar to handleError from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"fn handleError(miniaudioError: c.ma_result) !void {\n\tif(miniaudioError != c.MA_SUCCESS) {\n\t\tstd.log.err(\"miniaudio error: {s}"}
{"instruction":"Write a Zig struct similar to AudioData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"const AudioData = struct {\n\tmusicId: []const u8,\n\tdata: []f32 = &.{}"}
{"instruction":"Write a Zig struct similar to MyStruct from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigsimple/main.zig","output":"const MyStruct = struct {\n    field_a: i32 = 123,\n    field_b: []const u8 = \"this is field_b\",\n\n    fn print(self: @This(), msg: []const u8) void {\n        std.debug.print(\n            \"{s}"}
{"instruction":"Write a Zig function similar to close from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/memory_mapped_file.zig","output":"pub fn close(self: Self) void {\n    switch (builtin.os.tag) {\n        .windows => {\n            // cast away const cuz windows api uses c and nothing is const there ffs\n            _ = win_aux.UnmapViewOfFile(@ptrCast(@constCast(self.data.ptr)));\n            win.CloseHandle(self.win_mapping);\n        }"}
{"instruction":"Write a Zig function similar to buildAndLinkDeps from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: build.zig","output":"pub fn buildAndLinkDeps(mod: *std.Build.Module, build_options: *std.Build.Module, stdx: *std.Build.Module, opts: Options) !void {\n    const b = mod.owner;\n\n    mod.addIncludePath(b.path(\"src\"));\n    mod.addImport(\"build_options\", build_options);\n    mod.addImport(\"stdx\", stdx);\n\n    mod.link_libc = true;\n\n    if (opts.malloc == .mimalloc) {\n        const mimalloc = mimalloc_lib.createModule(b);\n        mod.addImport(\"mimalloc\", mimalloc);\n        mimalloc_lib.buildAndLink(b, mod, .{\n            .target = rtarget,\n            .optimize = optimize,\n        }"}
{"instruction":"Write a Zig function similar to slice from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"pub fn slice(self: Table) []const u8 {\n            return self.pointer[0..self.length];\n        }"}
{"instruction":"Write a Zig function similar to getPathContents from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Compilation.zig","output":"fn getPathContents(comp: *Compilation, path: []const u8, limit: std.Io.Limit) ![]u8 {\n    if (mem.indexOfScalar(u8, path, 0) != null) {\n        return error.FileNotFound;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Casting §","input":"A type cast converts a value of one type to another. Zig has Type Coercion for conversions that are known to be completely safe and unambiguous, and Explicit Casts for conversions that one would not want to happen on accident. There is also a third kind of type conversion called Peer Type Resolution for the case when a result type must be decided given multiple operand types. Type Coercion § Type coercion occurs when one type is expected, but different type is provided: test_type_coercion.zig Sh","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> builtin = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"builtin\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n<span class=\"tok-kw\">const</span> mem = std.mem;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"integer widening\"</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">250</span>;\n    <span class=\"tok-kw\">const</span> b: <span class=\"tok-type\">u16</span> = a;\n    <span class=\"tok-kw\">const</span> c: <span class=\"tok-type\">u32</span> = b;\n    <span class=\"tok-kw\">const</span> d: <span class=\"tok-type\">u64</span> = c;\n    <span class=\"tok-kw\">const</span> e: <span class=\"tok-type\">u64</span> = d;\n    <span class=\"tok-kw\">const</span> f: <span class=\"tok-type\">u128</span> = e;\n    <span class=\"tok-kw\">try</span> expect(f == a);\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"implicit unsigned integer to signed integer\"</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">250</span>;\n    <span class=\"tok-kw\">const</span> b: <span class=\"tok-type\">i16</span> = a;\n    <span class=\"tok-kw\">try</span> expect(b == <span class=\"tok-number\">250</span>);\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"float widening\"</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">f16</span> = <span class=\"tok-number\">12.34</span>;\n    <span class=\"tok-kw\">const</span> b: <span class=\"tok-type\">f32</span> = a;\n    <span class=\"tok-kw\">const</span> c: <span class=\"tok-type\">f64</span> = b;\n    <span class=\"tok-kw\">const</span> d: <span class=\"tok-type\">f128</span> = c;\n    <span class=\"tok-kw\">try</span> expect(d == a);\n}"}
{"instruction":"Write a Zig struct similar to GreedyFaceInfo from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"const GreedyFaceInfo = struct {min: Vec2f, max: Vec2f}"}
{"instruction":"Write a Zig function similar to macOSWinPtr from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"fn macOSWinPtr(window: *dvui.Window) *anyopaque {\n    const SDLBackend = dvui.backend;\n\n    switch (dvui.backend.kind) {\n        .sdl2 => {\n            var wmInfo: SDLBackend.c.SDL_SysWMinfo = undefined;\n            SDLBackend.c.SDL_GetVersion(&wmInfo.version);\n            _ = SDLBackend.c.SDL_GetWindowWMInfo(window.backend.impl.window, &wmInfo);\n            return wmInfo.info.cocoa.window orelse @panic(\"No HWND\");\n        }"}
{"instruction":"Write a Zig function similar to sendMessage from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn sendMessage(self: *Self, comptime level: proto.MessageLevel, comptime format: String, args: anytype) void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            switch (level) {\n                .debug => log.debugf(format, args),\n                .info => log.infof(format, args),\n                .warning => log.warnf(format, args),\n                .@\"error\" => log.errf(format, args),\n            }"}
{"instruction":"Write a Zig function similar to tick from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn tick(editor: *Editor) !dvui.App.Result {\n    if (!std.mem.eql(u8, &editor.last_titlebar_color.toRGBA(), &dvui.themeGet().color(.control, .fill).toRGBA())) {\n        editor.last_titlebar_color = dvui.themeGet().color(.control, .fill);\n        App.setTitlebarColor(dvui.currentWindow(), editor.last_titlebar_color);\n    }"}
{"instruction":"Write a Zig const similar to volume from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/defaults.zig","output":"pub const volume: u8 = 50;"}
{"instruction":"Write Zig 0.13.0 code for: Optionals §","input":"One area that Zig provides safety without compromising efficiency or readability is with the optional type. The question mark symbolizes the optional type. You can convert a type to an optional type by putting a question mark in front of it, like this: optional_integer.zig Now the variable optional_int could be an i32 , or null . Instead of integers, let's talk about pointers. Null references are the source of many runtime exceptions, and even stand accused of being the worst mistake of computer","output":"<span class=\"tok-kw\">const</span> optional_value: ?<span class=\"tok-type\">i32</span> = <span class=\"tok-null\">null</span>;"}
{"instruction":"Write a Zig const similar to exp from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/selector.zig","output":"const exp: usize = 0;"}
{"instruction":"Write a Zig function similar to __getattr__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/classes.zig","output":"pub fn __getattr__(self: *const Self, attr: py.PyString) !py.PyObject {\n        const name = try attr.asSlice();\n        if (std.mem.eql(u8, name, \"number\")) {\n            return py.create(root, 42);\n        }"}
{"instruction":"Write a Zig const similar to scrollSpeed from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/input_mouse_wheel.zig","output":"const scrollSpeed: f32 = 4;"}
{"instruction":"Write a Zig function similar to fullIfComponents from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"fn fullIfComponents(tree: Ast, info: full.If.Components) full.If {\n    var result: full.If = .{\n        .ast = info,\n        .payload_token = null,\n        .error_token = null,\n        .else_token = 0,\n    }"}
{"instruction":"Write a Zig function similar to popUnwindBoundary from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn popUnwindBoundary(c: *Chunk, node: *ast.Node) !void {\n    log.tracev(\"-pop unwind boundary: stack={}"}
{"instruction":"Write a Zig function similar to stepInto from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn stepInto(self: *Self, scratch: Allocator, bpp: BreakpointAndPID) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            //\n            // @SEARCH: STEPINTO\n            //\n            // Single step zero or many times, up to a limit. Each time, check whether\n            // we've hit a known line of source code. If yes, we're done. If we don't\n            // ever hit a known line of source code, perform a step next operation as\n            // if we were still stopped in the function in which we started.\n            //\n\n            const start_regs = try self.adapter.getRegisters(bpp.pid);\n            const start_pc = start_regs.pc();\n            const load_addr = self.data.subordinate.?.load_addr;\n\n            var found_line_of_code = false;\n            defer {\n                if (!found_line_of_code) {\n                    // We did not find a known line of code, so pretend as though we just did a step\n                    // next in the function in which we started. We have to do this in the defer because\n                    // we have to reset the breakpoint back to its original value before calling\n                    // step next, since step next continues execution.\n                    self.stepOverForPC(scratch, bpp, start_pc) catch |err| {\n                        log.errf(\"unable to perform subordinate step: {!}"}
{"instruction":"Write a Zig function similar to isSlicePointer from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn isSlicePointer(ip: *InternPool, ty: Index) bool {\n    return switch (ip.indexToKey(ty)) {\n        .pointer_type => |pointer_info| pointer_info.flags.size == .slice,\n        else => false,\n    }"}
{"instruction":"Write a Zig function similar to indexTokens from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BlockWriter.zig","output":"fn indexTokens(self: *BlockWriter, tokens: []const Token) TotalIndexedTokens {\n    var num_literals: u32 = 0;\n    var num_distances: u32 = 0;\n\n    for (self.literal_freq, 0..) |_, i| {\n        self.literal_freq[i] = 0;\n    }"}
{"instruction":"Write a Zig function similar to genIr from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"pub fn genIr(tree: *const Tree) Compilation.Error!Ir {\n    const gpa = tree.comp.gpa;\n    var c: CodeGen = .{\n        .builder = .{\n            .gpa = tree.comp.gpa,\n            .interner = &tree.comp.interner,\n            .arena = std.heap.ArenaAllocator.init(gpa),\n        }"}
{"instruction":"Write a Zig function similar to get_timeout from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn get_timeout(self: *const Timer) c_int {\n        if (self.timeout) |timeout|\n            return cc.to_int(timeout);\n        return -1;\n    }"}
{"instruction":"Write a Zig function similar to map from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn map(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const list = o.ObjList.cast(ctx.vm.peek(1).obj()).?;\n    const closure = ctx.vm.peek(0);\n\n    const mapped_type = o.ObjClosure.cast(closure.obj()).?\n        .function\n        .type_def.resolved_type.?.Function\n        .return_type;\n\n    var new_list = ctx.vm.gc.allocateObject(\n        o.ObjList.init(\n            ctx.vm.gc.allocator,\n            ctx.vm.gc.type_registry.getTypeDef(\n                .{\n                    .def_type = .List,\n                    .resolved_type = .{\n                        .List = o.ObjList.ListDef.init(\n                            mapped_type,\n                            false,\n                        ),\n                    }"}
{"instruction":"Write a Zig function similar to globalAttnMask from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn globalAttnMask(input_ids: Tensor, dt: zml.DataType, pad_token: u32) Tensor {\n        const ids = input_ids.withTags(.{ .b, .k }"}
{"instruction":"Write a Zig function similar to ParamType from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"fn ParamType(comptime Id: type, comptime param: Param(Id), comptime value_parsers: anytype) type {\n    const parser = switch (param.takes_value) {\n        .none => parsers.string,\n        .one, .many => @field(value_parsers, param.id.value()),\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Functions §","input":"test_functions.zig Shell There is a difference between a function body and a function pointer . Function bodies are comptime -only types while function Pointers may be runtime-known. Pass-by-value Parameters § Primitive types such as Integers and Floats passed as parameters are copied, and then the copy is available in the function body. This is called \"passing by value\". Copying a primitive type is essentially free and typically involves nothing more than setting a register. Structs, unions, an","output":"<span class=\"tok-kw\">const</span> expect = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).testing.expect;\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">addFortyTwo</span>(x: <span class=\"tok-kw\">anytype</span>) <span class=\"tok-builtin\">@TypeOf</span>(x) {\n    <span class=\"tok-kw\">return</span> x + <span class=\"tok-number\">42</span>;\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"fn type inference\"</span> {\n    <span class=\"tok-kw\">try</span> expect(addFortyTwo(<span class=\"tok-number\">1</span>) == <span class=\"tok-number\">43</span>);\n    <span class=\"tok-kw\">try</span> expect(<span class=\"tok-builtin\">@TypeOf</span>(addFortyTwo(<span class=\"tok-number\">1</span>)) == <span class=\"tok-type\">comptime_int</span>);\n    <span class=\"tok-kw\">const</span> y: <span class=\"tok-type\">i64</span> = <span class=\"tok-number\">2</span>;\n    <span class=\"tok-kw\">try</span> expect(addFortyTwo(y) == <span class=\"tok-number\">44</span>);\n    <span class=\"tok-kw\">try</span> expect(<span class=\"tok-builtin\">@TypeOf</span>(addFortyTwo(y)) == <span class=\"tok-type\">i64</span>);\n}"}
{"instruction":"Write a Zig struct similar to transparent_union from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const transparent_union = struct {}"}
{"instruction":"Write a Zig function similar to parseWith from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"pub fn parseWith(parser: *Parser) !Selector {\n        var parts = std.ArrayList(Part).init(parser.allocator);\n        errdefer parts.deinit();\n\n        var combinator: ?Part = null;\n\n        while (parser.tokenizer.next() catch null) |tok| {\n            if (tok == .lcurly) break;\n\n            const component: ?Part = switch (tok) {\n                .star => Part.universal,\n                .ident => |s| Part{ .local_name = try parser.allocator.dupe(u8, s) }"}
{"instruction":"Write a Zig function similar to set_file_path from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"pub fn set_file_path(self: *Self, file_path: []const u8) void {\n    if (file_path.ptr == self.file_path_buf.items.ptr) return;\n    self.file_path_buf.clearRetainingCapacity();\n    self.file_path_buf.appendSlice(self.external_allocator, file_path) catch |e| switch (e) {\n        error.OutOfMemory => @panic(\"OOM in Buffer.set_file_path\"),\n    }"}
{"instruction":"Write a Zig function similar to wait from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn wait(self: *Condition) void {\n        self.inner.wait();\n    }"}
{"instruction":"Write a Zig function similar to encode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn encode(self: *const @This(), encoder: *Encoder) void {\n            encoder.write_int(u16, self.reply_code);\n            encoder.write_short_string(self.reply_text);\n            encoder.write_int(u16, self.class_id);\n            encoder.write_int(u16, self.method_id);\n        }"}
{"instruction":"Write a Zig function similar to headerCallback from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn headerCallback(transfer: *Http.Transfer) !void {\n        const header = &transfer.response_header.?;\n        log.debug(.http, \"script header\", .{\n            .req = transfer,\n            .blocking = true,\n            .status = header.status,\n            .content_type = header.contentType(),\n        }"}
{"instruction":"Write a Zig struct similar to TryExpr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"const TryExpr = struct {\n    expr: *Node align(8),\n    catchExpr: ?*Node,\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to hits from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: examples/02_handler.zig","output":"pub fn hits(h: *Handler, _: *httpz.Request, res: *httpz.Response) !void {\n    const count = @atomicRmw(usize, &h._hits, .Add, 1, .monotonic);\n\n    // @atomicRmw returns the previous version so we need to +1 it\n    // to display the count includin this hit\n    return res.json(.{ .hits = count + 1 }"}
{"instruction":"Write a Zig function similar to make from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"fn make(step: *Step, progress: std.Progress.Node) !void {\n        _ = progress;\n        const self: *Self = @fieldParentPtr(\"step\", step);\n\n        var cacher = createCacheBuilder(self.builder);\n        cacher.addBytes(self.file_content.items);\n\n        const root_path = try cacher.createAndGetPath();\n\n        self.package_file.path = try std.fs.path.join(self.builder.allocator, &[_][]const u8{\n            root_path,\n            \"build_options.zig\",\n        }"}
{"instruction":"Write a Zig function similar to allocate from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn allocate(self: *GC, comptime T: type) !*T {\n    var timer = if (!is_wasm) std.time.Timer.start() catch unreachable else {}"}
{"instruction":"Write a Zig const similar to height from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"const height: f32 = radius * 2.0;"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    foo(<span class=\"tok-number\">12</span>);\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(x: <span class=\"tok-type\">i32</span>) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (x >= <span class=\"tok-number\">5</span>) {\n        bar();\n    } <span class=\"tok-kw\">else</span> {\n        bang2();\n    }\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">bar</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (baz()) {\n        quux();\n    } <span class=\"tok-kw\">else</span> {\n        hello();\n    }\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">baz</span>() <span class=\"tok-type\">bool</span> {\n    <span class=\"tok-kw\">return</span> bang1();\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">quux</span>() <span class=\"tok-type\">void</span> {\n    bang2();\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">hello</span>() <span class=\"tok-type\">void</span> {\n    bang2();\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">bang1</span>() <span class=\"tok-type\">bool</span> {\n    <span class=\"tok-kw\">return</span> <span class=\"tok-null\">false</span>;\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">bang2</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-builtin\">@panic</span>(<span class=\"tok-str\">\"PermissionDenied\"</span>);\n}"}
{"instruction":"Write a Zig function similar to identifierLocFromIndex from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn identifierLocFromIndex(tree: Ast, source_index: usize) ?offsets.Loc {\n    _, const loc = identifierTokenAndLocFromIndex(tree, source_index) orelse return null;\n    return loc;\n}"}
{"instruction":"Write a Zig function similar to init from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub fn init(argv: []const []const u8, allocator: mem.Allocator) ChildProcess {\n    return .{\n        .allocator = allocator,\n        .argv = argv,\n        .id = undefined,\n        .thread_handle = undefined,\n        .err_pipe = if (native_os == .windows) {}"}
{"instruction":"Write a Zig function similar to lookupLabel from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn lookupLabel(\n    handle: *DocumentStore.Handle,\n    symbol: []const u8,\n    source_index: usize,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to pushInlineUnExpr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushInlineUnExpr(c: *cy.Chunk, code: cy.OpCode, child: u8, dst: u8, node: *ast.Node) !void {\n    try c.pushFCode(code, &.{ child, dst, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }"}
{"instruction":"Write a Zig function similar to listAppend from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn listAppend(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getValue(0).asHeapObject();\n    vm.retain(vm.getValue(1));\n    try obj.list.append(vm.alloc, vm.getValue(1));\n    return Value.Void;\n}"}
{"instruction":"Write a Zig function similar to buildExamples from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: build.zig","output":"fn buildExamples(\n    b: *std.Build,\n    target: std.Build.ResolvedTarget,\n    optimize: std.builtin.OptimizeMode,\n    c_lib_: ?*Step.Compile,\n) ![]const *Step.Compile {\n    const alloc = b.allocator;\n    var steps: std.ArrayList(*Step.Compile) = .empty;\n    defer steps.deinit(alloc);\n\n    var dir = try std.fs.cwd().openDir(try b.build_root.join(\n        b.allocator,\n        &.{\"examples\"}"}
{"instruction":"Write a Zig struct similar to BuildOptions from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"const BuildOptions = struct {\n    version: std.SemanticVersion,\n    sha: []const u8,\n    mimalloc: bool,\n    debug: DebugOptions,\n    gc: GCOptions,\n    jit: JITOptions,\n    target: Build.ResolvedTarget,\n    cycle_limit: ?u128,\n    recursive_call_limit: ?u32,\n    stack_size: usize = 100_000,\n\n    pub fn step(self: @This(), b: *Build) *Build.Module {\n        var options = b.addOptions();\n        options.addOption(@TypeOf(self.version), \"version\", self.version);\n        options.addOption(@TypeOf(self.sha), \"sha\", self.sha);\n        options.addOption(@TypeOf(self.mimalloc), \"mimalloc\", self.mimalloc);\n        options.addOption(@TypeOf(self.cycle_limit), \"cycle_limit\", self.cycle_limit);\n        options.addOption(@TypeOf(self.recursive_call_limit), \"recursive_call_limit\", self.recursive_call_limit);\n        options.addOption(@TypeOf(self.stack_size), \"stack_size\", self.stack_size);\n\n        self.debug.step(options);\n        self.gc.step(options);\n        self.jit.step(options);\n\n        return options.createModule();\n    }"}
{"instruction":"Write a Zig struct similar to Command from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig","output":"const Command = struct {\n    mode: Mode,\n    syntax_only: bool,\n\n    const Mode = union(enum) {\n        stdin,\n        stdin_super,\n        paths: []const []const u8,\n    }"}
{"instruction":"Write a Zig struct similar to FileStore from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"pub const FileStore = struct {\n    file_offset: u64,\n    compression: std.zip.CompressionMethod,\n    uncompressed_size: u32,\n    crc32: u32,\n    compressed_size: u32,\n}"}
{"instruction":"Write a Zig function similar to stream from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn stream(\n            r: *std.Io.Reader,\n            w: *std.Io.Writer,\n            limit: std.Io.Limit,\n        ) std.Io.Reader.StreamError!usize {\n            const self: *Reader = @fieldParentPtr(\"interface\", r);\n            const dest = limit.slice(try w.writableSliceGreedy(1));\n\n            const received = self.context.receive(dest) catch |e| {\n                self.err = e;\n                return error.ReadFailed;\n            }"}
{"instruction":"Write a Zig const similar to priority from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"const priority: ?[]const u8 = if (decl.is_important) \"important\" else null;"}
{"instruction":"Write a Zig function similar to createCamelcaseText from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"fn createCamelcaseText(allocator: std.mem.Allocator, identifier: []const u8) ![]const u8 {\n    // skip initial & ending underscores\n    const trimmed_identifier = std.mem.trim(u8, identifier, \"_\");\n\n    const num_separators = std.mem.count(u8, trimmed_identifier, \"_\");\n\n    const new_text_len = trimmed_identifier.len - num_separators;\n    var new_text: std.ArrayList(u8) = try .initCapacity(allocator, new_text_len);\n    errdefer new_text.deinit(allocator);\n\n    var idx: usize = 0;\n    while (idx < trimmed_identifier.len) {\n        const ch = trimmed_identifier[idx];\n        if (ch == '_') {\n            // the trimmed identifier is guaranteed to not have underscores at the end,\n            // so it can be assumed that ptr dereferences are safe until an alnum char is found\n            while (trimmed_identifier[idx] == '_') : (idx += 1) {}"}
{"instruction":"Write a Zig function similar to next from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/args.zig","output":"pub fn next(iter: *ExampleArgIterator) ?[]const u8 {\n        _ = iter;\n        return \"2\";\n    }"}
{"instruction":"Write a Zig function similar to render from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"pub fn render(\n                    self: Simple,\n                    ast: Ast,\n                    src: []const u8,\n                    w: *Writer,\n                ) !void {\n                    if (self.element_name) |element_name| {\n                        switch (element_name) {\n                            .name => |name| _ = try w.write(name.slice(src)),\n                            .all => _ = try w.write(\"*\"),\n                        }"}
{"instruction":"Write a Zig const similar to event_count from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const event_count: usize, const timestamp_last: u64 = events: {\n                            const events = runner.buffer.get_consumer_buffer();"}
{"instruction":"Write a Zig function similar to argumentList from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn argumentList(self: *Self) ![]Ast.Call.Argument {\n    var arguments = std.ArrayList(Ast.Call.Argument).empty;\n\n    const start_location = self.current_token.? - 1;\n\n    var arg_count: u8 = 0;\n    while (!(try self.match(.RightParen)) and !(try self.match(.Eof))) {\n        var hanging = false;\n        const arg_name = if (try self.match(.Identifier))\n            self.current_token.? - 1\n        else\n            null;\n\n        if (arg_name != null) {\n            if (arg_count == 0 or self.check(.Comma) or self.check(.RightParen)) {\n                // The identifier we just parsed might not be the argument name but the start of an expression or the expression itself\n                hanging = !(try self.match(.Colon));\n            }"}
{"instruction":"Write a Zig function similar to deinit from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_exports.zig","output":"pub fn deinit(tb_client: ?*tb_client_t) callconv(.c) tb_client_status {\n    const client: *tb.ClientInterface = if (tb_client) |ptr| ptr.cast() else return .invalid;\n    client.deinit() catch |err| switch (err) {\n        error.ClientInvalid => return .invalid,\n    }"}
{"instruction":"Write a Zig function similar to init from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/platform.zig","output":"pub fn init() !void {\n    if (c.glfwInit() == 0) return error.GlfwInitFailed;\n}"}
{"instruction":"Write a Zig function similar to xdgToplevelHandleClose from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"fn xdgToplevelHandleClose(window_id: mach.ObjectID, toplevel: ?*c.struct_xdg_toplevel) callconv(.C) void {\n        // TODO: implement this\n        _ = window_id;\n        _ = toplevel;\n    }"}
{"instruction":"Write a Zig function similar to RunT from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"fn RunT(comptime Func: anytype) type {\n    const T = @typeInfo(@TypeOf(Func)).Fn.return_type.?;\n    return switch (@typeInfo(T)) {\n        .ErrorUnion => |E| E.payload,\n        else => T,\n    }"}
{"instruction":"Write a Zig function similar to value from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn value(h: Help) []const u8 {\n        return h.val;\n    }"}
{"instruction":"Write a Zig function similar to resolveUpvalue from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn resolveUpvalue(self: *Self, frame: *Frame, name: Ast.TokenIndex) Error!?usize {\n    if (frame.enclosing == null) {\n        return null;\n    }"}
{"instruction":"Write a Zig struct similar to JITOptions from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"const JITOptions = struct {\n        on: bool,\n        always_on: bool,\n        hotspot_always_on: bool,\n        hotspot_on: bool,\n        debug: bool,\n        prof_threshold: f128 = 0.05,\n\n        pub fn step(self: JITOptions, options: *Build.Step.Options) void {\n            options.addOption(@TypeOf(self.debug), \"jit_debug\", self.debug);\n            options.addOption(@TypeOf(self.always_on), \"jit_always_on\", self.always_on);\n            options.addOption(@TypeOf(self.hotspot_always_on), \"jit_hotspot_always_on\", self.hotspot_always_on);\n            options.addOption(@TypeOf(self.on), \"jit\", self.on);\n            options.addOption(@TypeOf(self.prof_threshold), \"jit_prof_threshold\", self.prof_threshold);\n            options.addOption(@TypeOf(self.hotspot_on), \"jit_hotspot_on\", self.hotspot_on);\n        }"}
{"instruction":"Write a Zig function similar to validateMessage from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"fn validateMessage(server: *const Server, message: Message) Error!void {\n    const tracy_zone = tracy.trace(@src());\n    defer tracy_zone.end();\n\n    const method = switch (message) {\n        .request => |request| switch (request.params) {\n            .other => |info| info.method,\n            else => @tagName(request.params),\n        }"}
{"instruction":"Write a Zig function similar to decode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn decode(decoder: *Decoder) Decoder.Error!@This() {\n            const version_major = try decoder.read_int(u8);\n            const version_minor = try decoder.read_int(u8);\n            const server_properties = try decoder.read_table();\n            const mechanisms = try decoder.read_long_string();\n            const locales = try decoder.read_long_string();\n\n            return .{\n                .version_major = version_major,\n                .version_minor = version_minor,\n                .server_properties = server_properties,\n                .mechanisms = mechanisms,\n                .locales = locales,\n            }"}
{"instruction":"Write a Zig function similar to runtimeTests from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/idt.zig","output":"pub fn runtimeTests() void {\n    rt_loadedIDTSuccess();\n}"}
{"instruction":"Write a Zig function similar to setWaveOn from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"fn setWaveOn(self: *@This(), isWaveOn: bool) void {\n        @atomicStore(bool, &self.isWaveOn, isWaveOn, .SeqCst);\n    }"}
{"instruction":"Write a Zig function similar to createEntry from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"fn createEntry(pos: Vec3i, chunk: *Chunk) BlockEntityIndex {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tconst dataIndex: BlockEntityIndex = freeIndexList.popOrNull() orelse blk: {\n\t\t\t\tdefer nextIndex = @enumFromInt(@intFromEnum(nextIndex) + 1);\n\t\t\t\tbreak :blk nextIndex;\n\t\t\t}"}
{"instruction":"Write a Zig struct similar to EitherEntry from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub const EitherEntry = struct {\n            /// the `is_type_val` property is inherited from the containing `Type`\n            type_data: Data,\n            descriptor: []const u8,\n        }"}
{"instruction":"Write a Zig const similar to msec from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const msec: u32 = @intCast(@rem(\n                    now.tv_sec *% std.time.ms_per_s +% @divTrunc(now.tv_nsec, std.time.ns_per_ms),\n                    math.maxInt(u32),\n                ));"}
{"instruction":"Write a Zig function similar to isGeneric from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn isGeneric(data: Data) bool {\n            return switch (data) {\n                .type_parameter => true,\n                .anytype_parameter => true,\n                .pointer => |info| info.elem_ty.data.isGeneric(),\n                .array => |info| info.elem_ty.data.isGeneric(),\n                .tuple => |types| {\n                    for (types) |t| {\n                        if (t.data.isGeneric()) {\n                            return true;\n                        }"}
{"instruction":"Write a Zig function similar to getenv from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn getenv(env_name: ConstStr) ?ConstStr;\n\npub inline fn setenv(env_name: ConstStr, value: ConstStr, is_replace: bool) ?void {\n    const raw = struct {\n        extern fn setenv(env_name: ConstStr, value: ConstStr, is_replace: c_int) c_int;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">const</span> FileOpenError = <span class=\"tok-kw\">error</span>{\n    AccessDenied,\n    OutOfMemory,\n    FileNotFound,\n};\n\n<span class=\"tok-kw\">const</span> AllocationError = <span class=\"tok-kw\">error</span>{\n    OutOfMemory,\n};\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"coerce subset to superset\"</span> {\n    <span class=\"tok-kw\">const</span> err = foo(AllocationError.OutOfMemory);\n    <span class=\"tok-kw\">try</span> std.testing.expect(err == FileOpenError.OutOfMemory);\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(err: AllocationError) FileOpenError {\n    <span class=\"tok-kw\">return</span> err;\n}"}
{"instruction":"Write Zig 0.14.1 code for: WebAssembly §","input":"Zig supports building for WebAssembly out of the box. Freestanding § For host environments like the web browser and nodejs, build as an executable using the freestanding OS target. Here's an example of running Zig code compiled to WebAssembly with nodejs. math.zig Shell test.js Shell WASI § Zig's support for WebAssembly System Interface (WASI) is under active development. Example of using the standard library and reading command line arguments: wasi_args.zig Shell Shell A more interesting exampl","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() !<span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> general_purpose_allocator: std.heap.GeneralPurposeAllocator(.{}) = .init;\n    <span class=\"tok-kw\">const</span> gpa = general_purpose_allocator.allocator();\n    <span class=\"tok-kw\">const</span> args = <span class=\"tok-kw\">try</span> std.process.argsAlloc(gpa);\n    <span class=\"tok-kw\">defer</span> std.process.argsFree(gpa, args);\n\n    <span class=\"tok-kw\">for</span> (args, <span class=\"tok-number\">0</span>..) |arg, i| {\n        std.debug.print(<span class=\"tok-str\">\"{}: {s}\\n\"</span>, .{ i, arg });\n    }\n}"}
{"instruction":"Write a Zig const similar to ICW4_BUFFER_SELECT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const ICW4_BUFFER_SELECT: u8 = 0x04;"}
{"instruction":"Write a Zig function similar to extendedPath from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn extendedPath(_allocator: main.heap.NeverFailingAllocator, path: []const u8, ending: []const u8) []const u8 {\n\t\treturn std.fmt.allocPrint(_allocator.allocator, \"{s}"}
{"instruction":"Write a Zig function similar to iovec_dupe from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"pub fn iovec_dupe(iovec: []const iovec_t) []u8 {\n    const len = iovec_len(iovec);\n    const buffer = g.allocator.alloc(u8, len) catch unreachable;\n    var offset: usize = 0;\n    for (iovec) |*iov| {\n        @memcpy(buffer[offset..].ptr, iov.iov_base, iov.iov_len);\n        offset += iov.iov_len;\n    }"}
{"instruction":"Write a Zig function similar to eql from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Cell.zig","output":"pub fn eql(a: Color, b: Color) bool {\n        switch (a) {\n            .default => return b == .default,\n            .index => |a_idx| {\n                switch (b) {\n                    .index => |b_idx| return a_idx == b_idx,\n                    else => return false,\n                }"}
{"instruction":"Write a Zig function similar to reset from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn reset(c: *Cursor, n: Node) void {\n        _ = c;\n        _ = n;\n        @panic(\"TODO\");\n    }"}
{"instruction":"Write a Zig function similar to name from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn name(self: UnaryOp) []const u8 {\n        return switch (self) {\n            .minus => \"$prefix-\",\n            .not => \"$prefix!\",\n            .bitwiseNot => \"$prefix~\",\n            .address_of => \"$prefix&\",\n            else => \"unknown\",\n        }"}
{"instruction":"Write a Zig function similar to isOpaquePointer from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/C3.zig","output":"fn isOpaquePointer(params: *const encoding.Params) bool {\n    return strings.eql(params.data_type_name, \"void*\");\n}"}
{"instruction":"Write a Zig struct similar to raw from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"const raw = struct {\n        extern fn inet_pton(family: c_int, str_ip: ConstStr, net_ip: *anyopaque) c_int;\n    }"}
{"instruction":"Write a Zig function similar to full from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"fn full(self: *Tokens) bool {\n        return self.pos == self.list.len;\n    }"}
{"instruction":"Write a Zig function similar to tupleIndex from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn tupleIndex(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const tuple = vm.getValue(0).asHeapObject();\n    if (index < 0 or index > tuple.tuple.len) {\n        return vm.prepPanic(\"Out of bounds.\");\n    }"}
{"instruction":"Write a Zig function similar to drawWorkspaces from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"pub fn drawWorkspaces(editor: *Editor, index: usize) !dvui.App.Result {\n    if (index >= editor.workspaces.count()) return .ok;\n\n    if (index <= editor.workspaces.count() - 1) {\n        var s = pixi.dvui.paned(@src(), .{\n            .direction = .horizontal,\n            .collapsed_size = if (index == editor.workspaces.count() - 1) std.math.floatMax(f32) else 0,\n            .handle_size = handle_size,\n            .handle_dynamic = .{ .handle_size_max = handle_size, .distance_max = handle_dist }"}
{"instruction":"Write a Zig function similar to fullWhile from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn fullWhile(tree: Ast, node: Node.Index) ?full.While {\n    return switch (tree.nodeTag(node)) {\n        .while_simple => whileSimple(tree, node),\n        .while_cont => whileCont(tree, node),\n        .@\"while\" => whileFull(tree, node),\n        else => null,\n    }"}
{"instruction":"Write a Zig function similar to windowsHWND from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"fn windowsHWND(window: *dvui.Window) c.HWND {\n    switch (dvui.backend.kind) {\n        .sdl3 => {\n            const SDLBackend = dvui.backend;\n            const properties: SDLBackend.c.SDL_PropertiesID = SDLBackend.c.SDL_GetWindowProperties(window.backend.impl.window);\n            const hwnd = SDLBackend.c.SDL_GetPointerProperty(\n                properties,\n                SDLBackend.c.SDL_PROP_WINDOW_WIN32_HWND_POINTER,\n                null,\n            ) orelse @panic(\"No HWND\");\n            return @intFromPtr(hwnd);\n        }"}
{"instruction":"Write a Zig function similar to max_contrast from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"pub fn max_contrast(v: u24, a: u24, b: u24) u24 {\n    return RGB.max_contrast(RGB.from_u24(v), RGB.from_u24(a), RGB.from_u24(b)).to_u24();\n}"}
{"instruction":"Write a Zig function similar to load from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/bmp.zig","output":"pub fn load(allocator: std.mem.Allocator, file_data: []const u8) !io.Image {\n    if (file_data.len < @sizeOf(BitmapFileHeader) + @sizeOf(BitmapInfoHeader)) {\n        return BmpError.FileCorrupted;\n    }"}
{"instruction":"Write a Zig function similar to renderFeatureInfo from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderFeatureInfo(self: *Self) !void {\n        try self.writer.writeAll(\n            \\\\pub const features = struct {\n            \\\\\n        );\n        for (self.registry.features) |feature| {\n            try self.writer.writeAll(\"pub const \");\n            try self.writeIdentifierWithCase(.snake, trimVkNamespace(feature.name));\n            try self.writer.writeAll(\"= ApiInfo {\\n\");\n            try self.writer.print(\".name = \\\"{s}"}
{"instruction":"Write a Zig function similar to dotnet_type from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/dotnet_bindings.zig","output":"fn dotnet_type(comptime Type: type) []const u8 {\n    switch (@typeInfo(Type)) {\n        .@\"enum\", .@\"struct\" => return comptime get_mapped_type_name(Type) orelse\n            @compileError(\"Type \" ++ @typeName(Type) ++ \" not mapped.\"),\n        .bool => return \"byte\",\n        .int => |info| {\n            assert(info.signedness == .unsigned);\n            return switch (info.bits) {\n                8 => \"byte\",\n                16 => \"ushort\",\n                32 => \"uint\",\n                64 => \"ulong\",\n                128 => \"UInt128\",\n                else => @compileError(\"invalid int type\"),\n            }"}
{"instruction":"Write a Zig function similar to add from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate.zig","output":"fn add(self: *Tokens, t: Token) void {\n        self.list[self.pos] = t;\n        self.pos += 1;\n    }"}
{"instruction":"Write a Zig struct similar to Enum from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Enum = struct {\n    tag_type: InternPool.Index,\n    fields: std.AutoArrayHashMapUnmanaged(String, void),\n    values: std.AutoArrayHashMapUnmanaged(InternPool.Index, void),\n    namespace: NamespaceIndex,\n    tag_type_inferred: bool,\n\n    pub const Index = enum(u32) { _ }"}
{"instruction":"Write a Zig function similar to fromStringLiteral from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context.zig","output":"pub fn fromStringLiteral(s: []const u8) Value {\n        return .{ .string = .{ .value = s }"}
{"instruction":"Write a Zig function similar to to_mode_opt from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn to_mode_opt(mode: BuildMode) ModeOpt {\n    return switch (mode) {\n        .ReleaseFast => .fast,\n        .ReleaseSmall => .small,\n        .ReleaseSafe => .safe,\n        .Debug => .debug,\n    }"}
{"instruction":"Write a Zig const similar to event from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"const event: *Event = @alignCast(@ptrCast(event_data[0..event_size]));"}
{"instruction":"Write a Zig const similar to end_jump from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"const end_jump: usize = try self.OP_JUMP_IF_NOT_NULL(locations[node]);"}
{"instruction":"Write a Zig function similar to finalize from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn finalize(self: Close, side: Side, reader: *utils.BinaryReader) !void {\n\t\t\tif(side != .client) return;\n\t\t\tself.inv._deinit(self.allocator, .client);\n\t\t\tif(reader.remaining.len != 0) {\n\t\t\t\tconst serverId = try reader.readEnum(InventoryId);\n\t\t\t\tSync.ClientSide.unmapServerId(serverId, self.inv.id);\n\t\t\t}"}
{"instruction":"Write a Zig function similar to isSigned from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn isSigned(op: Op) bool {\n        return switch (op) {\n            .unity, .imm8, .imm16, .imm32, .imm64 => false,\n            .imm8s, .imm16s, .imm32s => true,\n            .rel8, .rel16, .rel32 => true,\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig function similar to listInsert from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn listInsert(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const value = vm.getValue(2);\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (index < 0 or index > inner.len) {\n        return rt.prepThrowError(vm, .OutOfBounds);\n    }"}
{"instruction":"Write a Zig function similar to setRuntime from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setRuntime(self: webui, runtime: Runtime) void {\n    c.webui_set_runtime(self.window_handle, runtime);\n}"}
{"instruction":"Write a Zig const similar to self from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"const self: *Self = fromVtable(vtbl);"}
{"instruction":"Write a Zig function similar to vtable_completion_context_fn from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"fn vtable_completion_context_fn(context: *anyopaque) usize {\n            const self: *Context = @ptrCast(@alignCast(context));\n            return self.completion_context;\n        }"}
{"instruction":"Write a Zig function similar to simpleType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn simpleType(self: *Self, def_type: obj.ObjTypeDef.Type) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n    const optional = try self.match(.Question);\n\n    return try self.ast.appendNode(\n        .{\n            .tag = .SimpleType,\n            .location = start_location,\n            .end_location = self.current_token.? - 1,\n            .type_def = try self.gc.type_registry.getTypeDef(\n                .{\n                    .def_type = def_type,\n                    .optional = optional,\n                }"}
{"instruction":"Write a Zig function similar to parseSimpleSelectorSequence from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/parser.zig","output":"fn parseSimpleSelectorSequence(p: *Parser, allocator: Allocator) ParseError!Selector {\n        if (p.i >= p.s.len) {\n            return ParseError.ExpectedSelector;\n        }"}
{"instruction":"Write a Zig function similar to init from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/browser.zig","output":"pub fn init(app: *App) !Browser {\n        const allocator = app.allocator;\n\n        const env = try js.Env.init(allocator, &app.platform, .{}"}
{"instruction":"Write a Zig function similar to shrink from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn shrink(self: *Self, new_len: usize) void {\n            assert(new_len <= self.len);\n            // TODO take advantage of the new realloc semantics\n            self.len = new_len;\n        }"}
{"instruction":"Write a Zig function similar to run from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/HTMLScanner.zig","output":"pub fn run(this: *T, input: []const u8) !void {\n            var builder = lol.HTMLRewriter.Builder.init();\n            defer builder.deinit();\n\n            var selectors: bun.BoundedArray(*lol.HTMLSelector, tag_handlers.len + if (visit_document_tags) 3 else 0) = .{}"}
{"instruction":"Write a Zig function similar to fail from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"fn fail(c: *CodeGen, comptime fmt: []const u8, args: anytype) error{ FatalError, OutOfMemory }"}
{"instruction":"Write a Zig function similar to run from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig","output":"pub fn run(gpa: std.mem.Allocator, args: []const []const u8) !noreturn {\n    const cmd = Command.parse(args);\n    var any_error = false;\n    switch (cmd.mode) {\n        .stdin => {\n            var fr = std.fs.File.stdin().reader(&.{}"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@subWithOverflow</span>(a: <span class=\"tok-kw\">anytype</span>, b: <span class=\"tok-kw\">anytype</span>) <span class=\"tok-kw\">struct</span> { <span class=\"tok-builtin\">@TypeOf</span>(a, b), <span class=\"tok-type\">u1</span> }"}
{"instruction":"Write a Zig function similar to set_user_id from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/set_user_id.zig","output":"fn set_user_id(id: u64, user: *c.User) void {\r\n    user.*.id = id;\r\n}"}
{"instruction":"Write a Zig function similar to tick_ from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn tick_(self: *Loop, comptime mode: looppkg.RunMode) !void {\n        // We can't nest runs.\n        if (self.flags.in_run) return error.NestedRunsNotAllowed;\n        self.flags.in_run = true;\n        defer self.flags.in_run = false;\n\n        // The total number of events we're waiting for.\n        const wait = switch (mode) {\n            // until_done is one because we need to wait for at least one\n            // (if we have any).\n            .until_done => 1,\n            .once => 1,\n            .no_wait => 0,\n        }"}
{"instruction":"Write a Zig const similar to maxBlockCount from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"pub const maxBlockCount: usize = 65536;"}
{"instruction":"Write a Zig function similar to expect from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"fn expect(self: *XmlCTokenizer, kind: Token.Kind) !Token {\n        const tok = (try self.next()) orelse return error.UnexpectedEof;\n        if (tok.kind != kind) {\n            return error.UnexpectedToken;\n        }"}
{"instruction":"Write a Zig const similar to current_zig_simple from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: build.zig","output":"const current_zig_simple: std.SemanticVersion = .{ .major = builtin.zig_version.major, .minor = builtin.zig_version.minor, .patch = 0 };"}
{"instruction":"Write a Zig const similar to device from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const device: *InputDevice = @ptrFromInt(event.device.data);"}
{"instruction":"Write a Zig function similar to write from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/stream.zig","output":"pub fn write(self: *Self, buffer: []u8) Error!usize {\n        return switch (self.*) {\n            Self.uart => uart.write(buffer),\n            Self.socket => |*sock| sock.send(buffer),\n            Self.opened_file => @panic(\"unimplemented\"),\n            Self.dir => @panic(\"unimplemented\"),\n        }"}
{"instruction":"Write a Zig function similar to eql from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub fn eql(self: Modifiers, other: Modifiers) bool {\n        const a: u8 = @bitCast(self);\n        const b: u8 = @bitCast(other);\n        return a == b;\n    }"}
{"instruction":"Write a Zig const similar to callRet from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"const callRet: u8 = 1;"}
{"instruction":"Write a Zig function similar to add from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn add(self: *Self, sock: Socket, events: SocketEvent) !void {\n        // Always poll for errors as this is done anyways\n        var mask: i16 = std.posix.POLL.ERR;\n\n        if (events.read)\n            mask |= std.posix.POLL.IN;\n        if (events.write)\n            mask |= std.posix.POLL.OUT;\n\n        for (self.fds.items) |*pfd| {\n            if (pfd.fd == sock.internal) {\n                pfd.events |= mask;\n                return;\n            }"}
{"instruction":"Write a Zig function similar to test_ip from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn test_ip(msg: []const u8, qnamelen: c_int, testctx: *const ipset.testctx_t) TestIpResult {\n    return TestIpResult.from_int(c.dns_test_ip(msg.ptr, cc.to_isize(msg.len), qnamelen, testctx));\n}"}
{"instruction":"Write a Zig function similar to serialize from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn serialize(self: *const @This()) [8]u8 {\n        var out: [8]u8 = undefined;\n        out[0] = out.len;\n        out[1] = @intFromEnum(self.descriptor_type);\n        out[2] = self.first_interface;\n        out[3] = self.interface_count;\n        out[4] = self.function_class;\n        out[5] = self.function_subclass;\n        out[6] = self.function_protocol;\n        out[7] = self.function;\n        return out;\n    }"}
{"instruction":"Write a Zig const similar to value from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const value: usize = @intFromFloat(key.float_32_value);"}
{"instruction":"Write a Zig function similar to control_code_to_unicode from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/unicode.zig","output":"pub fn control_code_to_unicode(code: u8) [:0]const u8 {\n    return switch (code) {\n        '\\x00' => \"␀\",\n        '\\x01' => \"␁\",\n        '\\x02' => \"␂\",\n        '\\x03' => \"␃\",\n        '\\x04' => \"␄\",\n        '\\x05' => \"␅\",\n        '\\x06' => \"␆\",\n        '\\x07' => \"␇\",\n        '\\x08' => \"␈\",\n        '\\x09' => \"␉\",\n        '\\x0A' => \"␊\",\n        '\\x0B' => \"␋\",\n        '\\x0C' => \"␌\",\n        '\\x0D' => \"␍\",\n        '\\x0E' => \"␎\",\n        '\\x0F' => \"␏\",\n        '\\x10' => \"␐\",\n        '\\x11' => \"␑\",\n        '\\x12' => \"␒\",\n        '\\x13' => \"␓\",\n        '\\x14' => \"␔\",\n        '\\x15' => \"␕\",\n        '\\x16' => \"␖\",\n        '\\x17' => \"␗\",\n        '\\x18' => \"␘\",\n        '\\x19' => \"␙\",\n        '\\x1A' => \"␚\",\n        '\\x1B' => \"␛\",\n        '\\x1C' => \"␜\",\n        '\\x1D' => \"␝\",\n        '\\x1E' => \"␞\",\n        '\\x1F' => \"␟\",\n        '\\x20' => \"␠\",\n        '\\x7F' => \"␡\",\n        else => \"\",\n    }"}
{"instruction":"Write a Zig function similar to pollEvent from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Loop.zig","output":"pub fn pollEvent(self: *Self) void {\n            self.queue.poll();\n        }"}
{"instruction":"Write a Zig function similar to qname_domains from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig","output":"fn qname_domains(msg: []const u8, qnamelen: c_int, interest_levels: u8, p_domains: *[8][*]const u8, p_domain_end: *[*]const u8) ?u8 {\n    const ptr_domains = @ptrCast([*c][*c]const u8, p_domains);\n    const ptr_domain_end = @ptrCast([*c][*c]const u8, p_domain_end);\n    const n = c.dns_qname_domains(msg.ptr, qnamelen, interest_levels, ptr_domains, ptr_domain_end);\n    return if (n >= 0) cc.to_u8(n) else null;\n}"}
{"instruction":"Write a Zig function similar to funcC from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigbacktrace/main.zig","output":"fn funcC() void {\n    funcD();\n    std.debug.print(\"funcC\\n\", .{}"}
{"instruction":"Write a Zig function similar to textureIndex from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn textureIndex(block: Block, orientation: usize) u16 {\n\t\tif(orientation < 16) {\n\t\t\treturn textureIndices[block.typ][orientation];\n\t\t}"}
{"instruction":"Write a Zig struct similar to Note from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub const Note = struct {\n    kind: ReportKind = .hint,\n    message: []const u8,\n    show_prefix: bool = true,\n}"}
{"instruction":"Write a Zig struct similar to ChildrenIterator from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/element.zig","output":"pub const ChildrenIterator = struct {\n        nodes: Node.ChildNodesIterator,\n\n        pub fn next(self: *ChildrenIterator) ?*Element {\n            const node = self.nodes.next() orelse return null;\n            return node.element() orelse self.next();\n        }"}
{"instruction":"Write a Zig struct similar to TypeWithDescriptor from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub const TypeWithDescriptor = struct {\n        type: Type,\n        descriptor: []const u8,\n    }"}
{"instruction":"Write a Zig function similar to emit_enum from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/dotnet_bindings.zig","output":"fn emit_enum(\n    buffer: *std.ArrayList(u8),\n    comptime Type: type,\n    comptime type_info: anytype,\n    comptime mapping: TypeMapping,\n    comptime int_type: []const u8,\n) !void {\n    const is_packed_struct = @TypeOf(type_info) == std.builtin.Type.Struct;\n    if (is_packed_struct) {\n        assert(type_info.layout == .@\"packed\");\n        // Packed structs represented as Enum needs a Flags attribute:\n        try buffer.writer().print(\"[Flags]\\n\", .{}"}
{"instruction":"Write a Zig const similar to key from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig","output":"const key: []const u8 = std.mem.concat(main.stackAllocator.allocator, u8, &.{baseModelId, sideModelId}) catch unreachable;"}
{"instruction":"Write a Zig function similar to init from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/progress.zig","output":"pub fn init(allocator: std.mem.Allocator, stdout: std.fs.File) !Self {\n        const width = getScreenWidth(stdout.handle);\n        const buf = try std.ArrayList(u8).initCapacity(allocator, width + WIDTH_PADDING);\n        return Self{\n            .spinner = Spinner.init(),\n            .last_rendered = try std.time.Instant.now(),\n            .current = 0,\n            .estimate = 1,\n            .stdout = stdout,\n            .buf = buf,\n        }"}
{"instruction":"Write a Zig struct similar to TestingTable from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/protocol.zig","output":"const TestingTable = struct {\n    const Timestamp = u63;\n\n    boolean: ?bool = null,\n    string: ?[]const u8 = null,\n    int64: ?i64 = null,\n    uint32: ?u32 = null,\n    int32: ?i32 = null,\n    uint16: ?u16 = null,\n    int16: ?i16 = null,\n    uint8: ?u8 = null,\n    int8: ?i8 = null,\n    field_table: ?*const TestingTable = null,\n    timestamp: ?Timestamp = null,\n\n    const empty: TestingTable = .{}"}
{"instruction":"Write a Zig function similar to genTypeSpecString from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"fn genTypeSpecString(vm: *cy.VM, view: ast.AstView, opt_expr: ?*ast.Node) !cy.Value {\n    if (opt_expr) |expr| {\n        var sb: std.ArrayListUnmanaged(u8) = .{}"}
{"instruction":"Write a Zig function similar to destroyCommandBuffers from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/triangle.zig","output":"fn destroyCommandBuffers(gc: *const GraphicsContext, pool: vk.CommandPool, allocator: Allocator, cmdbufs: []vk.CommandBuffer) void {\n    gc.dev.freeCommandBuffers(pool, @truncate(cmdbufs.len), cmdbufs.ptr);\n    allocator.free(cmdbufs);\n}"}
{"instruction":"Write a Zig struct similar to BuildOption from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/BuildAssociatedConfig.zig","output":"pub const BuildOption = struct {\n    name: []const u8,\n    value: ?[]const u8 = null,\n\n    /// Duplicates the `BuildOption`, copying internal strings. Caller owns returned option with contents\n    /// allocated using `allocator`.\n    pub fn dupe(self: BuildOption, allocator: std.mem.Allocator) !BuildOption {\n        const copy_name = try allocator.dupe(u8, self.name);\n        errdefer allocator.free(copy_name);\n        const copy_value = if (self.value) |val|\n            try allocator.dupe(u8, val)\n        else\n            null;\n        return .{\n            .name = copy_name,\n            .value = copy_value,\n        }"}
{"instruction":"Write a Zig function similar to Slice_startsWith from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn Slice_startsWith(vm: *cy.VM) Value {\n    const slice = vm.getObject(*cy.heap.Array, 0).getSlice();\n    const needle = vm.getArray(1);\n    return Value.initBool(std.mem.startsWith(u8, slice, needle));\n}"}
{"instruction":"Write a Zig function similar to encode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"fn encode(self: *const @This(), encoder: *Encoder) void {\n            encoder.write_int(u16, self.reserved_1);\n            encoder.write_short_string(self.destination);\n            encoder.write_short_string(self.source);\n            encoder.write_short_string(self.routing_key);\n            var bitset_1: stdx.BitSetType(8) = .{}"}
{"instruction":"Write a Zig function similar to listSetIndex from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn listSetIndex(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (index < 0 or index > inner.len) {\n        return vm.prepPanic(\"Out of bounds.\");\n    }"}
{"instruction":"Write a Zig function similar to docComments from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn docComments(self: DeclWithHandle, allocator: std.mem.Allocator) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to tmp_struct from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"const tmp_struct = struct {\n        fn handle(\n            tmp_window: usize,\n            tmp_event_type: EventKind,\n            tmp_element: [*:0]u8,\n            tmp_event_number: usize,\n            tmp_bind_id: usize,\n        ) callconv(.c) void {\n            const len = std.mem.len(tmp_element);\n            callback(tmp_window, tmp_event_type, tmp_element[0..len], tmp_event_number, tmp_bind_id);\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@setRuntimeSafety</span>(<span class=\"tok-kw\">comptime</span> safety_on: <span class=\"tok-type\">bool</span>) <span class=\"tok-type\">void</span>"}
{"instruction":"Write a Zig function similar to varDeclaration from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn varDeclaration(\n    self: *Self,\n    identifier: ?Ast.TokenIndex,\n    parsed_type: ?Ast.Node.Index,\n    terminator: DeclarationTerminator,\n    final: bool,\n    omits_qualifier: bool,\n    should_assign: bool,\n    type_provided_later: bool,\n) Error!Ast.Node.Index {\n    const node_slot = try self.ast.nodes.addOne(self.gc.allocator);\n    var var_type = if (parsed_type) |ptype|\n        try self.ast.nodes.items(.type_def)[ptype].?.toInstance(\n            &self.gc.type_registry,\n            self.ast.nodes.items(.type_def)[ptype].?.isMutable(), // ???\n        )\n    else\n        self.gc.type_registry.any_type; // When var type omitted, will be replaced by the value type bellow\n\n    const start_location = if (omits_qualifier)\n        identifier.?\n    else if (identifier) |id|\n        id - 1\n    else\n        self.current_token.? - 2;\n\n    const slot: usize = try self.parseVariable(\n        @intCast(node_slot),\n        identifier,\n        var_type,\n        final,\n        var_type.isMutable(),\n        \"Expected variable name.\",\n    );\n\n    const name = identifier orelse start_location;\n\n    const value = if (should_assign and try self.match(.Equal))\n        try self.expression(false)\n    else\n        null;\n    const value_type_def = if (value) |val|\n        self.ast.nodes.items(.type_def)[val]\n    else\n        null;\n\n    if (should_assign and value == null and (parsed_type == null or !self.ast.nodes.items(.type_def)[parsed_type.?].?.optional)) {\n        const location = self.ast.tokens.get(self.current_token.? - 1);\n        self.reporter.reportErrorAt(\n            .syntax,\n            location,\n            location,\n            \"Expected variable initial value\",\n        );\n    }"}
{"instruction":"Write a Zig struct similar to std_options from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"pub const std_options = struct {\n\n    // Android Logging implementation\n    pub fn logFn(\n        comptime message_level: std.log.Level,\n        comptime scope: @Type(.EnumLiteral),\n        comptime format: []const u8,\n        args: anytype,\n    ) void {\n        const level = switch (message_level) {\n            //  => .ANDROID_LOG_VERBOSE,\n            .debug => android.ANDROID_LOG_DEBUG,\n            .info => android.ANDROID_LOG_INFO,\n            .warn => android.ANDROID_LOG_WARN,\n            .err => android.ANDROID_LOG_ERROR,\n        }"}
{"instruction":"Write a Zig function similar to handleForeignClose from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/ForeignToplevelHandle.zig","output":"fn handleForeignClose(\n    listener: *wl.Listener(*wlr.ForeignToplevelHandleV1),\n    _: *wlr.ForeignToplevelHandleV1,\n) void {\n    const handle: *ForeignToplevelHandle = @fieldParentPtr(\"foreign_close\", listener);\n    const view: *View = @fieldParentPtr(\"foreign_toplevel_handle\", handle);\n\n    view.close();\n}"}
{"instruction":"Write a Zig function similar to move_to_head from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig","output":"pub fn move_to_head(list: *Node, node: *Node) void {\n    if (node != list.head()) {\n        node.unlink();\n        list.link_to_head(node);\n    }"}
{"instruction":"Write a Zig function similar to deinit from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"pub fn deinit(self: *Selector, allocator: std.mem.Allocator) void {\n        for (self.parts) |part| {\n            switch (part) {\n                // TODO: intern strings\n                .local_name, .identifier, .class_name => |s| allocator.free(s),\n                else => {}"}
{"instruction":"Write a Zig function similar to resolveStringLiteral from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn resolveStringLiteral(analyser: *Analyser, options: ResolveOptions) !?[]const u8 {\n    var node_with_handle = options.node_handle;\n    if (try analyser.resolveVarDeclAlias(options)) |decl_with_handle| {\n        if (decl_with_handle.decl == .ast_node) {\n            node_with_handle = .{\n                .node = decl_with_handle.decl.ast_node,\n                .handle = decl_with_handle.handle,\n            }"}
{"instruction":"Write Zig 0.13.0 code for: usingnamespace §","input":"usingnamespace is a declaration that mixes all the public declarations of the operand, which must be a struct , union , enum , or opaque , into the namespace: test_usingnamespace.zig Shell usingnamespace has an important use case when organizing the public API of a file or package. For example, one might have c.zig with all of the C imports : c.zig The above example demonstrates using pub to qualify the usingnamespace additionally makes the imported declarations pub . This can be used to forward","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">usingnamespace</span> <span class=\"tok-builtin\">@cImport</span>({\n    <span class=\"tok-builtin\">@cInclude</span>(<span class=\"tok-str\">\"epoxy/gl.h\"</span>);\n    <span class=\"tok-builtin\">@cInclude</span>(<span class=\"tok-str\">\"GLFW/glfw3.h\"</span>);\n    <span class=\"tok-builtin\">@cDefine</span>(<span class=\"tok-str\">\"STBI_ONLY_PNG\"</span>, <span class=\"tok-str\">\"\"</span>);\n    <span class=\"tok-builtin\">@cDefine</span>(<span class=\"tok-str\">\"STBI_NO_STDIO\"</span>, <span class=\"tok-str\">\"\"</span>);\n    <span class=\"tok-builtin\">@cInclude</span>(<span class=\"tok-str\">\"stb_image.h\"</span>);\n});"}
{"instruction":"Write a Zig function similar to windowsCreateProcess from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn windowsCreateProcess(\n    app_name: [*:0]u16,\n    cmd_line: [*:0]u16,\n    envp_ptr: ?[*]u16,\n    cwd_ptr: ?[*:0]u16,\n    lpStartupInfo: *windows.STARTUPINFOW,\n    lpProcessInformation: *windows.PROCESS_INFORMATION,\n) !void {\n    // TODO the docs for environment pointer say:\n    // > A pointer to the environment block for the new process. If this parameter\n    // > is NULL, the new process uses the environment of the calling process.\n    // > ...\n    // > An environment block can contain either Unicode or ANSI characters. If\n    // > the environment block pointed to by lpEnvironment contains Unicode\n    // > characters, be sure that dwCreationFlags includes CREATE_UNICODE_ENVIRONMENT.\n    // > If this parameter is NULL and the environment block of the parent process\n    // > contains Unicode characters, you must also ensure that dwCreationFlags\n    // > includes CREATE_UNICODE_ENVIRONMENT.\n    // This seems to imply that we have to somehow know whether our process parent passed\n    // CREATE_UNICODE_ENVIRONMENT if we want to pass NULL for the environment parameter.\n    // Since we do not know this information that would imply that we must not pass NULL\n    // for the parameter.\n    // However this would imply that programs compiled with -DUNICODE could not pass\n    // environment variables to programs that were not, which seems unlikely.\n    // More investigation is needed.\n    return windows.CreateProcessW(\n        app_name,\n        cmd_line,\n        null,\n        null,\n        windows.TRUE,\n        windows.CREATE_UNICODE_ENVIRONMENT,\n        @as(?*anyopaque, @ptrCast(envp_ptr)),\n        cwd_ptr,\n        lpStartupInfo,\n        lpProcessInformation,\n    );\n}"}
{"instruction":"Write a Zig const similar to DEVICE_NOT_AVAILABLE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const DEVICE_NOT_AVAILABLE: u8 = 7;"}
{"instruction":"Write a Zig function similar to OP_GET_PATTERN_PROPERTY from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_GET_PATTERN_PROPERTY(self: *Self, location: Ast.TokenIndex, property_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_GET_PATTERN_PROPERTY,\n        property_idx,\n    );\n}"}
{"instruction":"Write a Zig function similar to getReturnState from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub fn getReturnState(self: CharacterReferenceState) State {\n            switch (self.return_state) {\n                .rcdata => |start| return .{\n                    .rcdata = start,\n                }"}
{"instruction":"Write a Zig const similar to bad_arg from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"const bad_arg: Value = .{ .err = \"expected 1 or 2 integer argument(s)\" };"}
{"instruction":"Write a Zig function similar to get from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/stream.zig","output":"pub fn get(self: *Self, fd: i32) ?*Stream {\n        const streams = self.streams.acquire();\n        defer self.streams.release();\n        const s = &streams.*[@as(usize, @intCast(fd))];\n        if (s.* == null) {\n            return null;\n        }"}
{"instruction":"Write a Zig const similar to TABLE_SIZE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/gdt.zig","output":"const TABLE_SIZE: u16 = @sizeOf(GdtEntry) * NUMBER_OF_ENTRIES - 1;"}
{"instruction":"Write a Zig struct similar to Config from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"pub const Config = struct {\n    stack_size: u32 = (std.Thread.SpawnConfig{}"}
{"instruction":"Write a Zig struct similar to Instance from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"const Instance = struct {\n        pub var instance: ?*StandaloneModuleGraph = null;\n    }"}
{"instruction":"Write a Zig function similar to generateNode from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateNode(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    if (self.synchronize(node)) {\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to handleNewInput from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputManager.zig","output":"fn handleNewInput(listener: *wl.Listener(*wlr.InputDevice), wlr_device: *wlr.InputDevice) void {\n    const input_manager: *InputManager = @fieldParentPtr(\"new_input\", listener);\n\n    input_manager.defaultSeat().addDevice(wlr_device);\n}"}
{"instruction":"Write a Zig function similar to init from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp.zig","output":"fn init(buffer: []u8) SendBuffer {\n        assert(buffer.len >= frame_min_size);\n        return .{\n            .buffer = buffer,\n            .state = .idle,\n        }"}
{"instruction":"Write a Zig function similar to parent from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub fn parent(p: Parser, node: Node) ?Node {\n        return p.at(node.parent_idx);\n    }"}
{"instruction":"Write a Zig function similar to win32GetHwnd from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn win32GetHwnd(self: webui) !windows.HWND {\n    if (builtin.os.tag != .windows) {\n        @compileError(\"Note: method win32GetHwnd only can call on MS windows!\");\n    }"}
{"instruction":"Write a Zig function similar to main from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/main.zig","output":"pub fn main() !void {\n    const gpa = state.allocator();\n\n    const args = try process.argsAlloc(gpa);\n    defer process.argsFree(gpa, args);\n\n    if (args.len > 1) {\n        if (mem.eql(u8, args[1], \"fmt\")) {\n            return fmt(gpa, args[2..]);\n        }"}
{"instruction":"Write a Zig function similar to rt_openedIdtEntries from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"fn rt_openedIdtEntries() void {\n    const loaded_idt = arch.sidt();\n    const idt_entries = @intToPtr([*]idt.IdtEntry, loaded_idt.base)[0..idt.NUMBER_OF_ENTRIES];\n\n    for (idt_entries) |entry, i| {\n        if (isValidIsr(i)) {\n            if (!idt.isIdtOpen(entry)) {\n                panic(@errorReturnTrace(), \"FAILURE: IDT entry for {}"}
{"instruction":"Write a Zig function similar to switchOut from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn switchOut(self: *ThreadState, target: Frame) void {\n        log(.debug, \"coro suspend {f}"}
{"instruction":"Write a Zig function similar to release_published_latest from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/ci.zig","output":"pub fn release_published_latest(shell: *Shell) ![]const u8 {\n    const DotnetSearch = struct {\n        const SearchResult = struct {\n            const Packages = struct {\n                id: []const u8,\n                latestVersion: []const u8,\n            }"}
{"instruction":"Write a Zig function similar to addBranch from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"fn addBranch(c: *CodeGen, cond: Ir.Ref, true_label: Ir.Ref, false_label: Ir.Ref) !void {\n    if (true_label == c.bool_end_label) {\n        if (false_label == c.bool_end_label) {\n            try c.phi_nodes.append(c.comp.gpa, .{ .label = c.builder.current_label, .value = cond }"}
{"instruction":"Write a Zig function similar to setConnection from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"fn setConnection(self: *@This(), neighbor: Neighbor, value: bool) void {\n\t\tif(value) {\n\t\t\tself.enabledConnections |= Neighbor.bitMask(neighbor);\n\t\t}"}
{"instruction":"Write a Zig function similar to toLCHuv from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"fn toLCHuv(self: RgbColorspace, color: Colorf32) CIELCHuv {\n        return self.toLuv(color).toLCHuv();\n    }"}
{"instruction":"Write a Zig const similar to music from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/music_stream.zig","output":"const music: rl.Music = try rl.loadMusicStream(\"resources/audio/country.mp3\");"}
{"instruction":"Write a Zig function similar to class_control from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"fn class_control(ptr: *anyopaque, stage: types.ControlStage, setup: *const types.SetupPacket) bool {\n        var self: *HidClassDriver = @ptrCast(@alignCast(ptr));\n\n        switch (setup.request_type.type) {\n            .Standard => {\n                if (stage == .Setup) {\n                    const hid_desc_type = HidDescType.from_u8(@intCast((setup.value >> 8) & 0xff));\n                    const request_code = types.SetupRequest.from_u8(setup.request);\n\n                    if (hid_desc_type == null or request_code == null) {\n                        return false;\n                    }"}
{"instruction":"Write a Zig function similar to nextSibling from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/selector.zig","output":"pub fn nextSibling(n: *const NodeTest) ?*const NodeTest {\n        return n.sibling;\n    }"}
{"instruction":"Write a Zig function similar to read from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"fn read(ptr: *anyopaque, prefix: [:0]const u8) anyerror![]const u8 {\n        const self: *@This() = @ptrCast(@alignCast(ptr));\n        const vm_prefix = try self.vm.allocString(prefix);\n        defer self.vm.release(vm_prefix);\n        const line = try self.vm.callFunc(self.read_line, &.{ vm_prefix }"}
{"instruction":"Write a Zig function similar to formatDir from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig","output":"fn formatDir(\n    gpa: std.mem.Allocator,\n    arena_impl: *std.heap.ArenaAllocator,\n    stdout: *Writer,\n    stderr: *Writer,\n    check: bool,\n    path: []const u8,\n    syntax_only: bool,\n) !void {\n    var dir = try std.fs.cwd().openDir(path, .{ .iterate = true }"}
{"instruction":"Write a Zig function similar to wait from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"fn wait(self: *Event) void {\n        var acquire_with: u32 = EMPTY;\n        var state = self.state.load(.monotonic);\n\n        while (true) {\n            // If we're shutdown then exit early.\n            // Acquire barrier to ensure operations before the shutdown() are seen after the wait().\n            // Shutdown is rare so it's better to have an Acquire barrier here instead of on CAS failure + load which are common.\n            if (state == SHUTDOWN) {\n                _ = self.state.load(.acquire);\n                return;\n            }"}
{"instruction":"Write a Zig function similar to next from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub fn next(p: Parser, node: Node) ?Node {\n        return p.at(node.next_idx);\n    }"}
{"instruction":"Write a Zig function similar to analyzeImportPlacement from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"fn analyzeImportPlacement(tree: Ast, imports: []const ImportDecl) ImportPlacement {\n    const root_decls = tree.rootDecls();\n\n    if (root_decls.len == 0 or imports.len == 0) return .top;\n\n    const first_import = imports[0].var_decl;\n    const last_import = imports[imports.len - 1].var_decl;\n\n    const first_decl = root_decls[0];\n    const last_decl = root_decls[root_decls.len - 1];\n\n    const starts_with_import = first_decl == first_import;\n    const ends_with_import = last_decl == last_import;\n\n    if (starts_with_import and ends_with_import) {\n        // If there are only imports, choose \"top\" to avoid unnecessary newlines.\n        // Otherwise, having an import at the bottom is a strong signal that that is the preferred style.\n        const has_gaps = root_decls.len != imports.len;\n\n        return if (has_gaps) .bottom else .top;\n    }"}
{"instruction":"Write a Zig function similar to toCaptured from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn toCaptured(idx: u8) Cstr {\n        return .{ .type = .captured, .data = .{ .captured = .{\n            .idx = idx,\n        }"}
{"instruction":"Write a Zig function similar to shelfIndex from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"fn shelfIndex(list_index: usize) ShelfIndex {\n            if (prealloc_item_count == 0) {\n                return std.math.log2_int(usize, list_index + 1);\n            }"}
{"instruction":"Write a Zig function similar to pushOp2Ext from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn pushOp2Ext(self: *ByteCodeBuffer, code: OpCode, arg: u8, arg2: u8, desc: ?u32) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + 3);\n        self.ops.items[start] = Inst.initOpCode(code);\n        self.ops.items[start+1] = .{ .val = arg }"}
{"instruction":"Write a Zig const similar to vt_opts from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: examples/vt.zig","output":"const vt_opts: vaxis.widgets.Terminal.Options = .{\n        .winsize = .{\n            .rows = 24,\n            .cols = 100,\n            .x_pixel = 0,\n            .y_pixel = 0,\n        },\n        .scrollback_size = 0,\n        .initial_working_directory = env.get(\"HOME\") orelse @panic(\"no $HOME\"),\n    };"}
{"instruction":"Write a Zig function similar to wait from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub fn wait(self: *ChildProcess) WaitError!Term {\n    try self.waitForSpawn(); // report spawn errors\n    if (self.term) |term| {\n        self.cleanupStreams();\n        return term;\n    }"}
{"instruction":"Write a Zig function similar to processNode from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"fn processNode(ctx: @TypeOf(ctx), allocator: std.mem.Allocator, ast: Ast.Slice, node: Node.Index) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to initialize from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig","output":"pub fn initialize(\n    self: *Handler,\n    _: std.mem.Allocator,\n    request: types.InitializeParams,\n) types.InitializeResult {\n    if (request.clientInfo) |clientInfo| {\n        log.info(\"client is '{s}"}
{"instruction":"Write a Zig function similar to bitSize from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn bitSize(op: Operand) u64 {\n            return switch (op) {\n                .none => unreachable,\n                .reg => |reg| reg.bitSize(),\n                .mem => |mem| mem.bitSize(),\n                .imm => unreachable,\n            }"}
{"instruction":"Write a Zig function similar to ptrTypeSimple from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn ptrTypeSimple(tree: Ast, node: Node.Index) full.PtrType {\n    std.debug.assert(tree.nodeTag(node) == .ptr_type);\n    const extra_index, const child_type = tree.nodeData(node).extra_and_node;\n    const extra = tree.extraData(extra_index, Node.PtrType);\n    return fullPtrTypeComponents(tree, .{\n        .main_token = tree.nodeMainToken(node),\n        .align_node = extra.align_node,\n        .addrspace_node = extra.addrspace_node,\n        .sentinel = extra.sentinel,\n        .bit_range_start = .none,\n        .bit_range_end = .none,\n        .child_type = child_type,\n    }"}
{"instruction":"Write a Zig function similar to readU32LE from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/bmp.zig","output":"fn readU32LE(data: []const u8, offset: usize) !u32 {\n    if (offset + 4 > data.len) return BmpError.FileCorrupted;\n    return std.mem.readInt(u32, data[offset .. offset + 4], .little);\n}"}
{"instruction":"Write a Zig function similar to hid_report_count from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub fn hid_report_count(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Global),\n        @intFromEnum(GlobalItem.ReportCount),\n        data,\n    );\n}"}
{"instruction":"Write a Zig const similar to step from foxnne/pixi","input":"Repository: foxnne/pixi (1115 ⭐)\nFile: src/editor/Editor.zig","output":"const step: f32 = (2.0 * std.math.pi) / @as(f32, @floatFromInt(tool_count));"}
{"instruction":"Write a Zig function similar to main from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/callback/main.zig","output":"pub fn main() !void {\n    try async.AsyncThread.main(std.heap.smp_allocator, asyncMain);\n}"}
{"instruction":"Write a Zig function similar to set_x from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig","output":"pub fn set_x(self: *DynStr, str_list: []const []const u8) void {\n    var strlen: usize = 0;\n    for (str_list) |str|\n        strlen += str.len;\n\n    self.vec.resize(strlen);\n\n    var ptr = self.vec.items.ptr;\n    for (str_list) |str| {\n        @memcpy(ptr, str.ptr, str.len);\n        ptr += str.len;\n    }"}
{"instruction":"Write a Zig function similar to popLocals from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn popLocals(c: *cy.Chunk, n: usize, node: *ast.Node) !void {\n    log.tracev(\"pop locals: {}"}
{"instruction":"Write a Zig const similar to NUM_TIMERS from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/million-timers.zig","output":"pub const NUM_TIMERS: usize = 10 * 1000 * 1000;"}
{"instruction":"Write a Zig function similar to addUtmpEntry from fairyglade/ly","input":"Repository: fairyglade/ly (6555 ⭐)\nFile: src/auth.zig","output":"fn addUtmpEntry(entry: *Utmp, username: []const u8, pid: c_int) !void {\n    entry.ut_type = utmp.USER_PROCESS;\n    entry.ut_pid = pid;\n\n    var buf: [std.fs.max_path_bytes]u8 = undefined;\n    const tty_path = try std.os.getFdPath(std.posix.STDIN_FILENO, &buf);\n\n    // Get the TTY name (i.e. without the /dev/ prefix)\n    var ttyname_buf: [@sizeOf(@TypeOf(entry.ut_line))]u8 = undefined;\n    _ = try std.fmt.bufPrintZ(&ttyname_buf, \"{s}"}
{"instruction":"Write a Zig function similar to parseFeatures from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn parseFeatures(allocator: Allocator, root: *xml.Element, api: registry.Api, features: *std.ArrayList(registry.Feature)) !void {\n    var it = root.findChildrenByTag(\"feature\");\n    while (it.next()) |feature| {\n        if (!requiredByApi(feature, api))\n            continue;\n\n        try features.append(allocator, try parseFeature(allocator, feature, api));\n    }"}
{"instruction":"Write a Zig function similar to max from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn max(vm: *cy.VM) Value {\n    return Value.initF64(@max(vm.getFloat(0), vm.getFloat(1)));\n}"}
{"instruction":"Write a Zig function similar to expression from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub fn expression(self: *Self, hanging: bool) Error!Ast.Node.Index {\n    return try self.parsePrecedence(.Assignment, hanging);\n}"}
{"instruction":"Write a Zig function similar to windowNotification from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig","output":"fn windowNotification(\n    self: *Handler,\n    lvl: types.MessageType,\n    comptime fmt: []const u8,\n    args: anytype,\n) !void {\n    const txt = try std.fmt.allocPrint(self.gpa, fmt, args);\n\n    try self.transport.writeNotification(\n        self.gpa,\n        \"window/showMessage\",\n        types.ShowMessageParams,\n        .{ .type = lvl, .message = txt }"}
{"instruction":"Write a Zig function similar to elements from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"pub fn elements(self: Element) ChildElementIterator {\n        return .{\n            .inner = self.iterator(),\n        }"}
{"instruction":"Write a Zig function similar to fullFor from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn fullFor(tree: Ast, node: Node.Index) ?full.For {\n    return switch (tree.nodeTag(node)) {\n        .for_simple => forSimple(tree, node),\n        .@\"for\" => forFull(tree, node),\n        else => null,\n    }"}
{"instruction":"Write a Zig function similar to setSlice from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Data.zig","output":"pub fn setSlice(self: *Data, gpa: std.mem.Allocator, key: Key, data: anytype) std.mem.Allocator.Error!void {\n    return setSliceCopies(self, gpa, key, data, 1);\n}"}
{"instruction":"Write a Zig function similar to onePossibleValue from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn onePossibleValue(ip: *InternPool, ty: Index) Index {\n    return switch (ip.indexToKey(ty)) {\n        .simple_type => |simple| switch (simple) {\n            .f16,\n            .f32,\n            .f64,\n            .f80,\n            .f128,\n            .usize,\n            .isize,\n            .c_char,\n            .c_short,\n            .c_ushort,\n            .c_int,\n            .c_uint,\n            .c_long,\n            .c_ulong,\n            .c_longlong,\n            .c_ulonglong,\n            .c_longdouble,\n            .anyopaque,\n            .bool,\n            .type,\n            .anyerror,\n            .comptime_int,\n            .comptime_float,\n            .anyframe_type,\n            .enum_literal_type,\n            => Index.none,\n\n            .empty_struct_type => Index.empty_aggregate,\n            .void => Index.void_value,\n            .noreturn => Index.unreachable_value,\n            .null_type => Index.null_value,\n            .undefined_type => Index.undefined_value,\n\n            .atomic_order,\n            .atomic_rmw_op,\n            .calling_convention,\n            .address_space,\n            .float_mode,\n            .reduce_op,\n            .modifier,\n            .prefetch_options,\n            .export_options,\n            .extern_options,\n            .type_info,\n            => Index.none,\n\n            .unknown => unreachable,\n            .generic_poison => unreachable,\n        }"}
{"instruction":"Write a Zig const similar to copy from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"const copy: Value = if (needNum(lhs, rhs)) .{\n                    .int = std.math.lossyCast(i64, @divFloor(asNum(lhs), asNum(rhs))),\n                } else .{\n                    .int = std.math.divFloor(i64, lhs.int, rhs.int) catch {\n                        try f.throw(vm, \"operation overflowed\");"}
{"instruction":"Write a Zig function similar to initStreaming from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub fn initStreaming(file_: std.fs.File) !File {\n        return .{\n            ._handle = file_.handle,\n            .inner = aio.File.init(AsyncThread.current.executor, try xev.File.init(file_)),\n            .is_streaming = true,\n        }"}
{"instruction":"Write a Zig function similar to binary from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn binary(self: *Self, _: bool, left: Ast.Node.Index) Error!Ast.Node.Index {\n    const start_location = self.ast.nodes.items(.location)[left];\n\n    const operator_token = self.current_token.? - 1;\n    const operator = self.ast.tokens.items(.tag)[operator_token];\n    const rule = getRule(operator);\n\n    const right = try self.parsePrecedence(\n        @enumFromInt(@intFromEnum(rule.precedence) + 1),\n        false,\n    );\n\n    const type_defs = self.ast.nodes.items(.type_def);\n    const right_type_def = type_defs[right];\n    const left_type_def = type_defs[left];\n\n    return try self.ast.appendNode(\n        .{\n            .tag = .Binary,\n            .location = start_location,\n            .end_location = self.current_token.? - 1,\n            .type_def = switch (operator) {\n                .QuestionQuestion => right_type_def,\n\n                .Greater,\n                .Less,\n                .GreaterEqual,\n                .LessEqual,\n                .BangEqual,\n                .EqualEqual,\n                => self.gc.type_registry.bool_type,\n\n                .Plus => left_type_def orelse right_type_def,\n\n                .ShiftLeft,\n                .ShiftRight,\n                .Ampersand,\n                .Bor,\n                .Xor,\n                => self.gc.type_registry.int_type,\n\n                .Minus,\n                .Star,\n                .Percent,\n                .Slash,\n                => if ((left_type_def != null and left_type_def.?.def_type == .Double) or (right_type_def != null and right_type_def.?.def_type == .Double))\n                    self.gc.type_registry.float_type\n                else\n                    self.gc.type_registry.int_type,\n\n                else => unreachable,\n            }"}
{"instruction":"Write a Zig function similar to run from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn run(self: SuspendBlock) void {\n            @call(.auto, self.func, .{self.data}"}
{"instruction":"Write Zig 0.14.1 code for: Values §","input":"values.zig Shell Primitive Types § Primitive Types Type C Equivalent Description i8 int8_t signed 8-bit integer u8 uint8_t unsigned 8-bit integer i16 int16_t signed 16-bit integer u16 uint16_t unsigned 16-bit integer i32 int32_t signed 32-bit integer u32 uint32_t unsigned 32-bit integer i64 int64_t signed 64-bit integer u64 uint64_t unsigned 64-bit integer i128 __int128 signed 128-bit integer u128 unsigned __int128 unsigned 128-bit integer isize intptr_t signed pointer sized integer usize uintpt","output":"<span class=\"tok-kw\">const</span> hello_world_in_c =\n    <span class=\"tok-str\">\\\\#include <stdio.h></span>\n    <span class=\"tok-str\">\\\\</span>\n    <span class=\"tok-str\">\\\\int main(int argc, char **argv) {</span>\n    <span class=\"tok-str\">\\\\    printf(\"hello world\\n\");</span>\n    <span class=\"tok-str\">\\\\    return 0;</span>\n    <span class=\"tok-str\">\\\\}</span>\n;"}
{"instruction":"Write a Zig const similar to DIV255_VEC from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const DIV255_VEC: @Vector(SIMD_SIZE, u32) = @splat(255);"}
{"instruction":"Write a Zig const similar to op3 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"const op3: Instruction.Operand = switch (enc.data.op_en) {\n                .rmi => .{ .imm = try dis.parseImm(enc.data.ops[2]) },\n                .rm => .none,\n                else => unreachable,\n            };"}
{"instruction":"Write a Zig function similar to widgetBuilder from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: examples/fuzzy.zig","output":"fn widgetBuilder(ptr: *const anyopaque, idx: usize, _: usize) ?vxfw.Widget {\n        const self: *const Model = @ptrCast(@alignCast(ptr));\n        if (idx >= self.filtered.items.len) return null;\n\n        return self.filtered.items[idx].widget();\n    }"}
{"instruction":"Write a Zig struct similar to needsZigGot from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Lower.zig","output":"const needsZigGot = struct {\n        fn needsZigGot(sym: bits.Symbol, ctx: *link.File) bool {\n            const elf_file = ctx.cast(link.File.Elf).?;\n            const sym_index = elf_file.zigObjectPtr().?.symbol(sym.sym_index);\n            return elf_file.symbol(sym_index).flags.needs_zig_got;\n        }"}
{"instruction":"Write a Zig function similar to init from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"pub fn init(elem: *xml.Element) XmlCTokenizer {\n        return .{\n            .it = elem.iterator(),\n        }"}
{"instruction":"Write a Zig function similar to isVex from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn isVex(mode: Mode) bool {\n        return switch (mode) {\n            // zig fmt: off\n            else => false,\n            .vex_128_w0, .vex_128_w1, .vex_128_wig,\n            .vex_256_w0, .vex_256_w1, .vex_256_wig,\n            .vex_lig_w0, .vex_lig_w1, .vex_lig_wig,\n            .vex_lz_w0,  .vex_lz_w1,  .vex_lz_wig,\n            => true,\n            // zig fmt: on\n        }"}
{"instruction":"Write a Zig function similar to dupe from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn dupe(slice: Slice, gpa: Allocator, ip: *InternPool) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to nvgColor from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/renderer.zig","output":"fn nvgColor(color: Color) nvg.Color {\n    return nvg.rgba(color.r, color.g, color.b, color.a);\n}"}
{"instruction":"Write a Zig function similar to run2 from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/Scheduler.zig","output":"fn run2(ctx: *anyopaque) ?u32 {\n        var self: *TestTask = @ptrCast(@alignCast(ctx));\n        self.calls.append(self.allocator, 2) catch unreachable;\n        return 2;\n    }"}
{"instruction":"Write a Zig function similar to xawait from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn xawait(frame: anytype) @TypeOf(frame).Signature.ReturnT {\n    const f = frame.frame();\n    while (f.status != .Done) xsuspend();\n    std.debug.assert(f.status == .Done);\n    return frame.xreturned();\n}"}
{"instruction":"Write a Zig function similar to lenToPointer from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn lenToPointer(fields: Fields, len: []const u8) std.meta.Tuple(&.{ registry.Pointer.PointerSize, bool }"}
{"instruction":"Write a Zig function similar to recv from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn recv(self: *TCP, buf: []u8) ?void {\n        // null means strerror(errno)\n        const errmsg: ?cc.ConstStr = e: {\n            const fdobj = self.fdobj.?;\n\n            if (self.upstream.proto != .tls) {\n                g.evloop.read(fdobj, buf) catch |err| switch (err) {\n                    error.eof => return null,\n                    error.errno => break :e null,\n                }"}
{"instruction":"Write a Zig function similar to parentElement from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"fn parentElement(i: usize) ?usize {\n            return parents[i];\n        }"}
{"instruction":"Write a Zig const similar to dfv from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"const dfv: usize = @intCast(dff);"}
{"instruction":"Write a Zig function similar to hasChildNodes from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/node.zig","output":"pub fn hasChildNodes(self: *Node) bool {\n        return self.first_child != null;\n    }"}
{"instruction":"Write a Zig const similar to string_bytes from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"const string_bytes: [*:0]u8 = @ptrCast(pool.bytes.items.ptr);"}
{"instruction":"Write a Zig function similar to cloneImmutable from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn cloneImmutable(ctx: *o.NativeCtx) callconv(.c) c_int {\n    cloneRaw(ctx, false);\n\n    return 1;\n}"}
{"instruction":"Write a Zig const similar to desktop from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const desktop: [1]u8 = \"\\x01\".*;"}
{"instruction":"Write a Zig function similar to rayIntersection from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig","output":"pub fn rayIntersection(block: Block, item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f) ?RayIntersectionResult {\n\treturn closestRay(.intersection, block, item, relativePlayerPos, playerDir);\n}"}
{"instruction":"Write a Zig function similar to renderFmt from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/id_render.zig","output":"pub fn renderFmt(self: *IdRenderer, out: *std.Io.Writer, comptime fmt: []const u8, args: anytype) !void {\n        _ = self.text_cache.writer.consumeAll();\n        try self.text_cache.writer.print(fmt, args);\n        try writeIdentifier(out, self.text_cache.writer.buffered());\n    }"}
{"instruction":"Write a Zig function similar to try_resize from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig","output":"fn try_resize() void {\n        const max_nitems = @divTrunc(_buckets.len * load_factor, 100);\n        if (_nitems < max_nitems)\n            return;\n\n        const old_len = _buckets.len;\n        const new_len = std.math.max(old_len << 1, 1 << 4);\n        _buckets = g.allocator.realloc(_buckets, new_len) catch unreachable;\n\n        // init\n        const part2 = std.mem.sliceAsBytes(_buckets.ptr[0..new_len][old_len..]);\n        @memset(part2.ptr, 0, part2.len);\n\n        var idx: usize = 0;\n        while (idx < old_len) : (idx += 1) {\n            var p: *?*CacheMsg = &_buckets[idx];\n            while (p.*) |cur| {\n                const new_idx = calc_idx(cur.hashv);\n                if (new_idx != idx) {\n                    assert(new_idx >= old_len);\n                    // remove from part 1\n                    p.* = cur.next;\n                    // add to part 2\n                    cur.next = _buckets[new_idx];\n                    _buckets[new_idx] = cur;\n                }"}
{"instruction":"Write a Zig function similar to step from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"pub fn step(self: @This(), b: *Build) *Build.Module {\n        var options = b.addOptions();\n        options.addOption(@TypeOf(self.version), \"version\", self.version);\n        options.addOption(@TypeOf(self.sha), \"sha\", self.sha);\n        options.addOption(@TypeOf(self.mimalloc), \"mimalloc\", self.mimalloc);\n        options.addOption(@TypeOf(self.cycle_limit), \"cycle_limit\", self.cycle_limit);\n        options.addOption(@TypeOf(self.recursive_call_limit), \"recursive_call_limit\", self.recursive_call_limit);\n        options.addOption(@TypeOf(self.stack_size), \"stack_size\", self.stack_size);\n\n        self.debug.step(options);\n        self.gc.step(options);\n        self.jit.step(options);\n\n        return options.createModule();\n    }"}
{"instruction":"Write a Zig function similar to newInputMethod from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputRelay.zig","output":"pub fn newInputMethod(relay: *InputRelay, input_method: *wlr.InputMethodV2) void {\n    const seat: *Seat = @fieldParentPtr(\"relay\", relay);\n\n    log.debug(\"new input method on seat {s}"}
{"instruction":"Write a Zig struct similar to ModernBertOptions from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertOptions = struct {\n    num_attention_heads: i64,\n    pad_token: u32,\n    local_attention: u32,\n    tie_word_embeddings: bool = false,\n}"}
{"instruction":"Write a Zig struct similar to Context from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub const Context = struct {\n    args: tp.message = .{}"}
{"instruction":"Write a Zig function similar to reader from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"pub fn reader(self: *Self) Reader {\n            return .{ .context = self }"}
{"instruction":"Write a Zig const similar to state from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"const state: Fd.State = v.value_ptr.*;"}
{"instruction":"Write a Zig const similar to self from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"const self: *Context = @ptrCast(@alignCast(context));"}
{"instruction":"Write a Zig function similar to hashWithHasher from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn hashWithHasher(slice: LimbSlice, hasher: anytype, ip: *InternPool) void {\n        std.hash.autoHash(hasher, slice.len);\n        if (slice.len == 0) return;\n        ip.lock.lockShared();\n        defer ip.lock.unlockShared();\n        hasher.update(std.mem.sliceAsBytes(slice.getUnprotectedSlice(ip)));\n    }"}
{"instruction":"Write a Zig function similar to ready from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn ready(self: *@This()) bool {\n        return self.fn_ready();\n    }"}
{"instruction":"Write a Zig function similar to __f32x from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __f32x(x: anytype) @TypeOf(x) {\n    _ = &x;\n    return x;\n}"}
{"instruction":"Write a Zig function similar to runtimeBlue from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn runtimeBlue(allocator: std.mem.Allocator, message: []const u8) ![]const u8 {\n    return try runtimeWrap(allocator, codes.blue, message);\n}"}
{"instruction":"Write a Zig const similar to ptr from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"const ptr: *usize = @ptrCast(@alignCast(ud.?));"}
{"instruction":"Write a Zig function similar to deinit from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/signal.zig","output":"pub fn deinit(self: *Signal) void {\n        assert(self.event != IO.INVALID_EVENT);\n        assert(self.status() == .stopped);\n\n        self.io.close_event(self.event);\n        self.* = undefined;\n    }"}
{"instruction":"Write a Zig function similar to _item from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"pub fn _item(self: *const CSSStyleDeclaration, index: usize) []const u8 {\n    const values = self.properties.entries.items(.key);\n    if (index >= values.len) {\n        return \"\";\n    }"}
{"instruction":"Write a Zig function similar to addr from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/common.zig","output":"fn addr(self: Self) usize {\n        return @intFromPtr(self.data.ptr);\n    }"}
{"instruction":"Write a Zig const similar to file_names from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"const file_names: [][]const u8 = @ptrCast(slices[0..source_files.len]);"}
{"instruction":"Write a Zig function similar to set_fdobj from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"fn set_fdobj(self: *Ev, fdobj: *const Fd) void {\n        return c.epev_set_ptrdata(self, fdobj);\n    }"}
{"instruction":"Write a Zig function similar to startScope from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn startScope(context: *ScopeContext, tag: Scope.Tag, data: Scope.Data, loc: Scope.SmallLoc) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to Parser from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/parser.zig","output":"pub const Parser = struct {\n    tok_ids: []const Token.Id,\n    tok_i: u32 = 0,\n    tok_starts: []const u32,\n    nodes: Node.List = .{}"}
{"instruction":"Write a Zig struct similar to SuspendBlock from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"const SuspendBlock = struct {\n        func: *const fn (?*anyopaque) void,\n        data: ?*anyopaque,\n\n        fn run(self: SuspendBlock) void {\n            @call(.auto, self.func, .{self.data}"}
{"instruction":"Write a Zig function similar to writeFixingWhitespace from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"fn writeFixingWhitespace(writer: anytype, slice: []const u8) !void {\n    for (slice) |byte| switch (byte) {\n        '\\t' => try writer.writeAll(\" \" ** 4),\n        '\\r' => {}"}
{"instruction":"Write a Zig struct similar to Ctx from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Buffer.zig","output":"const Ctx = struct {\n            pattern: []const u8,\n            data: *anyopaque,\n            callback: *const FindAllCallback,\n            line: usize = 0,\n            pos: usize = 0,\n            buf: []u8,\n            rest: []u8 = \"\",\n            writer: std.Io.Writer,\n\n            const Ctx = @This();\n            fn drain(w: *std.Io.Writer, data_: []const []const u8, splat: usize) std.Io.Writer.Error!usize {\n                const ctx: *Ctx = @alignCast(@fieldParentPtr(\"writer\", w));\n                if (data_.len == 0) return 0;\n                var written: usize = 0;\n                for (data_[0 .. data_.len - 1]) |bytes| {\n                    written += try ctx.write(bytes);\n                }"}
{"instruction":"Write a Zig function similar to String_decode from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn String_decode(vm: *cy.VM) Value {\n    vm.setSymbol(1, @intFromEnum(Symbol.utf8));\n    return String_decode2(vm);\n}"}
{"instruction":"Write a Zig function similar to init from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn init(sdk: *Sdk, zip_file: std.Build.LazyPath, out_name: []const u8) WriteToZip {\n        const run_cp = sdk.b.addRunArtifact(sdk.host_tools.zip_add);\n\n        run_cp.addFileArg(zip_file);\n        const output_source = run_cp.addOutputFileArg(out_name);\n\n        return WriteToZip{\n            .output_source = output_source,\n            .run_step = run_cp,\n        }"}
{"instruction":"Write a Zig function similar to sort_files_by_mtime from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn sort_files_by_mtime(self: *Self) void {\n    sort_by_mtime(File, self.files.items);\n}"}
{"instruction":"Write a Zig function similar to run from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub fn run(args: struct {\n    allocator: mem.Allocator,\n    argv: []const []const u8,\n    cwd: ?[]const u8 = null,\n    cwd_dir: ?fs.Dir = null,\n    env_map: ?*const EnvMap = null,\n    max_output_bytes: usize = 50 * 1024,\n    expand_arg0: Arg0Expand = .no_expand,\n    progress_node: std.Progress.Node = std.Progress.Node.none,\n}) RunError!RunResult {\n    var child = ChildProcess.init(args.argv, args.allocator);\n    child.stdin_behavior = .Ignore;\n    child.stdout_behavior = .Pipe;\n    child.stderr_behavior = .Pipe;\n    child.cwd = args.cwd;\n    child.cwd_dir = args.cwd_dir;\n    child.env_map = args.env_map;\n    child.expand_arg0 = args.expand_arg0;\n    child.progress_node = args.progress_node;\n\n    var stdout: std.ArrayListUnmanaged(u8) = .empty;\n    errdefer stdout.deinit(args.allocator);\n    var stderr: std.ArrayListUnmanaged(u8) = .empty;\n    errdefer stderr.deinit(args.allocator);\n\n    try child.spawn();\n    errdefer {\n        _ = child.kill() catch {}"}
{"instruction":"Write a Zig const similar to X87_FLOAT_POINT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const X87_FLOAT_POINT: u8 = 16;"}
{"instruction":"Write a Zig function similar to website from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: build.zig","output":"pub fn website(project: *std.Build, opts: Options) *std.Build.Step.Run {\n    const zine_dep = project.dependencyFromBuildZig(@This(), .{\n        .optimize = opts.debug.optimize,\n        .scope = opts.debug.scopes,\n    }"}
{"instruction":"Write a Zig function similar to main from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/async.zig","output":"pub fn main() !void {\n    const allocator = std.heap.page_allocator;\n\n    try network.init();\n    defer network.deinit();\n\n    var server = try network.Socket.create(.ipv4, .tcp);\n    defer server.close();\n\n    try server.bind(.{\n        .address = .{ .ipv4 = network.Address.IPv4.any }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@typeName</span>(T: <span class=\"tok-type\">type</span>) *<span class=\"tok-kw\">const</span> [N:<span class=\"tok-number\">0</span>]<span class=\"tok-type\">u8</span>"}
{"instruction":"Write a Zig function similar to tokenize from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/main.zig","output":"pub fn tokenize(allocator: std.mem.Allocator, tokenizer: zml.tokenizer.Tokenizer, prompt: []const u8) ![]const u32 {\n    var encoder = try tokenizer.encoder();\n    defer encoder.deinit();\n\n    const bos = tokenizer.tokenToId(\"[CLS]\") orelse return error.NoSuchToken;\n    const eos = tokenizer.tokenToId(\"[SEP]\") orelse return error.NoSuchToken;\n\n    var tokens: std.ArrayList(u32) = try .initCapacity(allocator, prompt.len);\n    try tokens.append(allocator, bos);\n    try tokens.appendSlice(allocator, try encoder.encode(prompt));\n    try tokens.append(allocator, eos);\n\n    return tokens.toOwnedSlice(allocator);\n}"}
{"instruction":"Write a Zig function similar to registerVM from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/GC.zig","output":"pub fn registerVM(self: *GC, vm: *v.VM) !void {\n    try self.active_vms.put(\n        self.allocator,\n        vm,\n        {}"}
{"instruction":"Write a Zig function similar to manPages from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: build.zig","output":"fn manPages(b: *std.Build) ![]const *Step {\n    const alloc = b.allocator;\n    var steps: std.ArrayList(*Step) = .empty;\n    defer steps.deinit(alloc);\n\n    var dir = try std.fs.cwd().openDir(try b.build_root.join(\n        b.allocator,\n        &.{\"docs\"}"}
{"instruction":"Write a Zig function similar to run from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/main.zig","output":"fn run(allocator: std.mem.Allocator, output: anytype) !void {\n    // Parse command-line arguments.\n    const cli = try clap.parse(clap.Help, &args.params, args.parsers, .{ .allocator = allocator }"}
{"instruction":"Write a Zig struct similar to default from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_type_config.zig","output":"pub const default = struct {\n    pub const name = \"text\";\n    pub const description = \"Plain Text\";\n    pub const icon = \"🖹\";\n    pub const color = 0x000000;\n}"}
{"instruction":"Write a Zig function similar to fatalExtra from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub fn fatalExtra(f: *Frame, vm: *Vm, msg: Value.String, kind: bog.Errors.Kind) Error {\n        @branchHint(.cold);\n\n        const byte_offset = f.mod.debug_info.lines.get(f.body[f.ip - 1]).?;\n        try vm.errors.add(msg, f.mod.debug_info.source, f.mod.debug_info.path, byte_offset, kind);\n        if (f.caller_frame) |some| return some.fatalExtra(vm, .{ .data = \"called here\" }"}
{"instruction":"Write a Zig function similar to cloneRaw from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"fn cloneRaw(ctx: *o.NativeCtx, mutable: bool) void {\n    const self = o.ObjList.cast(ctx.vm.peek(0).obj()).?;\n\n    var new_list = ctx.vm.gc.allocateObject(\n        o.ObjList.init(\n            ctx.vm.gc.allocator,\n            self.type_def.cloneMutable(&ctx.vm.gc.type_registry, mutable) catch {\n                ctx.vm.panic(\"Out of memory\");\n                unreachable;\n            }"}
{"instruction":"Write a Zig const similar to err from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const err: bool = webui_script_client(e, \"return 4 + 6;"}
{"instruction":"Write a Zig function similar to print from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pci.zig","output":"pub fn print(device: arch.Device) void {\n        log.info(\"BUS: 0x{X}"}
{"instruction":"Write a Zig function similar to generateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig","output":"pub fn generateData(\n\t_: *main.game.World,\n\tpos: Vec3i,\n\t_: Vec3f,\n\t_: Vec3f,\n\t_: Vec3i,\n\tneighbor: ?Neighbor,\n\tcurrentBlock: *Block,\n\tneighborBlock: Block,\n\tblockPlacing: bool,\n) bool {\n\tconst canConnectToNeighbor = currentBlock.mode() == neighborBlock.mode();\n\n\tif(blockPlacing or canConnectToNeighbor or !neighborBlock.replacable()) {\n\t\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\n\t\tvar currentData = LogData.init(currentBlock.data);\n\t\t// Log block upon placement should extend towards a block it was placed\n\t\t// on if the block is solid or also uses log model.\n\t\tconst targetVal = ((!neighborBlock.replacable() and (!neighborBlock.viewThrough() or canConnectToNeighbor)) and (canConnectToNeighbor or neighborModel.isNeighborOccluded[neighbor.?.reverse().toInt()]));\n\t\tcurrentData.setConnection(neighbor.?, targetVal);\n\n\t\tfor(Neighbor.iterable) |side| {\n\t\t\tif(side == neighbor.?) {\n\t\t\t\tcontinue;\n\t\t\t}"}
{"instruction":"Write a Zig function similar to initFromString from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"pub fn initFromString(allocator: NeverFailingAllocator, source: []const u8) !@This() {\n\t\tvar result: @This() = .{.entries = .{}"}
{"instruction":"Write a Zig function similar to __init__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __init__(self: *Self, args: struct { num: i64 }) !void {\n        self.num_ = args.num;\n    }"}
{"instruction":"Write a Zig const similar to magic_number from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"const magic_number: usize = 0x5E574D6D;"}
{"instruction":"Write a Zig const similar to request_size from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/context.zig","output":"const request_size: u32 = size: {\n                    const trailer_size = vsr.multi_batch.trailer_total_size(.{\n                        .element_size = batch.event_size,\n                        .batch_count = root.multi_batch_count + 1,\n                    });"}
{"instruction":"Write a Zig const similar to else_jump from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"const else_jump: usize = try self.OP_JUMP_IF_FALSE(locations[node]);"}
{"instruction":"Write a Zig const similar to iqr from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"const iqr: f64 = @floatFromInt(q3 - q1);"}
{"instruction":"Write a Zig function similar to OP_GET_FCONTAINER_INSTANCE_PROPERTY from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_GET_FCONTAINER_INSTANCE_PROPERTY(self: *Self, location: Ast.TokenIndex, field_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_GET_FCONTAINER_INSTANCE_PROPERTY,\n        field_idx,\n    );\n}"}
{"instruction":"Write a Zig function similar to apply from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputConfig.zig","output":"fn apply(pointer_accel: PointerAccel, device: *c.libinput_device) void {\n        _ = c.libinput_device_config_accel_set_speed(device, pointer_accel.value);\n    }"}
{"instruction":"Write a Zig function similar to getRemoteEndPoint from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn getRemoteEndPoint(self: Self) !EndPoint {\n        var addr: std.posix.sockaddr.in6 align(4) = undefined;\n        var size: std.posix.socklen_t = @sizeOf(std.posix.sockaddr.in6);\n\n        const addr_ptr: *std.posix.sockaddr = @ptrCast(&addr);\n        try std.posix.getpeername(self.internal, addr_ptr, &size);\n\n        return try EndPoint.fromSocketAddress(addr_ptr, size);\n    }"}
{"instruction":"Write a Zig function similar to insert from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn insert(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const list_value = ctx.vm.peek(2);\n    const list = o.ObjList.cast(list_value.obj()).?;\n    var index = ctx.vm.peek(1).integer();\n    const value = ctx.vm.peek(0);\n\n    if (index < 0 or list.items.items.len == 0) {\n        index = 0;\n    }"}
{"instruction":"Write a Zig function similar to validate from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig","output":"pub fn validate(\n        rule: Rule,\n        gpa: Allocator,\n        errors: *std.ArrayListUnmanaged(Ast.Error),\n        src: []const u8,\n        node_idx: u32,\n        attr: Tokenizer.Attr,\n    ) !void {\n        rule: switch (rule) {\n            .manual => unreachable,\n            .any => {}"}
{"instruction":"Write a Zig function similar to isUnsigned from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn isUnsigned(op: Op) bool {\n        return !op.isSigned();\n    }"}
{"instruction":"Write a Zig function similar to buildBrotli from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: build.zig","output":"fn buildBrotli(b: *Build, m: *Build.Module) !void {\n    const brotli = b.addLibrary(.{\n        .name = \"brotli\",\n        .root_module = m,\n    }"}
{"instruction":"Write a Zig function similar to notify from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub fn notify(d: *Debouncer) void {\n        while (true) {\n            d.cascade_mutex.lock();\n            defer d.cascade_mutex.unlock();\n\n            while (d.cascade_start_ms == 0) {\n                // no active cascade\n                d.cascade_condition.wait(&d.cascade_mutex);\n            }"}
{"instruction":"Write a Zig const similar to file_type from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig","output":"const file_type: FileType = blk: {\n        const ext = std.fs.path.extension(sub_path);"}
{"instruction":"Write a Zig struct similar to ReverseIterator from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig","output":"pub const ReverseIterator = struct {\n    sentinel: *const Node,\n    node: *Node,\n\n    pub fn next(it: *ReverseIterator) ?*Node {\n        const node = it.node;\n        if (node != it.sentinel) {\n            it.node = node.prev;\n            return node;\n        }"}
{"instruction":"Write a Zig struct similar to safebuffers from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const safebuffers = struct {}"}
{"instruction":"Write a Zig function similar to writer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub fn writer(self: *Self) Writer {\n                        return Writer{ .context = self }"}
{"instruction":"Write a Zig function similar to nodeStringAndDelim from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub fn nodeStringAndDelim(self: AstView, n: *Node) []const u8 {\n        const span: *Span = @ptrCast(n);\n        if (span.srcGen) {\n            return self.srcGen[span.pos-1..span.pos+span.len+1];\n        }"}
{"instruction":"Write a Zig function similar to retainObject from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig","output":"fn retainObject(self: *cy.VM, obj: *cy.HeapObject) void {\n    obj.head.rc += 1;\n    if (cy.Trace) {\n        checkRetainDanglingPointer(self, obj);\n        log.tracevIf(log_mem, \"{}"}
{"instruction":"Write a Zig function similar to shutdown from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"fn shutdown(self: *Event) void {\n        return self.wake(SHUTDOWN, std.math.maxInt(u32));\n    }"}
{"instruction":"Write a Zig const similar to kp_separator from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_separator: u21 = 57416;"}
{"instruction":"Write a Zig function similar to OP_POP from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_POP(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_POP);\n}"}
{"instruction":"Write a Zig function similar to is_empty from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig","output":"pub fn is_empty(self: *const DynStr) bool {\n    return self.vec.is_empty();\n}"}
{"instruction":"Write a Zig function similar to mapGet from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn mapGet(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.MapInner, &obj.map.inner);\n    if (inner.get(vm.getValue(1))) |val| {\n        vm.retain(val);\n        return anySome(vm, val) catch cy.fatal();\n    }"}
{"instruction":"Write a Zig function similar to addTests from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: build.zig","output":"fn addTests(\n    b: *std.Build,\n    target: std.Build.ResolvedTarget,\n    zigup_exe: *std.Build.Step.Compile,\n    test_step: *std.Build.Step,\n    shared_options: SharedTestOptions,\n) void {\n    const runtest_exe = b.addExecutable(.{\n        .name = \"runtest\",\n        .root_source_file = b.path(\"runtest.zig\"),\n        .target = target,\n    }"}
{"instruction":"Write a Zig function similar to iterator from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dialogs.zig","output":"pub fn iterator(self: *Dialogs, subwindow_id: ?Id) Iterator {\n    return .{ .dialogs = self, .subwindow_id = subwindow_id }"}
{"instruction":"Write a Zig function similar to create from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentStore.zig","output":"fn create(handle: *Handle, allocator: std.mem.Allocator) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to insertBefore from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/node.zig","output":"pub fn insertBefore(self: *Node, child: *Node, before: *Node) !void {\n        try self.checkParent(child, null);\n        try self.checkParent(before, self);\n\n        if (before.previous_sibling) |prev| {\n            prev.next_sibling = child;\n            prev.layout.next_sibling = &child.layout;\n            child.previous_sibling = prev;\n        }"}
{"instruction":"Write a Zig const similar to comp_h from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/diff.zig","output":"const comp_h: usize = comp.height;"}
{"instruction":"Write a Zig struct similar to Imm32 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Mir.zig","output":"pub const Imm32 = struct {\n    imm: u32,\n}"}
{"instruction":"Write a Zig function similar to make from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/generate.zig","output":"fn make(step: *std.Build.Step, options: std.Build.Step.MakeOptions) !void {\n        \\\\            _ = step;\n        \\\\            _ = options;\n        \\\\        }"}
{"instruction":"Write a Zig function similar to init from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn init(b: *Builder) void {\n    _b = b;\n\n    if (_b.verbose) {\n        _b.verbose_cimport = true;\n        _b.verbose_llvm_cpu_features = true;\n        _b.prominent_compile_errors = true;\n    }"}
{"instruction":"Write a Zig function similar to decode from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn decode(str: [:0]const u8) ![]u8 {\n    const ptr = c.webui_decode(str.ptr);\n    if (ptr) |valid_ptr| {\n        const len = std.mem.len(valid_ptr);\n        return valid_ptr[0..len];\n    }"}
{"instruction":"Write a Zig struct similar to FromName from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins.zig","output":"pub const FromName = struct {\n    tag: Tag,\n    param_str: [*:0]const u8,\n    language: properties.Language = .all_languages,\n    attributes: properties.Attributes = .{}"}
{"instruction":"Write a Zig function similar to isStatic from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn isStatic(self: DeclWithHandle) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to validate from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: common/globber.zig","output":"pub fn validate(glob: []const u8) error{InvalidGlob}"}
{"instruction":"Write a Zig const similar to bad_arg from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"const bad_arg: Value = .{ .err = \"expected 0 arguments\" };"}
{"instruction":"Write a Zig function similar to setUpChildIo from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn setUpChildIo(stdio: StdIo, pipe_fd: i32, std_fileno: i32, dev_null_fd: i32) !void {\n    switch (stdio) {\n        .Pipe => try posix.dup2(pipe_fd, std_fileno),\n        .Close => posix.close(std_fileno),\n        .Inherit => {}"}
{"instruction":"Write a Zig function similar to get_ttl from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"pub fn get_ttl(self: *const CacheMsg) i32 {\n    return self.ttl + self.calc_ttl_change(cc.time());\n}"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"pub fn forward(\n        self: SelfAttn,\n        x: Tensor,\n        token_index: Tensor,\n        kv_cache: KvCache,\n    ) struct { Tensor, KvCache }"}
{"instruction":"Write a Zig function similar to table from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/types.zig","output":"pub fn table(self: *const ConnectionProperties) Encoder.Table {\n        const vtable: Encoder.Table.VTable = comptime .{\n            .write = &struct {\n                fn write(context: *const anyopaque, encoder: *Encoder.TableEncoder) void {\n                    const properties: *const ConnectionProperties = @ptrCast(@alignCast(context));\n                    inline for (std.meta.fields(ConnectionProperties)) |field| {\n                        const value = @field(properties, field.name);\n                        encoder.put(field.name, switch (field.type) {\n                            []const u8 => .{ .string = value }"}
{"instruction":"Write a Zig struct similar to Node from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"pub const Node = struct {\n    kind: Kind = .element,\n    elem_idx: u32,\n    depth: u32,\n    parent_idx: u32 = 0,\n    first_child_idx: u32 = 0,\n    next_idx: u32 = 0,\n\n    id_template_parentid: ?html.Tokenizer.Attr = null,\n    html_text: ?html.Tokenizer.Attr = null,\n    if_loop: ?html.Tokenizer.Attr = null,\n\n    const Kind = enum {\n        root,\n        extend,\n        super,\n        ctx,\n        block,\n        super_block,\n        element,\n    }"}
{"instruction":"Write a Zig const similar to id from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const id: []const u8 = switch (response.id.?) {\n        .string => |id| id,\n        .number => |id| {\n            log.warn(\"received response from client with id '{d}' that has no handler!\", .{id});"}
{"instruction":"Write a Zig function similar to initTempValue from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn initTempValue(c: *Chunk, val: GenValue, node: *ast.Node) !void {\n    if (val.type == .temp) {\n        try initSlot(c, val.reg, val.retained, node);\n    }"}
{"instruction":"Write a Zig const similar to qt from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins/eval.zig","output":"const qt: QualType = switch (tag) {\n                    .__builtin_inff => .float,\n                    .__builtin_inf => .double,\n                    .__builtin_infl => .long_double,\n                    else => unreachable,\n                };"}
{"instruction":"Write a Zig function similar to pushUnwindTry from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn pushUnwindTry(c: *Chunk) !void {\n    log.tracev(\"+push unwind try: stack={}"}
{"instruction":"Write a Zig function similar to putEnumExtension from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/generator.zig","output":"fn putEnumExtension(self: *EnumFieldMerger, enum_name: []const u8, field: reg.Enum.Field) !void {\n        const res = try self.enum_extensions.getOrPut(self.arena, enum_name);\n        if (!res.found_existing) {\n            res.value_ptr.* = .empty;\n        }"}
{"instruction":"Write a Zig function similar to emit_enum from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_header.zig","output":"fn emit_enum(\n    buffer: *std.ArrayList(u8),\n    comptime Type: type,\n    comptime type_info: anytype,\n    comptime c_name: []const u8,\n    comptime skip_fields: []const []const u8,\n) !void {\n    var suffix_pos = std.mem.lastIndexOfScalar(u8, c_name, '_').?;\n    if (std.mem.count(u8, c_name, \"_\") == 1) suffix_pos = c_name.len;\n\n    try buffer.writer().print(\"typedef enum {s}"}
{"instruction":"Write a Zig struct similar to Condition from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"pub const Condition = struct {\n    exec: *Executor,\n    waiters: stdx.queue.SPSC(Executor.Func) = .{}"}
{"instruction":"Write a Zig function similar to setCenter from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setCenter(self: webui) void {\n    c.webui_set_center(self.window_handle);\n}"}
{"instruction":"Write a Zig function similar to storedHeader from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BlockWriter.zig","output":"fn storedHeader(self: *BlockWriter, length: usize, eof: bool) Error!void {\n    assert(length <= 65535);\n    const flag: u32 = if (eof) 1 else 0;\n    try self.bit_writer.writeBits(flag, 3);\n    try self.flush();\n    const l: u16 = @intCast(length);\n    try self.bit_writer.writeBits(l, 16);\n    try self.bit_writer.writeBits(~l, 16);\n}"}
{"instruction":"Write a Zig const similar to media_pause from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const media_pause: u21 = 57429;"}
{"instruction":"Write a Zig struct similar to cuda from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/callback/main.zig","output":"const cuda = struct {\n        // Here we leverage ZML sandboxing to access cuda symbols and their definitions.\n        const moduleLoadData = @extern(*const @TypeOf(cu.cuModuleLoadData), .{ .name = \"cuModuleLoadData\", .linkage = .weak }"}
{"instruction":"Write a Zig struct similar to Header from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/net.zig","output":"const Header = struct {\n    flags: u8,\n    gso_type: u8,\n    hdr_len: u16,\n    gso_size: u16,\n    checksum_start: u16,\n    checksum_offset: u16,\n    num_buffer: u16,\n}"}
{"instruction":"Write a Zig function similar to renderWrapperCall from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderWrapperCall(\n        self: *Self,\n        name: []const u8,\n        command: reg.Command,\n        returns: []const ReturnValue,\n        return_var_name: ?[]const u8,\n    ) !void {\n        try self.writer.writeAll(\"self.dispatch.\");\n        try self.writeIdentifier(name);\n        try self.writer.writeAll(\".?(\");\n\n        for (command.params) |param| {\n            switch (try self.classifyParam(param)) {\n                .out_pointer => {\n                    try self.writer.writeByte('&');\n                    try self.writeIdentifierWithCase(.snake, return_var_name.?);\n                    if (returns.len > 1) {\n                        try self.writer.writeByte('.');\n                        try self.writeIdentifierWithCase(.snake, derefName(param.name));\n                    }"}
{"instruction":"Write a Zig function similar to genFieldDyn from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genFieldDyn(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .fieldDyn);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Dyn, true, node);\n\n    const recv = try genExpr(c, data.rec, Cstr.simple);\n    try initTempValue(c, recv, node);\n\n    const field_id = try c.compiler.vm.ensureField(data.name);\n    try pushFieldDyn(c, recv.reg, inst.dst, @intCast(field_id), node);\n\n    try popTempValue(c, recv, node);\n    if (inst.own_dst) {\n        try initSlot(c, inst.dst, true, node);\n    }"}
{"instruction":"Write a Zig function similar to remove from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn remove(self: *PendingScript) void {\n        if (self.node) |*node| {\n            self.getList().remove(node);\n            self.node = null;\n        }"}
{"instruction":"Write a Zig function similar to createTestingErrorBundle from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DiagnosticsCollection.zig","output":"fn createTestingErrorBundle(\n    messages: []const struct {\n        message: []const u8,\n        count: u32 = 1,\n        source_location: struct {\n            src_path: []const u8,\n            line: u32,\n            column: u32,\n            span_start: u32,\n            span_main: u32,\n            span_end: u32,\n            source_line: ?[]const u8,\n        } = .{ .src_path = testing_src_path, .line = 0, .column = 0, .span_start = 0, .span_main = 0, .span_end = 0, .source_line = \"\" },\n    },\n    compile_log_text: []const u8,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to parser from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: common/flags.zig","output":"pub fn parser(comptime Arg: type, comptime flags: []const Flag) type {\n    switch (Arg) {\n        // TODO consider allowing []const u8\n        [:0]const u8, [*:0]const u8 => {}"}
{"instruction":"Write a Zig struct similar to Thread from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/async1.zig","output":"const Thread = struct {\n    loop: xev.Loop,\n    worker_async: xev.Async,\n    main_async: xev.Async,\n    worker_sent: usize = 0,\n    worker_seen: usize = 0,\n    main_sent: usize = 0,\n    main_seen: usize = 0,\n\n    pub fn init() !Thread {\n        return .{\n            .loop = try xev.Loop.init(.{}"}
{"instruction":"Write a Zig function similar to ptrTypeAligned from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn ptrTypeAligned(tree: Ast, node: Node.Index) full.PtrType {\n    std.debug.assert(tree.nodeTag(node) == .ptr_type_aligned);\n    const align_node, const child_type = tree.nodeData(node).opt_node_and_node;\n    return fullPtrTypeComponents(tree, .{\n        .main_token = tree.nodeMainToken(node),\n        .align_node = align_node,\n        .addrspace_node = .none,\n        .sentinel = .none,\n        .bit_range_start = .none,\n        .bit_range_end = .none,\n        .child_type = child_type,\n    }"}
{"instruction":"Write a Zig struct similar to Client from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/async.zig","output":"const Client = struct {\n    conn: network.Socket,\n    handle_frame: @Frame(Client.handle),\n\n    fn handle(self: *Client) !void {\n        try self.conn.writer().writeAll(\"server: welcome to the chat server\\n\");\n\n        while (true) {\n            var buf: [100]u8 = undefined;\n            const amt = try self.conn.receive(&buf);\n            if (amt == 0)\n                break; // We're done, end of connection\n            const msg = buf[0..amt];\n            std.debug.print(\"Client wrote: {s}"}
{"instruction":"Write a Zig function similar to genFn from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"fn genFn(c: *CodeGen, function: Node.Function) Error!void {\n    const name = c.tree.tokSlice(function.name_tok);\n    const func_ty = function.qt.base(c.comp).type.func;\n    c.ret_nodes.items.len = 0;\n\n    try c.builder.startFn();\n\n    for (func_ty.params) |param| {\n        // TODO handle calling convention here\n        const arg = try c.builder.addArg(try c.genType(param.qt));\n\n        const size: u32 = @intCast(param.qt.sizeof(c.comp)); // TODO add error in parser\n        const @\"align\" = param.qt.alignof(c.comp);\n        const alloc = try c.builder.addAlloc(size, @\"align\");\n        try c.builder.addStore(alloc, arg);\n        try c.symbols.append(c.comp.gpa, .{ .name = param.name, .val = alloc }"}
{"instruction":"Write a Zig const similar to argv from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: build.zig","output":"const argv: []const []const u8 = &.{\n        \"git\", \"-C\", b.pathFromRoot(\".\"), \"--git-dir\", \".git\", \"describe\", \"--match\", \"*.*.*\", \"--tags\",\n    };"}
{"instruction":"Write a Zig const similar to actual_kind from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"const actual_kind: Kind = if (namespace) |ns| blk: {\n        const normalized_ns = normalize(ns);"}
{"instruction":"Write a Zig function similar to writer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn writer(buffer: []u8) Writer {\n        return .{\n            .interface = .{\n                .vtable = &.{\n                    .drain = drain,\n                }"}
{"instruction":"Write a Zig function similar to arraySlice from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn arraySlice(vm: *cy.VM) anyerror!Value {\n    _ = vm;\n    // const arr = vm.getObject(*cy.heap.Object, 0);\n    // const elems = arr.getElemsPtr();\n    // const slice_t: cy.TypeId = @intCast(vm.getInt(1));\n\n    // const range = vm.getObject(*cy.heap.Range, 2);\n    // if (range.start < 0) {\n    //     return error.OutOfBounds;\n    // }"}
{"instruction":"Write a Zig function similar to __init__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/iterators.zig","output":"pub fn __init__(self: *Self, args: struct { lower: i64, upper: i64, step: i64 }) void {\n        self.* = .{ .lower = args.lower, .upper = args.upper, .step = args.step }"}
{"instruction":"Write a Zig const similar to arch_os_swap_release from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"const arch_os_swap_release: Release = .{ .major = 0, .minor = 14, .patch = 1 };"}
{"instruction":"Write a Zig function similar to session_eql from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn session_eql(self: *const Upstream, in_session: ?*const anyopaque) bool {\n    return self.session == in_session;\n}"}
{"instruction":"Write a Zig function similar to swapRemove from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn swapRemove(self: *Self, index: u32) void {\n            const slices = self.slice();\n            inline for (fields, 0..) |_, i| {\n                const field_slice = slices.items(@enumFromInt(i));\n                field_slice[index] = field_slice[self.len - 1];\n                field_slice[self.len - 1] = undefined;\n            }"}
{"instruction":"Write a Zig function similar to pushCallObjSym from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn pushCallObjSym(c: *cy.Chunk, ret: u8, numArgs: u8, method: u16, node: *ast.Node) !void {\n    try pushCallObjSymExt(c, ret, numArgs, method, node, cy.NullId);\n}"}
{"instruction":"Write a Zig function similar to prepThrowZError from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn prepThrowZError(ctx: cy.Context, err: anyerror, optTrace: ?*std.builtin.StackTrace) Value {\n    if (!cy.isFreestanding and C.verbose()) {\n        log.tracev(\"{}"}
{"instruction":"Write a Zig const similar to aqua from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub const aqua: PMA = .fromColor(.aqua);"}
{"instruction":"Write a Zig struct similar to RmsNorm from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"const RmsNorm = struct {\n    weight: Tensor,\n    eps: f32 = 1e-5,\n\n    /// L2 normalization of input tensor along `.d` axis.\n    pub fn forward(self: RmsNorm, input: Tensor) Tensor {\n        const x = if (input.shape().isFullyTagged()) input else input.withPartialTags(.{.d}"}
{"instruction":"Write a Zig const similar to WHITE_SHADE_FACTOR from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/io.zig","output":"const WHITE_SHADE_FACTOR: u32 = @intFromFloat(factor * 255);"}
{"instruction":"Write a Zig function similar to handleCommit from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputPopup.zig","output":"fn handleCommit(listener: *wl.Listener(*wlr.Surface), _: *wlr.Surface) void {\n    const input_popup: *InputPopup = @fieldParentPtr(\"commit\", listener);\n\n    input_popup.update();\n}"}
{"instruction":"Explain Hello World § in Zig 0.14.1","input":"","output":"hello.zig Shell Most of the time, it is more appropriate to write to stderr rather than stdout, and whether or not the message is successfully written to the stream is irrelevant. For this common case, there is a simpler API: hello_again.zig Shell In this case, the ! may be omitted from the return type of main because no errors are returned from the function. See also: Values Tuples @import Errors Entry Point Source Encoding try"}
{"instruction":"Write a Zig function similar to is_empty from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig","output":"fn is_empty(list: *const Node) bool {\n    return list.head() == list;\n}"}
{"instruction":"Write a Zig const similar to new_node_idx from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"const new_node_idx: u32 = @intCast(p.nodes.items.len - 1);"}
{"instruction":"Write a Zig const similar to light from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"const light: [4]u32 = main.renderer.chunk_meshing.PrimitiveMesh.getLight(mesh, signData.blockPos -% Vec3i{mesh.pos.wx, mesh.pos.wy, mesh.pos.wz}, 0, quad);"}
{"instruction":"Write a Zig function similar to parseAttrValue from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn parseAttrValue(parser: *Parser, alloc: Allocator) ![]const u8 {\n    const quote = try parser.consume();\n    if (quote != '\"' and quote != '\\'') return error.UnexpectedCharacter;\n\n    const begin = parser.offset;\n\n    while (true) {\n        const c = parser.consume() catch return error.UnclosedValue;\n        if (c == quote) break;\n    }"}
{"instruction":"Write a Zig const similar to new_zig_lib_path from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const new_zig_lib_path: bool = result.did_change.zig_lib_path;"}
{"instruction":"Write a Zig function similar to parseParamsEx from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn parseParamsEx(allocator: std.mem.Allocator, str: []const u8, end: *usize) ![]Param(Help) {\n    var list = std.ArrayList(Param(Help)){}"}
{"instruction":"Write a Zig function similar to windowProc from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: examples/dx11-ontop.zig","output":"fn windowProc(\n    hwnd: win32.HWND,\n    umsg: u32,\n    wparam: win32.WPARAM,\n    lparam: win32.LPARAM,\n) callconv(.winapi) win32.LRESULT {\n    switch (umsg) {\n        win32.WM_KEYDOWN, win32.WM_SYSKEYDOWN => {\n            switch (wparam) {\n                @intFromEnum(win32.VK_ESCAPE) => { //SHIFT+ESC = EXIT\n                    if (win32.GetAsyncKeyState(@intFromEnum(win32.VK_LSHIFT)) & 0x01 == 1) {\n                        win32.PostQuitMessage(0);\n                        return 0;\n                    }"}
{"instruction":"Write a Zig function similar to resolveFrameLoc from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Mir.zig","output":"pub fn resolveFrameLoc(mir: Mir, mem: Memory) Memory {\n    return switch (mem.info.base) {\n        .none, .reg, .reloc => mem,\n        .frame => if (mir.frame_locs.len > 0) Memory{\n            .info = .{\n                .base = .reg,\n                .mod = mem.info.mod,\n                .size = mem.info.size,\n                .index = mem.info.index,\n                .scale = mem.info.scale,\n            }"}
{"instruction":"Write a Zig function similar to forEach from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"pub fn forEach(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjMap.cast(ctx.vm.peek(1).obj()).?;\n    const closure = ctx.vm.peek(0);\n\n    var it = self.map.iterator();\n    while (it.next()) |kv| {\n        var args = [_]*const v.Value{ kv.key_ptr, kv.value_ptr }"}
{"instruction":"Write a Zig function similar to popLocal from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn popLocal(c: *cy.Chunk, slot: SlotId, node: *ast.Node) !void {\n    if (slot+1 != c.slot_stack.items.len) {\n        std.debug.panic(\"Expected slot {}"}
{"instruction":"Write a Zig function similar to open from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/io/memory_mapped_file.zig","output":"pub fn open(file_path: []const u8) !Self {\n    const file = try std.fs.cwd().openFile(file_path, .{ .mode = .read_only }"}
{"instruction":"Write a Zig function similar to recvfrom from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn recvfrom(\n        sock: ws2_32.SOCKET,\n        buf: []u8,\n        flags: u32,\n        src_addr: ?*std.posix.sockaddr,\n        addrlen: ?*std.posix.socklen_t,\n    ) std.posix.RecvFromError!usize {\n        while (true) {\n            const result = funcs.recvfrom(sock, buf.ptr, @intCast(buf.len), @intCast(flags), src_addr, addrlen);\n            if (result == ws2_32.SOCKET_ERROR) {\n                return switch (ws2_32.WSAGetLastError()) {\n                    .WSAEFAULT => unreachable,\n                    .WSAEINVAL => unreachable,\n                    .WSAEISCONN => unreachable,\n                    .WSAENOTSOCK => unreachable,\n                    .WSAESHUTDOWN => unreachable,\n                    .WSAEOPNOTSUPP => unreachable,\n                    .WSAETIMEDOUT, .WSAEWOULDBLOCK => error.WouldBlock,\n                    .WSAEINTR => continue,\n                    else => |err| return unexpectedWSAError(err),\n                }"}
{"instruction":"Write a Zig function similar to reduce from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"pub fn reduce(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjMap.cast(ctx.vm.peek(2).obj()).?;\n    const closure = ctx.vm.peek(1);\n    var accumulator = ctx.vm.peek(0);\n\n    var it = self.map.iterator();\n    while (it.next()) |kv| {\n        var args = [_]*const v.Value{ kv.key_ptr, kv.value_ptr, &accumulator }"}
{"instruction":"Write a Zig function similar to match from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/css/selector.zig","output":"pub fn match(m: *MatcherTest, n: *const NodeTest) !void {\n        try m.nodes.append(m.allocator, n);\n    }"}
{"instruction":"Write a Zig function similar to format from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn format(self: Self, writer: *std.Io.Writer) !void {\n            if (std.mem.eql(u8, self.value[0..12], &[_]u8{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff }"}
{"instruction":"Write a Zig function similar to match from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn match(self: *Self, tag: Token.Type) !bool {\n    if (!self.check(tag)) {\n        return false;\n    }"}
{"instruction":"Write a Zig function similar to receiveConfirmation from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn receiveConfirmation(reader: *utils.BinaryReader) !void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\ttry commands.popFront().?.finalize(main.globalAllocator, .client, reader);\n\t\t}"}
{"instruction":"Write a Zig function similar to push from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Mir.zig","output":"pub fn push(self: *Self, registers: []const Register, reg: Register) void {\n        const index = getIndexForReg(registers, reg);\n        self.bitset.set(index);\n    }"}
{"instruction":"Write a Zig function similar to bog_Errors_init from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/lib.zig","output":"fn bog_Errors_init(errors: **bog.Errors) Error {\n    const ptr = gpa.create(bog.Errors) catch |e| switch (e) {\n        error.OutOfMemory => return .OutOfMemory,\n    }"}
{"instruction":"Write a Zig function similar to isReadyRead from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn isReadyRead(self: Self, sock: Socket) bool {\n        return self.checkMaskAnyBit(sock, std.posix.POLL.IN);\n    }"}
{"instruction":"Write a Zig function similar to red from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn red(comptime message: []const u8) []const u8 {\n    return wrap(codes.red, message);\n}"}
{"instruction":"Write a Zig const similar to ICW1_EXPECT_ICW4 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const ICW1_EXPECT_ICW4: u8 = 0x01;"}
{"instruction":"Write a Zig function similar to with_target_desc from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn with_target_desc(name: []const u8, in_mode: ?BuildMode) []const u8 {\n    const target = desc_target();\n    const cpu = desc_cpu();\n    const mode = desc_mode(in_mode orelse _mode);\n    return fmt(\"{s}"}
{"instruction":"Write a Zig struct similar to GCOptions from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"const GCOptions = struct {\n        debug: bool,\n        debug_light: bool,\n        debug_access: bool,\n        on: bool,\n        initial_gc: usize,\n        next_gc_ratio: usize,\n        next_full_gc_ratio: usize,\n        memory_limit: ?usize,\n\n        pub fn step(self: GCOptions, options: *Build.Step.Options) void {\n            options.addOption(@TypeOf(self.debug), \"gc_debug\", self.debug);\n            options.addOption(@TypeOf(self.debug_light), \"gc_debug_light\", self.debug_light);\n            options.addOption(@TypeOf(self.debug_access), \"gc_debug_access\", self.debug_access);\n            options.addOption(@TypeOf(self.on), \"gc\", self.on);\n            options.addOption(@TypeOf(self.initial_gc), \"initial_gc\", self.initial_gc);\n            options.addOption(@TypeOf(self.next_gc_ratio), \"next_gc_ratio\", self.next_gc_ratio);\n            options.addOption(@TypeOf(self.next_full_gc_ratio), \"next_full_gc_ratio\", self.next_full_gc_ratio);\n            options.addOption(@TypeOf(self.memory_limit), \"memory_limit\", self.memory_limit);\n        }"}
{"instruction":"Write a Zig function similar to hid_in_out_descriptor from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig","output":"pub fn hid_in_out_descriptor(interface_number: u8, string_index: u8, boot_protocol: u8, report_desc_len: u16, endpoint_out_address: u8, endpoint_in_address: u8, endpoint_size: u16, endpoint_interval: u16) [hid_in_out_descriptor_len]u8 {\n        const desc1 = types.InterfaceDescriptor{ .interface_number = interface_number, .alternate_setting = 0, .num_endpoints = 2, .interface_class = 3, .interface_subclass = if (boot_protocol > 0) 1 else 0, .interface_protocol = boot_protocol, .interface_s = string_index }"}
{"instruction":"Write a Zig function similar to chaining from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/streaming.zig","output":"fn chaining(parser: *@This(), state: State.Chaining) !?Arg(Id) {\n            const arg = state.arg;\n            const index = state.index;\n            const next_index = index + 1;\n\n            for (parser.params) |*param| {\n                const short = param.names.short orelse continue;\n                if (short != arg[index])\n                    continue;\n\n                // Before we return, we have to set the new state of the clap\n                defer {\n                    if (arg.len <= next_index or param.takes_value != .none) {\n                        parser.state = .normal;\n                    }"}
{"instruction":"Write a Zig function similar to destroy from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/stack.zig","output":"pub fn destroy(self: *StackAllocator, stack: *Stack) void {\n        self.allocator.destroy(stack.full);\n    }"}
{"instruction":"Write a Zig function similar to append from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn append(self: *Self, gpa: Allocator, elem: S) !void {\n            try self.ensureUnusedCapacity(gpa, 1);\n            self.appendAssumeCapacity(elem);\n        }"}
{"instruction":"Write a Zig function similar to createAndGetPath from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn createAndGetPath(self: *Self) ![]const u8 {\n        const path = try self.createPath();\n        try std.fs.cwd().makePath(path);\n        return path;\n    }"}
{"instruction":"Write a Zig function similar to setMusic from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"pub fn setMusic(music: []const u8) void {\n\tmutex.lock();\n\tdefer mutex.unlock();\n\tif(std.mem.eql(u8, music, preferredMusic)) return;\n\tmain.globalAllocator.free(preferredMusic);\n\tpreferredMusic = main.globalAllocator.dupe(u8, music);\n}"}
{"instruction":"Write a Zig const similar to u8 from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"const u8: For null-terminated string data from event\n///   * [*]const u8: For raw pointer data from event\n///\n/// Note: Event and *Event parameters do not consume argument indices from the event,\n/// but all other parameter types will consume arguments in the order they appear.\n///\n/// Returns:\n/// - The binding ID that can be used to unbind later\npub fn binding(self: webui, element: [:0]const u8, comptime callback: anytype) !usize {\n    const T = @TypeOf(callback);"}
{"instruction":"Write a Zig function similar to parseParamEx from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn parseParamEx(str: []const u8, end: *usize) !Param(Help) {\n    // This function become a lot less ergonomic to use once you hit the eval branch quota. To\n    // avoid this we pick a sane default. Sadly, the only sane default is the biggest possible\n    // value. If we pick something a lot smaller and a user hits the quota after that, they have\n    // no way of overriding it, since we set it here.\n    // We can recosider this again if:\n    // * We get parseParams: https://github.com/Hejsil/zig-clap/issues/39\n    // * We get a larger default branch quota in the zig compiler (stage 2).\n    // * Someone points out how this is a really bad idea.\n    @setEvalBranchQuota(std.math.maxInt(u32));\n\n    var res = Param(Help){ .id = .{}"}
{"instruction":"Write a Zig struct similar to ModernBertModel from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertModel = struct {\n    options: ModernBertOptions,\n    embeddings: ModernBertEmbeddings,\n    layers: []ModernBertEncoderLayer,\n    final_norm: zml.nn.LayerNorm,\n\n    pub fn init(self: *ModernBertModel, options: ModernBertOptions) void {\n        self.options = options;\n        self.final_norm.eps = 1e-5;\n        self.embeddings.norm.eps = 1e-5;\n        for (self.layers, 0..) |*encoder_layer, layer_idx| {\n            encoder_layer.attn.Wqkv.weight = encoder_layer.attn.Wqkv.weight.withSharding(.{0}"}
{"instruction":"Write a Zig struct similar to AttributeValueState from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"const AttributeValueState = struct {\n        tag: Token.Tag,\n        quote: enum { double, single }"}
{"instruction":"Write a Zig function similar to Param from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn Param(comptime Id: type) type {\n    return struct {\n        id: Id,\n        names: Names = Names{}"}
{"instruction":"Write a Zig function similar to intSome from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn intSome(vm: *cy.VM, v: i48) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionInt, &.{ Value.initInt(1), Value.initInt(v) }"}
{"instruction":"Write a Zig function similar to init from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/BlockWriter.zig","output":"pub fn init(writer: *std.Io.Writer) BlockWriter {\n    return .{\n        .bit_writer = BitWriter.init(writer),\n        .fixed_literal_encoding = hc.fixedLiteralEncoder(),\n        .fixed_distance_encoding = hc.fixedDistanceEncoder(),\n        .huff_distance = hc.huffmanDistanceEncoder(),\n    }"}
{"instruction":"Write a Zig function similar to wake from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/ThreadPool.zig","output":"fn wake(self: *Event, release_with: u32, wake_threads: u32) void {\n        // Update the Event to notifty it with the new `release_with` state (either NOTIFIED or SHUTDOWN).\n        // Release barrier to ensure any operations before this are this to happen before the wait() in the other threads.\n        const state = self.state.swap(release_with, .release);\n\n        // Only wake threads sleeping in futex if the state is WAITING.\n        // Avoids unnecessary wake ups.\n        if (state == WAITING) {\n            std.Thread.Futex.wake(&self.state, wake_threads);\n        }"}
{"instruction":"Write a Zig function similar to scanFunction from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/pci.zig","output":"fn scanFunction(bus: u8, slot: u8, func: u8) ?Device {\n    const device = Device.new(bus, slot, func) catch return null;\n\n    log.info.printf(\"pci: found device at bus {}"}
{"instruction":"Write a Zig function similar to threadMain from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/ping-pongs.zig","output":"pub fn threadMain(self: *Server) !void {\n        try self.loop.run(.until_done);\n    }"}
{"instruction":"Write a Zig function similar to OP_LIST from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_LIST(self: *Self, location: Ast.TokenIndex, constant: Value) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_LIST,\n        try self.makeConstant(constant),\n    );\n}"}
{"instruction":"Write a Zig const similar to insert from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const insert: u21 = 57348;"}
{"instruction":"Write a Zig function similar to main from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/fopen.zig","output":"pub fn main() !void {\r\n    const file = c.fopen(\"ZigExamples/image_filter/build.zig\", \"rb\");\r\n    const close_status = c.fclose(file);\r\n    if (close_status != 0) {\r\n        return error.CouldNotCloseFileDescriptor;\r\n    }"}
{"instruction":"Write a Zig function similar to generateNull from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateNull(self: *Self, node: Ast.Node.Index, _: ?*Breaks) Error!?*obj.ObjFunction {\n    try self.OP_NULL(self.ast.nodes.items(.location)[node]);\n\n    try self.patchOptJumps(node);\n    try self.endScope(node);\n\n    return null;\n}"}
{"instruction":"Write a Zig const similar to ag from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const ag: c_longlong = 32;"}
{"instruction":"Write a Zig function similar to clear from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn clear(self: *ByteCodeBuffer) void {\n        self.main_pc = 0;\n        self.ops.clearRetainingCapacity();\n        self.consts.clearRetainingCapacity();\n        self.debugTable.clearRetainingCapacity();\n        self.unwind_table.clearRetainingCapacity();\n        self.debugMarkers.clearRetainingCapacity();\n        self.unwind_slots.clearRetainingCapacity();\n        self.unwind_slot_prevs.clearRetainingCapacity();\n        self.unwind_trys.clearRetainingCapacity();\n        if (cy.Trace) {\n            self.instDescs.clearRetainingCapacity();\n            for (self.instDescExtras.items) |extra| {\n                self.alloc.free(extra.text);\n            }"}
{"instruction":"Write a Zig function similar to init from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"pub fn init(browser: *Browser, page: *Page) ScriptManager {\n    // page isn't fully initialized, we can setup our reference, but that's it.\n    const allocator = browser.allocator;\n    return .{\n        .page = page,\n        .asyncs = .{}"}
{"instruction":"Write a Zig function similar to run from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/commands/auth.zig","output":"pub fn run(\n    parent_allocator: std.mem.Allocator,\n    options: Options,\n    writer: anytype,\n    T: type,\n    main_options: T,\n) !void {\n    _ = options;\n    var arena = std.heap.ArenaAllocator.init(parent_allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n\n    const Action = enum { init, create }"}
{"instruction":"Write a Zig function similar to fromOperand from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn fromOperand(operand: Instruction.Operand) Op {\n        return switch (operand) {\n            .none => .none,\n\n            .reg => |reg| switch (reg.class()) {\n                .general_purpose => if (reg.to64() == .rax)\n                    switch (reg) {\n                        .al => .al,\n                        .ax => .ax,\n                        .eax => .eax,\n                        .rax => .rax,\n                        else => unreachable,\n                    }"}
{"instruction":"Write a Zig function similar to emit_docs from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/dotnet_bindings.zig","output":"fn emit_docs(buffer: anytype, comptime mapping: TypeMapping, comptime field: ?[]const u8) !void {\n    if (mapping.docs_link) |docs_link| {\n        try buffer.writer().print(\n            \\\\    /// <summary>\n            \\\\    /// https://docs.tigerbeetle.com/{s}"}
{"instruction":"Write a Zig function similar to serveRequestsForever from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"pub fn serveRequestsForever(self: *Self) !Thread {\n            self.data.state.shutdown_wg.start();\n            const thread = try Thread.spawn(.{}"}
{"instruction":"Write a Zig function similar to from_string from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"pub fn from_string(s: []const u8) ?RGB {\n        const nib = struct {\n            fn f(c: u8) ?u8 {\n                return switch (c) {\n                    '0'...'9' => c - '0',\n                    'A'...'F' => c - 'A' + 10,\n                    'a'...'f' => c - 'a' + 10,\n                    else => null,\n                }"}
{"instruction":"Write a Zig const similar to signature from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Asset.zig","output":"pub const signature: Signature = .{ .ret = .String };"}
{"instruction":"Write a Zig function similar to get from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig","output":"fn get(question: []const u8, hashv: c_uint) ?*CacheMsg {\n        if (_buckets.len == 0)\n            return null;\n\n        const idx = calc_idx(hashv);\n\n        var p: *?*CacheMsg = &_buckets[idx];\n        while (p.*) |cur| : (p = &cur.next) {\n            if (cur.hashv == hashv and cc.memeql(cur.question(), question)) {\n                // move to head (easy to del it)\n                if (cur != _buckets[idx]) {\n                    p.* = cur.next;\n                    cur.next = _buckets[idx];\n                    _buckets[idx] = cur;\n                }"}
{"instruction":"Write a Zig function similar to generateString from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateString(self: *Self, node: Ast.Node.Index) Error!?m.MIR_op_t {\n    const elements = self.state.?.ast.nodes.items(.components)[node].String;\n    const type_defs = self.state.?.ast.nodes.items(.type_def);\n\n    if (elements.len == 0) {\n        return m.MIR_new_uint_op(\n            self.ctx,\n            self.state.?.closure.function.chunk.constants.items[0].val,\n        ); // Constant 0 is the empty string\n    }"}
{"instruction":"Write a Zig function similar to printMeasurement from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"fn printMeasurement(\n    tty_conf: std.io.tty.Config,\n    w: anytype,\n    m: Measurement,\n    name: []const u8,\n    first_m: ?Measurement,\n    command_count: usize,\n) !void {\n    try w.print(\"  {s}"}
{"instruction":"Write a Zig const similar to vec_b from dmtrKovalenko/odiff","input":"Repository: dmtrKovalenko/odiff (2626 ⭐)\nFile: src/color_delta.zig","output":"const vec_b: @Vector(2, i64) = @intCast(vec_b_u32);"}
{"instruction":"Write a Zig function similar to diagnoseIdent from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub fn diagnoseIdent(attr: Tag, arguments: *Arguments, ident: TokenIndex, p: *Parser) !bool {\n    switch (attr) {\n        inline else => |tag| {\n            const fields = @typeInfo(@field(attributes, @tagName(tag))).@\"struct\".fields;\n            if (fields.len == 0) unreachable;\n            const Unwrapped = UnwrapOptional(fields[0].type);\n            if (@typeInfo(Unwrapped) != .@\"enum\") unreachable;\n            if (std.meta.stringToEnum(Unwrapped, normalize(p.tokSlice(ident)))) |enum_val| {\n                @field(@field(arguments, @tagName(tag)), fields[0].name) = enum_val;\n                return false;\n            }"}
{"instruction":"Write a Zig function similar to asSlice from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn asSlice(v: Value) []const u8 {\n        return switch (v) {\n            .buffer => |buf| buf.bytes,\n            else => \"\",\n        }"}
{"instruction":"Write a Zig function similar to handleDestroy from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputPopup.zig","output":"fn handleDestroy(listener: *wl.Listener(void)) void {\n    const input_popup: *InputPopup = @fieldParentPtr(\"destroy\", listener);\n\n    input_popup.destroy.link.remove();\n    input_popup.map.link.remove();\n    input_popup.unmap.link.remove();\n    input_popup.commit.link.remove();\n\n    input_popup.link.remove();\n\n    util.gpa.destroy(input_popup);\n}"}
{"instruction":"Write a Zig function similar to run from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig","output":"pub fn run(gpa: std.mem.Allocator, args: []const []const u8) !noreturn {\n    log.debug(\"SuperHTML Langauge Server Started!\", .{}"}
{"instruction":"Write a Zig function similar to show_stroke_test_window from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"pub fn show_stroke_test_window() void {\n    var win = dvui.floatingWindow(@src(), .{ .rect = &StrokeTest.show_rect, .open_flag = &StrokeTest.show }"}
{"instruction":"Write a Zig struct similar to optimize from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"const optimize = struct {\n    //    //            optimize, // u32 | []const u8 -- optimize?\n    //        }"}
{"instruction":"Write a Zig struct similar to U64Value from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const U64Value = struct {\n        ty: Index,\n        int: u64,\n    }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = l;\n                _ = c;\n                const ptr: *Result = @ptrCast(@alignCast(ud.?));\n                ptr.* = r;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to deserialize from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn deserialize(reader: *utils.BinaryReader) !SyncOperation {\n\t\t\tconst typ = try reader.readEnum(SyncOperationType);\n\n\t\t\tswitch(typ) {\n\t\t\t\t.create => {\n\t\t\t\t\tvar out: SyncOperation = .{.create = .{\n\t\t\t\t\t\t.inv = try InventoryAndSlot.read(reader, .client, null),\n\t\t\t\t\t\t.amount = try reader.readInt(u16),\n\t\t\t\t\t\t.item = null,\n\t\t\t\t\t}"}
{"instruction":"Write a Zig const similar to SLAVE_DATA_REG from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const SLAVE_DATA_REG: u16 = 0xA1;"}
{"instruction":"Write a Zig function similar to init from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn init(self: *Defaults, allocator: NeverFailingAllocator) void {\n\t\t\t\tself.localArena = .init(allocator);\n\t\t\t\tself.localAllocator = self.localArena.allocator();\n\t\t\t}"}
{"instruction":"Write a Zig function similar to sendRawData from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/js_execution/main.zig","output":"fn sendRawData(e: *webui.Event, size: i64) void {\n    const win = e.getWindow();\n    \n    // Create raw binary data\n    const data_size: usize = @intCast(@min(size, 1024));\n    const raw_data = allocator.alloc(u8, data_size) catch return;\n    defer allocator.free(raw_data);\n    \n    // Fill with sample data\n    for (raw_data, 0..) |*byte, i| {\n        byte.* = @intCast(i % 256);\n    }"}
{"instruction":"Write a Zig function similar to buildNode from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig","output":"fn buildNode(\n        p: *Parser,\n        gpa: Allocator,\n        elem_idx: u32,\n        depth: u32,\n        seen_non_comment_elems: bool,\n    ) !?*Node {\n        const elem = p.html.nodes[elem_idx];\n\n        const block_mode = p.extends_idx != 0;\n        var tmp_result: Node = .{\n            .elem_idx = elem_idx,\n            .depth = depth,\n        }"}
{"instruction":"Write a Zig struct similar to ModernBertEncoderLayer from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertEncoderLayer = struct {\n    attn_norm: ?zml.nn.LayerNorm = null,\n    attn: ModernBertAttention,\n    mlp_norm: zml.nn.LayerNorm,\n    mlp: ModernBertMLP,\n\n    pub fn forward(\n        self: ModernBertEncoderLayer,\n        hidden_states: Tensor,\n        global_mask: Tensor,\n        local_mask: Tensor,\n    ) Tensor {\n        const attn_norm_output = if (self.attn_norm) |attn_norm|\n            zml.call(attn_norm, .forward, .{hidden_states}"}
{"instruction":"Write a Zig function similar to updateIdMap from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/main.zig","output":"fn updateIdMap(id_mappings: IDMappings) void {\n    var runningId: i64 = 0;\n\n    for (id_mappings) |*id_mapping| {\n        id_mapping.*.hostID = id_mapping.*.containerID;\n        id_mapping.*.containerID = runningId;\n        runningId += id_mapping.*.size;\n    }"}
{"instruction":"Write a Zig function similar to lock_stderr from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig","output":"pub fn lock_stderr(p: *Progress) void {\n    p.update_mutex.lock();\n    if (p.terminal) |file| {\n        var end: usize = 0;\n        clearWithHeldLock(p, &end);\n        _ = file.write(p.output_buffer[0..end]) catch {\n            // stop trying to write to this file\n            p.terminal = null;\n        }"}
{"instruction":"Write a Zig const similar to addr from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const addr: Address = switch (sockaddr.family) {\n                std.posix.AF.INET => block: {\n                    const bytes: *const [4]u8 = @ptrCast(sockaddr.data[2..]);"}
{"instruction":"Write a Zig function similar to intersect from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"pub fn intersect(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const lhs = o.ObjMap.cast(ctx.vm.peek(1).obj()).?;\n    const rhs = o.ObjMap.cast(ctx.vm.peek(0).obj()).?;\n\n    var new_map = ctx.vm.gc.allocateObject(\n        o.ObjMap.init(\n            ctx.vm.gc.allocator,\n            lhs.type_def,\n        ) catch {\n            ctx.vm.panic(\"Out of memory\");\n            unreachable;\n        }"}
{"instruction":"Write a Zig function similar to paste from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"pub fn paste(self: Blueprint, pos: Vec3i, flags: PasteFlags) void {\n\t\tmain.items.Inventory.Sync.ServerSide.mutex.lock();\n\t\tdefer main.items.Inventory.Sync.ServerSide.mutex.unlock();\n\t\tconst startX = pos[0];\n\t\tconst startY = pos[1];\n\t\tconst startZ = pos[2];\n\n\t\tfor(0..self.blocks.width) |x| {\n\t\t\tconst worldX = startX +% @as(i32, @intCast(x));\n\n\t\t\tfor(0..self.blocks.depth) |y| {\n\t\t\t\tconst worldY = startY +% @as(i32, @intCast(y));\n\n\t\t\t\tfor(0..self.blocks.height) |z| {\n\t\t\t\t\tconst worldZ = startZ +% @as(i32, @intCast(z));\n\n\t\t\t\t\tconst block = self.blocks.get(x, y, z);\n\t\t\t\t\tif(block.typ != voidType or flags.preserveVoid)\n\t\t\t\t\t\t_ = main.server.world.?.updateBlock(worldX, worldY, worldZ, block);\n\t\t\t\t}"}
{"instruction":"Write a Zig const similar to idx from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const idx: usize = @intCast(vm.getInt(1));"}
{"instruction":"Write a Zig const similar to new_force_autofix from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"const new_force_autofix: bool = result.did_change.force_autofix;"}
{"instruction":"Write a Zig function similar to panic from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn panic(reason: PanicCodes, subcode: usize) void {\n        const data = PanicData{\n            .reason = @intFromEnum(reason) + 0x20000,\n            .subcode = subcode,\n        }"}
{"instruction":"Write a Zig struct similar to MulticastGroup from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub const MulticastGroup = struct {\n        interface: Address.IPv4,\n        group: Address.IPv4,\n    }"}
{"instruction":"Write a Zig function similar to sendAlternative from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"fn sendAlternative(\n        arena: Allocator,\n        req: *std.http.Server.Request,\n        path: []const u8,\n        src: []const u8,\n    ) !void {\n        const ext = std.fs.path.extension(path);\n        const mime_type = mime.extension_map.get(ext) orelse\n            .@\"application/octet-stream\";\n\n        if (mime_type == .@\"text/html\") {\n            return sendHtml(arena, req, src);\n        }"}
{"instruction":"Write a Zig const similar to base from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"const base: f64 = @floatFromInt(base_u8);"}
{"instruction":"Write a Zig function similar to slide from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/SlidingWindow.zig","output":"pub fn slide(self: *Self) u16 {\n    assert(self.rp >= max_rp and self.wp >= self.rp);\n    const n = self.wp - hist_len;\n    @memcpy(self.buffer[0..n], self.buffer[hist_len..self.wp]);\n    self.rp -= hist_len;\n    self.wp -= hist_len;\n    self.fp -= hist_len;\n    return @intCast(n);\n}"}
{"instruction":"Write a Zig function similar to choicetag from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn choicetag(vm: *cy.VM) anyerror!Value {\n    const tag_t: cy.TypeId = @intCast(vm.getInt(0));\n    const type_e = vm.sema.getType(tag_t);\n    if (type_e.kind != .enum_t) {\n        return error.InvalidArgument;\n    }"}
{"instruction":"Write a Zig function similar to isSegmentRegister from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn isSegmentRegister(op: Op) bool {\n        return switch (op) {\n            .moffs, .sreg => true,\n            else => false,\n        }"}
{"instruction":"Write a Zig const similar to left_hyper from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const left_hyper: u21 = 57445;"}
{"instruction":"Write a Zig function similar to private_window_events from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/public_network_access/main.zig","output":"fn private_window_events(e: *webui.Event) void {\n    if (e.event_type == .EVENT_CONNECTED) {\n\n        // get the public window URL and port\n        const public_win_port = public_window.getPort() catch unreachable;\n        const public_win_url: [:0]const u8 = public_window.getUrl() catch return;\n\n        var buf = std.mem.zeroes([1024]u8);\n        const js_1 = std.fmt.bufPrintZ(&buf, \"document.getElementById('urlSpan1').innerHTML = 'http://localhost:{}"}
{"instruction":"Write a Zig struct similar to Position from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Config.zig","output":"pub const Position = struct {\n    x: u31,\n    y: u31,\n}"}
{"instruction":"Write a Zig function similar to get_optval from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn get_optval(name: []const u8) ?[]const u8 {\n    const opt = _b.user_input_options.getPtr(name) orelse return null;\n    return switch (opt.value) {\n        .scalar => |v| v,\n        else => null,\n    }"}
{"instruction":"Write a Zig function similar to my_function_exit from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/call_js_from_zig/main.zig","output":"fn my_function_exit(_: *webui.Event) void {\n\n    // Close all opened windows\n    webui.exit();\n}"}
{"instruction":"Write a Zig function similar to addCompilerMod from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"fn addCompilerMod(b: *std.Build, options: AddCompilerModOptions) *std.Build.Module {\n    const compiler_mod = b.createModule(.{\n        .root_source_file = b.path(\"src/main.zig\"),\n        .target = options.target,\n        .optimize = options.optimize,\n        .strip = options.strip,\n        .sanitize_thread = options.sanitize_thread,\n        .single_threaded = options.single_threaded,\n        .valgrind = options.valgrind,\n    }"}
{"instruction":"Write a Zig function similar to isString from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/Unknown.zig","output":"fn isString(_: *const encoding.Params) ?usize {\n    return null;\n}"}
{"instruction":"Write a Zig function similar to parse_bracket_link from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_link.zig","output":"pub fn parse_bracket_link(link: []const u8) error{InvalidFileLink}"}
{"instruction":"Write a Zig const similar to install_dir from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: build.zig","output":"const install_dir: std.Build.InstallDir = .{ .custom = \"artifacts\" };"}
{"instruction":"Write a Zig function similar to insertByte from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn insertByte(vm: *cy.VM) anyerror!Value {\n    const str = vm.getObject(*cy.heap.String, 0);\n    const slice = str.getSlice();\n    const idx = try cy.builtins.intAsIndex(vm.getInt(1), slice.len + 1);\n    const byte = vm.getByte(2);\n    if (str.getType().isAstring()) {\n        if (byte < 128) {\n            return vm.allocAstringConcat3(slice[0..idx], &.{ byte }"}
{"instruction":"Write a Zig function similar to KeyValue from karlseguin/http.zig","input":"Repository: karlseguin/http.zig (1217 ⭐)\nFile: src/key_value.zig","output":"fn KeyValue(V: type, hashFn: fn (key: []const u8) callconv(.@\"inline\") u8) type {\n    return struct {\n        len: usize,\n        keys: [][]const u8,\n        values: []V,\n        hashes: []u8,\n\n        const Self = @This();\n        pub const Value = V;\n\n        const alignment = @max(@alignOf([]const u8), @alignOf(V));\n        const size = @sizeOf([]const u8) + @sizeOf(V) + @sizeOf(u8);\n        const kFirst = @alignOf([]const u8) >= @alignOf(V);\n\n        pub fn init(allocator: Allocator, max: usize) Allocator.Error!Self {\n            // we want type with bigger alignment to be first.\n            // Since alignment is always a power of 2, the second type is guaranteed to have correct alignment.\n\n            const allocation = try allocator.alignedAlloc(u8, std.mem.Alignment.fromByteUnits(alignment), max * size);\n            return .{\n                .len = 0,\n                .keys = @as([*][]const u8, @alignCast(@ptrCast(if (kFirst) allocation.ptr else allocation[max * @sizeOf(V) ..].ptr)))[0..max],\n                .values = @as([*]V, @alignCast(@ptrCast(if (kFirst) allocation[max * @sizeOf([]const u8) ..].ptr else allocation.ptr)))[0..max],\n                .hashes = allocation[max * @sizeOf([]const u8) + max * @sizeOf(V) ..],\n            }"}
{"instruction":"Write a Zig struct similar to Parser from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/parser.zig","output":"pub const Parser = struct {\n    allocator: std.mem.Allocator,\n    tokenizer: Tokenizer,\n\n    /// Initialize a new parser.\n    pub fn init(allocator: std.mem.Allocator, input: []const u8) Parser {\n        return .{\n            .allocator = allocator,\n            .tokenizer = Tokenizer{ .input = input }"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/3d_picking.zig","output":"pub fn main() anyerror!void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const screenWidth = 800;\n    const screenHeight = 450;\n\n    rl.initWindow(screenWidth, screenHeight, \"raylib-zig [core] example - 3d picking\");\n\n    // Define the camera to look into our 3d world\n    var camera = rl.Camera{\n        .position = .init(10, 10, 10),\n        .target = .init(0, 0, 0),\n        .up = .init(0, 1, 0),\n        .fovy = 45,\n        .projection = .perspective,\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">const</span> parseU64 = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"error_union_parsing_u64.zig\"</span>).parseU64;\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">doAThing</span>(str: []<span class=\"tok-type\">u8</span>) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> number = parseU64(str, <span class=\"tok-number\">10</span>) <span class=\"tok-kw\">catch</span> <span class=\"tok-number\">13</span>;\n    _ = number; <span class=\"tok-comment\">// ...</span>\n}"}
{"instruction":"Write a Zig struct similar to Program from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: build.zig","output":"const Program = struct {\n    name: []const u8,\n    path: []const u8,\n    desc: []const u8,\n}"}
{"instruction":"Write a Zig function similar to on_idle from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn on_idle(self: *SessionNode) void {\n        self.node.unlink();\n    }"}
{"instruction":"Write a Zig function similar to find from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn find(this: *const StandaloneModuleGraph, name: []const u8) ?*File {\n        if (!isBunStandaloneFilePath(name)) {\n            return null;\n        }"}
{"instruction":"Write a Zig struct similar to Writer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub const Writer = struct {\n        interface: std.Io.Writer,\n    }"}
{"instruction":"Write a Zig struct similar to InventoryAndSlot from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const InventoryAndSlot = struct {\n\t\tinv: Inventory,\n\t\tslot: u32,\n\n\t\tfn ref(self: InventoryAndSlot) *ItemStack {\n\t\t\treturn &self.inv._items[self.slot];\n\t\t}"}
{"instruction":"Write a Zig const similar to b from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"const b: *bool = @ptrCast(ud.?);"}
{"instruction":"Write a Zig function similar to xasync from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn xasync(func: anytype, args: anytype, stack_: stack.Stack) !FrameT(func, @TypeOf(args)) {\n    const FrameType = CoroT.fromFunc(func, @TypeOf(args));\n    const framet = try FrameType.init(args, stack_);\n    const frame = framet.frame();\n    xresume(frame);\n    return FrameType.wrap(frame);\n}"}
{"instruction":"Write a Zig struct similar to Dot from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const Dot = struct {\n    pub const MemberKind = enum {\n        Ref,\n        Value,\n        Call,\n        EnumCase,\n    }"}
{"instruction":"Write a Zig function similar to doAThing from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/catch.zig","output":"fn doAThing(str: []u8) void {\n    const number = parseU64(str, 10) catch 13;\n    _ = number; // ...\n}"}
{"instruction":"Write a Zig function similar to nextEvent from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/platform.zig","output":"pub fn nextEvent() ?Event {\n    return events.popOrNull();\n}"}
{"instruction":"Write a Zig function similar to eatWs from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn eatWs(self: *Parser) bool {\n        var ws = false;\n\n        while (self.peek()) |ch| {\n            switch (ch) {\n                ' ', '\\t', '\\n', '\\r' => {\n                    ws = true;\n                    _ = self.consumeNoEof();\n                }"}
{"instruction":"Write a Zig function similar to is_idle from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn is_idle(self: *const UDP) bool {\n        return self.query_list.count() == 0;\n    }"}
{"instruction":"Write a Zig function similar to eql from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn eql(a: Declaration, b: Declaration) bool {\n        return std.meta.eql(a, b);\n    }"}
{"instruction":"Write a Zig struct similar to Visitor from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"pub const Visitor = struct {\n//     alloc: std.mem.Allocator,\n//     ast: AstView,\n//     stack: std.ArrayListUnmanaged(VisitNode),\n\n//     pub fn deinit(self: *Visitor) void {\n//         self.stack.deinit(self.alloc);\n//     }"}
{"instruction":"Write a Zig const similar to data from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"const data: u32 = @intCast(ev.data);"}
{"instruction":"Write a Zig function similar to ptrTypeBitRange from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn ptrTypeBitRange(tree: Ast, node: Node.Index) full.PtrType {\n    std.debug.assert(tree.nodeTag(node) == .ptr_type_bit_range);\n    const extra_index, const child_type = tree.nodeData(node).extra_and_node;\n    const extra = tree.extraData(extra_index, Node.PtrTypeBitRange);\n    return fullPtrTypeComponents(tree, .{\n        .main_token = tree.nodeMainToken(node),\n        .align_node = extra.align_node.toOptional(),\n        .addrspace_node = extra.addrspace_node,\n        .sentinel = extra.sentinel,\n        .bit_range_start = extra.bit_range_start.toOptional(),\n        .bit_range_end = extra.bit_range_end.toOptional(),\n        .child_type = child_type,\n    }"}
{"instruction":"Write a Zig function similar to generateForceUnwrap from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn generateForceUnwrap(self: *Self, node: Ast.Node.Index) Error!?m.MIR_op_t {\n    const components = self.state.?.ast.nodes.items(.components)[node].ForceUnwrap;\n\n    const expr = (try self.generateNode(components.unwrapped)).?;\n\n    const out_label = m.MIR_new_label(self.ctx);\n\n    self.BNE(\n        out_label,\n        expr,\n        m.MIR_new_uint_op(self.ctx, Value.Null.val),\n    );\n\n    try self.buildExternApiCall(\n        .bz_throw,\n        null,\n        &[_]m.MIR_op_t{\n            m.MIR_new_reg_op(self.ctx, self.state.?.vm_reg.?),\n            m.MIR_new_uint_op(self.ctx, (try self.vm.gc.copyString(\"Force unwrapped optional is null\")).toValue().val),\n        }"}
{"instruction":"Write a Zig const similar to mlp_norm_output from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"const mlp_norm_output: Tensor = zml.call(self.mlp_norm, .forward, .{output});"}
{"instruction":"Write a Zig function similar to renderString from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/encoding/Odin.zig","output":"fn renderString(\n    params: *const encoding.Params,\n    len: u64,\n) encoding.EncodeVariableError!encoding.RenderStringResult {\n    return try C.renderString(params, len);\n}"}
{"instruction":"Write a Zig function similar to unlockReg from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"pub fn unlockReg(self: *Self, lock: RegisterLock) void {\n            log.debug(\"unlocking {}"}
{"instruction":"Write a Zig struct similar to Pressed from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Keyboard.zig","output":"pub const Pressed = struct {\n    const Key = struct {\n        code: u32,\n        consumer: KeyConsumer,\n    }"}
{"instruction":"Write a Zig function similar to prepareThrowSymbol from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn prepareThrowSymbol(vm: *cy.UserVM, sym: Symbol) Value {\n    return vm.prepareThrowSymbol(@intFromEnum(sym));\n}"}
{"instruction":"Write a Zig function similar to UnwrapOptional from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"fn UnwrapOptional(comptime T: type) type {\n    return switch (@typeInfo(T)) {\n        .optional => |optional| optional.child,\n        else => T,\n    }"}
{"instruction":"Write a Zig const similar to cursor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const cursor: *Cursor = @fieldParentPtr(\"axis\", listener);"}
{"instruction":"Write a Zig function similar to eprint_c from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn eprint_c(ctx: cy.Context, arg: rt.Any) callconv(.C) rt.Error {\n    if (build_options.rt == .vm) {\n        const str = ctx.getOrBufPrintValueStr(&cy.tempBuf, arg) catch |err| {\n            return cy.builtins.prepThrowZError2(ctx, err, @errorReturnTrace());\n        }"}
{"instruction":"Write a Zig struct similar to Options from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: build.zig","output":"pub const Options = struct {\n    /// The directory that contains 'zine.ziggy'.\n    /// Defaults to the directory where your 'build.zig' lives.\n    website_root: ?std.Build.LazyPath = null,\n\n    /// Assets generated by the Zig build system to be made available to Zine.\n    build_assets: []const BuildAsset = &.{}"}
{"instruction":"Write a Zig function similar to release from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"pub fn release(locked_string: LockedString, pool: *Pool) void {\n                _ = locked_string;\n                pool.mutex.unlock();\n            }"}
{"instruction":"Write a Zig function similar to referencesHandler from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/Server.zig","output":"fn referencesHandler(server: *Server, arena: std.mem.Allocator, request: types.ReferenceParams) Error!?[]types.Location {\n    const response = try references.referencesHandler(server, arena, .{ .references = request }"}
{"instruction":"Write a Zig const similar to flags from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: build.zig","output":"const flags: []const []const u8 = &.{\n        \"-std=c99\",\n        \"-DHAVE_CONFIG_H\",\n        \"-DPCRE2_CODE_UNIT_WIDTH=8\",\n        \"-DPCRE2_STATIC\",\n    };"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/hanging.zig","output":"pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data%2);\n}"}
{"instruction":"Write a Zig struct similar to FormatOptions from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const FormatOptions = struct {\n    debug: bool = false,\n    // TODO: truncate structs, unions, enums\n    truncate_container: bool = false,\n}"}
{"instruction":"Write a Zig function similar to expectParts from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"fn expectParts(selector: []const u8, parts: []const Selector.Part) !void {\n    try expectParse(Selector, selector, Selector{ .parts = parts }"}
{"instruction":"Write a Zig function similar to print from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn print(ip: *InternPool, index: Index, writer: *std.Io.Writer, options: FormatOptions) std.Io.Writer.Error!void {\n    var tv = index;\n    const ty = ip.typeOf(tv);\n    while (true) {\n        if (options.debug and ty != .type_type) try writer.print(\"@as({f}"}
{"instruction":"Write a Zig struct similar to WindowsOSLogic from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const WindowsOSLogic = struct {\n    // The windows struct fd_set uses a statically size array of 64 sockets by default.\n    // However, it is documented that one can create bigger sets and pass them into the functions that use them.\n    // Instead, we dynamically allocate the sets and reallocate them as needed.\n    // See https://docs.microsoft.com/en-us/windows/win32/winsock/maximum-number-of-sockets-supported-2\n    const FdSet = extern struct {\n        padding1: c_uint = 0, // This is added to guarantee &size is 8 byte aligned\n        capacity: c_uint,\n        size: c_uint,\n        padding2: c_uint = 0, // This is added to guarantee &fds is 8 byte aligned\n        // fds: SOCKET[size]\n\n        fn fdSlice(self: *align(8) FdSet) []windows.ws2_32.SOCKET {\n            const ptr: [*]u8 = @ptrCast(self);\n            const socket_ptr: [*]windows.ws2_32.SOCKET = @ptrCast(@alignCast(ptr + 4 * @sizeOf(c_uint)));\n            return socket_ptr[0..self.size];\n        }"}
{"instruction":"Write a Zig function similar to FlagsMixin from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"pub fn FlagsMixin(comptime FlagsType: type) type {\n    \\\\    return struct {\n    \\\\        pub const IntType = @typeInfo(FlagsType).@\"struct\".backing_integer.?;\n    \\\\        pub fn toInt(self: FlagsType) IntType {\n    \\\\            return @bitCast(self);\n    \\\\        }"}
{"instruction":"Write a Zig const similar to dir from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig","output":"const dir: Neighbor = if(playerDir[1] < 0) .dirNegY else .dirPosY;"}
{"instruction":"Write a Zig const similar to content from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/call_js_from_zig/main.zig","output":"const content: [:0]const u8 = js[0..buf.len :0];"}
{"instruction":"Write a Zig function similar to next from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"pub fn next(ti: *TagIterator, src: []const u8) ?Tokenizer.Attr {\n            while (ti.tokenizer.next(src[0..ti.end])) |maybe_attr| switch (maybe_attr) {\n                .attr => |attr| return attr,\n                else => {}"}
{"instruction":"Write a Zig function similar to mandatoryPrefix from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn mandatoryPrefix(encoding: *const Encoding) ?u8 {\n    const prefix = encoding.data.opc[0];\n    return switch (prefix) {\n        0x66, 0xf2, 0xf3 => prefix,\n        else => null,\n    }"}
{"instruction":"Write a Zig const similar to file_name from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"const file_name: []const u8 = if (path.lexeme.len <= 1 or path.literal.String.len <= 0) invalid: {\n        self.reporter.reportErrorAt(\n            .empty_import,\n            path,\n            path,\n            \"Import path can't be empty\",\n        );"}
{"instruction":"Write a Zig const similar to ab from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const ab: c_ushort = 28;"}
{"instruction":"Write a Zig const similar to idx from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const idx: usize = @intCast(vm.getInt(2));"}
{"instruction":"Write a Zig function similar to getInventory from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn getInventory(user: *main.server.User, clientId: InventoryId) ?Inventory {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tconst serverId = user.inventoryClientToServerIdMap.get(clientId) orelse return null;\n\t\t\treturn inventories.items[@intFromEnum(serverId)].inv;\n\t\t}"}
{"instruction":"Write a Zig function similar to grouping from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn grouping(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    const expr = try self.expression(false);\n\n    try self.consume(.RightParen, \"Expected ')' after expression.\");\n\n    return try self.ast.appendNode(\n        .{\n            .tag = .Grouping,\n            .location = start_location,\n            .end_location = self.current_token.? - 1,\n            .type_def = self.ast.nodes.items(.type_def)[expr],\n            .components = .{\n                .Grouping = expr,\n            }"}
{"instruction":"Write a Zig function similar to maybeInsertNewline from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"pub fn maybeInsertNewline(self: *Self) Error!void {\n            if (!self.current_line_empty)\n                try self.insertNewline();\n        }"}
{"instruction":"Write a Zig function similar to writeFooter from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/common.zig","output":"pub fn writeFooter(file: std.fs.File, footer: Footer) !void {\n    comptime std.debug.assert(@typeInfo(Footer).Struct.layout != .auto);\n\n    if (native_endian != std.builtin.Endian.little) {\n        std.mem.byteSwapAllFields(Footer, &footer);\n    }"}
{"instruction":"Write a Zig const similar to tracy_callstack_depth from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"const tracy_callstack_depth: u32 = b.option(u32, \"tracy-callstack-depth\", \"Declare callstack depth for Tracy data. Does nothing if -Dtracy_callstack is not provided\") orelse 10;"}
{"instruction":"Write a Zig function similar to notInlinedFunc from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/ziginline/main.zig","output":"fn notInlinedFunc() usize {\n    print(\"notInlinedFunc called 1\\n\", .{}"}
{"instruction":"Write a Zig function similar to pathToUri from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DiagnosticsCollection.zig","output":"fn pathToUri(allocator: std.mem.Allocator, base_path: ?[]const u8, src_path: []const u8) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to buildZlib from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: build.zig","output":"fn buildZlib(b: *Build, m: *Build.Module) !void {\n    const zlib = b.addLibrary(.{\n        .name = \"zlib\",\n        .root_module = m,\n    }"}
{"instruction":"Write a Zig function similar to magenta from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn magenta(comptime message: []const u8) []const u8 {\n    return wrap(codes.magenta, message);\n}"}
{"instruction":"Write a Zig function similar to calcDayOfWeek from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/rtc.zig","output":"fn calcDayOfWeek(date_time: DateTime) u32 {\n    const t = [_]u8{ 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 }"}
{"instruction":"Write a Zig function similar to eatStr from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn eatStr(self: *Parser, text: []const u8) bool {\n        self.expectStr(text) catch return false;\n        return true;\n    }"}
{"instruction":"Write a Zig struct similar to Firmware from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub const Firmware = struct {\n            pub const EmittedFiles = std.AutoHashMap(BinaryFormat, LazyPath);\n\n            mb: *Self,\n\n            /// The artifact that is built by MicroZig.\n            artifact: *Build.Step.Compile,\n\n            /// The app module that is built by Zig.\n            app_mod: *Build.Module,\n\n            // The @import(\"microzig\") module\n            core_mod: *Build.Module,\n\n            /// The target to which the firmware is built.\n            target: *const Target,\n\n            emitted_elf: ?LazyPath = null,\n            emitted_files: EmittedFiles,\n            emitted_docs: ?LazyPath = null,\n\n            /// Returns the emitted ELF file for this firmware. This is useful if you need debug information\n            /// or want to use a debugger like Segger, ST-Link or similar.\n            ///\n            /// **NOTE:** This is similar, but not equivalent to `std.Build.Step.Compile.getEmittedBin`. The call on the compile step does\n            ///           not include post processing of the ELF files necessary by certain targets.\n            pub fn get_emitted_elf(fw: *Firmware) LazyPath {\n                if (fw.emitted_elf == null) {\n                    const raw_elf = fw.artifact.getEmittedBin();\n                    fw.emitted_elf = if (fw.target.patch_elf) |patch_elf|\n                        patch_elf(fw.target.dep, raw_elf)\n                    else\n                        raw_elf;\n                }"}
{"instruction":"Write a Zig function similar to diagnoseField from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"fn diagnoseField(\n    comptime decl: ZigType.Declaration,\n    comptime field: ZigType.StructField,\n    comptime Wanted: type,\n    arguments: *Arguments,\n    res: Parser.Result,\n    arg_start: TokenIndex,\n    node: Tree.Node,\n    p: *Parser,\n) !bool {\n    const string = \"a string\";\n    const identifier = \"an identifier\";\n    const int = \"an integer constant\";\n    const alignment = \"an integer constant\";\n    const nullptr_t = \"nullptr\";\n    const float = \"a floating point number\";\n    const complex_float = \"a complex floating point number\";\n    const expression = \"an expression\";\n\n    const expected: []const u8 = switch (Wanted) {\n        Value => string,\n        Identifier => identifier,\n        u32 => int,\n        Alignment => alignment,\n        CallingConvention => identifier,\n        else => switch (@typeInfo(Wanted)) {\n            .@\"enum\" => if (Wanted.opts.enum_kind == .string) string else identifier,\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig const similar to min_runtime_zig_simple from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: build.zig","output":"const min_runtime_zig_simple: std.SemanticVersion = .{ .major = min_runtime_zig.major, .minor = min_runtime_zig.minor, .patch = 0 };"}
{"instruction":"Write a Zig function similar to init from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn init(impl: *Implementation) Backend {\n    return .{ .impl = impl }"}
{"instruction":"Write a Zig function similar to isAsciiAlphaLower from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"fn isAsciiAlphaLower(c: u8) bool {\n    return (c >= 'a' and c <= 'z');\n}"}
{"instruction":"Write a Zig function similar to addMusic from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig","output":"fn addMusic(buffer: []f32) void {\n\tmutex.lock();\n\tdefer mutex.unlock();\n\tif(!std.mem.eql(u8, preferredMusic, activeMusicId)) {\n\t\tif(activeMusicId.len == 0) {\n\t\t\tif(findMusic(preferredMusic)) |musicBuffer| {\n\t\t\t\tcurrentMusic.init(musicBuffer);\n\t\t\t\tmain.globalAllocator.free(activeMusicId);\n\t\t\t\tactiveMusicId = main.globalAllocator.dupe(u8, preferredMusic);\n\t\t\t}"}
{"instruction":"Write a Zig const similar to node from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const node: Ast.Node.Index = @enumFromInt(i);"}
{"instruction":"Write a Zig function similar to audioInputCallback from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/raw_stream.zig","output":"fn audioInputCallback(buffer: ?*anyopaque, frames: c_uint) callconv(C) void {\n    audioFrequency = frequency + (audioFrequency - frequency) * 0.95;\n\n    const incr = audioFrequency / 44100;\n    const d: [*]i16 = @alignCast(@ptrCast(buffer orelse return));\n\n    for (0..frames) |i| {\n        d[i] = @intFromFloat(32000 * @sin(2 * pi * sineIdx));\n        sineIdx += incr;\n        if (sineIdx > 1) {\n            sineIdx -= 1;\n        }"}
{"instruction":"Write a Zig function similar to run from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn run(self: @This()) *Step {\n        return self.sdk.startApp(self.package_name);\n    }"}
{"instruction":"Write a Zig struct similar to PMAImage from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub const PMAImage = struct {\n    pma: []PMA,\n    width: u32,\n    height: u32,\n\n    /// the returned []PMA inside PMAImage is allocated with alloc\n    pub fn fromImageFile(dbg_name: []const u8, alloc: std.mem.Allocator, image_bytes: []const u8) !PMAImage {\n        var w: c_int = undefined;\n        var h: c_int = undefined;\n        var channels_in_file: c_int = undefined;\n        const data = dvui.c.stbi_load_from_memory(image_bytes.ptr, @as(c_int, @intCast(image_bytes.len)), &w, &h, &channels_in_file, 4);\n        if (data == null) {\n            dvui.log.warn(\"imageTexture stbi_load error on image \\\"{s}"}
{"instruction":"Write a Zig const similar to nfields from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"const nfields: u8 = @intCast(c.sema.types.items[ret_t].data.struct_t.nfields);"}
{"instruction":"Write a Zig function similar to serve from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub fn serve(gpa: Allocator, args: []const []const u8) noreturn {\n    if (builtin.single_threaded) {\n        std.debug.print(\n            \"error: single-threaded zine does not yet support running the live server, sorry\\n\\n\",\n            .{}"}
{"instruction":"Write a Zig function similar to logRefresh from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn logRefresh(self: *Debug, val: ?bool) bool {\n    self.toggle_mutex.lock();\n    defer self.toggle_mutex.unlock();\n\n    const previous = self.log_refresh;\n    if (val) |v| {\n        self.log_refresh = v;\n    }"}
{"instruction":"Write a Zig const similar to ac from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const ac: c_int = 29;"}
{"instruction":"Write a Zig struct similar to Resource from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub const Resource = struct {\n    /// This is the relative path to the resource root\n    path: []const u8,\n    /// This is the content of the file.\n    content: std.Build.LazyPath,\n}"}
{"instruction":"Write a Zig function similar to start from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Progress.zig","output":"pub fn start(self: *Node, name: []const u8, estimated_total_items: usize) Node {\n        return Node{\n            .context = self.context,\n            .parent = self,\n            .name = name,\n            .unprotected_estimated_total_items = estimated_total_items,\n            .unprotected_completed_items = 0,\n        }"}
{"instruction":"Write a Zig function similar to lookupEntry from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/mem.zig","output":"fn lookupEntry(v_addr: usize) *Self {\n        // This lock must be released by the caller.\n        var table = page_table_lock.acquire();\n        var entry: *Self = undefined;\n        const levels = [_]u6{ 4, 3, 2, 1 }"}
{"instruction":"Write a Zig struct similar to PointerAccel from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputConfig.zig","output":"pub const PointerAccel = struct {\n    value: f32,\n\n    fn apply(pointer_accel: PointerAccel, device: *c.libinput_device) void {\n        _ = c.libinput_device_config_accel_set_speed(device, pointer_accel.value);\n    }"}
{"instruction":"Write a Zig function similar to main from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/cImport_builtin.zig","output":"pub fn main() void {\n    _ = c.printf(\"hello\\n\");\n}"}
{"instruction":"Write a Zig function similar to apply from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputConfig.zig","output":"fn apply(accel_profile: AccelProfile, device: *c.libinput_device) void {\n        _ = c.libinput_device_config_accel_set_profile(device, switch (accel_profile) {\n            .none => c.LIBINPUT_CONFIG_ACCEL_PROFILE_NONE,\n            .flat => c.LIBINPUT_CONFIG_ACCEL_PROFILE_FLAT,\n            .adaptive => c.LIBINPUT_CONFIG_ACCEL_PROFILE_ADAPTIVE,\n        }"}
{"instruction":"Write a Zig const similar to white from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub const white: PMA = .fromColor(.white);"}
{"instruction":"Write a Zig const similar to playerInventory from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const playerInventory: Inventory = switch(side) {\n\t\t\t.client => main.game.Player.inventory,\n\t\t\t.server => blk: {\n\t\t\t\tif(user) |_user| {\n\t\t\t\t\tvar it = _user.inventoryClientToServerIdMap.valueIterator();"}
{"instruction":"Write a Zig function similar to gotoRawText from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub fn gotoRawText(self: *Tokenizer, tag_name: []const u8) void {\n    self.state = .{ .rawtext = self.idx }"}
{"instruction":"Write a Zig function similar to insertAssumeCapacity from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn insertAssumeCapacity(self: *Self, index: u32, elem: S) void {\n            assert(self.len < self.capacity);\n            assert(index <= self.len);\n            self.len += 1;\n            const slices = self.slice();\n            inline for (fields, 0..) |field_info, field_index| {\n                const field_slice = slices.items(@enumFromInt(field_index));\n                var i: u32 = self.len - 1;\n                while (i > index) : (i -= 1) {\n                    field_slice[i] = field_slice[i - 1];\n                }"}
{"instruction":"Write a Zig struct similar to SortContext from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"const SortContext = struct {\n    sort_closure: v.Value,\n    ctx: *o.NativeCtx,\n    map: *o.ObjMap,\n\n    pub fn lessThan(context: SortContext, lhs_index: usize, rhs_index: usize) bool {\n        const map_keys = context.map.map.keys();\n        const lhs = map_keys[lhs_index];\n        const rhs = map_keys[rhs_index];\n\n        var args = [_]*const v.Value{ &lhs, &rhs }"}
{"instruction":"Write a Zig function similar to markInitialized from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn markInitialized(self: *Self) void {\n    if (self.current.?.scope_depth == 0) {\n        self.globals.items[self.globals.items.len - 1].initialized = true;\n    }"}
{"instruction":"Write a Zig function similar to execute from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/aquila/showjson.zig","output":"pub fn execute(self_name: []const u8, args: [][:0]u8) !void {\n    _ = self_name;\n\n    const out = std.io.getStdOut().writer();\n\n    const url = try std.mem.join(gpa, \"/\", &.{ aq.server_root, args[0] }"}
{"instruction":"Write a Zig struct similar to section from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const section = struct {\n        name: Value,\n    }"}
{"instruction":"Write a Zig struct similar to Function from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Function = struct {\n        args: Index.Slice,\n        /// zig only lets the first 32 arguments be `comptime`\n        args_is_comptime: std.StaticBitSet(32) = .initEmpty(),\n        /// zig only lets the first 32 arguments be generic\n        args_is_generic: std.StaticBitSet(32) = .initEmpty(),\n        /// zig only lets the first 32 arguments be `noalias`\n        args_is_noalias: std.StaticBitSet(32) = .initEmpty(),\n        return_type: Index,\n        flags: Flags = .{}"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">doAThing</span>(str: []<span class=\"tok-type\">u8</span>) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">if</span> (parseU64(str, <span class=\"tok-number\">10</span>)) |number| {\n        doSomethingWithNumber(number);\n    } <span class=\"tok-kw\">else</span> |err| <span class=\"tok-kw\">switch</span> (err) {\n        <span class=\"tok-kw\">error</span>.Overflow => {\n            <span class=\"tok-comment\">// handle overflow...</span>\n        },\n        <span class=\"tok-comment\">// we promise that InvalidChar won't happen (or crash in debug mode if it does)</span>\n        <span class=\"tok-kw\">error</span>.InvalidChar => <span class=\"tok-kw\">unreachable</span>,\n    }\n}"}
{"instruction":"Write a Zig function similar to endScope from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn endScope(self: *Self, node: Ast.Node.Index) Error!void {\n    const location = self.ast.nodes.items(.location)[node];\n\n    if (self.ast.nodes.items(.ends_scope)[node]) |closing| {\n        for (closing) |op| {\n            try self.emitOpCode(location, op);\n        }"}
{"instruction":"Write a Zig function similar to getOrPut from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn getOrPut(self: *Self, gpa: mem.Allocator, key: K) !GetOrPutResult {\n            return try self.getOrPutContext(gpa, key, undefined);\n        }"}
{"instruction":"Explain Atomics § in Zig 0.14.1","input":"","output":"TODO: @atomic rmw TODO: builtin atomic memory ordering enum See also: @atomicLoad @atomicStore @atomicRmw @cmpxchgWeak @cmpxchgStrong"}
{"instruction":"Write a Zig function similar to deinit from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn deinit(self: *const Upstream) void {\n    assert(self.session == null);\n\n    if (self.host) |host|\n        g.allocator.free(cc.strslice_c(host));\n\n    g.allocator.free(cc.strslice_c(self.url));\n}"}
{"instruction":"Write Zig 0.15.1 code for: C §","input":"Although Zig is independent of C, and, unlike most other languages, does not depend on libc, Zig acknowledges the importance of interacting with existing C code. There are a few ways that Zig facilitates C interop. C Type Primitives § These have guaranteed C ABI compatibility and can be used like any other type. c_char c_short c_ushort c_int c_uint c_long c_ulong c_longlong c_ulonglong c_longdouble To interop with the C void type, use anyopaque . See also: Primitive Types Import from C Header Fi","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">build</span>(b: *std.Build) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> lib = b.addLibrary(.{\n        .linkage = .dynamic,\n        .name = <span class=\"tok-str\">\"mathtest\"</span>,\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(<span class=\"tok-str\">\"mathtest.zig\"</span>),\n        }),\n        .version = .{ .major = <span class=\"tok-number\">1</span>, .minor = <span class=\"tok-number\">0</span>, .patch = <span class=\"tok-number\">0</span> },\n    });\n    <span class=\"tok-kw\">const</span> exe = b.addExecutable(.{\n        .name = <span class=\"tok-str\">\"test\"</span>,\n        .root_module = b.createModule(.{\n            .link_libc = <span class=\"tok-null\">true</span>,\n        }),\n    });\n    exe.root_module.addCSourceFile(.{ .file = b.path(<span class=\"tok-str\">\"test.c\"</span>), .flags = &.{<span class=\"tok-str\">\"-std=c99\"</span>} });\n    exe.root_module.linkLibrary(lib);\n\n    b.default_step.dependOn(&exe.step);\n\n    <span class=\"tok-kw\">const</span> run_cmd = exe.run();\n\n    <span class=\"tok-kw\">const</span> test_step = b.step(<span class=\"tok-str\">\"test\"</span>, <span class=\"tok-str\">\"Test the program\"</span>);\n    test_step.dependOn(&run_cmd.step);\n}"}
{"instruction":"Write a Zig function similar to finalize from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn finalize(self: Command, allocator: NeverFailingAllocator, side: Side, reader: *utils.BinaryReader) !void {\n\t\tfor(self.baseOperations.items) |step| {\n\t\t\tswitch(step) {\n\t\t\t\t.move, .swap, .create, .addHealth, .addEnergy => {}"}
{"instruction":"Write a Zig function similar to populateEmptyCollectionType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"pub fn populateEmptyCollectionType(self: *Self, value: Ast.Node.Index, target_type: *obj.ObjTypeDef) void {\n    const tags = self.ast.nodes.items(.tag);\n    const components = self.ast.nodes.items(.components);\n\n    // variable: [T] = [<any>] -> variable: [T] = [<T>];\n    if (target_type.def_type == .List and\n        tags[value] == .List and\n        components[value].List.explicit_item_type == null and\n        components[value].List.items.len == 0)\n    {\n        self.ast.nodes.items(.type_def)[value] = target_type;\n    }"}
{"instruction":"Write a Zig struct similar to IfExpr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig","output":"const IfExpr = struct {\n    cond: *Node align(8),\n    body: *Node,\n    else_expr: *Node,\n    pos: u32,\n}"}
{"instruction":"Write a Zig function similar to block from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn block(self: *Self, loop_scope: ?LoopScope) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    var statements = std.ArrayList(Ast.Node.Index).empty;\n    while (!self.check(.RightBrace) and !self.check(.Eof)) {\n        if (try self.declarationOrStatement(loop_scope)) |declOrStmt| {\n            try statements.append(self.gc.allocator, declOrStmt);\n        }"}
{"instruction":"Write a Zig function similar to nextNoEof from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"fn nextNoEof(self: *XmlCTokenizer) !Token {\n        return (try self.next()) orelse return error.UnexpectedEof;\n    }"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig","output":"pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@as(u5, @truncate(block.data)) -| 1);\n}"}
{"instruction":"Write a Zig struct similar to Command from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub const Command = struct {\n    host: []const u8,\n    port: u16,\n    debounce: u16,\n    build_assets: std.StringArrayHashMapUnmanaged(BuildAsset),\n    drafts: bool,\n\n    fn parseAddress(arg: []const u8) struct { []const u8, ?u16 }"}
{"instruction":"Write a Zig struct similar to FunctionType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const FunctionType = struct {\n    is_signature: bool,\n    name: ?TokenIndex,\n    return_type: ?Node.Index,\n    yield_type: ?Node.Index,\n    error_types: []const Node.Index,\n    arguments: []const Argument,\n    /// If the struct is use as the function signature, this is a list of nodes otherwise its a list of tokens\n    /// Since `TokenIndex` and `Node.Index` are actually the same type, we don't make this any more complicated\n    generic_types: []const TokenIndex,\n    lambda: bool,\n\n    pub const Argument = struct {\n        name: TokenIndex,\n        type: Node.Index,\n        default: ?Node.Index,\n    }"}
{"instruction":"Write a Zig struct similar to tls_model from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const tls_model = struct {\n        model: enum {\n            @\"global-dynamic\",\n            @\"local-dynamic\",\n            @\"initial-exec\",\n            @\"local-exec\",\n\n            const opts = struct {\n                const enum_kind = .string;\n            }"}
{"instruction":"Write a Zig function similar to deserialize from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !Open {\n\t\t\tif(side != .server or user == null) return error.Invalid;\n\t\t\tconst id = try reader.readEnum(InventoryId);\n\t\t\tconst len = try reader.readInt(u64);\n\t\t\tconst typeEnum = try reader.readEnum(TypeEnum);\n\t\t\tconst sourceType = try reader.readEnum(SourceType);\n\t\t\tconst source: Source = switch(sourceType) {\n\t\t\t\t.playerInventory => .{.playerInventory = try reader.readInt(u32)}"}
{"instruction":"Write a Zig function similar to getAttribute from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/element.zig","output":"pub fn getAttribute(self: *Element, name: []const u8) ?[]const u8 {\n        return self.attributes.get(name);\n    }"}
{"instruction":"Write a Zig function similar to runUnwindReleases from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig","output":"pub fn runUnwindReleases(vm: *cy.VM, fp: [*]const cy.Value, key: cy.fiber.UnwindKey) void {\n    log.tracev(\"unwind releases\", .{}"}
{"instruction":"Write a Zig function similar to allocSpecFilePath from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig","output":"pub fn allocSpecFilePath(alloc: std.mem.Allocator, entry: SpecEntry) ![]const u8 {\n    const cyberPath = try getCyberPath(alloc);\n    return try std.fs.path.join(alloc, &.{cyberPath, entry.spec}"}
{"instruction":"Write a Zig function similar to newEvent from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub fn newEvent(d: *Debouncer) void {\n        {\n            d.cascade_mutex.lock();\n            defer d.cascade_mutex.unlock();\n            d.cascade_start_ms = std.time.milliTimestamp();\n        }"}
{"instruction":"Write a Zig function similar to renderToken from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"fn renderToken(tree: Tree, token: Token.Index, aiw: anytype, space: Space) !void {\n    const slice = tree.tokenSlice(token);\n    const starts = tree.tokens.items(.end);\n    const ends = tree.tokens.items(.end);\n    try aiw.writer().writeAll(slice);\n    switch (space) {\n        .none => {}"}
{"instruction":"Write a Zig const similar to full_bars_len from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/progress.zig","output":"const full_bars_len: usize = @intCast(prog_len / 2);"}
{"instruction":"Write a Zig function similar to deinit from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"pub fn deinit(list: *Self) void {\n        list.list.deinit(list.allocator);\n        list.* = undefined;\n    }"}
{"instruction":"Write a Zig const similar to kp_7 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_7: u21 = 57406;"}
{"instruction":"Write a Zig function similar to recover from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn recover(self: *Runner) void {\n        assert(self.connected.amqp);\n        assert(self.state == .unknown);\n        const recovery_mode = self.state.unknown;\n        const timestamp_override: ?u64 = switch (recovery_mode) {\n            .recover => null,\n            .override => |timestamp| timestamp,\n        }"}
{"instruction":"Write a Zig struct similar to Llama from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"pub const Llama = struct {\n    embed_tokens: zml.nn.TokenEmbedding,\n    norm: RmsNorm,\n    layers: []TransformerLayer,\n\n    max_seq_len: u32 = 0,\n    num_heads: u32 = 32,\n    num_kv_heads: u32 = 32,\n    rope_opts: zml.nn.RopeOpts = .{\n        .layout = .interleaved,\n        .freq_base = 10_000,\n    }"}
{"instruction":"Write a Zig function similar to publishDiagnostics from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DiagnosticsCollection.zig","output":"pub fn publishDiagnostics(collection: *DiagnosticsCollection) (std.mem.Allocator.Error || std.posix.WriteError)!void {\n    const transport = collection.transport orelse return;\n\n    var arena_allocator: std.heap.ArenaAllocator = .init(collection.allocator);\n    defer arena_allocator.deinit();\n\n    while (true) {\n        const json_message = blk: {\n            collection.mutex.lock();\n            defer collection.mutex.unlock();\n\n            const entry = collection.outdated_files.pop() orelse break;\n            defer collection.allocator.free(entry.key);\n            const document_uri = entry.key;\n\n            _ = arena_allocator.reset(.retain_capacity);\n\n            var diagnostics: std.ArrayList(lsp.types.Diagnostic) = .empty;\n            try collection.collectLspDiagnosticsForDocument(document_uri, collection.offset_encoding, arena_allocator.allocator(), &diagnostics);\n\n            const notification: lsp.TypedJsonRPCNotification(lsp.types.PublishDiagnosticsParams) = .{\n                .method = \"textDocument/publishDiagnostics\",\n                .params = .{\n                    .uri = document_uri,\n                    .diagnostics = diagnostics.items,\n                }"}
{"instruction":"Write a Zig struct similar to returns_nonnull from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const returns_nonnull = struct {}"}
{"instruction":"Write a Zig function similar to enforceNoZig from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn enforceNoZig(path_link: []const u8, exe: []const u8) !void {\n    var file = std.fs.cwd().openFile(exe, .{}"}
{"instruction":"Write a Zig function similar to vectorLen from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn vectorLen(ip: *InternPool, ty: Index) u32 {\n    return switch (ip.indexToKey(ty)) {\n        .vector_type => |vector_type| vector_type.len,\n        .tuple_type => |tuple| tuple.types.len,\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig const similar to listening from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/signal.zig","output":"const listening: bool = self.listening.load(.acquire);"}
{"instruction":"Write a Zig struct similar to PasteFlags from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"pub const PasteFlags = struct {\n\t\tpreserveVoid: bool = false,\n\t}"}
{"instruction":"Write a Zig function similar to add_rm from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn add_rm(path: []const u8) *Step {\n    return &_b.addRemoveDirTree(path).step;\n}"}
{"instruction":"Write a Zig function similar to sendEndOfInterrupt from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"pub fn sendEndOfInterrupt(irq_num: u8) void {\n    if (irq_num >= 8) {\n        sendCommandSlave(OCW2_END_OF_INTERRUPT);\n    }"}
{"instruction":"Write a Zig function similar to clearMask from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"pub fn clearMask(irq_num: u8) void {\n    const port: u16 = if (irq_num < 8) MASTER_DATA_REG else SLAVE_DATA_REG;\n    const shift = @intCast(u3, irq_num % 8);\n    const value: u8 = arch.in(u8, port) & ~(@as(u8, 1) << shift);\n    arch.out(port, value);\n}"}
{"instruction":"Write a Zig function similar to toStr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn toStr(s: []const u8) Str {\n    return .{\n        .ptr = s.ptr,\n        .len = s.len,\n    }"}
{"instruction":"Write a Zig function similar to typeDefinitionToken from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn typeDefinitionToken(self: Type) !?TokenWithHandle {\n        return switch (self.data) {\n            .container => |info| .{\n                .token = info.scope_handle.handle.tree.firstToken(info.scope_handle.toNode()),\n                .handle = info.scope_handle.handle,\n            }"}
{"instruction":"Write a Zig function similar to isKeyboardGroup from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputDevice.zig","output":"fn isKeyboardGroup(wlr_device: *wlr.InputDevice) bool {\n    return wlr_device.type == .keyboard and\n        wlr.KeyboardGroup.fromKeyboard(wlr_device.toKeyboard()) != null;\n}"}
{"instruction":"Write a Zig const similar to OCW3_DEFAULT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const OCW3_DEFAULT: u8 = 0x08;"}
{"instruction":"Write a Zig function similar to drawBgColor from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/renderer.zig","output":"fn drawBgColor(self: *Renderer, shape: *const Shape, color: Color) void {\n        self.drawShape(shape);\n        self.vg.fillColor(nvgColor(color));\n        self.vg.fill();\n    }"}
{"instruction":"Write a Zig struct similar to spectre from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const spectre = struct {\n        arg: enum {\n            nomitigation,\n\n            const opts = struct {\n                const enum_kind = .identifier;\n            }"}
{"instruction":"Write a Zig const similar to virt from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/paging.zig","output":"const virt: usize = 8 * PAGE_SIZE_4MB;"}
{"instruction":"Write a Zig const similar to runner from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const runner: *Runner = @ptrFromInt(@as(usize, @intCast(user_data)));"}
{"instruction":"Write a Zig function similar to testFunction2 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/irq.zig","output":"fn testFunction2(ctx: *arch.CpuState) u32 {\n    // Suppress unused variable warnings\n    _ = ctx;\n    return 0;\n}"}
{"instruction":"Write a Zig function similar to wantsAlignment from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub fn wantsAlignment(attr: Tag, idx: usize) bool {\n    switch (attr) {\n        inline else => |tag| {\n            const fields = @typeInfo(@field(attributes, @tagName(tag))).@\"struct\".fields;\n            if (fields.len == 0) return false;\n\n            return switch (idx) {\n                inline 0...fields.len - 1 => |i| UnwrapOptional(fields[i].type) == Alignment,\n                else => false,\n            }"}
{"instruction":"Write a Zig function similar to saveNewSpecFile from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig","output":"pub fn saveNewSpecFile(alloc: std.mem.Allocator, specGroup: SpecHashGroup, spec: []const u8, contents: []const u8) !SpecEntry {\n    const cacheSpec = try toCacheSpec(spec);\n    const cyberPath = try getCyberPath(alloc);\n\n    const now: u64 = @intCast(std.time.timestamp());\n\n    const filePath = try std.fs.path.join(alloc, &.{cyberPath, cacheSpec}"}
{"instruction":"Write a Zig function similar to handleGlfwChar from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/platform.zig","output":"fn handleGlfwChar(w: ?*c.GLFWwindow, char: c_uint) callconv(.C) void {\n    pushEvent(.{ .target = w, .kind = .key_press, .char = char }"}
{"instruction":"Write a Zig struct similar to CircleWave from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/module_playing.zig","output":"const CircleWave = struct {\n    position: rl.Vector2,\n    radius: f32,\n    alpha: f32,\n    speed: f32,\n    color: rl.Color,\n}"}
{"instruction":"Write a Zig const similar to token_handle from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const token_handle: TokenWithHandle = .{ .token = param_name_token, .handle = handle };"}
{"instruction":"Write a Zig function similar to from_u16 from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig","output":"pub fn from_u16(v: u16) ?@This() {\n        return std.meta.intToEnum(@This(), v) catch null;\n    }"}
{"instruction":"Write a Zig function similar to setDefaultCompiler from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn setDefaultCompiler(allocator: Allocator, compiler_dir: []const u8, exist_verify: ExistVerify) !void {\n    switch (exist_verify) {\n        .existence_verified => {}"}
{"instruction":"Write a Zig function similar to parseExtension from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn parseExtension(allocator: Allocator, extension: *xml.Element, api: registry.Api) !registry.Extension {\n    const name = extension.getAttribute(\"name\") orelse return error.InvalidRegistry;\n    const platform = extension.getAttribute(\"platform\");\n\n    const is_video = std.mem.startsWith(u8, name, \"vulkan_video_\");\n\n    const version = try findExtVersion(extension);\n\n    // For some reason there are two ways for an extension to state its required\n    // feature level: both seperately in each <require> tag, or using\n    // the requiresCore attribute.\n    const requires_core = if (extension.getAttribute(\"requiresCore\")) |feature_level|\n        try splitFeatureLevel(feature_level, \".\")\n    else\n        null;\n\n    const promoted_to: registry.Extension.Promotion = blk: {\n        const promotedto = extension.getAttribute(\"promotedto\") orelse break :blk .none;\n        if (mem.startsWith(u8, promotedto, \"VK_VERSION_\")) {\n            const feature_level = try splitFeatureLevel(promotedto[\"VK_VERSION_\".len..], \"_\");\n            break :blk .{ .feature = feature_level }"}
{"instruction":"Write a Zig function similar to test_valid from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/DataURI.zig","output":"fn test_valid(uri: []const u8, expected: []const u8) !void {\n    defer testing.reset();\n    const data_uri = try parse(testing.arena_allocator, uri) orelse return error.TestFailed;\n    try testing.expectEqual(expected, data_uri);\n}"}
{"instruction":"Write a Zig function similar to generateFor from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateFor(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n    const type_defs = self.ast.nodes.items(.type_def);\n    const node_components = self.ast.nodes.items(.components);\n\n    const components = node_components[node].For;\n    if (try self.ast.isConstant(self.gc.allocator, components.condition) and !(try self.ast.toValue(components.condition, self.gc)).boolean()) {\n        try self.patchOptJumps(node);\n\n        return null;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Casting §","input":"A type cast converts a value of one type to another. Zig has Type Coercion for conversions that are known to be completely safe and unambiguous, and Explicit Casts for conversions that one would not want to happen on accident. There is also a third kind of type conversion called Peer Type Resolution for the case when a result type must be decided given multiple operand types. Type Coercion § Type coercion occurs when one type is expected, but different type is provided: test_type_coercion.zig Sh","output":"<span class=\"tok-comment\">// Compile time coercion of float to int</span>\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"implicit cast to comptime_int\"</span> {\n    <span class=\"tok-kw\">const</span> f: <span class=\"tok-type\">f32</span> = <span class=\"tok-number\">54.0</span> / <span class=\"tok-number\">5</span>;\n    _ = f;\n}"}
{"instruction":"Write a Zig struct similar to Server from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub const Server = struct {\n    gpa: Allocator,\n    channel: *Channel(ServeEvent),\n    build: *const Build,\n    build_lock: *std.Thread.RwLock,\n\n    pub const max_connection_header_size: usize = 8 * 1024;\n\n    pub fn init(\n        gpa: Allocator,\n        channel: *Channel(ServeEvent),\n        build: *const Build,\n        build_lock: *std.Thread.RwLock,\n    ) Server {\n        return .{\n            .gpa = gpa,\n            .channel = channel,\n            .build = build,\n            .build_lock = build_lock,\n        }"}
{"instruction":"Write a Zig function similar to runAllSoon from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"pub fn runAllSoon(self: *Self, funcs: stdx.queue.SPSC(Func)) void {\n        self.readyq.pushAll(funcs);\n    }"}
{"instruction":"Write a Zig function similar to set from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn set(it: *@This(), index: usize) void {\n                    it.index = index;\n                    if (index < prealloc_item_count) return;\n                    it.shelf_index = shelfIndex(index);\n                    it.box_index = boxIndex(index, it.shelf_index);\n                    it.shelf_size = shelfSize(it.shelf_index);\n                }"}
{"instruction":"Write a Zig const similar to dense_output from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"const dense_output: Tensor = zml.call(self.dense, .forward, .{hidden_states});"}
{"instruction":"Write a Zig function similar to prefix from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn prefix(kind: Kind) []const u8 {\n            return switch (kind) {\n                .long => \"--\",\n                .short => \"-\",\n                .positional => \"\",\n            }"}
{"instruction":"Write a Zig function similar to isValidIrq from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/irq.zig","output":"pub fn isValidIrq(irq_num: u32) bool {\n    return irq_num < NUMBER_OF_ENTRIES;\n}"}
{"instruction":"Write a Zig function similar to parseCmd from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"fn parseCmd(list: *std.ArrayList([]const u8), cmd: []const u8) !void {\n    var it = std.mem.tokenizeScalar(u8, cmd, ' ');\n    while (it.next()) |s| try list.append(s);\n}"}
{"instruction":"Write a Zig function similar to setTimeout from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setTimeout(time: usize) void {\n    c.webui_set_timeout(time);\n}"}
{"instruction":"Write a Zig function similar to scaleIndex from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn scaleIndex(mem: Memory) ?ScaleIndex {\n            return switch (mem) {\n                .moffs, .rip => null,\n                .sib => |s| if (s.scale_index.scale > 0) s.scale_index else null,\n            }"}
{"instruction":"Write a Zig function similar to invoke from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn invoke(self: *Completion, loop: *Loop, res: i32) CallbackAction {\n        const result: Result = switch (self.op) {\n            .noop => unreachable,\n\n            .accept => .{\n                .accept = if (res >= 0)\n                    @intCast(res)\n                else switch (@as(posix.E, @enumFromInt(-res))) {\n                    .CANCELED => error.Canceled,\n                    .AGAIN => error.Again,\n                    else => |errno| posix.unexpectedErrno(errno),\n                }"}
{"instruction":"Write Zig 0.13.0 code for: comptime §","input":"Zig places importance on the concept of whether an expression is known at compile-time. There are a few different places this concept is used, and these building blocks are used to keep the language small, readable, and powerful. Introducing the Compile-Time Concept § Compile-Time Parameters § Compile-time parameters is how Zig implements generics. It is compile-time duck typing. compile-time_duck_typing.zig In Zig, types are first-class citizens. They can be assigned to variables, passed as par","output":"<span class=\"tok-kw\">const</span> print = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>).debug.print;\n\n<span class=\"tok-kw\">const</span> a_number: <span class=\"tok-type\">i32</span> = <span class=\"tok-number\">1234</span>;\n<span class=\"tok-kw\">const</span> a_string = <span class=\"tok-str\">\"foobar\"</span>;\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    print(<span class=\"tok-str\">\"here is a string: '{s}' here is a number: {}\\n\"</span>, .{ a_string, a_number });\n}"}
{"instruction":"Write a Zig const similar to key from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"const key: Interner.Key = switch (base.type) {\n        .void => return .void,\n        .bool => return .i1,\n        .@\"struct\" => |record| {\n            if (c.record_cache.get(base.qt.unqualified())) |some| return some;"}
{"instruction":"Write a Zig function similar to write from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/gpio.zig","output":"fn write(state: State) void {\n            hal.gpio.write(pin.source_pin, state);\n        }"}
{"instruction":"Write a Zig function similar to __builtin_huge_valf32 from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __builtin_huge_valf32() @TypeOf(__builtin_huge_valf()) {\n    return __builtin_huge_valf();\n}"}
{"instruction":"Write a Zig function similar to toUnsigned from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn toUnsigned(ip: *InternPool, gpa: Allocator, ty: Index, target: std.Target) Allocator.Error!Index {\n    const tag = ip.zigTypeTag(ty) orelse unreachable;\n    return switch (tag) {\n        .int => try ip.get(gpa, .{ .int_type = .{\n            .signedness = .unsigned,\n            .bits = ip.intInfo(ty, target).bits,\n        }"}
{"instruction":"Write a Zig const similar to win32exelink_mod from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: build.zig","output":"const win32exelink_mod: ?*std.Build.Module = blk: {\n        if (target.result.os.tag == .windows) {\n            const exe = b.addExecutable(.{\n                .name = \"win32exelink\",\n                .root_source_file = b.path(\"win32exelink.zig\"),\n                .target = target,\n                .optimize = optimize,\n            });"}
{"instruction":"Write a Zig struct similar to Formatter from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig","output":"const Formatter = struct {\n    ast: Ast,\n    src: []const u8,\n\n    pub fn format(f: Formatter, w: *Writer) !void {\n        try f.ast.render(f.src, w);\n    }"}
{"instruction":"Write a Zig function similar to parseTags from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn parseTags(\n    allocator: Allocator,\n    root: *xml.Element,\n    tags: *std.ArrayList(registry.Tag),\n) !void {\n    var tags_elem = root.findChildByTag(\"tags\") orelse return;\n    try tags.ensureUnusedCapacity(allocator, tags_elem.children.len);\n\n    var it = tags_elem.findChildrenByTag(\"tag\");\n    while (it.next()) |tag| {\n        tags.appendAssumeCapacity(.{\n            .name = tag.getAttribute(\"name\") orelse return error.InvalidRegistry,\n            .author = tag.getAttribute(\"author\") orelse return error.InvalidRegistry,\n        }"}
{"instruction":"Write a Zig struct similar to DiffChange from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/fetch.zig","output":"const DiffChange = struct {\n    from: string,\n    to: string,\n}"}
{"instruction":"Write a Zig struct similar to Package from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/zpm.zig","output":"pub const Package = struct {\n    author: string,\n    name: string,\n    tags: []const string,\n    git: string,\n    root_file: string,\n    description: string,\n    source: u32,\n    links: []const string,\n}"}
{"instruction":"Write a Zig function similar to isNumericWithUnit from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"fn isNumericWithUnit(value: []const u8) bool {\n    if (value.len == 0) {\n        return false;\n    }"}
{"instruction":"Write a Zig const similar to zig_string from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/cstring.zig","output":"const zig_string: []const u8 = \"test\";"}
{"instruction":"Write Zig 0.14.1 code for: Compilation Model §","input":"A Zig compilation is separated into modules . Each module is a collection of Zig source files, one of which is the module's root source file . Each module can depend on any number of other modules, forming a directed graph (dependency loops between modules are allowed). If module A depends on module B, then any Zig source file in module A can import the root source file of module B using @import with the module's name. In essence, a module acts as an alias to import a Zig source file (which migh","output":"<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">export</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>(argc: <span class=\"tok-type\">c_int</span>, argv: [*]<span class=\"tok-kw\">const</span> [*:<span class=\"tok-number\">0</span>]<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) <span class=\"tok-type\">c_int</span> {\n    <span class=\"tok-kw\">const</span> args = argv[<span class=\"tok-number\">0</span>..<span class=\"tok-builtin\">@intCast</span>(argc)];\n    std.debug.print(<span class=\"tok-str\">\"Hello! argv[0] is '{s}'\\n\"</span>, .{args[<span class=\"tok-number\">0</span>]});\n    <span class=\"tok-kw\">return</span> <span class=\"tok-number\">0</span>;\n}\n\n<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);"}
{"instruction":"Write a Zig function similar to ensureTotalCapacity from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn ensureTotalCapacity(self: *Self, gpa: Allocator, new_capacity: u32) !void {\n            var better_capacity = self.capacity;\n            if (better_capacity >= new_capacity) return;\n\n            while (true) {\n                better_capacity += better_capacity / 2 + 8;\n                if (better_capacity >= new_capacity) break;\n            }"}
{"instruction":"Write a Zig function similar to testFunction1 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"fn testFunction1(ctx: *arch.CpuState) u32 {\n    // Suppress unused var warning\n    _ = ctx;\n    return 0;\n}"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/module_playing.zig","output":"pub fn main() !void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    rl.setConfigFlags(rl.ConfigFlags{ .msaa_4x_hint = true }"}
{"instruction":"Write a Zig const similar to wi_output from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"const wi_output: Tensor = zml.call(self.Wi, .forward, .{hidden_states});"}
{"instruction":"Write a Zig const similar to val from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"const val: i8 = @bitCast(pc[1].val);"}
{"instruction":"Write a Zig function similar to flush from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"fn flush(self: *LogWriter) void {\n        if (self.line_len > 0) {\n            // var buf = std.mem.zeroes([129]u8);\n            // const msg = std.fmt.bufPrint(&buf, \"PRINT({}"}
{"instruction":"Write a Zig function similar to dynamic_cast from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/EventHandler.zig","output":"pub fn dynamic_cast(self: Self, comptime T: type) ?*T {\n    return if (std.mem.eql(u8, self.vtable.type_name, @typeName(T)))\n        @as(*T, @ptrCast(@alignCast(self.ptr)))\n    else\n        null;\n}"}
{"instruction":"Write a Zig const similar to SINGLE_STEP_DEBUG from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const SINGLE_STEP_DEBUG: u8 = 1;"}
{"instruction":"Write a Zig const similar to f11 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f11: u21 = 57374;"}
{"instruction":"Write a Zig function similar to encode from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"pub fn encode(self: ServerMethod, channel: Channel, encoder: *Encoder) void {\n        encoder.begin_frame(.{\n            .type = .method,\n            .channel = channel,\n        }"}
{"instruction":"Write a Zig function similar to handleNewVirtualKeyboard from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputManager.zig","output":"fn handleNewVirtualKeyboard(\n    _: *wl.Listener(*wlr.VirtualKeyboardV1),\n    virtual_keyboard: *wlr.VirtualKeyboardV1,\n) void {\n    const seat: *Seat = @ptrFromInt(virtual_keyboard.seat.data);\n    seat.addDevice(&virtual_keyboard.keyboard.base);\n}"}
{"instruction":"Write a Zig function similar to writeLibManifest from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/init.zig","output":"pub fn writeLibManifest(w: std.fs.File.Writer, id: string, name: string, entry: string, license: string, description: string) !void {\n    try w.print(\"id: {s}"}
{"instruction":"Write a Zig function similar to to_cstr from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn to_cstr(str: []const u8) Str {\n    return to_cstr_x(&.{str}"}
{"instruction":"Write a Zig function similar to startCallback from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn startCallback(transfer: *Http.Transfer) !void {\n    const script: *PendingScript = @ptrCast(@alignCast(transfer.ctx));\n    script.startCallback(transfer) catch |err| {\n        log.err(.http, \"SM.startCallback\", .{ .err = err, .transfer = transfer }"}
{"instruction":"Write a Zig function similar to addressForSourceLine from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn addressForSourceLine(self: *Self, loc: types.SourceLocation) ?types.Address {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            if (self.data.target) |target| {\n                for (target.compile_units) |cu| {\n                    var addr: ?types.Address = null;\n                    for (cu.sources) |src| {\n                        if (src.file_hash != loc.file_hash) continue;\n\n                        for (src.statements) |stmt| {\n                            if (stmt.line != loc.line) continue;\n\n                            // @NOTE (jrc): we look up the _last_ known breakpoint because there are many entries\n                            // per deferred line of code in Zig, and we usually want the last one. I'm not sure if\n                            // this is intentional or not in Zig though because all those line entires only occur\n                            // in debug builds. I think that we should actually be using all those addresses, but\n                            // types.Breakpoint only has a single address, and it's really nice that it doesn't need\n                            // any allocations, so it makes serialization much easier, so I'm hesitant to add a\n                            // slice to it. Needs more investigation.\n                            addr = stmt.breakpoint_addr;\n                            if (cu.language != .Zig) return addr;\n                        }"}
{"instruction":"Write a Zig function similar to callback from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn callback(context: *amqp.Client) void {\n                            const runner: *Runner = @alignCast(@fieldParentPtr(\n                                \"amqp_client\",\n                                context,\n                            ));\n                            switch (runner.state) {\n                                .recovering => |*recovering| {\n                                    assert(recovering.phase == .declare_locker_queue);\n                                    maybe(recovering.timestamp_last == null);\n\n                                    recovering.phase = .declare_progress_queue;\n                                    runner.recover_dispatch();\n                                }"}
{"instruction":"Write a Zig function similar to testDeclNameAndToken from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn testDeclNameAndToken(tree: Ast, test_decl_node: Ast.Node.Index) ?struct { Ast.TokenIndex, []const u8 }"}
{"instruction":"Write a Zig function similar to opcode_1byte from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn opcode_1byte(self: Self, opcode: u8) !void {\n            try self.writer.writeByte(opcode);\n        }"}
{"instruction":"Write a Zig function similar to tof from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"fn tof(c: u8) f32 {\n        return @as(f32, @floatFromInt(c)) / 255.0;\n    }"}
{"instruction":"Write a Zig function similar to init from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"pub fn init(builder: *std.Build, subdir: ?[]const u8) Self {\n        return Self{\n            .builder = builder,\n            .hasher = std.crypto.hash.Sha1.init(.{}"}
{"instruction":"Write a Zig function similar to hid_usage_max from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub fn hid_usage_max(comptime n: u2, data: [n]u8) [n + 1]u8 {\n    return hid_report_item(\n        n,\n        @intFromEnum(ReportItemTypes.Local),\n        @intFromEnum(LocalItem.UsageMax),\n        data,\n    );\n}"}
{"instruction":"Write a Zig function similar to main from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/pow.zig","output":"pub fn main() !void {\r\n    const x: f32 = 15.68;\r\n    const y = cmath.powf(x, 2.32);\r\n    try stdout.print(\"{d}"}
{"instruction":"Write a Zig function similar to ptrTypeSentinel from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/ast.zig","output":"pub fn ptrTypeSentinel(tree: Ast, node: Node.Index) full.PtrType {\n    std.debug.assert(tree.nodeTag(node) == .ptr_type_sentinel);\n    const sentinel, const child_type = tree.nodeData(node).opt_node_and_node;\n    return fullPtrTypeComponents(tree, .{\n        .main_token = tree.nodeMainToken(node),\n        .align_node = .none,\n        .addrspace_node = .none,\n        .sentinel = sentinel,\n        .bit_range_start = .none,\n        .bit_range_end = .none,\n        .child_type = child_type,\n    }"}
{"instruction":"Write a Zig function similar to tryFromHex from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn tryFromHex(hex_color: []const u8) FromHexError!Color {\n    if (hex_color.len == 0) return error.InvalidHexStringLength;\n    const hex = if (hex_color[0] == '#') hex_color[1..] else hex_color;\n\n    const is_nibble_size, const has_alpha = switch (hex.len) {\n        3 => .{ true, false }"}
{"instruction":"Write a Zig const similar to jump_start from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"const jump_start: u32 = @intCast(c.blockJumpStack.items.len);"}
{"instruction":"Write a Zig function similar to parsePrecedence from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parsePrecedence(self: *Self, precedence: Precedence, hanging: bool) Error!Ast.Node.Index {\n    // In case we are already parsing an expression, the current unwrap chain should not impact deeper expressions\n    // Exemple: canBeNull?.aMap[expression] <- here `expression` should not be transformed into an optional\n    const previous_opt_jumps = self.opt_jumps;\n    self.opt_jumps = null;\n\n    // If hanging is true, that means we already read the start of the expression\n    if (!hanging) {\n        _ = try self.advance();\n    }"}
{"instruction":"Write a Zig const similar to n2 from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"const n2: f64 = @floatFromInt(f.sample_count);"}
{"instruction":"Write a Zig function similar to init from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"fn init(self: *CacheMsg, in_msg: []const u8, qnamelen: c_int, ttl: i32, hashv: c_uint) *CacheMsg {\n    self.* = .{\n        .hashv = hashv,\n        .update_time = cc.time(),\n        .ttl = ttl,\n        .ttl_r = @divTrunc(ttl * g.cache_refresh, 100),\n        .msg_len = cc.to_u16(in_msg.len),\n        .qnamelen = cc.to_u8(qnamelen),\n    }"}
{"instruction":"Write a Zig const similar to maybe_name from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"const maybe_name: ?[]const u8 = if (dt.name) |name|\n                        name.slice(tag)\n                    else\n                        null;"}
{"instruction":"Write a Zig struct similar to Block from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub const Block = struct {\n    node: *ast.Node,\n\n    // Offset from `Proc.slot_start`.\n    slot_off: u8,\n\n    isLoopBlock: bool,\n\n    /// Locals declared in this block.\n    num_locals: u8,\n\n    /// Dst for block expression.\n    blockExprCstr: Cstr,\n\n    // Used to check the stack state after each stmt.\n    retainedTempStart: if (cy.Trace) u32 else void = undefined,\n    slot_count: if (cy.Trace) u32 else void = undefined,\n}"}
{"instruction":"Write a Zig function similar to mainAsyncCallback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/async1.zig","output":"fn mainAsyncCallback(\n    ud: ?*Thread,\n    _: *xev.Loop,\n    _: *xev.Completion,\n    r: xev.Async.WaitError!void,\n) xev.CallbackAction {\n    _ = r catch unreachable;\n\n    const self = ud.?;\n    self.worker_async.notify() catch unreachable;\n    self.main_sent += 1;\n    self.main_seen += 1;\n\n    return if (self.main_sent >= NUM_PINGS) .disarm else .rearm;\n}"}
{"instruction":"Write a Zig function similar to pushChildScope from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn pushChildScope(\n        context: *ScopeContext,\n        scope_index: Scope.Index,\n        child_scope_index: Scope.Index,\n    ) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to getFreePort from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getFreePort() usize {\n    return c.webui_get_free_port();\n}"}
{"instruction":"Write Zig 0.13.0 code for: Errors §","input":"Error Set Type § An error set is like an enum . However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value. The error set type defaults to a u16 , though if the maximum number of distinct error values is provided via the --error-limit [num] command line parameter an integer type with the minimum number of bits required to represent al","output":"<span class=\"tok-kw\">const</span> parseU64 = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"error_union_parsing_u64.zig\"</span>).parseU64;\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">doAThing</span>(str: []<span class=\"tok-type\">u8</span>) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> number = parseU64(str, <span class=\"tok-number\">10</span>) <span class=\"tok-kw\">catch</span> blk: {\n        <span class=\"tok-comment\">// do things</span>\n        <span class=\"tok-kw\">break</span> :blk <span class=\"tok-number\">13</span>;\n    };\n    _ = number; <span class=\"tok-comment\">// number is now initialized</span>\n}"}
{"instruction":"Write a Zig struct similar to Stack from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/stack.zig","output":"pub const Stack = struct {\n    pub const Data = struct {\n        data: [stack_size]u8 align(coro_base.stack_alignment) = undefined,\n\n        pub fn ptr(self: *const Data) [*]u8 {\n            return &self.data;\n        }"}
{"instruction":"Write a Zig function similar to result from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/git.zig","output":"fn result(context: usize, parent: tp.pid_ref, output: []const u8) void {\n            var it_ = std.mem.splitScalar(u8, output, 0);\n            while (it_.next()) |line| {\n                var it = std.mem.splitScalar(u8, line, ' ');\n                const rec_type = if (it.next()) |type_tag|\n                    std.meta.stringToEnum(StatusRecordType, type_tag) orelse return\n                else\n                    return;\n                switch (rec_type) {\n                    .@\"#\" => { // header\n                        const name = it.next() orelse return;\n                        const value1 = it.next() orelse return;\n                        if (it.next()) |value2|\n                            parent.send(.{ module_name, context, tag, \"#\", name, value1, value2 }"}
{"instruction":"Write a Zig function similar to ifStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn ifStatement(self: *Self, loop_scope: ?LoopScope) Error!Ast.Node.Index {\n    return try self.@\"if\"(true, loop_scope);\n}"}
{"instruction":"Write a Zig function similar to fromNativeAddressFamily from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn fromNativeAddressFamily(af: i32) !Self {\n        return switch (af) {\n            std.posix.AF.INET => .ipv4,\n            std.posix.AF.INET6 => .ipv6,\n            else => return error.UnsupportedAddressFamily,\n        }"}
{"instruction":"Write a Zig function similar to init from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/ping-pongs.zig","output":"pub fn init(alloc: Allocator, loop: *xev.Loop) !Server {\n        return .{\n            .loop = loop,\n            .buffer_pool = BufferPool.init(alloc),\n            .completion_pool = CompletionPool.init(alloc),\n            .socket_pool = TCPPool.init(alloc),\n            .stop = false,\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"vector @splat\"</span> {\n    <span class=\"tok-kw\">const</span> scalar: <span class=\"tok-type\">u32</span> = <span class=\"tok-number\">5</span>;\n    <span class=\"tok-kw\">const</span> result: <span class=\"tok-builtin\">@Vector</span>(<span class=\"tok-number\">4</span>, <span class=\"tok-type\">u32</span>) = <span class=\"tok-builtin\">@splat</span>(scalar);\n    <span class=\"tok-kw\">try</span> expect(std.mem.eql(<span class=\"tok-type\">u32</span>, &<span class=\"tok-builtin\">@as</span>([<span class=\"tok-number\">4</span>]<span class=\"tok-type\">u32</span>, result), &[_]<span class=\"tok-type\">u32</span>{ <span class=\"tok-number\">5</span>, <span class=\"tok-number\">5</span>, <span class=\"tok-number\">5</span>, <span class=\"tok-number\">5</span> }));\n}"}
{"instruction":"Write a Zig struct similar to target_clones from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const target_clones = struct {\n        options: Value, // TODO: multiple arguments\n\n    }"}
{"instruction":"Write a Zig const similar to count from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"const count: usize = address_list.addrs.len;"}
{"instruction":"Write a Zig function similar to tableGet from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn tableGet(vm: *cy.VM) Value {\n    const table = vm.getValue(0).asHeapObject();\n    const name = vm.getString(1);\n    if (table.table.map().getByString(name)) |val| {\n        vm.retain(val);\n        return val;\n    }"}
{"instruction":"Write a Zig function similar to toList from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/range.zig","output":"pub fn toList(ctx: *obj.NativeCtx) callconv(.c) c_int {\n    const range = ctx.vm.peek(0).obj().access(obj.ObjRange, .Range, ctx.vm.gc).?;\n\n    var list = ctx.vm.gc.allocateObject(\n        obj.ObjList.init(\n            ctx.vm.gc.allocator,\n            ctx.vm.gc.type_registry.getTypeDef(\n                .{\n                    .def_type = .List,\n                    .resolved_type = .{\n                        .List = obj.ObjList.ListDef.init(\n                            ctx.vm.gc.type_registry.int_type,\n                            false,\n                        ),\n                    }"}
{"instruction":"Write a Zig function similar to less from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn less(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const right = vm.getString(1);\n    return Value.initBool(std.mem.lessThan(u8, str, right));\n}"}
{"instruction":"Write a Zig function similar to getGlobal from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn getGlobal(vm: *cy.VM) Value {\n    const map = vm.getValue(0).asHeapObject();\n    if (map.map.map().get(vm.getValue(1))) |val| {\n        vm.retain(val);\n        return val;\n    }"}
{"instruction":"Write a Zig function similar to deinit from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn deinit(self: *align(8) FdSet, allocator: std.mem.Allocator) void {\n            const ptr: []align(8) u8 = @alignCast(self.memSlice());\n            allocator.free(ptr);\n        }"}
{"instruction":"Write a Zig function similar to parseDeclarations from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSParser.zig","output":"pub fn parseDeclarations(arena: Allocator, text: []const u8) ![]CSSDeclaration {\n    var parser = init();\n    var declarations: std.ArrayListUnmanaged(CSSDeclaration) = .empty;\n\n    while (parser.position < text.len) {\n        const c = text[parser.position];\n\n        switch (parser.state) {\n            .seek_name => {\n                if (!std.ascii.isWhitespace(c)) {\n                    parser.name_start = parser.position;\n                    parser.state = .in_name;\n                    continue;\n                }"}
{"instruction":"Write a Zig const similar to expected from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"const expected: []const u8 = switch (Wanted) {\n        Value => string,\n        Identifier => identifier,\n        u32 => int,\n        Alignment => alignment,\n        CallingConvention => identifier,\n        else => switch (@typeInfo(Wanted)) {\n            .@\"enum\" => if (Wanted.opts.enum_kind == .string) string else identifier,\n            else => unreachable,\n        },\n    };"}
{"instruction":"Write a Zig function similar to get_fdobj from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"fn get_fdobj(self: *const Ev) *Fd {\n        return cc.ptrcast(*Fd, c.epev_get_ptrdata(self));\n    }"}
{"instruction":"Write a Zig struct similar to unsequenced from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const unsequenced = struct {}"}
{"instruction":"Write a Zig function similar to isVecLong from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn isVecLong(mode: Mode) bool {\n        return switch (mode) {\n            // zig fmt: off\n            else => unreachable,\n            .vex_128_w0, .vex_128_w1, .vex_128_wig,\n            .vex_lig_w0, .vex_lig_w1, .vex_lig_wig,\n            .vex_lz_w0,  .vex_lz_w1,  .vex_lz_wig,\n            => false,\n            .vex_256_w0, .vex_256_w1, .vex_256_wig,\n            => true,\n            // zig fmt: on\n        }"}
{"instruction":"Write a Zig const similar to list_t from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const list_t: cy.TypeId = @intCast(vm.getInt(0));"}
{"instruction":"Write a Zig function similar to initArguments from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub fn initArguments(tag: Tag, name_tok: TokenIndex) Arguments {\n    switch (tag) {\n        inline else => |arg_tag| {\n            const union_element = @field(attributes, @tagName(arg_tag));\n            const init = std.mem.zeroInit(union_element, .{}"}
{"instruction":"Write a Zig function similar to querySelectorAll from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/node.zig","output":"pub fn querySelectorAll(self: *Node, selector: *const Selector) QuerySelectorIterator {\n        return .{\n            .selector = selector,\n            .descendants = .{ .start = self, .pos = self }"}
{"instruction":"Write a Zig function similar to getUnprotectedSlice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn getUnprotectedSlice(limbs: LimbSlice, ip: *InternPool) []std.math.big.Limb {\n        if (limbs.len == 0) return &.{}"}
{"instruction":"Write a Zig function similar to getProcessInfo from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/advanced_window/main.zig","output":"fn getProcessInfo(e: *webui.Event) void {\n    const window = e.getWindow();\n\n    var buffer: [512]u8 = undefined;\n    var fbs = std.io.fixedBufferStream(&buffer);\n    const writer = fbs.writer();\n\n    const parent_pid = window.getParentProcessId() catch 0;\n    const child_pid = window.getChildProcessId() catch 0;\n\n    writer.print(\"Parent PID: {}"}
{"instruction":"Write a Zig struct similar to uuid from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const uuid = struct {\n        uuid: Value,\n    }"}
{"instruction":"Write a Zig function similar to process_cancellations from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"fn process_cancellations(self: *Loop) void {\n        while (self.cancellations.pop()) |c| {\n            const target = c.op.cancel.c;\n            var cancel_result: CancelError!void = {}"}
{"instruction":"Write a Zig function similar to addFromElement from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"pub fn addFromElement(self: *ScriptManager, element: *parser.Element, comptime ctx: []const u8) !void {\n    if (try parser.elementGetAttribute(element, \"nomodule\") != null) {\n        // these scripts should only be loaded if we don't support modules\n        // but since we do support modules, we can just skip them.\n        return;\n    }"}
{"instruction":"Write a Zig const similar to attn_output from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"const attn_output: Tensor = zml.call(self.attn, .forward, .{\n            attn_norm_output,\n            global_mask,\n            local_mask,\n        });"}
{"instruction":"Write a Zig const similar to y from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/raw_stream.zig","output":"const y: f32 = @floatFromInt(data[@divFloor(i * MAX_SAMPLES, screenWidth)]);"}
{"instruction":"Write a Zig const similar to ai from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigprint/main.zig","output":"const ai: f32 = 35.555;"}
{"instruction":"Write a Zig function similar to interfaceScriptClient from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn interfaceScriptClient(self: webui, event_number: usize, script_content: [:0]const u8, timeout: usize, buffer: []u8) !void {\n    const success = c.webui_interface_script_client(self.window_handle, event_number, script_content.ptr, timeout, buffer.ptr, buffer.len);\n    if (!success) return WebUIError.ScriptError;\n}"}
{"instruction":"Write a Zig function similar to tcp from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn tcp(self: *SessionNode) *TCP {\n        assert(self.type == .tcp);\n        return @fieldParentPtr(TCP, \"session_node\", self);\n    }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"fn callback(\n            ud: ?*anyopaque,\n            l: *Loop,\n            _: *Completion,\n            r: Result,\n        ) CallbackAction {\n            _ = l;\n            const ptr: *?TimerTrigger = @ptrCast(@alignCast(ud.?));\n            ptr.* = r.timer catch unreachable;\n            return .disarm;\n        }"}
{"instruction":"Write a Zig function similar to selectForDstInst from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"pub fn selectForDstInst(c: *cy.Chunk, cstr: Cstr, type_id: cy.TypeId, instCouldRetain: bool, node: *ast.Node) !DstInst {\n    switch (cstr.type) {\n        .varSym => {\n            return .{\n                .dst = try bc.reserveTemp(c, type_id),\n                .own_dst = true,\n                .cstr = cstr,\n                .has_final_dst = true,\n                .node = node,\n            }"}
{"instruction":"Write a Zig function similar to renderAll from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig","output":"pub fn renderAll(_: Mat4f, _: Vec3f, _: Vec3d) void {}"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/raw_stream.zig","output":"pub fn main() anyerror!void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const screenWidth = 800;\n    const screenHeight = 450;\n\n    rl.initWindow(screenWidth, screenHeight, \"raylib-zig [core] example - raw audio streaming\");\n    defer rl.closeWindow(); // Close window and OpenGL context\n\n    rl.initAudioDevice();        // Initialize audio device\n    defer rl.closeAudioDevice(); // Close audio device (music streaming is automatically stopped)\n\n    rl.setAudioStreamBufferSizeDefault(MAX_SAMPLES_PER_UPDATE);\n\n    // Init raw audio stream (sample rate: 44100, sample size: 16bit-short, channels: 1-mono)\n    const stream = try rl.loadAudioStream(44100, 16, 1);\n    defer rl.unloadAudioStream(stream); // Close raw audio stream and delete buffers from RAM\n\n    rl.setAudioStreamCallback(stream, &audioInputCallback);\n\n    // Buffer for the single cycle waveform we are synthesizing\n    const data = try rl.mem.alloc(i16, MAX_SAMPLES);\n    defer rl.mem.free(data); // Unload sine wave data\n\n    // Frame buffer, describing the waveform when repeated over the course of a frame\n    const writeBuf = try rl.mem.alloc(i16, MAX_SAMPLES_PER_UPDATE);\n    defer rl.mem.free(writeBuf); // Unload write buffer\n\n    rl.playAudioStream(stream); // Start processing stream buffer (no data loaded currently)\n\n    // Computed size in samples of the sine wave\n    var waveLength: i32 = 1;\n\n    var position = rl.Vector2{ .x = 0, .y = 0 }"}
{"instruction":"Write a Zig function similar to loadFromZon from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn loadFromZon(allocator: NeverFailingAllocator, zon: ZonElement) !*Palette {\n\t\tconst items = zon.toSlice();\n\n\t\tconst self = allocator.create(Palette);\n\t\tself.* = Palette{\n\t\t\t.palette = .initCapacity(allocator, items.len),\n\t\t}"}
{"instruction":"Write a Zig function similar to func from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"pub fn func(self: *Self) Executor.Func {\n        return .{ .func = Self.cb, .userdata = self }"}
{"instruction":"Write a Zig function similar to lenFn from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn lenFn(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    return Value.initInt(obj.len());\n}"}
{"instruction":"Write a Zig struct similar to unavailable from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const unavailable = struct {\n        msg: ?Value = null,\n        __name_tok: TokenIndex,\n    }"}
{"instruction":"Write a Zig function similar to enqueue from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"pub fn enqueue(self: *Self, req: anytype) void {\n            self.enqueueRequest(req.req());\n        }"}
{"instruction":"Write a Zig struct similar to UserVM from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"const UserVM = struct {\n    vm: *cy.VM,\n}"}
{"instruction":"Write a Zig function similar to setAppContentViewImpl from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/invocationhandler/main.zig","output":"fn setAppContentViewImpl(self: *AndroidApp) !void {\n        const native_activity = android.NativeActivity.get(self.activity);\n        const jni = native_activity.jni;\n\n        std.log.warn(\"Creating android.widget.Button\", .{}"}
{"instruction":"Write a Zig const similar to runner from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const runner: *Runner = @alignCast(@fieldParentPtr(\"amqp_client\", context));"}
{"instruction":"Write a Zig function similar to hue_to_rgb from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/values/color.zig","output":"fn hue_to_rgb(hue: f32, m1: f32, m2: f32) f32 {\n    var h = if (hue < 0.0) hue + 1.0 else if (hue > 1.0) hue - 1.0 else hue;\n\n    if (h * 6.0 < 1.0) {\n        return m1 + (m2 - m1) * h * 6.0;\n    }"}
{"instruction":"Write a Zig function similar to direct from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Disassembler.zig","output":"fn direct(self: ModRm) bool {\n        return self.mod == 0b11;\n    }"}
{"instruction":"Write a Zig const similar to RRF_RT_REG_QWORD from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build/auto-detect.zig","output":"const RRF_RT_REG_QWORD: DWORD = 0x40;"}
{"instruction":"Write a Zig function similar to ArrayQueue from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/executor.zig","output":"pub fn ArrayQueue(comptime T: type, comptime size: usize) type {\n    return struct {\n        const Self = @This();\n\n        vals: [size]T = undefined,\n        head: ?usize = null,\n        tail: ?usize = null,\n\n        fn init() Self {\n            return .{}"}
{"instruction":"Write a Zig function similar to testFunction4 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"fn testFunction4(ctx: *arch.CpuState) u32 {\n    // Suppress unused var warning\n    _ = ctx;\n    return 0;\n}"}
{"instruction":"Write a Zig function similar to swapBuffers from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/platform.zig","output":"pub fn swapBuffers(self: *Self) void {\n        if (!builtin.is_test) c.glfwSwapBuffers(self.handle());\n    }"}
{"instruction":"Write a Zig function similar to isControl from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"fn isControl(c: u8) bool {\n    // A control is a C0 control or a code point in the range U+007F DELETE to U+009F APPLICATION PROGRAM COMMAND, inclusive.\n    // A C0 control is a code point in the range U+0000 NULL to U+001F INFORMATION SEPARATOR ONE, inclusive.\n    return (c >= 0 and c <= 0x1F) or (c >= 0x7F and c <= 0x9F);\n}"}
{"instruction":"Write a Zig function similar to receive from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/EventHandler.zig","output":"pub fn receive(ctx: *anyopaque, from_: tp.pid_ref, m: tp.message) tp.result {\n                    _ = try child.receive(@as(*child, @ptrCast(@alignCast(ctx))), from_, m);\n                }"}
{"instruction":"Write a Zig function similar to isContainer from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn isContainer(self: @This()) bool {\n            return switch (self) {\n                .container => true,\n                .block, .function, .other => false,\n            }"}
{"instruction":"Write a Zig function similar to dump from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig","output":"pub fn dump(event: enum { on_exit, on_manual }) void {\n    if (!enabled())\n        return;\n\n    const src = @src();\n\n    const path = g.cache_db orelse switch (event) {\n        .on_exit => return,\n        .on_manual => \"/tmp/chinadns@cache.db\",\n    }"}
{"instruction":"Write a Zig struct similar to Device from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/pci.zig","output":"pub const Device = struct {\n    bus: u8,\n    slot: u8,\n    func: u8,\n    config: Config,\n    capabilities: []Capability,\n\n    const Self = @This();\n\n    fn new(bus: u8, slot: u8, func: u8) (Allocator.Error || Error)!Self {\n        var config_buffer: [16]u32 align(16) = [16]u32{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }"}
{"instruction":"Write Zig 0.13.0 code for: Optionals §","input":"One area that Zig provides safety without compromising efficiency or readability is with the optional type. The question mark symbolizes the optional type. You can convert a type to an optional type by putting a question mark in front of it, like this: optional_integer.zig Now the variable optional_int could be an i32 , or null . Instead of integers, let's talk about pointers. Null references are the source of many runtime exceptions, and even stand accused of being the worst mistake of computer","output":"<span class=\"tok-kw\">const</span> Foo = <span class=\"tok-kw\">struct</span> {};\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">doSomethingWithFoo</span>(foo: *Foo) <span class=\"tok-type\">void</span> {\n    _ = foo;\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">doAThing</span>(optional_foo: ?*Foo) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-comment\">// do some stuff</span>\n\n    <span class=\"tok-kw\">if</span> (optional_foo) |foo| {\n        doSomethingWithFoo(foo);\n    }\n\n    <span class=\"tok-comment\">// do some stuff</span>\n}"}
{"instruction":"Write a Zig function similar to getPort from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getPort(self: webui) !usize {\n    const port = c.webui_get_port(self.window_handle);\n    if (port == 0) return WebUIError.PortError;\n    return port;\n}"}
{"instruction":"Write a Zig function similar to timer_next from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn timer_next(self: *Loop, next_ms: u64) linux.kernel_timespec {\n        // Get the timestamp of the absolute time that we'll execute this timer.\n        // There are lots of failure scenarios here in math. If we see any\n        // of them we just use the maximum value.\n        const max: linux.kernel_timespec = .{\n            .sec = std.math.maxInt(isize),\n            .nsec = std.math.maxInt(isize),\n        }"}
{"instruction":"Write a Zig function similar to opcode_withReg from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn opcode_withReg(self: Self, opcode: u8, reg: u3) !void {\n            assert(opcode & 0b111 == 0);\n            try self.writer.writeByte(opcode | reg);\n        }"}
{"instruction":"Write a Zig function similar to write_register from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub fn write_register(self: Device, register_address: u8, byte: u8) ReadError!void {\n            try self.write_registers(register_address, &.{byte}"}
{"instruction":"Write a Zig function similar to resolveGlobal from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub fn resolveGlobal(self: *Self, referrer: Ast.Node.Index, name: []const Ast.TokenIndex) Error!?usize {\n    if (self.globals.items.len == 0) {\n        return null;\n    }"}
{"instruction":"Write a Zig struct similar to NodeWithHandle from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub const NodeWithHandle = struct {\n    node: Ast.Node.Index,\n    handle: *DocumentStore.Handle,\n\n    pub fn of(node: Ast.Node.Index, handle: *DocumentStore.Handle) NodeWithHandle {\n        return .{ .node = node, .handle = handle }"}
{"instruction":"Write a Zig function similar to formatPropValue from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"fn formatPropValue(prop: Property, comptime _: []const u8, _: std.fmt.FormatOptions, writer: anytype) !void {\n            switch (prop) {\n                inline else => |v| try switch (@typeInfo(@TypeOf(v))) {\n                    .Enum => writer.writeAll(@tagName(v)),\n                    .Int, .Float => writer.print(\"{d}"}
{"instruction":"Write a Zig function similar to moveWindow from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/advanced_window/main.zig","output":"fn moveWindow(e: *webui.Event) void {\n    const window = e.getWindow();\n    const x = e.getIntAt(0);\n    const y = e.getIntAt(1);\n\n    if (x >= 0 and y >= 0) {\n        window.setPosition(@intCast(x), @intCast(y));\n        e.returnString(\"Window moved\");\n    }"}
{"instruction":"Write a Zig function similar to ptrAllowsZero from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn ptrAllowsZero(ip: *InternPool, ty: Index) bool {\n    if (ip.indexToKey(ty).pointer_type.flags.is_allowzero) return true;\n    return ip.isPtrLikeOptional(ty);\n}"}
{"instruction":"Write a Zig function similar to genExpr from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"fn genExpr(c: *CodeGen, node_index: Node.Index) Error!Ir.Ref {\n    if (c.tree.value_map.get(node_index)) |val| {\n        return c.builder.addConstant(val.ref(), try c.genType(node_index.qt(c.tree)));\n    }"}
{"instruction":"Write a Zig function similar to app_exit from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/public_network_access/main.zig","output":"fn app_exit(_: *webui.Event) void {\n    webui.exit();\n}"}
{"instruction":"Write a Zig function similar to opacity from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn opacity(self: Color, mult: f32) Color {\n    if (mult > 1) return self;\n    return Color{\n        .r = self.r,\n        .g = self.g,\n        .b = self.b,\n        .a = @intFromFloat(std.math.clamp(@as(f32, @floatFromInt(self.a)) * mult, 0, 255)),\n    }"}
{"instruction":"Write a Zig function similar to block_index from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/concurrency.zig","output":"fn block_index(bit_index: usize) usize {\n            return bit_index / @bitSizeOf(BlockType);\n        }"}
{"instruction":"Write a Zig function similar to eql from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"pub fn eql(self: @This(), a_slice: []const u8, b: u32) bool {\n        const b_slice = std.mem.sliceTo(@as([*:0]const u8, @ptrCast(self.bytes.items.ptr)) + b, 0);\n        return std.mem.eql(u8, a_slice, b_slice);\n    }"}
{"instruction":"Write a Zig function similar to initFromStack from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"fn initFromStack(func: *const fn () void, stack_: stack.Stack, storage: ?*anyopaque) !Frame {\n        // try StackOverflow.setMagicNumber(stack.full);\n        var stack__ = stack_;\n        const coro = try stack__.push(Coro);\n        const base_coro = try base.Coro.init(&runcoro, stack__.remaining());\n        coro.* = .{\n            .func = func,\n            .impl = base_coro,\n            .stack = stack__,\n            .storage = storage,\n            .id = thread_state.newCoroId(),\n        }"}
{"instruction":"Write a Zig function similar to lookupSymbolGlobal from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn lookupSymbolGlobal(\n    _: *Analyser,\n    handle: *DocumentStore.Handle,\n    symbol: []const u8,\n    source_index: usize,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to run from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/Scheduler.zig","output":"pub fn run(self: *Scheduler) !?i32 {\n    _ = try self.runQueue(&self.low_priority);\n    return self.runQueue(&self.high_priority);\n}"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> Set1 = <span class=\"tok-kw\">error</span>{\n    A,\n    B,\n};\n<span class=\"tok-kw\">const</span> Set2 = <span class=\"tok-kw\">error</span>{\n    A,\n    C,\n};\n<span class=\"tok-kw\">comptime</span> {\n    _ = <span class=\"tok-builtin\">@as</span>(Set2, <span class=\"tok-builtin\">@errorCast</span>(Set1.B));\n}"}
{"instruction":"Write a Zig function similar to mimalloc_cleanup from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"fn mimalloc_cleanup(force: bool) void {\n    if (comptime use_mimalloc) {\n        Mimalloc.mi_collect(force);\n    }"}
{"instruction":"Write a Zig const similar to OVERFLOW from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const OVERFLOW: u8 = 4;"}
{"instruction":"Write a Zig function similar to device from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub fn device(self: Self, address: u7) I2CDevice {\n            return I2CDevice{ .internal = self.internal, .address = address }"}
{"instruction":"Write a Zig const similar to client from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_exports.zig","output":"const client: *tb.ClientInterface = if (tb_client) |ptr| ptr.cast() else return .invalid;"}
{"instruction":"Write a Zig function similar to closeClient from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn closeClient(self: *Event) void {\n        c.webui_close_client(self);\n    }"}
{"instruction":"Write a Zig function similar to getObjectRc from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn getObjectRc(vm: *cy.VM) anyerror!Value {\n    const val = vm.getValue(0);\n    if (val.isPointer()) {\n        return Value.initInt(@intCast(val.asHeapObject().head.rc));\n    }"}
{"instruction":"Write a Zig function similar to deinit from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/generator.zig","output":"fn deinit(self: Generator) void {\n        self.arena.deinit();\n    }"}
{"instruction":"Write a Zig function similar to getPtrDefault from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Data.zig","output":"pub fn getPtrDefault(self: *Data, gpa: std.mem.Allocator, key: Key, comptime T: type, default: T) std.mem.Allocator.Error!*T {\n    const value, const existing = try self.getOrPutT(gpa, key, T);\n    if (!existing) value.* = default;\n    return value;\n}"}
{"instruction":"Write a Zig function similar to callback from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn callback(context: *amqp.Client) void {\n                        const runner: *Runner = @alignCast(@fieldParentPtr(\n                            \"amqp_client\",\n                            context,\n                        ));\n                        assert(runner.consumer == .publish);\n                        runner.consumer = .progress_update;\n                        runner.consume_dispatch();\n                    }"}
{"instruction":"Write a Zig const similar to opt_intelasm from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"const opt_intelasm: [:0]const u8 = if (!_wolfssl_noasm and get_x86_64_level() >= 3) \"--enable-intelasm\" else \"\";"}
{"instruction":"Write a Zig const similar to INVALID_TASK_STATE_SEGMENT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const INVALID_TASK_STATE_SEGMENT: u8 = 10;"}
{"instruction":"Write a Zig function similar to appendSlice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn appendSlice(self: *Self, allocator: Allocator, items: []const T) Allocator.Error!void {\n            for (items) |item| {\n                try self.append(allocator, item);\n            }"}
{"instruction":"Write a Zig function similar to reuse from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig","output":"pub fn reuse(self: *CacheMsg, in_msg: []const u8, qnamelen: c_int, ttl: i32, hashv: c_uint) *CacheMsg {\n    if (g.allocator.resize(self.mem(), metadata_len + in_msg.len) != null) {\n        return self.init(in_msg, qnamelen, ttl, hashv);\n    }"}
{"instruction":"Write a Zig function similar to remove_const from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn remove_const(ptr: anytype) RemoveConst(@TypeOf(ptr)) {\n    if (comptime isSlice(@TypeOf(ptr)))\n        return remove_const(ptr.ptr)[0..ptr.len];\n    return @intToPtr(RemoveConst(@TypeOf(ptr)), @ptrToInt(ptr));\n}"}
{"instruction":"Write a Zig struct similar to Command from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/release.zig","output":"pub const Command = struct {\n    output_dir_path: ?[]const u8,\n    build_assets: std.StringArrayHashMapUnmanaged(BuildAsset),\n    drafts: bool,\n    force: bool,\n\n    pub fn deinit(co: *const Command, gpa: Allocator) void {\n        var ba = co.build_assets;\n        ba.deinit(gpa);\n    }"}
{"instruction":"Write a Zig struct similar to EnvArg from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub const EnvArg = struct {\n    executor: ?*Executor = null,\n    stack_allocator: ?std.mem.Allocator = null,\n    default_stack_size: ?usize = null,\n}"}
{"instruction":"Write a Zig function similar to init from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/picirq.zig","output":"pub fn init() void {\n    // disable PIC interrupts to use APIC\n    x64.out(IO_PIC1 + 1, @as(u8, 0xff));\n    x64.out(IO_PIC2 + 1, @as(u8, 0xff));\n}"}
{"instruction":"Write a Zig struct similar to unaligned from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const unaligned = struct {}"}
{"instruction":"Write a Zig const similar to self from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/codepoint_counting_writer.zig","output":"const self: *Self = @fieldParentPtr(\"interface\", w);"}
{"instruction":"Write a Zig struct similar to returns_twice from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const returns_twice = struct {}"}
{"instruction":"Write a Zig function similar to cancel from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"pub fn cancel(\n        self: *Loop,\n        c: *Completion,\n        c_cancel: *Completion,\n        comptime Userdata: type,\n        userdata: ?*Userdata,\n        comptime cb: *const fn (\n            ud: ?*Userdata,\n            l: *Loop,\n            c: *Completion,\n            r: CancelError!void,\n        ) CallbackAction,\n    ) void {\n        c_cancel.* = .{\n            .op = .{\n                .cancel = .{\n                    .c = c,\n                }"}
{"instruction":"Write a Zig function similar to waitUnwrappedPosix from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn waitUnwrappedPosix(self: *ChildProcess) void {\n    const res: posix.WaitPidResult = res: {\n        if (self.request_resource_usage_statistics) {\n            switch (native_os) {\n                .linux, .macos, .ios => {\n                    var ru: posix.rusage = undefined;\n                    const res = posix.wait4(self.id, 0, &ru);\n                    self.resource_usage_statistics.rusage = ru;\n                    break :res res;\n                }"}
{"instruction":"Write a Zig struct similar to zero_call_used_regs from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub const zero_call_used_regs = struct {\n        choice: enum {\n            skip,\n            used,\n            @\"used-gpr\",\n            @\"used-arg\",\n            @\"used-gpr-arg\",\n            all,\n            @\"all-gpr\",\n            @\"all-arg\",\n            @\"all-gpr-arg\",\n\n            const opts = struct {\n                const enum_kind = .string;\n            }"}
{"instruction":"Write a Zig function similar to onBlockBreaking from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"pub fn onBlockBreaking(item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f, currentData: *Block) void {\n\tif(item) |_item| {\n\t\tswitch(_item) {\n\t\t\t.baseItem => |baseItem| {\n\t\t\t\tif(std.mem.eql(u8, baseItem.id(), \"cubyz:chisel\")) { // Break only one eigth of a block\n\t\t\t\t\tcurrentData.data |= closestRay(.bit, currentData.*, relativePlayerPos, playerDir);\n\t\t\t\t\tif(currentData.data == 255) currentData.* = .{.typ = 0, .data = 0}"}
{"instruction":"Write a Zig function similar to init from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/TopLevelFields.zig","output":"pub fn init(val: u32) TopLevelFields {\n    return .{\n        .foo = val,\n        .bar = val * 10,\n    }"}
{"instruction":"Write a Zig function similar to fromTvgFile from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn fromTvgFile(dbg_name: []const u8, alloc: std.mem.Allocator, render_alloc: std.mem.Allocator, tvg_bytes: []const u8, height: u32, icon_opts: dvui.IconRenderOptions) !PMAImage {\n        const ImageAdapter = struct {\n            pixels: []u8,\n            width: u32,\n            height: u32,\n            pub fn setPixel(self: *@This(), x: usize, y: usize, col: [4]u8) void {\n                const idx = (y * self.height + x) * 4;\n                for (0..4) |i| self.pixels[idx + i] = col[i];\n            }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n<span class=\"tok-kw\">const</span> expect = std.testing.expect;\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"integer truncation\"</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">u16</span> = <span class=\"tok-number\">0xabcd</span>;\n    <span class=\"tok-kw\">const</span> b: <span class=\"tok-type\">u8</span> = <span class=\"tok-builtin\">@truncate</span>(a);\n    <span class=\"tok-kw\">try</span> expect(b == <span class=\"tok-number\">0xcd</span>);\n}"}
{"instruction":"Write a Zig const similar to interrupt_handlers from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/interrupt.zig","output":"const interrupt_handlers: u32;\n\nvar idt: [256]InterruptDescriptor = undefined;"}
{"instruction":"Write a Zig function similar to mouse from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn mouse(self: DebugTarget) bool {\n        return self == .mouse_until_click or self == .mouse_until_esc or self == .mouse_quitting;\n    }"}
{"instruction":"Write a Zig function similar to largerThan from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/log.zig","output":"fn largerThan(self: Self, other: Self) bool {\n        return @intFromEnum(self) > @intFromEnum(other);\n    }"}
{"instruction":"Write a Zig function similar to renderWrapper from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn renderWrapper(self: *Self, name: []const u8, command: reg.Command) !void {\n        const returns_vk_result = command.return_type.* == .name and mem.eql(u8, command.return_type.name, \"VkResult\");\n        const returns_void = command.return_type.* == .name and mem.eql(u8, command.return_type.name, \"void\");\n\n        const returns = try self.extractReturns(command);\n\n        if (returns.len > 1) {\n            try self.renderReturnStruct(name, returns);\n        }"}
{"instruction":"Write a Zig function similar to lessThan from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"fn lessThan(context: SortContext, lhs: v.Value, rhs: v.Value) bool {\n    var args = [_]*const v.Value{ &lhs, &rhs }"}
{"instruction":"Write Zig 0.15.1 code for: Zig Test §","input":"Code written within one or more test declarations can be used to ensure behavior meets expectations: testing_introduction.zig Shell The testing_introduction.zig code sample tests the function addOne to ensure that it returns 42 given the input 41 . From this test's perspective, the addOne function is said to be code under test . zig test is a tool that creates and runs a test build. By default, it builds and runs an executable program using the default test runner provided by the Zig Standard Li","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"detect leak\"</span> {\n    <span class=\"tok-kw\">var</span> list = std.array_list.Managed(<span class=\"tok-type\">u21</span>).init(std.testing.allocator);\n    <span class=\"tok-comment\">// missing `defer list.deinit();`</span>\n    <span class=\"tok-kw\">try</span> list.append(<span class=\"tok-str\">'☔'</span>);\n\n    <span class=\"tok-kw\">try</span> std.testing.expect(list.items.len == <span class=\"tok-number\">1</span>);\n}"}
{"instruction":"Write a Zig function similar to isBaseline from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: build.zig","output":"pub fn isBaseline(this: *const BunBuildOptions) bool {\n        return this.arch.isX86() and\n            !Target.x86.featureSetHas(this.target.result.cpu.features, .avx2);\n    }"}
{"instruction":"Write a Zig function similar to initPending from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn initPending(loader: Loader, pending: resolver.Result) OutputFile {\n    return .{\n        .loader = loader,\n        .src_path = pending.pathConst().?.*,\n        .size = 0,\n        .value = .{ .pending = pending }"}
{"instruction":"Write a Zig function similar to getEndpointList from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn getEndpointList(allocator: std.mem.Allocator, name: []const u8, port: u16) !*EndpointList {\n    const result = blk: {\n        var arena = std.heap.ArenaAllocator.init(allocator);\n        errdefer arena.deinit();\n\n        const result = try arena.allocator().create(EndpointList);\n        result.* = EndpointList{\n            .arena = arena,\n            .endpoints = undefined,\n            .canon_name = null,\n        }"}
{"instruction":"Write a Zig function similar to timer_reset from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"pub fn timer_reset(\n        self: *Loop,\n        c: *Completion,\n        c_cancel: *Completion,\n        next_ms: u64,\n        userdata: ?*anyopaque,\n        comptime cb: Callback,\n    ) void {\n        if (c.state() == .dead) {\n            self.timer(c, next_ms, userdata, cb);\n            return;\n        }"}
{"instruction":"Write a Zig function similar to mergeEnumFields from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/generator.zig","output":"fn mergeEnumFields(self: *EnumFieldMerger, name: []const u8, base_enum: *reg.Enum) !void {\n        // If there are no extensions for this enum, assume its valid.\n        const extensions = self.enum_extensions.get(name) orelse return;\n\n        self.field_set.clearRetainingCapacity();\n\n        const n_fields_upper_bound = base_enum.fields.len + extensions.items.len;\n        const new_fields = try self.arena.alloc(reg.Enum.Field, n_fields_upper_bound);\n        var i: usize = 0;\n\n        for (base_enum.fields) |field| {\n            const res = try self.field_set.getOrPut(self.arena, field.name);\n            if (!res.found_existing) {\n                new_fields[i] = field;\n                i += 1;\n            }"}
{"instruction":"Write a Zig function similar to endFrame from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn endFrame(self: *Self) Ast.Node.Index {\n    var i: usize = 0;\n    while (i < self.current.?.local_count) : (i += 1) {\n        const local = self.current.?.locals[i];\n\n        if (self.flavor != .Repl) {\n            // Check discarded locals\n            if (!local.isReferenced(self.ast)) {\n                const location = self.ast.tokens.get(local.name);\n                self.reporter.warnFmt(\n                    .unused_argument,\n                    location,\n                    location,\n                    \"Local `{s}"}
{"instruction":"Write a Zig function similar to __errno_location from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"fn __errno_location() *c_int {\n    return &errno;\n}"}
{"instruction":"Write a Zig function similar to sdkRoot from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"fn sdkRoot() *const [sdkRootIntern().len]u8 {\n    comptime var buffer = sdkRootIntern();\n    return buffer[0..buffer.len];\n}"}
{"instruction":"Write a Zig function similar to deinit from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Config.zig","output":"pub fn deinit(config: *Config) void {\n    config.mode_to_id.deinit();\n    for (config.modes.items) |*mode| mode.deinit();\n    config.modes.deinit(util.gpa);\n\n    config.rules.float.deinit();\n    config.rules.ssd.deinit();\n    config.rules.tags.deinit();\n    for (config.rules.output.rules.items) |rule| {\n        util.gpa.free(rule.value);\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Casting §","input":"A type cast converts a value of one type to another. Zig has Type Coercion for conversions that are known to be completely safe and unambiguous, and Explicit Casts for conversions that one would not want to happen on accident. There is also a third kind of type conversion called Peer Type Resolution for the case when a result type must be decided given multiple operand types. Type Coercion § Type coercion occurs when one type is expected, but different type is provided: test_type_coercion.zig Sh","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"type coercion - const qualification\"</span> {\n    <span class=\"tok-kw\">var</span> a: <span class=\"tok-type\">i32</span> = <span class=\"tok-number\">1</span>;\n    <span class=\"tok-kw\">const</span> b: *<span class=\"tok-type\">i32</span> = &a;\n    foo(b);\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(_: *<span class=\"tok-kw\">const</span> <span class=\"tok-type\">i32</span>) <span class=\"tok-type\">void</span> {}"}
{"instruction":"Write a Zig function similar to generate from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/generator.zig","output":"pub fn generate(\n    allocator: Allocator,\n    api: Api,\n    spec_xml: []const u8,\n    maybe_video_spec_xml: ?[]const u8,\n    writer: *std.Io.Writer,\n) !void {\n    const spec = xml.parse(allocator, spec_xml) catch |err| switch (err) {\n        error.InvalidDocument,\n        error.UnexpectedEof,\n        error.UnexpectedCharacter,\n        error.IllegalCharacter,\n        error.InvalidEntity,\n        error.InvalidName,\n        error.InvalidStandaloneValue,\n        error.NonMatchingClosingTag,\n        error.UnclosedComment,\n        error.UnclosedValue,\n        => return error.InvalidXml,\n        error.OutOfMemory => return error.OutOfMemory,\n    }"}
{"instruction":"Write a Zig function similar to initModule from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/napi.zig","output":"fn initModule(js: *napigen.JsContext, exports: napigen.napi_value) anyerror!napigen.napi_value {\n    // export init() function which will init native window, and return the globals for JS\n    try js.setNamedProperty(exports, \"init\", try js.createFunction(init));\n\n    // function wrappers and field getters we want to generate\n    // `&` means we want to get a pointer to the field\n    const defs = .{\n        .Node = .{ .appendChild, .insertBefore, .removeChild, .querySelector, .querySelectorAll, .markDirty }"}
{"instruction":"Write a Zig const similar to fields from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"const fields: [params.len]Type.StructField = blk: {\n        var res: [params.len]Type.StructField = undefined;"}
{"instruction":"Write a Zig struct similar to ModernBertForMaskedLM from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub const ModernBertForMaskedLM = struct {\n    model: ModernBertModel,\n    head: ModernBertPredictionHead,\n    decoder: struct { weight: ?zml.Tensor, bias: zml.Tensor }"}
{"instruction":"Write a Zig function similar to opSetObjectFieldLeftEnd from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn opSetObjectFieldLeftEnd(c: *Chunk) !void {\n//     const top = getTop(c);\n//     const info = getLastTaskInfo(c).basic;\n//     const data = getLastIrData(c).opSet;\n//     const opStrat = popDataU8(c).opStrat;\n\n//     const recv = c.genValueStack.getLast();\n//     const dst = try c.rega.consumeNextTemp();\n\n//     const fieldIdx = data.set.objectField.idx;\n//     switch (opStrat) {\n//         .inlineOp => {\n//             top.type = .opSetObjectFieldRightEnd;\n//             try pushCstr(c, Cstr.initBc(RegisterCstr.exact(dst)));\n//             const binLeftCstr = Task.init(Cstr.initBc(RegisterCstr.exact(dst)));\n//             try binOp(c, .{ .op = data.op, .leftT = data.leftT }"}
{"instruction":"Write a Zig struct similar to Timer from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"pub const Timer = struct {\n    /// The absolute time to fire this timer next.\n    next: u64,\n\n    /// Only used internally. If this is non-null and timer is\n    /// CANCELLED, then the timer is rearmed automatically with this\n    /// as the next time. The callback will not be called on the\n    /// cancellation.\n    reset: ?u64 = null,\n\n    /// Internal heap field.\n    heap: heap.IntrusiveField(Timer) = .{}"}
{"instruction":"Write a Zig function similar to accept4 from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn accept4(fd: c_int, addr: ?*SockAddr, flags: c_int) ?c_int {\n    const raw = struct {\n        extern fn accept4(fd: c_int, addr: ?*anyopaque, addrlen: ?*c.socklen_t, flags: c_int) c_int;\n    }"}
{"instruction":"Write a Zig const similar to elem_t from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"const elem_t: cy.TypeId = @intCast(vm.getInt(1));"}
{"instruction":"Write a Zig function similar to format from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"pub fn format(value: Self, writer: anytype) !void {\n        try writer.print(\"Server: {f}"}
{"instruction":"Write a Zig function similar to empty from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig","output":"fn empty(cs: Categories) bool {\n        const int: Tag = @bitCast(cs);\n        return int == 0;\n    }"}
{"instruction":"Write a Zig function similar to testFunction1 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/irq.zig","output":"fn testFunction1(ctx: *arch.CpuState) u32 {\n    // Suppress unused variable warnings\n    _ = ctx;\n    return 0;\n}"}
{"instruction":"Write a Zig function similar to endScope from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn endScope(self: *Self) ![]Chunk.OpCode {\n    const current = self.current.?;\n    _ = current.scopes.pop();\n    var closing = std.ArrayList(Chunk.OpCode).empty;\n    current.scope_depth -= 1;\n\n    while (current.local_count > 0 and current.locals[current.local_count - 1].depth > current.scope_depth) {\n        const local = current.locals[current.local_count - 1];\n\n        if (local.captured) {\n            try closing.append(self.gc.allocator, .OP_CLOSE_UPVALUE);\n        }"}
{"instruction":"Write a Zig struct similar to BuiltinTarget from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Builtins.zig","output":"const BuiltinTarget = struct {\n    param_str: [*:0]const u8,\n    language: properties.Language = .all_languages,\n    attributes: properties.Attributes = .{}"}
{"instruction":"Write a Zig function similar to seatHandleName from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"fn seatHandleName(window_id: mach.ObjectID, seat: ?*c.struct_wl_seat, name_ptr: [*:0]const u8) callconv(.C) void {\n        _ = window_id;\n        _ = seat;\n        _ = name_ptr;\n    }"}
{"instruction":"Write a Zig function similar to createFuncPtrType from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn createFuncPtrType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());\n    const type_id = c.sema.pushType() catch @panic(\"error\");\n    const sym = c.createFuncPtrType(@ptrCast(chunk_sym), \"funcptr\", type_id, sig, C.fromNode(decl)) catch @panic(\"error\");\n    return @as(*cy.Sym, @ptrCast(sym)).toC();\n}"}
{"instruction":"Write a Zig struct similar to DotnetSearch from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/ci.zig","output":"const DotnetSearch = struct {\n        const SearchResult = struct {\n            const Packages = struct {\n                id: []const u8,\n                latestVersion: []const u8,\n            }"}
{"instruction":"Write a Zig function similar to FlagFormatMixin from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn FlagFormatMixin(comptime FlagsType: type) type {\n    \\\\    return struct {\n    \\\\        pub fn format(\n    \\\\            self: FlagsType,\n    \\\\            writer: anytype,\n    \\\\        ) !void {\n    \\\\            try writer.writeAll(@typeName(FlagsType) ++ \"{\");\n    \\\\            var first = true;\n    \\\\            @setEvalBranchQuota(100_000);\n    \\\\            inline for (comptime std.meta.fieldNames(FlagsType)) |name| {\n    \\\\                if (name[0] == '_') continue;\n    \\\\                if (@field(self, name)) {\n    \\\\                    if (first) {\n    \\\\                        try writer.writeAll(\" .\" ++ name);\n    \\\\                        first = false;\n    \\\\                    }"}
{"instruction":"Write a Zig struct similar to Context from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub const Context = struct {\n    this: *Value, // = Value.Null,\n    vm: *Vm,\n    frame: *Vm.Frame,\n\n    pub fn throw(ctx: Context, err: []const u8) Value.NativeError {\n        try ctx.frame.throw(ctx.vm, err);\n        return error.Throw;\n    }"}
{"instruction":"Write a Zig const similar to a from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"const a: f32 = std.math.lerp(@as(f32, @floatFromInt(self.a)) / 255, @as(f32, @floatFromInt(other.a)) / 255, t);"}
{"instruction":"Write a Zig function similar to function from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn function(\n    self: *Self,\n    name: ?Ast.TokenIndex,\n    function_type: obj.ObjFunction.FunctionType,\n    this: ?*obj.ObjTypeDef,\n) Error!Ast.Node.Index {\n    var error_types = std.ArrayList(Ast.Node.Index).empty;\n    var arguments = std.ArrayList(Ast.FunctionType.Argument).empty;\n    var generic_types = std.ArrayList(Ast.TokenIndex).empty;\n\n    const function_signature = try self.ast.appendNode(\n        .{\n            .tag = .FunctionType,\n            .location = if (name != null)\n                self.current_token.? - 2 // -2 to start at the .Fun token\n            else\n                self.current_token.? - 1,\n            .end_location = undefined,\n            .type_def = null,\n            .components = .{\n                .FunctionType = .{\n                    .is_signature = true,\n                    .name = name,\n                    .return_type = null,\n                    .yield_type = null,\n                    .error_types = undefined,\n                    .arguments = undefined,\n                    .generic_types = undefined,\n                    .lambda = false,\n                }"}
{"instruction":"Write a Zig function similar to setTlsCertificate from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setTlsCertificate(certificate_pem: [:0]const u8, private_key_pem: [:0]const u8) !void {\n    if (comptime !flags.enableTLS) {\n        @compileError(\"not enable tls\");\n    }"}
{"instruction":"Write a Zig function similar to serializeJsonSourceMapForStandalone from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"pub fn serializeJsonSourceMapForStandalone(\n        header_list: *std.ArrayList(u8),\n        string_payload: *std.ArrayList(u8),\n        arena: std.mem.Allocator,\n        json_source: []const u8,\n    ) !void {\n        const out = header_list.writer();\n        const json_src = bun.logger.Source.initPathString(\"sourcemap.json\", json_source);\n        var log = bun.logger.Log.init(arena);\n        defer log.deinit();\n\n        // the allocator given to the JS parser is not respected for all parts\n        // of the parse, so we need to remember to reset the ast store\n        bun.ast.Expr.Data.Store.reset();\n        bun.ast.Stmt.Data.Store.reset();\n        defer {\n            bun.ast.Expr.Data.Store.reset();\n            bun.ast.Stmt.Data.Store.reset();\n        }"}
{"instruction":"Write a Zig function similar to readLine from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/repl.zig","output":"fn readLine(repl: *Repl, in: File, out: File, prompt: []const u8) !void {\n        _ = in;\n        _ = out;\n        if (repl.ln.linenoise(prompt)) |maybe_line| {\n            const line = maybe_line orelse return error.EndOfStream;\n            defer repl.ln.allocator.free(line);\n\n            try repl.buffer.appendSlice(line);\n            try repl.buffer.append('\\n');\n\n            try repl.ln.history.add(line);\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Build Mode §","input":"Zig has four build modes: Debug (default) ReleaseFast ReleaseSafe ReleaseSmall To add standard build options to a build.zig file: build.zig This causes these options to be available: -Doptimize=Debug Optimizations off and safety on (default) -Doptimize=ReleaseSafe Optimizations on and safety on -Doptimize=ReleaseFast Optimizations on and safety off -Doptimize=ReleaseSmall Size optimizations on and safety off Debug § Shell Fast compilation speed Safety checks enabled Slow runtime performance Larg","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">build</span>(b: *std.Build) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> optimize = b.standardOptimizeOption(.{});\n    <span class=\"tok-kw\">const</span> exe = b.addExecutable(.{\n        .name = <span class=\"tok-str\">\"example\"</span>,\n        .root_source_file = b.path(<span class=\"tok-str\">\"example.zig\"</span>),\n        .optimize = optimize,\n    });\n    b.default_step.dependOn(&exe.step);\n}"}
{"instruction":"Write a Zig const similar to bitset_1 from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/amqp/spec.zig","output":"const bitset_1: stdx.BitSetType(8) = .{ .bits = try decoder.read_int(u8) };"}
{"instruction":"Write a Zig const similar to index from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSRuleList.zig","output":"const index: usize = @intCast(_index);"}
{"instruction":"Write a Zig const similar to wlen from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/raw_stream.zig","output":"const wlen: f32 = @floatFromInt(waveLength);"}
{"instruction":"Write a Zig struct similar to Metadata from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub const Metadata = struct {\n    description: []const u8 = &[_]u8{}"}
{"instruction":"Write a Zig function similar to consumeString from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"fn consumeString(self: *Tokenizer, quote: u8) ![]const u8 {\n        const start = self.pos;\n        var prev: u8 = '\\\\';\n        self.pos += 1;\n\n        while (self.peek() catch null) |ch| {\n            if (ch == quote and prev != '\\\\') break;\n\n            prev = ch;\n            self.pos += 1;\n        }"}
{"instruction":"Write a Zig function similar to collect_deps_deep from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/common.zig","output":"pub fn collect_deps_deep(cachepath: string, mdir: std.fs.Dir, options: *CollectOptions) !zigmod.Module {\n    try std.fs.cwd().makePath(cachepath);\n\n    const m = try zigmod.ModFile.from_dir(options.alloc, mdir);\n    try options.init();\n    var moduledeps = std.ArrayList(zigmod.Module).init(options.alloc);\n    errdefer moduledeps.deinit();\n    if (m.root_files.len > 0) {\n        try gen_files_package(options.alloc, cachepath, mdir, m.root_files);\n    }"}
{"instruction":"Write a Zig function similar to setHide from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setHide(self: webui, status: bool) void {\n    c.webui_set_hide(self.window_handle, status);\n}"}
{"instruction":"Write Zig 0.14.1 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">comptime</span> {\n    <span class=\"tok-builtin\">@export</span>(&internalName, .{ .name = <span class=\"tok-str\">\"foo\"</span>, .linkage = .strong });\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">internalName</span>() <span class=\"tok-kw\">callconv</span>(.C) <span class=\"tok-type\">void</span> {}"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> Foo = <span class=\"tok-kw\">enum</span> {\n    a,\n    b,\n    c,\n};\n<span class=\"tok-kw\">comptime</span> {\n    <span class=\"tok-kw\">const</span> a: <span class=\"tok-type\">u2</span> = <span class=\"tok-number\">3</span>;\n    <span class=\"tok-kw\">const</span> b: Foo = <span class=\"tok-builtin\">@enumFromInt</span>(a);\n    _ = b;\n}"}
{"instruction":"Write a Zig function similar to openIrq from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/irq.zig","output":"fn openIrq(index: u8, handler: idt.InterruptHandler) void {\n    idt.openInterruptGate(index, handler) catch |err| switch (err) {\n        error.IdtEntryExists => {\n            panic(@errorReturnTrace(), \"Error opening IRQ number: {}"}
{"instruction":"Write a Zig function similar to is_private from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/dotnet/dotnet_bindings.zig","output":"pub fn is_private(comptime self: @This(), name: []const u8) bool {\n        inline for (self.private_fields) |field| {\n            if (std.mem.eql(u8, field, name)) {\n                return true;\n            }"}
{"instruction":"Write a Zig function similar to goto_type_definition from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn goto_type_definition(self: *Self, from: tp.pid_ref, file_path: []const u8, row: usize, col: usize) SendGotoRequestError!void {\n    return self.send_goto_request(from, file_path, row, col, \"textDocument/typeDefinition\");\n}"}
{"instruction":"Write a Zig function similar to isRegFree from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"pub fn isRegFree(self: Self, reg: Register) bool {\n            return self.isRegIndexFree(indexOfRegIntoTracked(reg) orelse return true);\n        }"}
{"instruction":"Write a Zig function similar to webui_new_window from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"fn webui_new_window() callconv(.c) usize;\n\n/// @brief Create a new webui window object using a specified window number.\n///\n/// @param window_number The window number (should be > 0, and < WEBUI_MAX_IDS)\n///\n/// @return Returns the same window number if success.\n///\n/// @example const my_window: usize = webui_new_window_id(123);\npub extern fn webui_new_window_id(window_number: usize) callconv(.c) usize;\n\n/// @brief Get a free window number that can be used with `webui_new_window_id()`\n///\n/// @return Returns the first available free window number. Starting from 1.\n///\n/// @example const my_window: usize = webui_get_new_window_id();\npub extern fn webui_get_new_window_id() callconv(.c) usize;\n\n/// @brief Bind an HTML element and a Javascript object with a backend function. Empty\n/// element name means all events.\n///\n/// @param window The window number\n/// @param element The HTML element / Javascript object\n/// @param func The callback function\n///\n/// @return Returns a unique bind ID.\n///\n/// @example webui_bind(my_window, \"myFunction\", myFunction);\npub extern fn webui_bind(\n    window: usize,\n    element: [*:0]const u8,\n    func: *const fn (e: *Event) callconv(.c) void,\n) callconv(.c) usize;\n\n/// @brief Use this API after using `webui_bind()` to add any user data to it that can be\n/// read later using `webui_get_context()`.\n///\n/// @param window The window number\n/// @param element The HTML element / JavaScript object\n/// @param context Any user data\n///\n/// @example\n/// webui_bind(myWindow, \"myFunction\", myFunction);\n///\n/// webui_set_context(myWindow, \"myFunction\", myData);\n///\n/// void myFunction(webui_event_t* e) {\n///   void* myData = webui_get_context(e);\n/// }"}
{"instruction":"Explain Illegal Behavior § in Zig 0.14.1","input":"","output":"Many operations in Zig trigger what is known as \"Illegal Behavior\" (IB). If Illegal Behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Otherwise, when Illegal Behavior is not caught at compile-time, it falls into one of two categories. Some Illegal Behavior is safety-checked : this means that the compiler will insert \"safety checks\" anywhere that the Illegal Behavior may occur at runtime, to determine whether it is about to happen. If it is, the safety check \"fails\", which triggers a panic. All other Illegal Behavior is unchecked , meaning the compiler is unable to insert safety checks for it. If Unchecked Illegal Behavior is invoked at runtime, anything can happen: usually that will be some kind of crash, but the optimizer is free to make Unchecked Illegal Behavior do anything, such as calling arbitrary functions or clobbering arbitrary data. This is similar to the concept of \"undefined behavior\" in some other languages. Note that Unchecked Illega"}
{"instruction":"Write a Zig function similar to transmit from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/drivers/virtio/net.zig","output":"pub fn transmit(\n        self: *Self,\n        data: []const u8,\n    ) void {\n        @setRuntimeSafety(false);\n\n        const idx = self.tx_ring_index % self.transmitq().num_descs;\n        const base = @intFromPtr(&virtio_net.tx_ring[idx * PACKET_MAX_LEN]);\n        defer self.tx_ring_index +%= 1;\n\n        const header = @as(*Header, @ptrFromInt(base));\n        header.* = Header{\n            .flags = 0,\n            .gso_type = 0,\n            .hdr_len = 0,\n            .gso_size = 0,\n            .checksum_start = 0,\n            .checksum_offset = 0,\n            .num_buffer = 1,\n        }"}
{"instruction":"Write a Zig function similar to add from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"pub fn add(self: *Loop, completion: *Completion) void {\n        self.add_(completion, false);\n    }"}
{"instruction":"Write a Zig function similar to produce_request_callback from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn produce_request_callback(\n        context: u128,\n        operation_vsr: vsr.Operation,\n        timestamp: u64,\n        result: []u8,\n    ) void {\n        const operation = operation_vsr.cast(Client.StateMachine);\n        assert(operation == .get_change_events);\n        assert(timestamp != 0);\n        const runner: *Runner = @ptrFromInt(@as(usize, @intCast(context)));\n        assert(runner.producer == .request);\n\n        const source: []const tb.ChangeEvent = stdx.bytes_as_slice(.exact, tb.ChangeEvent, result);\n        const target: []tb.ChangeEvent = runner.buffer.get_producer_buffer();\n        assert(source.len <= target.len);\n\n        stdx.copy_disjoint(\n            .inexact,\n            tb.ChangeEvent,\n            target,\n            source,\n        );\n        runner.buffer.producer_finish(@intCast(source.len));\n\n        if (runner.buffer.all_free()) {\n            // No events to publish.\n            // Going idle and will check again for new events.\n            assert(source.len == 0);\n            assert(runner.consumer == .idle);\n            runner.producer = .waiting;\n            return runner.produce_dispatch();\n        }"}
{"instruction":"Write Zig 0.14.1 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"@setRuntimeSafety\"</span> {\n    <span class=\"tok-comment\">// The builtin applies to the scope that it is called in. So here, integer overflow</span>\n    <span class=\"tok-comment\">// will not be caught in ReleaseFast and ReleaseSmall modes:</span>\n    <span class=\"tok-comment\">// var x: u8 = 255;</span>\n    <span class=\"tok-comment\">// x += 1; // Unchecked Illegal Behavior in ReleaseFast/ReleaseSmall modes.</span>\n    {\n        <span class=\"tok-comment\">// However this block has safety enabled, so safety checks happen here,</span>\n        <span class=\"tok-comment\">// even in ReleaseFast and ReleaseSmall modes.</span>\n        <span class=\"tok-builtin\">@setRuntimeSafety</span>(<span class=\"tok-null\">true</span>);\n        <span class=\"tok-kw\">var</span> x: <span class=\"tok-type\">u8</span> = <span class=\"tok-number\">255</span>;\n        x += <span class=\"tok-number\">1</span>;\n\n        {\n            <span class=\"tok-comment\">// The value can be overridden at any scope. So here integer overflow</span>\n            <span class=\"tok-comment\">// would not be caught in any build mode.</span>\n            <span class=\"tok-builtin\">@setRuntimeSafety</span>(<span class=\"tok-null\">false</span>);\n            <span class=\"tok-comment\">// var x: u8 = 255;</span>\n            <span class=\"tok-comment\">// x += 1; // Unchecked Illegal Behavior in all build modes.</span>\n        }\n    }\n}"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">comptime</span> {\n    <span class=\"tok-kw\">const</span> x = <span class=\"tok-builtin\">@shrExact</span>(<span class=\"tok-builtin\">@as</span>(<span class=\"tok-type\">u8</span>, <span class=\"tok-number\">0b10101010</span>), <span class=\"tok-number\">2</span>);\n    _ = x;\n}"}
{"instruction":"Write a Zig function similar to parseAttr from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/xml.zig","output":"fn parseAttr(parser: *Parser, alloc: Allocator) !?Attribute {\n    const name = parseNameNoDupe(parser) catch return null;\n    _ = parser.eatWs();\n    try parser.expect('=');\n    _ = parser.eatWs();\n    const value = try parseAttrValue(parser, alloc);\n\n    const attr = Attribute{\n        .name = try alloc.dupe(u8, name),\n        .value = value,\n    }"}
{"instruction":"Write a Zig function similar to destroyWindow from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/advanced_window/main.zig","output":"fn destroyWindow(e: *webui.Event) void {\n    const window = e.getWindow();\n    window.close();\n    e.returnString(\"Window closed\");\n}"}
{"instruction":"Write a Zig function similar to runClient from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn runClient(self: *Event, script_content: [:0]const u8) void {\n        c.webui_run_client(self, script_content.ptr);\n    }"}
{"instruction":"Write a Zig function similar to resolvePeerTypesIP from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn resolvePeerTypesIP(analyser: *Analyser, a: InternPool.Index, b: InternPool.Index) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to I64Value from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const I64Value = struct {\n        ty: Index,\n        int: i64,\n    }"}
{"instruction":"Write a Zig function similar to luminance from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/color.zig","output":"pub fn luminance(v: RGBf) f32 {\n        return linear(v.r) * RED + linear(v.g) * GREEN + linear(v.b) * BLUE;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@panic</span>(message: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) <span class=\"tok-type\">noreturn</span>"}
{"instruction":"Write a Zig function similar to setEmpty from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"fn setEmpty(idx: *Self) void {\n            idx.entry_index = empty_sentinel;\n            idx.distance_from_start_index = undefined;\n        }"}
{"instruction":"Write a Zig function similar to capacity from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"fn capacity(self: IndexHeader) u32 {\n        return index_capacities[self.bit_index];\n    }"}
{"instruction":"Write a Zig const similar to sort_public_decls_first from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"pub const sort_public_decls_first: bool = false;"}
{"instruction":"Write a Zig function similar to initType from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub fn initType(qt: QualType, comp: *const Compilation) Iterator {\n        return .{ .source = .{ .qt = qt, .comp = comp }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    std.debug.assert(<span class=\"tok-null\">false</span>);\n}"}
{"instruction":"Write a Zig const similar to lx from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const lx: i32 = @intFromFloat(cursor.wlr_cursor.x);"}
{"instruction":"Write a Zig function similar to astringReplace from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"fn astringReplace(vm: *cy.VM, str: []const u8, needlev: *cy.heap.String, replacev: *cy.heap.String) ?Value {\n    const needle = needlev.getSlice();\n    const replacement = replacev.getSlice();\n\n    const idxBuf = &@as(*cy.VM, @ptrCast(vm)).u8Buf;\n    idxBuf.clearRetainingCapacity();\n    defer idxBuf.ensureMaxCapOrClear(vm.alloc, 4096) catch fatal();\n    const newLen = string.prepReplacement(str, needle, replacement, idxBuf.writer(vm.alloc)) catch fatal();\n    const numIdxes = @divExact(idxBuf.len, 4);\n    if (numIdxes > 0) {\n        if (replacev.getType().isAstring()) {\n            const new = vm.allocUnsetAstringObject(newLen) catch fatal();\n            const newBuf = new.astring.getMutSlice();\n            const idxes = @as([*]const u32, @ptrCast(idxBuf.buf.ptr))[0..numIdxes];\n            string.replaceAtIdxes(newBuf, str, @intCast(needle.len), replacement, idxes);\n            return vm.allocOwnedAstring(new) catch fatal();\n        }"}
{"instruction":"Write a Zig function similar to createAndSetTypeObject from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn createAndSetTypeObject(self: *const ModuleBuilder, name: []const u8, fields: []const []const u8) !cy.TypeId {\n        const sym = try self.chunk.declareObjectType(self.sym, name, cy.NullId);\n\n        const modFields = try self.compiler.alloc.alloc(cy.sym.FieldInfo, fields.len);\n\n        for (fields, 0..) |field, i| {\n            const id = try self.vm.ensureFieldSym(field);\n            try self.vm.addFieldSym(sym.type, id, @intCast(i), bt.Any);\n            _ = try self.chunk.declareField(@ptrCast(sym), field, @intCast(i), bt.Any, cy.NullId);\n        }"}
{"instruction":"Write a Zig function similar to parseXml from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"pub fn parseXml(\n    backing_allocator: Allocator,\n    root: *xml.Element,\n    maybe_video_root: ?*xml.Element,\n    api: registry.Api,\n) !ParseResult {\n    var arena = ArenaAllocator.init(backing_allocator);\n    errdefer arena.deinit();\n\n    const allocator = arena.allocator();\n\n    var decls: std.ArrayList(registry.Declaration) = .empty;\n    var api_constants: std.ArrayList(registry.ApiConstant) = .empty;\n    var tags: std.ArrayList(registry.Tag) = .empty;\n    var features: std.ArrayList(registry.Feature) = .empty;\n    var extensions: std.ArrayList(registry.Extension) = .empty;\n\n    try parseDeclarations(allocator, root, api, &decls);\n    try parseApiConstants(allocator, root, api, &api_constants);\n    try parseTags(allocator, root, &tags);\n    try parseFeatures(allocator, root, api, &features);\n    try parseExtensions(allocator, root, api, &extensions);\n\n    if (maybe_video_root) |video_root| {\n        try parseDeclarations(allocator, video_root, api, &decls);\n        try parseApiConstants(allocator, video_root, api, &api_constants);\n        try parseTags(allocator, video_root, &tags);\n        try parseFeatures(allocator, video_root, api, &features);\n        try parseExtensions(allocator, video_root, api, &extensions);\n    }"}
{"instruction":"Write a Zig function similar to variadic from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/functions.zig","output":"pub fn variadic(args: struct { hello: py.PyString, args: py.Args(), kwargs: py.Kwargs() }) !py.PyString {\n    return py.PyString.createFmt(\n        \"Hello {s}"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">const</span> Set1 = <span class=\"tok-kw\">error</span>{\n    A,\n    B,\n};\n<span class=\"tok-kw\">const</span> Set2 = <span class=\"tok-kw\">error</span>{\n    A,\n    C,\n};\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    foo(Set1.B);\n}\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(set1: Set1) <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> x: Set2 = <span class=\"tok-builtin\">@errorCast</span>(set1);\n    std.debug.print(<span class=\"tok-str\">\"value: {}\\n\"</span>, .{x});\n}"}
{"instruction":"Write a Zig function similar to sendFile from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"fn sendFile(\n        arena: Allocator,\n        req: *std.http.Server.Request,\n        dir: std.fs.Dir,\n        mime_type: mime.Type,\n        file_path: []const u8,\n    ) !void {\n        assert(file_path[0] != '/');\n\n        const contents = try dir.readFileAlloc(\n            arena,\n            file_path,\n            std.math.maxInt(usize),\n        );\n\n        if (mime_type == .@\"text/html\") {\n            return sendHtml(arena, req, contents);\n        }"}
{"instruction":"Write a Zig function similar to get_extension from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig","output":"pub fn get_extension(format: BinaryFormat) []const u8 {\n        return switch (format) {\n            .elf => \".elf\",\n            .bin, .esp => \".bin\",\n            .hex => \".hex\",\n            .dfu => \".dfu\",\n            .uf2 => \".uf2\",\n\n            .custom => |c| c.extension,\n        }"}
{"instruction":"Write a Zig struct similar to Vector from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Vector = struct {\n        // TODO convert this into an enum and have `std.math.maxInt(u32)` represent unknown length,\n        len: u32,\n        child: Index,\n    }"}
{"instruction":"Write a Zig const similar to RRF_SUBKEY_WOW6464KEY from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build/auto-detect.zig","output":"const RRF_SUBKEY_WOW6464KEY: DWORD = 0x00010000;"}
{"instruction":"Write a Zig function similar to parseCommands from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn parseCommands(\n    allocator: Allocator,\n    commands_elem: *xml.Element,\n    api: registry.Api,\n    decls: *std.ArrayList(registry.Declaration),\n) !void {\n    var it = commands_elem.findChildrenByTag(\"command\");\n    while (it.next()) |elem| {\n        if (!requiredByApi(elem, api))\n            continue;\n\n        try decls.append(allocator, try parseCommand(allocator, elem, api));\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@export</span>(declaration, <span class=\"tok-kw\">comptime</span> options: std.builtin.ExportOptions) <span class=\"tok-type\">void</span>"}
{"instruction":"Write a Zig const similar to signedness from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const signedness: std.builtin.Signedness = switch (identifier_name[0]) {\n        'i' => .signed,\n        'u' => .unsigned,\n        else => return null,\n    };"}
{"instruction":"Write a Zig function similar to init from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig","output":"fn init(extra: Extra, count: Count, cpls: []const Ast.Completion) @This() {\n            assert(cpls.len > 0);\n            return .{\n                .count = count,\n                .extra = extra,\n                .set = blk: {\n                    @setEvalBranchQuota(4000);\n                    var kvs: []const struct { []const u8, u32 }"}
{"instruction":"Write a Zig function similar to renderVariableValue from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn renderVariableValue(\n            self: *Self,\n            fields: *ArrayListUnmanaged(types.ExpressionRenderField),\n            pointers: *AutoHashMapUnmanaged(types.Address, types.ExpressionFieldNdx),\n            params: RenderVariableParams,\n        ) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            const var_name = if (self.data.target.?.strings.get(params.variable.name)) |n| n else return;\n            if (var_name.len == 0) return;\n\n            const var_platform_data = switch (builtin.target.os.tag) {\n                .linux => if (params.variable.platform_data.location_expression) |loc|\n                    self.data.target.?.strings.get(loc) orelse \"\"\n                else\n                    \"\",\n\n                else => @compileError(\"build target not supported\"),\n            }"}
{"instruction":"Write a Zig const similar to locker_queue_owned from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const locker_queue_owned: []const u8 = try std.fmt.allocPrint(\n            allocator,\n            \"{s}.{}\",\n            .{\n                constants.locker_queue,\n                options.cluster_id,\n            },\n        );"}
{"instruction":"Write a Zig function similar to getUnionMut from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn getUnionMut(ip: *InternPool, index: Union.Index) *Union {\n    ip.lock.lockShared();\n    defer ip.lock.unlockShared();\n    return ip.unions.at(@intFromEnum(index));\n}"}
{"instruction":"Write a Zig struct similar to ScriptImport from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub const ScriptImport = struct {\n    function: Ast.Node.Index,\n    globals: std.ArrayList(Global) = .{}"}
{"instruction":"Write a Zig function similar to detectIndentation from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"fn detectIndentation(source: []const u8) []const u8 {\n    // Essentially I'm looking for the first indentation in the file.\n    var i: usize = 0;\n    const len = source.len - 1; // I need 1 look-ahead\n    while (i < len) : (i += 1) {\n        if (source[i] != '\\n') continue;\n        i += 1;\n        if (source[i] == '\\t') return \"\\t\";\n        var space_count: usize = 0;\n        while (i < source.len and source[i] == ' ') : (i += 1) {\n            space_count += 1;\n        }"}
{"instruction":"Write a Zig const similar to un from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const un: u32 = @intCast(n);"}
{"instruction":"Write a Zig function similar to testTokenizer from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/c_parse.zig","output":"fn testTokenizer(tokenizer: anytype, expected_tokens: []const Token) !void {\n    for (expected_tokens) |expected| {\n        const tok = (tokenizer.next() catch unreachable).?;\n        try testing.expectEqual(expected.kind, tok.kind);\n        try testing.expectEqualSlices(u8, expected.text, tok.text);\n    }"}
{"instruction":"Write a Zig function similar to fatal from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/main.zig","output":"fn fatal(comptime msg: []const u8, args: anytype) noreturn {\n    std.io.getStdErr().writer().print(msg ++ \"\\n\", args) catch {}"}
{"instruction":"Write a Zig function similar to setIndentDelta from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"pub fn setIndentDelta(self: *Self, new_indent_delta: usize) void {\n            if (self.indent_delta == new_indent_delta) {\n                return;\n            }"}
{"instruction":"Write a Zig const similar to max from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/epoll.zig","output":"const max: posix.timespec = .{\n            .sec = std.math.maxInt(isize),\n            .nsec = std.math.maxInt(isize),\n        };"}
{"instruction":"Write a Zig struct similar to RegisterLock from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"pub const RegisterLock = struct { tracked_index: TrackedIndex }"}
{"instruction":"Write a Zig function similar to main from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/stdio-example.zig","output":"pub fn main() !void {\r\n    const x: f32 = 15.2;\r\n    _ = stdio.printf(\"%.3f\\n\", x);\r\n}"}
{"instruction":"Write a Zig function similar to readBackCommand from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"fn readBackCommand(counter: CounterSelect) u8 {\n    sendCommand(0xC2);\n    return 0x3F & arch.in(u8, counter.getRegister());\n}"}
{"instruction":"Write a Zig function similar to UserVM_evalExt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"pub fn UserVM_evalExt(vm: *cy.VM) anyerror!cy.Value {\n    const core_data = vm.getData(*cy.builtins.CoreData, \"core\");\n    const uvm = vm.getValue(0).castHostObject(*UserVM);\n    const uri = vm.getString(1);\n    const src = vm.getString(2);\n    const config = vm.getValue(3);\n\n    const config_c = C.EvalConfig{\n        .single_run = (try vm.getFieldName(config, \"single_run\")).asBool(),\n        .file_modules = (try vm.getFieldName(config, \"file_modules\")).asBool(),\n        .gen_all_debug_syms = (try vm.getFieldName(config, \"gen_all_debug_syms\")).asBool(),\n        .backend = (try vm.getFieldName(config, \"backend\")).getEnumValue(),\n        .reload = (try vm.getFieldName(config, \"reload\")).asBool(),\n        .spawn_exe = (try vm.getFieldName(config, \"spawn_exe\")).asBool(),\n    }"}
{"instruction":"Write a Zig function similar to do from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/license.zig","output":"pub fn do(cachepath: string, dir: std.fs.Dir, options: *common.CollectOptions, outfile: std.fs.File) !void {\n    const top_module = try common.collect_deps_deep(cachepath, dir, options);\n\n    var master_list = List.init(gpa);\n    errdefer master_list.deinit();\n    try common.collect_pkgs(top_module, &master_list);\n    std.mem.sort(zigmod.Module, master_list.items, {}"}
{"instruction":"Write a Zig function similar to stringReplace from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn stringReplace(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n\n    const needle = vm.getObject(*cy.heap.String, 1);\n    const replace = vm.getObject(*cy.heap.String, 2);\n\n    if (stype.isAstring()) {\n        if (astringReplace(vm, str, needle, replace)) |val| {\n            return val;\n        }"}
{"instruction":"Write a Zig function similar to getNamespace from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn getNamespace(ip: *InternPool, ty: Index) NamespaceIndex {\n    return switch (ip.indexToKey(ty)) {\n        .struct_type => |struct_index| ip.getStruct(struct_index).namespace,\n        .enum_type => |enum_index| ip.getEnum(enum_index).namespace,\n        .union_type => |union_index| ip.getUnion(union_index).namespace,\n        else => .none,\n    }"}
{"instruction":"Write a Zig function similar to deinit from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Debug.zig","output":"pub fn deinit(self: *Debug, gpa: std.mem.Allocator) void {\n    for (self.under_mouse_stack.items) |item| {\n        gpa.free(item.name);\n    }"}
{"instruction":"Write a Zig function similar to callback from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn callback(context: *amqp.Client) void {\n                        const runner: *Runner = @alignCast(@fieldParentPtr(\n                            \"amqp_client\",\n                            context,\n                        ));\n                        assert(runner.consumer == .progress_update);\n\n                        const event_count: usize, const timestamp_last: u64 = events: {\n                            const events = runner.buffer.get_consumer_buffer();\n                            assert(events.len > 0);\n                            break :events .{ events.len, events[events.len - 1].timestamp }"}
{"instruction":"Write a Zig function similar to string from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig","output":"fn string(self: *Tokenizer, src: []const u8) Token {\n    const ending = self.current;\n    const start = self.idx - 1;\n\n    while (true) {\n        if (self.consume(src)) {\n            switch (self.current) {\n                '\\n' => {\n                    return .{\n                        .err = .{\n                            .tag = .truncated_string,\n                            .span = .{ .start = start, .end = self.idx - 1 }"}
{"instruction":"Write a Zig function similar to stmt from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/parser.zig","output":"fn stmt(p: *Parser, level: u8) Error!Node.Index {\n        if (try p.decl(level)) |node| return node;\n        return p.assignExpr(.keep_nl, level);\n    }"}
{"instruction":"Write a Zig function similar to isReadyWrite from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"fn isReadyWrite(self: Self, sock: Socket) bool {\n        if (self.write_fd_set.getSelectPointer()) |ptr| {\n            return windows.funcs.__WSAFDIsSet(sock.internal, ptr) != 0;\n        }"}
{"instruction":"Write a Zig const similar to optimize from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: build.zig","output":"const optimize: std.builtin.OptimizeMode =\n            // Compile in ReleaseSafe on Windows for faster extraction\n            if (target.result.os.tag == .windows) .ReleaseSafe else .Debug;"}
{"instruction":"Write a Zig function similar to addChild from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"fn addChild(\n    watcher: *LinuxWatcher,\n    parent: std.posix.fd_t,\n    child: std.posix.fd_t,\n) !void {\n    const gpa = watcher.gpa;\n    const children = try watcher.children_fds.getOrPut(gpa, parent);\n    if (!children.found_existing) {\n        children.value_ptr.* = .{}"}
{"instruction":"Write a Zig function similar to addChecks from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: build.zig","output":"fn addChecks(self: *const @This(), mod: *std.Build.Module, name: []const u8) void {\n        const tests = self.b.addTest(.{ .root_module = mod, .name = self.b.fmt(\"{s}"}
{"instruction":"Write a Zig function similar to handleMap from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputPopup.zig","output":"fn handleMap(listener: *wl.Listener(void)) void {\n    const input_popup: *InputPopup = @fieldParentPtr(\"map\", listener);\n\n    input_popup.update();\n}"}
{"instruction":"Write a Zig function similar to apply from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputConfig.zig","output":"fn apply(scroll_button_lock: ScrollButtonLock, device: *c.libinput_device) void {\n        _ = c.libinput_device_config_scroll_set_button_lock(device, switch (scroll_button_lock) {\n            .enabled => c.LIBINPUT_CONFIG_SCROLL_BUTTON_LOCK_ENABLED,\n            .disabled => c.LIBINPUT_CONFIG_SCROLL_BUTTON_LOCK_DISABLED,\n        }"}
{"instruction":"Write a Zig struct similar to Mouse from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Event.zig","output":"pub const Mouse = struct {\n    pub const Action = union(enum) {\n        // Focus events come right before their associated pointer event, usually\n        // leftdown/rightdown or motion. Separated to enable changing what\n        // causes focus changes.\n        focus,\n        press,\n        release,\n\n        wheel_x: f32,\n        wheel_y: f32,\n\n        // motion Point is the change in position\n        // if you just want to react to the current mouse position if it got\n        // moved at all, use the .position event with mouseTotalMotion()\n        motion: dvui.Point.Physical,\n\n        // always a single position event per frame, and it's always after all\n        // other events, used to change mouse cursor and do widget highlighting\n        // - also useful with mouseTotalMotion() to respond to mouse motion but\n        // only at the final location\n        // - generally you don't want to mark this as handled, the exception is\n        // if you are covering up child widgets and don't want them to react to\n        // the mouse hovering over them\n        // - instead, call dvui.cursorSet()\n        position,\n    }"}
{"instruction":"Write a Zig function similar to generateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, _: ?Neighbor, currentData: *Block, _: Block, blockPlacing: bool) bool {\n\tif(blockPlacing) {\n\t\tcurrentData.data = 0;\n\t\treturn true;\n\t}"}
{"instruction":"Write a Zig function similar to tokenSlice from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Tree.zig","output":"pub fn tokenSlice(tree: Tree, tok: Token.Index) []const u8 {\n    const starts = tree.tokens.items(.start);\n    const ends = tree.tokens.items(.end);\n    return tree.source[starts[tok]..ends[tok]];\n}"}
{"instruction":"Write a Zig function similar to getCaptureLoc from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/features/code_actions.zig","output":"fn getCaptureLoc(text: []const u8, loc: offsets.Loc) ?offsets.Loc {\n    const start_pipe_position = blk: {\n        var i = loc.start;\n        while (true) : (i -= 1) {\n            if (text[i] == '|') break;\n            if (i == 0) return null;\n        }"}
{"instruction":"Write a Zig function similar to isValidIsr from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub fn isValidIsr(isr_num: u32) bool {\n    return isr_num < NUMBER_OF_ENTRIES or isr_num == syscalls.INTERRUPT;\n}"}
{"instruction":"Write a Zig function similar to unregister from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub fn unregister(self: *Self) void {\n            removeCommand(self.vtbl.id);\n        }"}
{"instruction":"Write a Zig const similar to mem_leak_frames from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: build.zig","output":"const mem_leak_frames: u32 = b.option(u32, \"mem-leak-frames\", \"How many stack frames to print when a memory leak occurs. Tests get 2x this amount.\") orelse blk: {\n        if (strip == true) break :blk @as(u32, 0);"}
{"instruction":"Write a Zig const similar to res from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const res: posix.WaitPidResult = res: {\n        if (self.request_resource_usage_statistics) {\n            switch (native_os) {\n                .linux, .macos, .ios => {\n                    var ru: posix.rusage = undefined;"}
{"instruction":"Write a Zig function similar to findRune from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn findRune(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const needle = vm.getInt(1);\n    const stype = obj.getType(); \n\n    if (needle > 0) {\n        const code: u21 = @intCast(needle);\n        const needleIsAscii = code < 128;\n        if (stype.isAstring()) {\n            if (needleIsAscii) {\n                if (string.indexOfChar(str, @intCast(code))) |idx| {\n                    return intSome(vm, @intCast(idx)) catch cy.fatal();\n                }"}
{"instruction":"Write a Zig function similar to map from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/map.zig","output":"pub fn map(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const self = o.ObjMap.cast(ctx.vm.peek(1).obj()).?;\n    const closure = ctx.vm.peek(0);\n\n    const mapped_type = o.ObjClosure.cast(closure.obj()).?.function.type_def.resolved_type.?.Function\n        .return_type.resolved_type.?.ObjectInstance.of\n        .resolved_type.?.Object;\n\n    var new_map = ctx.vm.gc.allocateObject(\n        o.ObjMap.init(\n            ctx.vm.gc.allocator,\n            ctx.vm.gc.type_registry.getTypeDef(\n                .{\n                    .optional = false,\n                    .def_type = .Map,\n                    .resolved_type = .{\n                        .Map = o.ObjMap.MapDef.init(\n                            mapped_type.fields.get(\"key\").?.type_def,\n                            mapped_type.fields.get(\"value\").?.type_def,\n                            self.type_def.resolved_type.?.Map.mutable,\n                        ),\n                    }"}
{"instruction":"Write a Zig const similar to CHAR_LEN from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/serial.zig","output":"const CHAR_LEN: u8 = 8;"}
{"instruction":"Write a Zig function similar to importLibSymbol from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn importLibSymbol(\n    self: *Self,\n    location: Ast.TokenIndex,\n    end_location: Ast.TokenIndex,\n    full_file_name: []const u8,\n    symbol: []const u8,\n) !?*obj.ObjNative {\n    // Don't bother if we're not actually running the script\n    if (!self.flavor.resolveDynLib()) {\n        return undefined;\n    }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@import</span>(<span class=\"tok-kw\">comptime</span> path: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) <span class=\"tok-type\">type</span>"}
{"instruction":"Write a Zig function similar to generateIf from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateIf(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const type_defs = self.ast.nodes.items(.type_def);\n    const locations = self.ast.nodes.items(.location);\n    const end_locations = self.ast.nodes.items(.end_location);\n    const node_components = self.ast.nodes.items(.components);\n    const components = node_components[node].If;\n    const location = locations[node];\n\n    // Type checking\n    if (type_defs[components.condition].?.def_type == .Placeholder) {\n        self.reporter.reportPlaceholder(self.ast, type_defs[components.condition].?.resolved_type.?.Placeholder);\n    }"}
{"instruction":"Write a Zig function similar to get_commit_id from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn get_commit_id() []const u8 {\n    const str = exec_command(&.{ \"git\", \"rev-parse\", \"--short\", \"HEAD\" }"}
{"instruction":"Write a Zig function similar to getRotationFromDir from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig","output":"fn getRotationFromDir(dir: Vec3f) u16 {\n\tconst x = dir[0];\n\tconst y = dir[1];\n\tvar data: u3 = 0;\n\tif(@abs(x) > @abs(y)) {\n\t\tif(x < 0) {\n\t\t\tdata = 0;\n\t\t}"}
{"instruction":"Write a Zig function similar to is_armv5 from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn is_armv5() bool {\n    return _target.getCpuArch() == .arm and\n        (_target.getCpuFeatures().isEnabled(@enumToInt(std.Target.arm.Feature.v5t)) or\n        _target.getCpuFeatures().isEnabled(@enumToInt(std.Target.arm.Feature.v5te)));\n}"}
{"instruction":"Write a Zig function similar to init from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"pub fn init(\n        gpa: Allocator,\n        channel: *Channel(ServeEvent),\n        build: *const Build,\n        build_lock: *std.Thread.RwLock,\n    ) Server {\n        return .{\n            .gpa = gpa,\n            .channel = channel,\n            .build = build,\n            .build_lock = build_lock,\n        }"}
{"instruction":"Write a Zig function similar to filter from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"pub fn filter(ctx: *o.NativeCtx) callconv(.c) c_int {\n    const list = o.ObjList.cast(ctx.vm.peek(1).obj()).?;\n    const closure = ctx.vm.peek(0);\n\n    var new_list = ctx.vm.gc.allocateObject(\n        o.ObjList.init(\n            ctx.vm.gc.allocator,\n            list.type_def,\n        ) catch {\n            ctx.vm.panic(\"Out of memory\");\n            unreachable;\n        }"}
{"instruction":"Write a Zig function similar to match from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig","output":"pub fn match(\n            list: List,\n            gpa: Allocator,\n            errors: *std.ArrayList(Ast.Error),\n            node_idx: u32,\n            offset: u32,\n            item: []const u8,\n        ) !Match {\n            assert(list.extra != .manual);\n\n            if (list.set.getIndex(item)) |idx| {\n                return .{ .list = @intCast(idx) }"}
{"instruction":"Write a Zig function similar to stringifyFunction from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn stringifyFunction(analyser: *Analyser, options: FormatFunctionOptions) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to get from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"pub fn get(self: *Batch, c: *Completion) Error!*wasi.subscription_t {\n        if (self.len >= self.array.len) return error.BatchFull;\n        c.batch_idx = self.len;\n        self.len += 1;\n        return &self.array[c.batch_idx];\n    }"}
{"instruction":"Write a Zig function similar to get_seconds from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/ntp_client.zig","output":"pub fn get_seconds(ts: NtpTimestamp) f64 {\n        const secs: f64 = @floatFromInt(ts.seconds);\n        const frac: f64 = @floatFromInt(ts.fraction);\n\n        return secs + frac / std.math.maxInt(u32);\n    }"}
{"instruction":"Write a Zig function similar to dump from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn dump(vm: *cy.VM) anyerror!Value {\n    // const res = try cy_mod.allocToCyon(vm, vm.alloc, vm.getValue(0));\n    // defer vm.alloc.free(res);\n    // rt.print(vm, res);\n    // rt.print(vm, \"\\n\");\n    cy.vm.zDumpValue(vm, vm.getValue(0));\n    return Value.Void;\n}"}
{"instruction":"Write a Zig function similar to removeAttribute from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/element.zig","output":"pub fn removeAttribute(self: *Element, name: []const u8) void {\n        self.attributes.remove(name);\n        self.node.markDirty();\n    }"}
{"instruction":"Write a Zig const similar to seed from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/main.zig","output":"const seed: u128 = cli.args.seed orelse @bitCast(std.time.nanoTimestamp());"}
{"instruction":"Write a Zig function similar to bog_Tree_deinit from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/lib.zig","output":"fn bog_Tree_deinit(tree: *bog.Tree) void {\n    tree.deinit(gpa);\n    gpa.destroy(tree);\n}"}
{"instruction":"Write a Zig function similar to load_all from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/file_type_config.zig","output":"fn load_all(allocator: std.mem.Allocator) ![]const []const u8 {\n    const dir_path = try get_config_dir_path(allocator);\n    defer allocator.free(dir_path);\n\n    var dir = try std.fs.cwd().openDir(dir_path, .{ .iterate = true }"}
{"instruction":"Write a Zig function similar to atan2 from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn atan2(vm: *cy.VM) Value {\n    return Value.initF64(std.math.atan2(vm.getFloat(0), vm.getFloat(1)));\n}"}
{"instruction":"Write a Zig const similar to f25 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f25: u21 = 57388;"}
{"instruction":"Write a Zig function similar to fromNode from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn fromNode(node: Node) *cy.ast.Node {\n    return @ptrCast(@alignCast(node.ptr));\n}"}
{"instruction":"Write a Zig function similar to deinit from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/app.zig","output":"pub fn deinit(self: *App) void {\n        const allocator = self.allocator;\n        if (self.app_dir_path) |app_dir_path| {\n            allocator.free(app_dir_path);\n        }"}
{"instruction":"Write a Zig function similar to get_glibc_version from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn get_glibc_version() std.builtin.Version {\n    const builtin_info = show_builtin();\n    defer _b.allocator.free(builtin_info);\n\n    var stream = std.io.fixedBufferStream(builtin_info);\n    const reader = stream.reader();\n\n    var buffer: [512]u8 = undefined;\n\n    while (reader.readUntilDelimiterOrEof(&buffer, '\\n') catch unreachable) |raw_line| {\n        const line = trim_whitespace(raw_line);\n\n        if (std.mem.eql(u8, line, \".glibc = .{\")) {\n            // .glibc = .{\n            //     .major = 2,\n            //     .minor = 38,\n            //     .patch = 0,\n            // }"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"integer cast panic\"</span> {\n    <span class=\"tok-kw\">var</span> a: <span class=\"tok-type\">u16</span> = <span class=\"tok-number\">0xabcd</span>; <span class=\"tok-comment\">// runtime-known</span>\n    _ = &a;\n    <span class=\"tok-kw\">const</span> b: <span class=\"tok-type\">u8</span> = <span class=\"tok-builtin\">@intCast</span>(a);\n    _ = b;\n}"}
{"instruction":"Write a Zig function similar to listen from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/WindowsWatcher.zig","output":"pub fn listen(watcher: *WindowsWatcher) !void {\n    var dont_care: struct {\n        bytes_transferred: windows.DWORD = undefined,\n        overlap: ?*windows.OVERLAPPED = undefined,\n    }"}
{"instruction":"Write a Zig function similar to is_cstr from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn is_cstr(comptime S: type) bool {\n    return @typeInfo(StrSlice(S, false)).Pointer.sentinel != null;\n}"}
{"instruction":"Write a Zig struct similar to Field from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Field = struct {\n        ty: InternPool.Index,\n        default_value: InternPool.Index = .none,\n        alignment: u16 = 0,\n        is_comptime: bool = false,\n    }"}
{"instruction":"Write a Zig const similar to off from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const off: usize = @intCast(vm.getInt(1));"}
{"instruction":"Write a Zig function similar to main from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/assign_undefined.zig","output":"pub fn main() void {\n    var x: i32 = undefined;\n    x = 1;\n    print(\"{d}"}
{"instruction":"Write a Zig function similar to parseExtensions from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/parse.zig","output":"fn parseExtensions(\n    allocator: Allocator,\n    root: *xml.Element,\n    api: registry.Api,\n    extensions: *std.ArrayList(registry.Extension),\n) !void {\n    const extensions_elem = root.findChildByTag(\"extensions\") orelse return error.InvalidRegistry;\n    try extensions.ensureUnusedCapacity(allocator, extensions_elem.children.len);\n\n    var it = extensions_elem.findChildrenByTag(\"extension\");\n    while (it.next()) |extension| {\n        if (!requiredByApi(extension, api))\n            continue;\n        // Some extensions (in particular 94) are disabled, so just skip them\n        if (extension.getAttribute(\"supported\")) |supported| {\n            if (mem.eql(u8, supported, \"disabled\")) {\n                continue;\n            }"}
{"instruction":"Write a Zig function similar to propName from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"fn propName(prop: Property) []const u8 {\n            switch (prop) {\n                inline else => |_, tag| return cssName(@tagName(tag)),\n            }"}
{"instruction":"Write a Zig struct similar to Extension from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/registry.zig","output":"pub const Extension = struct {\n    pub const ExtensionType = enum {\n        instance,\n        device,\n        video,\n    }"}
{"instruction":"Write a Zig const similar to result from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig","output":"const result: u16 = @as(u5, @bitCast(currentData));"}
{"instruction":"Write a Zig function similar to reportStderr from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn reportStderr(self: Report, reporter: *Self) !void {\n        @branchHint(.cold);\n\n        if (reporter.collect) {\n            return reporter.reports.append(reporter.allocator, self);\n        }"}
{"instruction":"Write a Zig const similar to buflen from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"const buflen: usize = 128;"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@workGroupSize</span>(<span class=\"tok-kw\">comptime</span> dimension: <span class=\"tok-type\">u32</span>) <span class=\"tok-type\">u32</span>"}
{"instruction":"Write a Zig function similar to whoami from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/modules.zig","output":"pub fn whoami(self: *const Self) py.PyString {\n    py.incref(root, self.name);\n    return self.name;\n}"}
{"instruction":"Write a Zig const similar to signature from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"pub const signature: Signature = .{\n            .params = &.{.Int},\n            .ret = .any,\n        };"}
{"instruction":"Write a Zig function similar to __iadd__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __iadd__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ += other.num_;\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to Readable from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"fn Readable(comptime T: type, comptime StreamT: type) fn (T, xev.ReadBuffer) anyerror!usize {\n    return struct {\n        const Self = T;\n        const ReadResult = xev.ReadError!usize;\n        pub fn read(self: Self, buf: xev.ReadBuffer) anyerror!usize {\n            const ResultT = ReadResult;\n            const Data = struct {\n                result: ResultT = undefined,\n                frame: ?Frame = null,\n\n                fn callback(\n                    userdata: ?*@This(),\n                    l: *xev.Loop,\n                    c: *xev.Completion,\n                    s: StreamT,\n                    b: xev.ReadBuffer,\n                    result: ResultT,\n                ) xev.CallbackAction {\n                    _ = l;\n                    _ = c;\n                    _ = s;\n                    _ = b;\n                    const data = userdata.?;\n                    data.result = result;\n                    if (data.frame != null) libcoro.xresume(data.frame.?);\n                    return .disarm;\n                }"}
{"instruction":"Write a Zig const similar to element from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"const element: Element = elements.get(n.kind);"}
{"instruction":"Write a Zig function similar to print_c_n from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/zpm/search.zig","output":"fn print_c_n(out: anytype, c: u8, n: usize) !void {\n    for (0..n) |_| {\n        try out.writeAll(&.{c}"}
{"instruction":"Write a Zig const similar to result from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const result: InventoryAndSlot = .{\n\t\t\t\t.inv = Sync.getInventory(id, side, user) orelse return error.InventoryNotFound,\n\t\t\t\t.slot = try reader.readInt(u32),\n\t\t\t};"}
{"instruction":"Write a Zig function similar to resolveType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveType(self: DeclWithHandle, analyser: *Analyser) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to get_description from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub fn get_description(id: ID) ?[]const u8 {\n    if (id >= commands.items.len) return null;\n    return (commands.items[id] orelse return null).meta.description;\n}"}
{"instruction":"Write a Zig function similar to appendSlashRedirect from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"fn appendSlashRedirect(\n        arena: std.mem.Allocator,\n        req: *std.http.Server.Request,\n        path_with_query: []const u8,\n    ) !void {\n        // convert `foo/bar?query=1` to `foo/bar/?query=1`\n        const query_start = std.mem.indexOfScalar(u8, path_with_query, '?') orelse path_with_query.len;\n        const location = try std.fmt.allocPrint(\n            arena,\n            \"{s}"}
{"instruction":"Write a Zig struct similar to Builder from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/String.zig","output":"pub const Builder = struct {\n    inner: std.ArrayList(u8),\n\n    pub fn finish(b: Builder) String {\n        return .{\n            .data = b.inner.items,\n            .capacity = b.inner.capacity,\n        }"}
{"instruction":"Write a Zig function similar to readTextureFile from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig","output":"fn readTextureFile(_path: []const u8, ending: []const u8, default: Image) Image {\n\t\tconst path = extendedPath(main.stackAllocator, _path, ending);\n\t\tdefer main.stackAllocator.free(path);\n\t\treturn Image.readFromFile(arenaForWorld, path) catch default;\n\t}"}
{"instruction":"Write a Zig const similar to IRQ_PIT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"pub const IRQ_PIT: u8 = 0x00;"}
{"instruction":"Write a Zig const similar to f35 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f35: u21 = 57398;"}
{"instruction":"Write a Zig function similar to sampleTokens from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"fn sampleTokens(\n    self: GptOss,\n    lm_head_: ?zml.nn.Linear,\n    out_: zml.Tensor,\n    rng: zml.Tensor.Rng,\n    opts: zml.nn.SamplingStrategy,\n) struct { zml.Tensor, zml.Tensor.Rng }"}
{"instruction":"Write a Zig function similar to renderElement from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/renderer.zig","output":"fn renderElement(self: *Renderer, element: *Element) void {\n        // split open/close so we can skip invisibles AND we can also reduce the stack usage per each recursion\n        if (self.openElement(element)) {\n            self.vg.translate(element.node.layout.pos[0], element.node.layout.pos[1]);\n\n            var iter = element.node.childNodes();\n            while (iter.next()) |ch| {\n                self.renderNode(ch);\n            }"}
{"instruction":"Write a Zig const similar to dvui_app from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/App.zig","output":"pub const dvui_app: dvui.App = .{ .initFn = AppInit, ...};"}
{"instruction":"Write a Zig function similar to quoteChar from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"fn quoteChar(attr: Tag) []const u8 {\n        switch (attr) {\n            .calling_convention => unreachable,\n            inline else => |tag| {\n                const fields = @typeInfo(@field(attributes, @tagName(tag))).@\"struct\".fields;\n\n                if (fields.len == 0) unreachable;\n                const Unwrapped = UnwrapOptional(fields[0].type);\n                if (@typeInfo(Unwrapped) != .@\"enum\") unreachable;\n\n                return if (Unwrapped.opts.enum_kind == .identifier) \"'\" else \"\\\"\";\n            }"}
{"instruction":"Write a Zig struct similar to OpenSL from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/opensl.zig","output":"pub const OpenSL = struct {\n    // Global variables\n    var init_sl_counter: usize = 0;\n    var engine_object: c.SLObjectItf = undefined;\n    var engine: c.SLEngineItf = undefined;\n\n    var output_mix: c.SLObjectItf = undefined;\n    var output_mix_itf: c.SLOutputMixItf = undefined;\n\n    pub const OutputStream = struct {\n        config: OutputStreamConfig,\n        player: c.SLObjectItf,\n        play_itf: c.SLPlayItf,\n        buffer_queue_itf: c.SLAndroidSimpleBufferQueueItf,\n        state: c.SLAndroidSimpleBufferQueueState,\n\n        audio_sink: c.SLDataSink,\n        locator_outputmix: c.SLDataLocator_OutputMix,\n\n        audio_source: c.SLDataSource,\n        buffer_queue: c.SLDataLocator_BufferQueue,\n        pcm: c.SLDataFormat_PCM,\n\n        buffer: []i16,\n        buffer_index: usize,\n        mutex: std.Thread.Mutex,\n        allocator: std.mem.Allocator,\n\n        // Must be initialized using OpenSL.getOutputStream\n\n        pub fn stop(output_stream: *OutputStream) void {\n            checkResult(output_stream.play_itf.*.*.SetPlayState.?(output_stream.play_itf, c.SL_PLAYSTATE_STOPPED)) catch |e| {\n                audio_log.err(\"Error stopping stream {s}"}
{"instruction":"Write Zig 0.13.0 code for: Builtin Functions §","input":"Builtin functions are provided by the compiler and are prefixed with @ . The comptime keyword on a parameter means that the parameter must be known at compile time. @addrSpaceCast § Converts a pointer from one address space to another. The new address space is inferred based on the result type. Depending on the current target and address spaces, this cast may be a no-op, a complex operation, or illegal. If the cast is legal, then the resulting pointer points to the same memory location as the po","output":"<span class=\"tok-builtin\">@shuffle</span>(<span class=\"tok-kw\">comptime</span> E: <span class=\"tok-type\">type</span>, a: <span class=\"tok-builtin\">@Vector</span>(a_len, E), b: <span class=\"tok-builtin\">@Vector</span>(b_len, E), <span class=\"tok-kw\">comptime</span> mask: <span class=\"tok-builtin\">@Vector</span>(mask_len, <span class=\"tok-type\">i32</span>)) <span class=\"tok-builtin\">@Vector</span>(mask_len, E)"}
{"instruction":"Write a Zig function similar to complement from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"pub fn complement(self: CommandFlags) CommandFlags {\n    \\\\            var result: CommandFlags = .{}"}
{"instruction":"Write a Zig struct similar to Param from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"const Param = struct {\n        child: *InMemoryCoercionResult,\n        actual: Index, // type\n        wanted: Index, // type\n        index: u64,\n    }"}
{"instruction":"Write a Zig function similar to parseImportmap from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn parseImportmap(self: *ScriptManager, script: *const Script) !void {\n    const content = script.source.content();\n\n    const Imports = struct {\n        imports: std.json.ArrayHashMap([]const u8),\n    }"}
{"instruction":"Write a Zig const similar to right_control from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const right_control: u21 = 57448;"}
{"instruction":"Write a Zig function similar to at from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig","output":"fn at(ast: Ast, idx: u32) ?Node {\n    if (idx == 0) return null;\n    return ast.nodes[idx];\n}"}
{"instruction":"Write a Zig function similar to get from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/multi_array_list.zig","output":"pub fn get(self: Self, index: u32) S {\n            const slices = self.slice();\n            var result: S = undefined;\n            inline for (fields, 0..) |field_info, i| {\n                @field(result, field_info.name) = slices.items(@enumFromInt(i))[index];\n            }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">const</span> number = getNumberOrFail() <span class=\"tok-kw\">catch</span> <span class=\"tok-kw\">unreachable</span>;\n    std.debug.print(<span class=\"tok-str\">\"value: {}\\n\"</span>, .{number});\n}\n\n<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">getNumberOrFail</span>() !<span class=\"tok-type\">i32</span> {\n    <span class=\"tok-kw\">return</span> <span class=\"tok-kw\">error</span>.UnableToReturnNumber;\n}"}
{"instruction":"Write a Zig const similar to end from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"const end: i64 = if (args.len == 1) @intCast(arr.len) else switch (args[1]) {\n                .int => |i| i.value,\n                else => return bad_arg,\n            };"}
{"instruction":"Write a Zig function similar to removeChild from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/node.zig","output":"pub fn removeChild(self: *Node, child: *Node) !void {\n        try self.checkParent(child, self);\n\n        if (child.previous_sibling) |prev| {\n            prev.next_sibling = child.next_sibling;\n            prev.layout.next_sibling = child.layout.next_sibling;\n        }"}
{"instruction":"Write a Zig function similar to dupeZ from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn dupeZ(bytes: []const u8) [:0]u8 {\n    return _b.allocator.dupeZ(u8, bytes) catch unreachable;\n}"}
{"instruction":"Write a Zig function similar to setContext from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setContext(self: webui, element: [:0]const u8, context: *anyopaque) void {\n    c.webui_set_context(self.window_handle, element.ptr, context);\n}"}
{"instruction":"Write a Zig struct similar to Field from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/registry.zig","output":"pub const Field = struct {\n        name: []const u8,\n        value: Value,\n    }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = ud;\n                _ = l;\n                _ = c;\n                _ = r.pwrite catch unreachable;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig const similar to local from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"const local: ?usize = try self.resolveLocal(frame.enclosing.?, name);"}
{"instruction":"Write a Zig function similar to init from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn init(self: *@This(), device: UsbDevice) void {\n        return self.fn_init(self.ptr, device);\n    }"}
{"instruction":"Write a Zig function similar to read_register from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/i2c.zig","output":"pub fn read_register(self: Device, register_address: u8) ReadError!u8 {\n            var buffer: [1]u8 = undefined;\n            try self.read_registers(register_address, &buffer);\n            return buffer[0];\n        }"}
{"instruction":"Write a Zig struct similar to Iterator from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Map.zig","output":"pub const Iterator = struct {\n    keys: [*]*const Value,\n    values: [*]*Value,\n    len: u32,\n    index: u32 = 0,\n\n    pub fn next(it: *Iterator) ?Entry {\n        if (it.index >= it.len) return null;\n        const result = Entry{\n            .key_ptr = &it.keys[it.index],\n            .value_ptr = &it.values[it.index],\n        }"}
{"instruction":"Write a Zig const similar to keyboard from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/hid.zig","output":"pub const keyboard: [1]u8 = \"\\x07\".*;"}
{"instruction":"Write a Zig function similar to warnAt from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn warnAt(self: *Self, error_type: Error, location: Token, end_location: Token, comptime message: []const u8) void {\n    self.warn(\n        error_type,\n        location,\n        end_location,\n        if (!self.collect)\n            message\n        else\n            self.allocator.dupe(u8, message) catch @panic(\"Could not report error\"),\n    );\n}"}
{"instruction":"Write a Zig const similar to publish_exchange from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const publish_exchange: []const u8 = options.publish_exchange orelse \"\";"}
{"instruction":"Write a Zig function similar to parse from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"pub fn parse(self: *Self, source: []const u8, file_name: ?[]const u8, name: []const u8) !?Ast {\n    if (self.scanner != null) {\n        self.scanner = null;\n    }"}
{"instruction":"Write a Zig function similar to listSet from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn listSet(vm: *ZVM, list: Value, idx: usize, val: Value) void {\n    c.clListSet(@ptrCast(vm), list, idx, val);\n}"}
{"instruction":"Write a Zig function similar to generateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/hanging.zig","output":"pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, neighbor: ?Neighbor, currentData: *Block, neighborBlock: Block, blockPlacing: bool) bool {\n\tconst sameBlock = neighborBlock.typ == currentData.typ;\n\tif(blockPlacing) {\n\t\tif(neighbor != Neighbor.dirUp) return false;\n\t\tif(!sameBlock) {\n\t\t\tconst neighborModel = neighborBlock.mode().model(neighborBlock).model();\n\t\t\tconst support = !neighborBlock.replacable() and neighborModel.neighborFacingQuads[Neighbor.dirDown.toInt()].len != 0;\n\t\t\tif(!support) return false;\n\t\t}"}
{"instruction":"Write a Zig function similar to shrinkCapacity from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn shrinkCapacity(self: *Self, allocator: Allocator, new_capacity: usize) void {\n            if (new_capacity <= prealloc_item_count) {\n                const len = @as(ShelfIndex, @intCast(self.dynamic_segments.len));\n                self.freeShelves(allocator, len, 0);\n                allocator.free(self.dynamic_segments);\n                self.dynamic_segments = &[_][*]T{}"}
{"instruction":"Write a Zig function similar to deinit from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn deinit(scope: *DocumentScope, allocator: std.mem.Allocator) void {\n    scope.scopes.deinit(allocator);\n    scope.declarations.deinit(allocator);\n    scope.declaration_lookup_map.deinit(allocator);\n    scope.extra.deinit(allocator);\n\n    scope.global_enum_set.deinit(allocator);\n    scope.global_error_set.deinit(allocator);\n}"}
{"instruction":"Write a Zig struct similar to RunResult from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"pub const RunResult = struct {\n    term: Term,\n    stdout: []u8,\n    stderr: []u8,\n}"}
{"instruction":"Write a Zig function similar to sliceAt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn sliceAt(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n    const idx = vm.getInt(1);\n\n    if (idx < 0 or idx >= str.len) {\n        return error.OutOfBounds;\n    }"}
{"instruction":"Write a Zig function similar to init from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"pub fn init(gpa: Allocator, T: type, items: []const T) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to Options from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub const Options = struct {\n    /// can files be imported\n    import_files: bool = false,\n\n    /// run vm in repl mode\n    repl: bool = false,\n\n    /// maximum size of imported files\n    max_import_size: u32 = 5 * 1024 * 1024,\n\n    /// maximum amount of pages gc may allocate.\n    /// 1 page == 1 MiB.\n    /// default 2 GiB.\n    page_limit: u32 = 2048,\n}"}
{"instruction":"Write a Zig struct similar to DescriptorsConfigTemplates from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/templates.zig","output":"pub const DescriptorsConfigTemplates = struct {\n    pub const config_descriptor_len = 9;\n\n    pub fn config_descriptor(config_num: u8, interfaces_num: u8, string_index: u8, total_len: u16, attributes: u8, max_power_ma: u9) [9]u8 {\n        const desc1 = types.ConfigurationDescriptor{ .total_length = total_len, .num_interfaces = interfaces_num, .configuration_value = config_num, .configuration_s = string_index, .attributes = 0b01000000 | attributes, .max_power = max_power_ma / 2 }"}
{"instruction":"Write a Zig function similar to extractBitflagName from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"fn extractBitflagName(self: Self, name: []const u8) !?BitflagName {\n        const tag = self.id_renderer.getAuthorTag(name);\n        const tagless_name = if (tag) |tag_name| name[0 .. name.len - tag_name.len] else name;\n\n        // Strip out the \"version\" number of a bitflag, like VkAccessFlagBits2KHR.\n        const base_name = std.mem.trimRight(u8, tagless_name, \"0123456789\");\n\n        const maybe_flag_bits_index = mem.lastIndexOf(u8, base_name, \"FlagBits\");\n        if (maybe_flag_bits_index == null) {\n            return null;\n        }"}
{"instruction":"Write a Zig function similar to isRegIndexLocked from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/register_manager.zig","output":"fn isRegIndexLocked(self: Self, tracked_index: TrackedIndex) bool {\n            return self.locked_registers.isSet(tracked_index);\n        }"}
{"instruction":"Write a Zig function similar to clone from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn clone(self: Assets, allocator: NeverFailingAllocator) Assets {\n\t\treturn .{\n\t\t\t.blocks = self.blocks.clone(allocator.allocator) catch unreachable,\n\t\t\t.blockMigrations = self.blockMigrations.clone(allocator.allocator) catch unreachable,\n\t\t\t.items = self.items.clone(allocator.allocator) catch unreachable,\n\t\t\t.itemMigrations = self.itemMigrations.clone(allocator.allocator) catch unreachable,\n\t\t\t.tools = self.tools.clone(allocator.allocator) catch unreachable,\n\t\t\t.biomes = self.biomes.clone(allocator.allocator) catch unreachable,\n\t\t\t.biomeMigrations = self.biomeMigrations.clone(allocator.allocator) catch unreachable,\n\t\t\t.recipes = self.recipes.clone(allocator.allocator) catch unreachable,\n\t\t\t.models = self.models.clone(allocator.allocator) catch unreachable,\n\t\t\t.structureBuildingBlocks = self.structureBuildingBlocks.clone(allocator.allocator) catch unreachable,\n\t\t\t.blueprints = self.blueprints.clone(allocator.allocator) catch unreachable,\n\t\t\t.particles = self.particles.clone(allocator.allocator) catch unreachable,\n\t\t}"}
{"instruction":"Write a Zig function similar to pop from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"fn pop(e: *ErrHandlers) Handler {\n        const handler = e.get().?;\n        e.short.len -= 1;\n        return handler;\n    }"}
{"instruction":"Write a Zig function similar to getVarDeclNode from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn getVarDeclNode(self: AssignDestructure, tree: Ast) Ast.Node.Index {\n            const extra_index = tree.nodeData(self.node).extra_and_node[0];\n            return @enumFromInt(tree.extra_data[@intFromEnum(extra_index) + 1 ..][self.index]);\n        }"}
{"instruction":"Write a Zig function similar to registerIrq from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/irq.zig","output":"pub fn registerIrq(irq_num: u8, handler: IrqHandler) IrqError!void {\n    // Check whether the IRQ index is valid.\n    if (isValidIrq(irq_num)) {\n        // Check if a handler has already been registered.\n        if (irq_handlers[irq_num]) |_| {\n            return IrqError.IrqExists;\n        }"}
{"instruction":"Write Zig 0.13.0 code for: Undefined Behavior §","input":"Zig has many instances of undefined behavior. If undefined behavior is detected at compile-time, Zig emits a compile error and refuses to continue. Most undefined behavior that cannot be detected at compile-time can be detected at runtime. In these cases, Zig has safety checks. Safety checks can be disabled on a per-block basis with @setRuntimeSafety . The ReleaseFast and ReleaseSmall build modes disable all safety checks (except where overridden by @setRuntimeSafety ) in order to facilitate opt","output":"<span class=\"tok-kw\">const</span> std = <span class=\"tok-builtin\">@import</span>(<span class=\"tok-str\">\"std\"</span>);\n\n<span class=\"tok-kw\">const</span> Foo = <span class=\"tok-kw\">enum</span> {\n    a,\n    b,\n    c,\n};\n\n<span class=\"tok-kw\">pub</span> <span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">main</span>() <span class=\"tok-type\">void</span> {\n    <span class=\"tok-kw\">var</span> a: <span class=\"tok-type\">u2</span> = <span class=\"tok-number\">3</span>;\n    _ = &a;\n    <span class=\"tok-kw\">const</span> b: Foo = <span class=\"tok-builtin\">@enumFromInt</span>(a);\n    std.debug.print(<span class=\"tok-str\">\"value: {s}\\n\"</span>, .{<span class=\"tok-builtin\">@tagName</span>(b)});\n}"}
{"instruction":"Write a Zig function similar to isStructType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn isStructType(self: Type) bool {\n        return self.data == .tuple or self.isContainerKind(.keyword_struct) or self.isRoot();\n    }"}
{"instruction":"Write a Zig const similar to heightf from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/2d_camera_platformer.zig","output":"const heightf: f32 = @floatFromInt(height);"}
{"instruction":"Write Zig 0.13.0 code for: Memory §","input":"The Zig language performs no memory management on behalf of the programmer. This is why Zig has no runtime, and why Zig code works seamlessly in so many environments, including real-time software, operating system kernels, embedded devices, and low latency servers. As a consequence, Zig programmers must always be able to answer the question: Where are the bytes? Like Zig, the C programming language has manual memory management. However, unlike Zig, C has a default allocator - malloc , realloc ,","output":"<span class=\"tok-kw\">fn</span> <span class=\"tok-fn\">foo</span>(s: []<span class=\"tok-kw\">const</span> <span class=\"tok-type\">u8</span>) <span class=\"tok-type\">void</span> {\n    _ = s;\n}\n\n<span class=\"tok-kw\">test</span> <span class=\"tok-str\">\"string literal to constant slice\"</span> {\n    foo(<span class=\"tok-str\">\"hello\"</span>);\n}"}
{"instruction":"Write a Zig function similar to init from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn init(value: [16]u8, scope_id: u32) Self {\n            return Self{ .value = value, .scope_id = scope_id }"}
{"instruction":"Write a Zig function similar to windowsCreateProcessSupportsExtension from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn windowsCreateProcessSupportsExtension(ext: []const u16) ?WindowsExtension {\n    if (ext.len != 4) return null;\n    const State = enum {\n        start,\n        dot,\n        b,\n        ba,\n        c,\n        cm,\n        co,\n        e,\n        ex,\n    }"}
{"instruction":"Write a Zig function similar to windowSize from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn windowSize(self: Backend) dvui.Size.Natural {\n    return self.impl.windowSize();\n}"}
{"instruction":"Write a Zig function similar to xsuspendSafe from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn xsuspendSafe() Error!void {\n    if (thread_state.current_coro == null) {\n        return Error.SuspendFromMain;\n    }"}
{"instruction":"Write a Zig const similar to null_terminated from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/event_handling/main.zig","output":"const null_terminated: [:0]const u8 = response[0..msg.len :0];"}
{"instruction":"Write a Zig struct similar to UnknownValue from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const UnknownValue = struct {\n        /// asserts that this is not .type_type because that is a the same as .unknown_type\n        ty: Index,\n    }"}
{"instruction":"Write a Zig const similar to func_decl from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const func_decl: Declaration = .{ .ast_node = pay.func };"}
{"instruction":"Write a Zig function similar to __LDBL_REDIR1 from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {\n    _ = &name;\n    _ = &proto;\n    _ = &alias;\n    return name ++ proto;\n}"}
{"instruction":"Write a Zig function similar to idx from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"fn idx(a: [32]u8, shift: u6) usize {\n            return @as(usize, @intCast(mem.readIntBig(u64, a[0..8]) >> shift));\n        }"}
{"instruction":"Write a Zig function similar to format from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn format(value: Self, writer: *std.Io.Writer) !void {\n            try writer.print(\"{d}"}
{"instruction":"Write a Zig struct similar to Doctype from kristoff-it/superhtml","input":"Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig","output":"pub const Doctype = struct {\n        span: Span,\n        name: ?Span,\n        extra: Span = .{ .start = 0, .end = 0 }"}
{"instruction":"Write a Zig function similar to execute from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/zpm/search.zig","output":"pub fn execute(self_name: []const u8, args: [][:0]u8) !void {\n    _ = self_name;\n    _ = args;\n\n    const out = std.io.getStdOut().writer();\n\n    const url = try std.mem.join(gpa, \"/\", &.{ zpm.server_root, \"packages\" }"}
{"instruction":"Write a Zig function similar to deinit from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn deinit(self: *Self, alloc: Allocator) void {\n        if (self.subordinate) |*sub| {\n            sub.clearAndFreePauseData();\n        }"}
{"instruction":"Write a Zig function similar to __feof_unlocked_body from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __feof_unlocked_body(_fp: anytype) @TypeOf((_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0)) {\n    _ = &_fp;\n    return (_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0);\n}"}
{"instruction":"Write a Zig function similar to getRandomValuef32 from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/module_playing.zig","output":"fn getRandomValuef32(min: i32, max: i32) f32 {\n    return @as(f32, @floatFromInt(rl.getRandomValue(min, max)));\n}"}
{"instruction":"Write a Zig function similar to isNegative from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"fn isNegative(val: *Value) bool {\n    switch (val.*) {\n        .int => |v| return v < 0,\n        .num => |v| return v < 0,\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig function similar to resolveOptionalIPValue from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn resolveOptionalIPValue(\n    analyser: *Analyser,\n    optional_node: Ast.Node.OptionalIndex,\n    handle: *DocumentStore.Handle,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to interfaceNavigateClient from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn interfaceNavigateClient(self: webui, event_number: usize, url: [:0]const u8) void {\n    c.webui_interface_navigate_client(self.window_handle, event_number, url.ptr);\n}"}
{"instruction":"Write a Zig function similar to fatal from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub fn fatal(f: *Frame, vm: *Vm, msg: []const u8) Error {\n        @branchHint(.cold);\n        return f.fatalExtra(vm, .{ .data = msg }"}
{"instruction":"Write a Zig function similar to syscall_result from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn syscall_result(c: *Completion, r: i32) Result {\n        const errno: posix.E = if (r >= 0) .SUCCESS else @enumFromInt(-r);\n        return switch (c.op) {\n            .noop => unreachable,\n\n            .accept => .{\n                .accept = switch (errno) {\n                    .SUCCESS => r,\n                    .CANCELED => error.Canceled,\n                    else => |err| posix.unexpectedErrno(err),\n                }"}
{"instruction":"Write a Zig function similar to enqueueRequest from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"pub fn enqueueRequest(self: *Self, req: proto.Request) void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            trace.message(@tagName(req));\n\n            self.requests.put(req) catch |err| {\n                log.errf(\"unable to enqueue command {s}"}
{"instruction":"Write a Zig function similar to less from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn less(_: void, a: *const Timer, b: *const Timer) bool {\n        return a.ns() < b.ns();\n    }"}
{"instruction":"Write a Zig const similar to signature from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"pub const signature: Signature = .{\n            .params = &.{},\n            .ret = .{ .Many = .any },\n        };"}
{"instruction":"Write a Zig function similar to setup from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn setup(self: *Self, kqueue_fd: posix.fd_t) !void {\n        const events = [_]Kevent{.{\n            .ident = @as(usize, @intCast(self.mach_port.port)),\n            .filter = std.c.EVFILT.MACHPORT,\n            .flags = std.c.EV.ADD | std.c.EV.ENABLE,\n            .fflags = darwin.MACH_RCV_MSG,\n            .data = 0,\n            .udata = 0,\n            .ext = .{\n                @intFromPtr(&self.mach_port_buffer),\n                self.mach_port_buffer.len,\n            }"}
{"instruction":"Write a Zig const similar to my_bool from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const my_bool: bool = webui_interface_get_bool_at(my_window, e.event_number, 0);"}
{"instruction":"Write a Zig function similar to onNativeWindowResized from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/android-support.zig","output":"fn onNativeWindowResized(activity: *android.ANativeActivity, window: *android.ANativeWindow) callconv(.C) void {\n            invoke(activity, \"onNativeWindowResized\", .{window}"}
{"instruction":"Write a Zig function similar to scanServersThread from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"fn scanServersThread(allocator: std.mem.Allocator, server_list: *ServerList) !void {\n    std.debug.print(\"Scanning for Servers to connect to ....\\n\", .{}"}
{"instruction":"Write a Zig function similar to get_arguments from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"pub fn get_arguments(id: ID) ?[]const ArgumentType {\n    if (id >= commands.items.len) return null;\n    return (commands.items[id] orelse return null).meta.arguments;\n}"}
{"instruction":"Write a Zig const similar to IRQ_KEYBOARD from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"pub const IRQ_KEYBOARD: u8 = 0x01;"}
{"instruction":"Write a Zig const similar to c from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"const c: *Completion = @ptrFromInt(@as(usize, @intCast(ev.udata)));"}
{"instruction":"Write a Zig function similar to collectLspDiagnosticsForDocument from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DiagnosticsCollection.zig","output":"fn collectLspDiagnosticsForDocument(\n    collection: *DiagnosticsCollection,\n    document_uri: []const u8,\n    offset_encoding: offsets.Encoding,\n    arena: std.mem.Allocator,\n    diagnostics: *std.ArrayList(lsp.types.Diagnostic),\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to merge from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/render.zig","output":"pub fn merge(lhs: FlagsType, rhs: FlagsType) FlagsType {\n    \\\\            return fromInt(toInt(lhs) | toInt(rhs));\n    \\\\        }"}
{"instruction":"Write a Zig function similar to run from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/commands/bundle.zig","output":"pub fn run(\n    allocator: std.mem.Allocator,\n    options: Options,\n    writer: anytype,\n    T: type,\n    main_options: T,\n) !void {\n    if (builtin.os.tag == .windows) {\n        std.debug.print(\"Bundling on Windows is currently not supported.\\n\", .{}"}
{"instruction":"Write a Zig function similar to init from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: src/vulkan/generator.zig","output":"fn init(allocator: Allocator, spec: *xml.Element, maybe_video_spec: ?*xml.Element, api: reg.Api) !Generator {\n        const result = try parseXml(allocator, spec, maybe_video_spec, api);\n\n        const tags = try allocator.alloc([]const u8, result.registry.tags.len);\n        for (tags, result.registry.tags) |*tag, registry_tag| tag.* = registry_tag.name;\n\n        return Generator{\n            .arena = result.arena,\n            .registry = result.registry,\n            .id_renderer = IdRenderer.init(allocator, tags),\n            .have_video = maybe_video_spec != null,\n        }"}
{"instruction":"Write a Zig function similar to pattern from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn pattern(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n    const source_slice = self.ast.tokens.items(.literal)[start_location].String;\n    // Replace escaped pattern delimiter with delimiter\n    const source = try std.mem.replaceOwned(\n        u8,\n        self.gc.allocator,\n        source_slice,\n        \"\\\\\\\"\",\n        \"\\\"\",\n    );\n\n    var err_code: c_int = undefined;\n    var err_offset: usize = undefined;\n    const reg = if (!is_wasm)\n        pcre.compile(\n            source.ptr,\n            source.len,\n            // TODO: provide options to user\n            0,\n            &err_code,\n            &err_offset,\n            null,\n        )\n    else {}"}
{"instruction":"Write a Zig function similar to get_emitted_bin from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub fn get_emitted_bin(fw: *Firmware, format: ?BinaryFormat) LazyPath {\n                const resolved_format = format orelse fw.target.preferred_binary_format orelse .elf;\n\n                const result = fw.emitted_files.getOrPut(resolved_format) catch @panic(\"out of memory\");\n                if (!result.found_existing) {\n                    const elf_file = fw.get_emitted_elf();\n\n                    const basename = fw.mb.builder.fmt(\"{s}"}
{"instruction":"Write a Zig const similar to old from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"const old: BranchData = .init(rotationTable[a - 1][i]);"}
{"instruction":"Write a Zig function similar to runtimeRed from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn runtimeRed(allocator: std.mem.Allocator, message: []const u8) ![]const u8 {\n    return try runtimeWrap(allocator, codes.red, message);\n}"}
{"instruction":"Write a Zig function similar to result from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/git.zig","output":"fn result(context: usize, parent: tp.pid_ref, output: []const u8) void {\n            var it = std.mem.splitScalar(u8, output, '\\n');\n            while (it.next()) |value| if (value.len > 0) {\n                parent.send(.{ module_name, context, fn_name, value }"}
{"instruction":"Write a Zig struct similar to SortContext from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/builtin/list.zig","output":"const SortContext = struct {\n    sort_closure: v.Value,\n    ctx: *o.NativeCtx,\n}"}
{"instruction":"Write a Zig function similar to doAThing from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/checking_null_in_zig.zig","output":"fn doAThing(optional_foo: ?*Foo) void {\n    // do some stuff\n\n    if (optional_foo) |foo| {\n        doSomethingWithFoo(foo);\n    }"}
{"instruction":"Write a Zig function similar to createFuncSymType from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"fn createFuncSymType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());\n    const type_id = c.sema.pushType() catch @panic(\"error\");\n    const sym = c.createFuncSymType(@ptrCast(chunk_sym), \"funcsym\", type_id, sig, C.fromNode(decl)) catch @panic(\"error\");\n    return @as(*cy.Sym, @ptrCast(sym)).toC();\n}"}
{"instruction":"Write a Zig function similar to xresume from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/coro.zig","output":"pub fn xresume(frame: anytype) void {\n    const f = frame.frame();\n    thread_state.switchIn(f);\n}"}
{"instruction":"Write a Zig function similar to init from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn init(alloc: Allocator) !Self {\n        return Self{\n            .strings = try strings.Cache.init(alloc),\n        }"}
{"instruction":"Write a Zig function similar to is from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn is(self: *Self, _: bool, left: Ast.Node.Index) Error!Ast.Node.Index {\n    return self.isAs(left, true);\n}"}
{"instruction":"Write a Zig function similar to val from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Vm.zig","output":"pub fn val(f: *Frame, ref: Ref) *Value {\n        return f.stack.items[@intFromEnum(ref)];\n    }"}
{"instruction":"Write a Zig function similar to switch_second_window from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/serve_a_folder/main.zig","output":"fn switch_second_window(e: *webui.Event) void {\n    // This function gets called every\n    // time the user clicks on \"SwitchToSecondPage\"\n\n    // Switch to `/second.html` in the same opened window.\n    e.getWindow().show(\"second.html\") catch return;\n}"}
{"instruction":"Write a Zig function similar to deinit from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/Tree.zig","output":"pub fn deinit(tree: *Tree, gpa: Allocator) void {\n    tree.tokens.deinit(gpa);\n    tree.nodes.deinit(gpa);\n    gpa.free(tree.extra);\n    gpa.free(tree.root_nodes);\n    tree.* = undefined;\n}"}
{"instruction":"Write a Zig const similar to idle_interval_ns from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const idle_interval_ns: u63 = 1 * std.time.ns_per_s;"}
{"instruction":"Write a Zig function similar to function_name from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/code.zig","output":"pub fn function_name() !py.PyString {\n    return py.PyFrame(root).get().?.code().name();\n}"}
{"instruction":"Write a Zig const similar to self from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/Sdk.zig","output":"const self: *Self = @fieldParentPtr(\"step\", step);"}
{"instruction":"Write a Zig const similar to IRQ_CGA_VERTICAL_RETRACE from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"pub const IRQ_CGA_VERTICAL_RETRACE: u8 = 0x09;"}
{"instruction":"Write a Zig function similar to registerIsr from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub fn registerIsr(isr_num: u16, handler: IsrHandler) IsrError!void {\n    // Check if a valid ISR index\n    if (isValidIsr(isr_num)) {\n        if (isr_num == syscalls.INTERRUPT) {\n            // Syscall handler\n            if (syscall_handler) |_| {\n                // One already registered\n                return IsrError.IsrExists;\n            }"}
{"instruction":"Write a Zig function similar to asyncScriptIsDone from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn asyncScriptIsDone(self: *ScriptManager) void {\n    if (self.isDone()) {\n        self.page.documentIsComplete();\n    }"}
{"instruction":"Write a Zig function similar to removeChildByName from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"fn removeChildByName(\n    self: *LinuxWatcher,\n    parent: std.posix.fd_t,\n    name: []const u8,\n) ?std.posix.fd_t {\n    if (self.children_fds.getEntry(parent)) |entry| {\n        for (0.., entry.value_ptr.items) |i, fd| {\n            if (self.watch_fds.get(fd)) |data| {\n                if (std.mem.eql(u8, data.name, name)) {\n                    return entry.value_ptr.swapRemove(i);\n                }"}
{"instruction":"Write a Zig function similar to init from Snektron/vulkan-zig","input":"Repository: Snektron/vulkan-zig (720 ⭐)\nFile: examples/graphics_context.zig","output":"pub fn init(allocator: Allocator, app_name: [*:0]const u8, window: *c.GLFWwindow) !GraphicsContext {\n        var self: GraphicsContext = undefined;\n        self.allocator = allocator;\n        self.vkb = BaseWrapper.load(c.glfwGetInstanceProcAddress);\n\n        if (try checkLayerSupport(&self.vkb, self.allocator) == false) {\n            return error.MissingLayer;\n        }"}
{"instruction":"Write a Zig struct similar to Cx from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/element.zig","output":"const Cx = struct {\n            pub fn parentElement(el: *Element) ?*Element {\n                const parent = el.node.parent_node orelse return null;\n                return parent.element();\n            }"}
{"instruction":"Write a Zig struct similar to Slice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Slice = struct {\n        start: u32,\n        len: u32,\n\n        pub const empty: Slice = .{\n            .start = std.math.maxInt(u32),\n            .len = 0,\n        }"}
{"instruction":"Write a Zig function similar to sendto from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn sendto(\n        /// The file descriptor of the sending socket.\n        sockfd: std.posix.socket_t,\n        /// Message to send.\n        buf: []const u8,\n        flags: u32,\n        dest_addr: ?*const std.posix.sockaddr,\n        addrlen: std.posix.socklen_t,\n    ) std.posix.SendToError!usize {\n        if (!is_darwin) {\n            return std.posix.sendto(sockfd, buf, flags, dest_addr, addrlen);\n        }"}
{"instruction":"Write a Zig struct similar to FormatOptions from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub const FormatOptions = struct {\n        referenced: ?*ReferencedType.Set = null,\n        truncate_container_decls: bool,\n    }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/gpt_oss/GptOss.zig","output":"pub fn forward(\n    self: GptOss,\n    tokens_: zml.Tensor,\n    mode: Mode,\n    kv_cache: KvCache,\n    rng: zml.Tensor.Rng,\n) struct { zml.Tensor, KvCache, zml.Tensor.Rng }"}
{"instruction":"Write a Zig function similar to list from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn list(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    var items = std.ArrayList(Ast.Node.Index).empty;\n    var explicit_item_type: ?Ast.Node.Index = null;\n    var item_type: ?*obj.ObjTypeDef = null;\n\n    // A list expression can specify its type `[<int>, ...]`\n    if (try self.match(.Less)) {\n        explicit_item_type = try self.parseTypeDef(null, true);\n        item_type = self.ast.nodes.items(.type_def)[explicit_item_type.?];\n\n        try self.consume(.Greater, \"Expected `>` after list type.\");\n    }"}
{"instruction":"Write a Zig function similar to main from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: example/help.zig","output":"pub fn main() !void {\n    var gpa = std.heap.DebugAllocator(.{}"}
{"instruction":"Write a Zig function similar to sendNotFound from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"fn sendNotFound(\n        arena: Allocator,\n        req: *std.http.Server.Request,\n        /// Set to true when the asset exists but it was not referenced anywhere\n        /// and thus would not be installed.\n        not_installed: bool,\n    ) !void {\n        const msg = switch (not_installed) {\n            true => \"This path does exist but it was never referenced in the build!\",\n            false => \"This path does not exist!\",\n        }"}
{"instruction":"Write a Zig function similar to isEnumLiteral from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn isEnumLiteral(self: Type) bool {\n        switch (self.data) {\n            .ip_index => |payload| return payload.type == .enum_literal_type,\n            else => return false,\n        }"}
{"instruction":"Write a Zig function similar to runeAt from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn runeAt(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const idx = vm.getInt(1);\n    if (idx < 0 or idx >= str.len) {\n        return error.OutOfBounds;\n    }"}
{"instruction":"Write a Zig function similar to nodeParent from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub fn nodeParent(wd_in: *dvui.WidgetData) *Node {\n    var iter = wd_in.parent.data().iterator();\n    while (iter.next()) |wd| {\n        if (wd.accesskit_node()) |ak_node| {\n            if (debug_node_tree)\n                std.debug.print(\"parent node is {x}"}
{"instruction":"Write a Zig const similar to r from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"const r: f32 = @as(f32, @floatFromInt(color.r)) / 255.0;"}
{"instruction":"Write a Zig function similar to dropWatch from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve/watcher/LinuxWatcher.zig","output":"fn dropWatch(\n    watcher: *LinuxWatcher,\n    fd: std.posix.fd_t,\n) void {\n    const gpa = watcher.gpa;\n    if (watcher.watch_fds.fetchRemove(fd)) |entry| {\n        gpa.free(entry.value.dir_path);\n        gpa.free(entry.value.name);\n    }"}
{"instruction":"Write a Zig function similar to worse_case from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn worse_case(comptime T: type) T {\n        var value: T = undefined;\n        for (std.meta.fields(T)) |field| {\n            @field(value, field.name) = switch (@typeInfo(field.type)) {\n                .int => std.math.maxInt(field.type),\n                .@\"enum\" => max: {\n                    var name: []const u8 = \"\";\n                    for (std.enums.values(tb.ChangeEventType)) |tag| {\n                        if (@tagName(tag).len > name.len) {\n                            name = @tagName(tag);\n                        }"}
{"instruction":"Write a Zig function similar to generateUnary from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateUnary(self: *Self, node: Ast.Node.Index, breaks: ?*Breaks) Error!?*obj.ObjFunction {\n    const components = self.ast.nodes.items(.components)[node].Unary;\n    const location = self.ast.nodes.items(.location)[node];\n    const end_locations = self.ast.nodes.items(.end_location);\n    const expression_location = self.ast.nodes.items(.location)[components.expression];\n    const expression_type_def = self.ast.nodes.items(.type_def)[components.expression].?;\n\n    if (expression_type_def.def_type == .Placeholder) {\n        self.reporter.reportPlaceholder(self.ast, expression_type_def.resolved_type.?.Placeholder);\n\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to lockOneShotIndent from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"pub fn lockOneShotIndent(self: *Self) usize {\n            const locked_count = self.indent_one_shot_count;\n            self.indent_one_shot_count = 0;\n            return locked_count;\n        }"}
{"instruction":"Write a Zig function similar to getModule from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: build.zig","output":"fn getModule(b: *std.Build, target: std.Build.ResolvedTarget, optimize: std.builtin.OptimizeMode) *std.Build.Module {\n        const raylib = this.getModule(b, target, optimize);\n        return b.addModule(\"raygui\", .{\n            .root_source_file = b.path(\"lib/raygui.zig\"),\n            .imports = &.{.{ .name = \"raylib-zig\", .module = raylib }"}
{"instruction":"Write a Zig function similar to CmdDef from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/command.zig","output":"fn CmdDef(comptime T: type) type {\n    return struct {\n        const Fn = fn (T, Context) anyerror!void;\n        name: [:0]const u8,\n        f: *const Fn,\n        meta: Metadata,\n    }"}
{"instruction":"Write a Zig function similar to initSlice from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub fn initSlice(slice: []const Attribute) Iterator {\n        return .{ .source = null, .slice = slice, .index = 0 }"}
{"instruction":"Write a Zig struct similar to FormatContext from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/string_pool.zig","output":"const FormatContext = struct {\n            string: String,\n            pool: *Pool,\n        }"}
{"instruction":"Write a Zig function similar to findMaskPositions from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/main.zig","output":"fn findMaskPositions(allocator: std.mem.Allocator, tokens: []const u32, mask_token: u32) ![]usize {\n    var mask_positions: std.ArrayList(usize) = .empty;\n\n    for (tokens, 0..) |token, i| {\n        if (token == mask_token) {\n            try mask_positions.append(allocator, i);\n        }"}
{"instruction":"Write a Zig function similar to debugMessageCallback from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/egl/main.zig","output":"pub fn debugMessageCallback(\n    source: c.GLenum,\n    logtype: c.GLenum,\n    id: c.GLuint,\n    severity: c.GLenum,\n    length: c.GLsizei,\n    message_c: ?[*]const c.GLchar,\n    user_param: ?*const anyopaque,\n) callconv(.C) void {\n    _ = user_param;\n    const message = message: {\n        if (message_c) |message_ptr| {\n            break :message if (length > 0) message_ptr[0..@as(usize, @intCast(length))] else \"\";\n        }"}
{"instruction":"Write a Zig function similar to shutdownCallback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/bench/ping-pongs.zig","output":"fn shutdownCallback(\n        self_: ?*Server,\n        l: *xev.Loop,\n        c: *xev.Completion,\n        s: xev.TCP,\n        r: xev.ShutdownError!void,\n    ) xev.CallbackAction {\n        _ = r catch {}"}
{"instruction":"Write a Zig function similar to handleConnection from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/serve.zig","output":"fn handleConnection(\n        s: *Server,\n        conn: std.net.Server.Connection,\n    ) void {\n        defer conn.stream.close();\n\n        var bufin: [4096 * 4]u8 = undefined;\n        var in = conn.stream.reader(&bufin);\n        var bufout: [4096]u8 = undefined;\n        var out = conn.stream.writer(&bufout);\n\n        var arena_state = std.heap.ArenaAllocator.init(s.gpa);\n        const arena = arena_state.allocator();\n\n        var http_server = std.http.Server.init(in.interface(), &out.interface);\n\n        while (true) {\n            var request = http_server.receiveHead() catch |err| {\n                if (err != error.HttpConnectionClosing) {\n                    log.debug(\"connection error: {s}"}
{"instruction":"Write a Zig function similar to cssText from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"pub fn cssText(self: *Self, allocator: std.mem.Allocator) ![]const u8 {\n            return std.fmt.allocPrint(allocator, \"{}"}
{"instruction":"Write a Zig function similar to isPtrLikeOptional from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn isPtrLikeOptional(ip: *InternPool, ty: Index) bool {\n    return switch (ip.indexToKey(ty)) {\n        .optional_type => |optional_info| switch (ip.indexToKey(optional_info.payload_type)) {\n            .pointer_type => |pointer_info| switch (pointer_info.flags.size) {\n                .slice, .c => false,\n                .many, .one => !pointer_info.flags.is_allowzero,\n            }"}
{"instruction":"Write a Zig function similar to parse from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/init.zig","output":"fn parse(args: []const []const u8) Command {\n        var multilingual: ?bool = null;\n        for (args) |a| {\n            if (std.mem.eql(u8, a, \"--multilingual\")) {\n                multilingual = true;\n            }"}
{"instruction":"Write a Zig struct similar to NumberOrPercentage from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/values/percentage.zig","output":"pub const NumberOrPercentage = struct {\n    value: f32,\n\n    pub fn format(self: NumberOrPercentage, comptime _: []const u8, _: std.fmt.FormatOptions, writer: anytype) !void {\n        return writer.print(\"{d}"}
{"instruction":"Write a Zig function similar to create from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn create(vm: *cy.VM, r_uri: []const u8) C.Module {\n    const aot = cy.isAot(vm.compiler.config.backend);\n    const src = if (aot) C.toStr(Src) else C.toStr(VmSrc);\n    const mod = C.createModule(@ptrCast(vm), C.toStr(r_uri), src);\n\n    var config = C.ModuleConfig{\n        .types = if (aot) C.toSlice(C.HostTypeEntry, &types) else C.toSlice(C.HostTypeEntry, &vm_types),\n        .funcs = C.toSlice(C.HostFuncEntry, &funcs),\n        .onLoad = onLoad,\n    }"}
{"instruction":"Write a Zig const similar to ERROR_MORE_DATA from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build/auto-detect.zig","output":"const ERROR_MORE_DATA: LSTATUS = 234;"}
{"instruction":"Write a Zig const similar to head_outputs from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"const head_outputs: Tensor = zml.call(self.head, .forward, .{outputs});"}
{"instruction":"Write a Zig function similar to getUnion from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn getUnion(ip: *InternPool, index: Union.Index) *const Union {\n    ip.lock.lockShared();\n    defer ip.lock.unlockShared();\n    return ip.unions.at(@intFromEnum(index));\n}"}
{"instruction":"Write a Zig const similar to cursor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"const cursor: *Cursor = @fieldParentPtr(\"touch_cancel\", listener);"}
{"instruction":"Write a Zig const similar to result from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Asset.zig","output":"const result: []u8 = try gpa.dupe(u8, \"sha384-\" ++ hashed_encoded_data);"}
{"instruction":"Write a Zig function similar to nameToken from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn nameToken(decl: Declaration, tree: Ast) Ast.TokenIndex {\n        return switch (decl) {\n            .ast_node => |node| {\n                var buffer: [1]Ast.Node.Index = undefined;\n                const token_index = switch (tree.nodeTag(node)) {\n                    .local_var_decl,\n                    .global_var_decl,\n                    .simple_var_decl,\n                    .aligned_var_decl,\n                    => tree.nodeMainToken(node) + 1,\n                    .fn_proto,\n                    .fn_proto_multi,\n                    .fn_proto_one,\n                    .fn_proto_simple,\n                    .fn_decl,\n                    => tree.fullFnProto(&buffer, node).?.name_token.?,\n\n                    .container_field,\n                    .container_field_init,\n                    .container_field_align,\n                    => tree.nodeMainToken(node),\n\n                    else => unreachable,\n                }"}
{"instruction":"Write a Zig function similar to init from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"fn init() EvLoop {\n    const epfd = cc.epoll_create1(c.EPOLL_CLOEXEC) orelse {\n        log.err(@src(), \"epoll_create() failed: (%d) %m\", .{cc.errno()}"}
{"instruction":"Write a Zig const similar to component from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"const component: ?Part = switch (tok) {\n                .star => Part.universal,\n                .ident => |s| Part{ .local_name = try parser.allocator.dupe(u8, s) },\n                .hash => |s| Part{ .identifier = try parser.allocator.dupe(u8, s) },\n                .class_name => |s| Part{ .class_name = try parser.allocator.dupe(u8, s) },\n                .colon => Part.unsupported,\n                else => null,\n            };"}
{"instruction":"Write a Zig const similar to ptr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"const ptr: [*]u8 = @ptrFromInt(addr);"}
{"instruction":"Write a Zig function similar to isGenericType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn isGenericType(self: Type) bool {\n        return self.data.isGeneric();\n    }"}
{"instruction":"Write a Zig function similar to gen_modules_zig from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn gen_modules_zig() void {\n    var f = std.fs.cwd().createFile(\"src/modules.zig\", .{}"}
{"instruction":"Write a Zig function similar to sendErr from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn sendErr(self: *Self, comptime format: String, args: anytype) void {\n            self.sendMessage(.@\"error\", format, args);\n        }"}
{"instruction":"Write a Zig function similar to fromString from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/Attribute.zig","output":"pub fn fromString(kind: Kind, namespace: ?[]const u8, name: []const u8) ?Tag {\n    const Properties = struct {\n        tag: Tag,\n        gnu: bool = false,\n        declspec: bool = false,\n        c23: bool = false,\n    }"}
{"instruction":"Write a Zig const similar to new from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"const new: *cy.VM = @ptrCast(@alignCast(C.create()));"}
{"instruction":"Write a Zig function similar to handleAxis from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleAxis(listener: *wl.Listener(*wlr.Pointer.event.Axis), event: *wlr.Pointer.event.Axis) void {\n    const cursor: *Cursor = @fieldParentPtr(\"axis\", listener);\n    const device: *InputDevice = @ptrFromInt(event.device.data);\n\n    cursor.seat.handleActivity();\n    cursor.unhide();\n\n    // Notify the client with pointer focus of the axis event.\n    cursor.seat.wlr_seat.pointerNotifyAxis(\n        event.time_msec,\n        event.orientation,\n        event.delta * device.config.scroll_factor,\n        @intFromFloat(math.clamp(\n            @round(@as(f32, @floatFromInt(event.delta_discrete)) * device.config.scroll_factor),\n            // It seems that clamping to exactly the bounds of an i32 is insufficient to make the\n            // @intFromFloat() call safe due to the max/min i32 not being exactly representable\n            // by an f32. Dividing by 2 is a low effort way to ensure the value is in bounds and\n            // allow users to set their scroll-factor to inf without crashing river.\n            math.minInt(i32) / 2,\n            math.maxInt(i32) / 2,\n        )),\n        event.source,\n        event.relative_direction,\n    );\n}"}
{"instruction":"Write a Zig function similar to loaded from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn loaded(self: *Self, parent: tp.pid_ref) OutOfMemoryError!void {\n    inline for (@typeInfo(@TypeOf(self.state)).@\"struct\".fields) |f|\n        if (@field(self.state, f.name) == .running) return;\n\n    self.logger.print(\"project files: {d}"}
{"instruction":"Write a Zig const similar to node_with_uri from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const node_with_uri: NodeWithUri = .{\n        .node = node_handle.node,\n        .uri = node_handle.handle.uri,\n    };"}
{"instruction":"Write a Zig function similar to composeSymbol from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"fn composeSymbol(wl: *const Native, sym: c.xkb_keysym_t) c.xkb_keysym_t {\n    if (sym == c.XKB_KEY_NoSymbol or wl.compose_state == null)\n        return sym;\n\n    if (libxkbcommon.?.xkb_compose_state_feed(wl.compose_state, sym) != c.XKB_COMPOSE_FEED_ACCEPTED)\n        return sym;\n\n    return switch (libxkbcommon.?.xkb_compose_state_get_status(wl.compose_state)) {\n        c.XKB_COMPOSE_COMPOSED => libxkbcommon.?.xkb_compose_state_get_one_sym(wl.compose_state),\n        c.XKB_COMPOSE_COMPOSING, c.XKB_COMPOSE_CANCELLED => c.XKB_KEY_NoSymbol,\n        else => sym,\n    }"}
{"instruction":"Write a Zig function similar to hash from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn hash(self: Context, token_handle: TokenWithHandle) u32 {\n            _ = self;\n            var hasher: std.hash.Wyhash = .init(0);\n            token_handle.hashWithHasher(&hasher);\n            return @truncate(hasher.final());\n        }"}
{"instruction":"Write a Zig function similar to getFullVarDecl from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn getFullVarDecl(self: AssignDestructure, tree: Ast) Ast.full.VarDecl {\n            return tree.fullVarDecl(self.getVarDeclNode(tree)).?;\n        }"}
{"instruction":"Write a Zig function similar to runOnUiThread from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/invocationhandler/main.zig","output":"pub fn runOnUiThread(self: *AndroidApp, comptime func: anytype, args: anytype) !void {\n        if (std.Thread.getCurrentId() == self.uiThreadId) {\n            // runOnUiThread has been called from the UI thread.\n            @call(.auto, func, args);\n            return;\n        }"}
{"instruction":"Write a Zig function similar to OP_LESS from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_LESS(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_LESS);\n}"}
{"instruction":"Write a Zig function similar to crash from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/Global.zig","output":"pub fn crash() noreturn {\n    @branchHint(.cold);\n    Global.exit(1);\n}"}
{"instruction":"Write a Zig function similar to async_notify from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"pub fn async_notify(self: *Loop, completion: *Completion) void {\n        // The completion must be in a waiting state.\n        assert(completion.op == .async_wait);\n\n        // The completion has been wakeup, this is used to see which completion in the async queue\n        // needs to be removed.\n        completion.op.async_wait.wakeup.store(true, .seq_cst);\n\n        // NOTE: This call can fail but errors are not documented, so we log the error here.\n        windows.PostQueuedCompletionStatus(self.iocp_handle, 0, 0, null) catch |err| {\n            log.warn(\"unexpected async_notify error={}"}
{"instruction":"Write a Zig struct similar to ziggy from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Asset.zig","output":"pub const ziggy = struct {\n        pub const signature: Signature = .{ .ret = .any }"}
{"instruction":"Write a Zig struct similar to at from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"pub const at = struct {\n        pub const signature: Signature = .{\n            .params = &.{.Int}"}
{"instruction":"Write a Zig function similar to timer_next from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/iocp.zig","output":"pub fn timer_next(self: *Loop, next_ms: u64) u64 {\n        return self.cached_now + next_ms * std.time.ns_per_ms;\n    }"}
{"instruction":"Write a Zig function similar to writeHeader from orhun/linuxwave","input":"Repository: orhun/linuxwave (611 ⭐)\nFile: src/wav.zig","output":"pub fn writeHeader(writer: Writer, config: EncoderConfig) !void {\n            try writeChunks(writer, config, null);\n        }"}
{"instruction":"Write a Zig function similar to __PMT from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __PMT(args: anytype) @TypeOf(args) {\n    _ = &args;\n    return args;\n}"}
{"instruction":"Write a Zig function similar to nudge_insert from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/buffer/Cursor.zig","output":"pub fn nudge_insert(self: *Self, nudge: Selection) void {\n    if (self.row < nudge.begin.row or (self.row == nudge.begin.row and self.col < nudge.begin.col)) return;\n\n    const rows = nudge.end.row - nudge.begin.row;\n    if (self.row == nudge.begin.row) {\n        if (nudge.begin.row < nudge.end.row) {\n            self.row += rows;\n            self.col = self.col - nudge.begin.col + nudge.end.col;\n        }"}
{"instruction":"Write a Zig function similar to acos from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn acos(vm: *cy.VM) Value {\n    return Value.initF64(std.math.acos(vm.getFloat(0)));\n}"}
{"instruction":"Write a Zig function similar to sys_exit_ext from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_exit_ext(args: *const Debug.PanicData) isize {\n    return call(.SYS_EXIT_EXTENDED, args);\n}"}
{"instruction":"Write a Zig function similar to field_name from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn field_name(self: EvType) []const u8 {\n        return switch (self) {\n            .read => \"read_frame\",\n            .write => \"write_frame\",\n        }"}
{"instruction":"Write a Zig function similar to strslice from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn strslice(str: anytype) StrSlice(@TypeOf(str), false) {\n    const S = @TypeOf(str);\n    if (comptime isManyItemPtr(S)) {\n        comptime assert(meta.sentinel(S).? == 0);\n        return str[0..c.strlen(str) :0];\n    }"}
{"instruction":"Write a Zig function similar to init from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn init(input: []const u8) Assembler {\n        return .{\n            .it = Tokenizer{ .input = input }"}
{"instruction":"Write a Zig function similar to getEpochDay from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/ntp_client.zig","output":"pub fn getEpochDay(self: EpochSeconds) std.time.epoch.EpochDay {\n        return .{ .day = @as(u47, @intCast(self.secs / secs_per_day)) }"}
{"instruction":"Write a Zig function similar to generateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig","output":"pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, neighbor: ?Neighbor, currentData: *Block, _: Block, blockPlacing: bool) bool {\n\tif(blockPlacing) {\n\t\tcurrentData.data = neighbor.?.reverse().toInt();\n\t\treturn true;\n\t}"}
{"instruction":"Write a Zig const similar to linux_display_backend from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: build.zig","output":"const linux_display_backend: LinuxDisplayBackend = b.option(LinuxDisplayBackend, \"linux_display_backend\", \"If using raylib, which linux display?\") orelse blk: {\n                _ = std.process.getEnvVarOwned(b.allocator, \"WAYLAND_DISPLAY\") catch |err| switch (err) {\n                    error.EnvironmentVariableNotFound => break :blk .X11,\n                    else => @panic(\"Unknown error checking for WAYLAND_DISPLAY environment variable\"),\n                };"}
{"instruction":"Write a Zig function similar to handlePointerMapping from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handlePointerMapping(cursor: *Cursor, event: *wlr.Pointer.event.Button, view: *View) bool {\n    const wlr_keyboard = cursor.seat.wlr_seat.getKeyboard() orelse return false;\n    const modifiers = wlr_keyboard.getModifiers();\n\n    const fullscreen = view.current.fullscreen or view.pending.fullscreen;\n\n    return for (server.config.modes.items[cursor.seat.mode_id].pointer_mappings.items) |mapping| {\n        if (event.button == mapping.event_code and std.meta.eql(modifiers, mapping.modifiers)) {\n            switch (mapping.action) {\n                .move => if (!fullscreen) cursor.startMove(view),\n                .resize => if (!fullscreen) cursor.startResize(view, null),\n                .command => |args| {\n                    cursor.seat.focus(view);\n                    cursor.seat.runCommand(args);\n                    // This is mildly inefficient as running the command may have already\n                    // started a transaction. However we need to start one after the Seat.focus()\n                    // call in the case where it didn't.\n                    server.root.applyPending();\n                }"}
{"instruction":"Write a Zig function similar to submit from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"pub fn submit(self: *Loop) !void {\n        // We try to submit as many events at once as we can.\n        var events: [256]Kevent = undefined;\n        var events_len: usize = 0;\n\n        // Submit all the submissions. We copy the submission queue so that\n        // any resubmits don't cause an infinite loop.\n        var queued = self.submissions;\n        self.submissions = .{}"}
{"instruction":"Write a Zig struct similar to TCP from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub const TCP = struct {\n    const Self = @This();\n\n    exec: *Executor,\n    tcp: xev.TCP,\n\n    pub const close = Closeable(Self, xev.TCP);\n    pub const poll = Pollable(Self, xev.TCP);\n    pub const read = Readable(Self, xev.TCP);\n    pub const write = Writeable(Self, xev.TCP);\n\n    pub fn init(exec: *Executor, tcp: xev.TCP) Self {\n        return .{ .exec = exec, .tcp = tcp }"}
{"instruction":"Write a Zig function similar to getInt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getInt(e: *Event) i64 {\n        return c.webui_get_int(e);\n    }"}
{"instruction":"Write a Zig function similar to handlePointerMotion from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"fn handlePointerMotion(window_id: mach.ObjectID, pointer: ?*c.struct_wl_pointer, serial: u32, fixed_x: c.wl_fixed_t, fixed_y: c.wl_fixed_t) callconv(.C) void {\n        _ = pointer;\n        _ = serial;\n\n        const x = c.wl_fixed_to_double(fixed_x);\n        const y = c.wl_fixed_to_double(fixed_y);\n\n        core_ptr.pushEvent(.{ .mouse_motion = .{ .pos = .{ .x = x, .y = y }"}
{"instruction":"Write a Zig const similar to frac from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/ntp_client.zig","output":"const frac: f32 = @floatFromInt(ts.fraction);"}
{"instruction":"Write a Zig const similar to PAGE_FAULT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/isr.zig","output":"pub const PAGE_FAULT: u8 = 14;"}
{"instruction":"Write a Zig function similar to resolveReturnType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveReturnType(analyser: *Analyser, func_type_param: Type) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to absolute from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn absolute() TimeError!usize {\n        const ret = sys_clock();\n        return if (ret == -1) TimeError.ReadTicksFail else @as(usize, @bitCast(ret));\n    }"}
{"instruction":"Write a Zig function similar to bitSize from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn bitSize(mem: Memory) u64 {\n            return switch (mem) {\n                .rip => |r| r.ptr_size.bitSize(),\n                .sib => |s| s.ptr_size.bitSize(),\n                .moffs => 64,\n            }"}
{"instruction":"Write a Zig function similar to encodeMandatoryPrefix from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"fn encodeMandatoryPrefix(inst: Instruction, encoder: anytype) !void {\n        const prefix = inst.encoding.mandatoryPrefix() orelse return;\n        try encoder.opcode_1byte(prefix);\n    }"}
{"instruction":"Write a Zig struct similar to AsyncNotification from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub const AsyncNotification = struct {\n    const Self = @This();\n\n    exec: *Executor,\n    notif: xev.Async,\n\n    pub fn init(exec: *Executor, notif: xev.Async) Self {\n        return .{ .exec = exec, .notif = notif }"}
{"instruction":"Write a Zig function similar to textureCreate from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn textureCreate(self: Backend, pixels: [*]const u8, width: u32, height: u32, interpolation: dvui.enums.TextureInterpolation) TextureError!dvui.Texture {\n    return self.impl.textureCreate(pixels, width, height, interpolation);\n}"}
{"instruction":"Write a Zig function similar to modRm_indirectDisp0 from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn modRm_indirectDisp0(self: Self, reg_or_opx: u3, rm: u3) !void {\n            assert(rm != 4 and rm != 5);\n            try self.modRm(0b00, reg_or_opx, rm);\n        }"}
{"instruction":"Write a Zig function similar to UserVM_eval from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"pub fn UserVM_eval(vm: *cy.VM) anyerror!cy.Value {\n    const core_data = vm.getData(*cy.builtins.CoreData, \"core\");\n    const uvm = vm.getValue(0).castHostObject(*UserVM);\n    const src = vm.getString(1);\n\n    var res: C.Value = @bitCast(cy.Value.Void);\n    const code = C.eval(@ptrCast(uvm.vm), C.toStr(src), &res);\n\n    const value: *UserValue = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.ValueT, @sizeOf(UserValue))));\n    vm.retain(vm.getValue(0));\n    value.vm = vm.getValue(0);\n    if (code == C.Success) {\n        value.val = @bitCast(res);\n    }"}
{"instruction":"Write a Zig function similar to isBaseExtended from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"pub fn isBaseExtended(op: Operand) bool {\n            return switch (op) {\n                .none, .imm => false,\n                .reg => |reg| reg.isExtended(),\n                .mem => |mem| mem.base().isExtended(),\n            }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"pub fn forward(self: RmsNorm, input: Tensor) Tensor {\n        const x = if (input.shape().isFullyTagged()) input else input.withPartialTags(.{.d}"}
{"instruction":"Write a Zig function similar to try_advance from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb.zig","output":"pub fn try_advance(self: *@This(), bytes: usize) usize {\n        const size = @min(bytes, self.buffer.len - self.pos);\n        self.advance_unsafe(size);\n        return size;\n    }"}
{"instruction":"Write a Zig struct similar to File from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/cli/init.zig","output":"const File = struct { path: []const u8, src: []const u8 }"}
{"instruction":"Write a Zig function similar to isSignedInt from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn isSignedInt(ip: *InternPool, ty: Index, target: std.Target) bool {\n    return switch (ty) {\n        .c_char_type => target.cCharSignedness() == .signed,\n        .isize_type, .c_short_type, .c_int_type, .c_long_type, .c_longlong_type => true,\n        else => switch (ip.indexToKey(ty)) {\n            .int_type => |int_type| int_type.signedness == .signed,\n            else => false,\n        }"}
{"instruction":"Write a Zig function similar to connect from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn connect(self: Self, addr: std.net.Address) !void {\n        const ResultT = ConnectResult;\n        const Data = struct {\n            result: ResultT = undefined,\n            frame: ?Frame = null,\n\n            fn callback(\n                userdata: ?*@This(),\n                l: *xev.Loop,\n                c: *xev.Completion,\n                s: xev.TCP,\n                result: ResultT,\n            ) xev.CallbackAction {\n                _ = l;\n                _ = c;\n                _ = s;\n                const data = userdata.?;\n                data.result = result;\n                if (data.frame != null) libcoro.xresume(data.frame.?);\n                return .disarm;\n            }"}
{"instruction":"Write a Zig const similar to menu from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const menu: u21 = 57363;"}
{"instruction":"Write a Zig const similar to event_count_max from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const event_count_max: u32 = Client.StateMachine.operation_result_max(\n            .get_change_events,\n            vsr.constants.message_body_size_max,\n        );"}
{"instruction":"Write a Zig function similar to parse from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_sheet.zig","output":"pub fn parse(allocator: std.mem.Allocator, input: []const u8) !Self {\n            var parser = Parser.init(allocator, input);\n            var sheet = Self.init(allocator);\n            errdefer sheet.deinit();\n\n            while (parser.parse(StyleRule) catch null) |r| {\n                try sheet.rules.append(r);\n            }"}
{"instruction":"Write a Zig struct similar to Key from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Event.zig","output":"pub const Key = struct {\n    code: enums.Key,\n    action: enum {\n        down,\n        repeat,\n        up,\n    }"}
{"instruction":"Write a Zig function similar to format from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/PathTable.zig","output":"pub fn format(f: Path.Formatter, writer: *Writer) !void {\n            if (f.prefix) |p| {\n                if (p.len > 0) {\n                    try writer.writeAll(p);\n                    if (p[p.len - 1] != '/') {\n                        try writer.writeAll(\"/\");\n                    }"}
{"instruction":"Write a Zig function similar to computeSpecHashStr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig","output":"fn computeSpecHashStr(spec: []const u8) [16]u8 {\n    var res: [16]u8 = undefined;\n    const hash = std.hash.Wyhash.hash(0, spec);\n    _ = std.fmt.formatIntBuf(&res, hash, 16, .lower, .{ .width = 16, .fill = '0'}"}
{"instruction":"Write a Zig function similar to testDiag from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"fn testDiag(diag: Diagnostic, err: anyerror, expected: []const u8) !void {\n    var buf: [1024]u8 = undefined;\n    var writer = std.Io.Writer.fixed(&buf);\n    try diag.report(&writer, err);\n    try std.testing.expectEqualStrings(expected, writer.buffered());\n}"}
{"instruction":"Write a Zig function similar to argvToScriptCommandLineWindows from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn argvToScriptCommandLineWindows(\n    allocator: mem.Allocator,\n    /// Path to the `.bat`/`.cmd` script. If this path is relative, it is assumed to be relative to the CWD.\n    /// The script must have been verified to exist at this path before calling this function.\n    script_path: []const u16,\n    /// Arguments, not including the script name itself. Expected to be encoded as WTF-8.\n    script_args: []const []const u8,\n) ArgvToScriptCommandLineError![:0]u16 {\n    var buf = try std.ArrayList(u8).initCapacity(allocator, 64);\n    defer buf.deinit();\n\n    // `/d` disables execution of AutoRun commands.\n    // `/e:ON` and `/v:OFF` are needed for BatBadBut mitigation:\n    // > If delayed expansion is enabled via the registry value DelayedExpansion,\n    // > it must be disabled by explicitly calling cmd.exe with the /V:OFF option.\n    // > Escaping for % requires the command extension to be enabled.\n    // > If it’s disabled via the registry value EnableExtensions, it must be enabled with the /E:ON option.\n    // https://flatt.tech/research/posts/batbadbut-you-cant-securely-execute-commands-on-windows/\n    buf.appendSliceAssumeCapacity(\"cmd.exe /d /e:ON /v:OFF /c \\\"\");\n\n    // Always quote the path to the script arg\n    buf.appendAssumeCapacity('\"');\n    // We always want the path to the batch script to include a path separator in order to\n    // avoid cmd.exe searching the PATH for the script. This is not part of the arbitrary\n    // command execution mitigation, we just know exactly what script we want to execute\n    // at this point, and potentially making cmd.exe re-find it is unnecessary.\n    //\n    // If the script path does not have a path separator, then we know its relative to CWD and\n    // we can just put `.\\` in the front.\n    if (mem.indexOfAny(u16, script_path, &[_]u16{ mem.nativeToLittle(u16, '\\\\'), mem.nativeToLittle(u16, '/') }"}
{"instruction":"Write a Zig function similar to outStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn outStatement(self: *Self) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    if (self.current.?.in_block_expression == null) {\n        const location = self.ast.tokens.get(start_location);\n        self.reporter.reportErrorAt(\n            .syntax,\n            location,\n            location,\n            \"`out` statement is only allowed inside a block expression\",\n        );\n    }"}
{"instruction":"Write a Zig struct similar to TestShorthand from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"const TestShorthand = struct {\n    flex: struct {\n        flex_grow: f32 = 0,\n        flex_shrink: f32 = 1,\n    }"}
{"instruction":"Write a Zig function similar to doAction from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"fn doAction(request: [*c]c.accesskit_action_request, userdata: ?*anyopaque) callconv(.c) void {\n    defer actionRequestFree(request);\n\n    var self: *AccessKit = @ptrCast(@alignCast(userdata));\n\n    self.mutex.lock();\n    defer self.mutex.unlock();\n\n    const window: *dvui.Window = @alignCast(@fieldParentPtr(\"accesskit\", self));\n    self.action_requests.append(window.gpa, request.?.*) catch |err| {\n        dvui.logError(@src(), err, \"AccessKit: Unable to add action request\", .{}"}
{"instruction":"Write a Zig function similar to fromStr from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn fromStr(str: Str) []const u8 {\n    if (str.len == 0) {\n        return \"\";\n    }"}
{"instruction":"Write a Zig function similar to walk_tree_entry_callback from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn walk_tree_entry_callback(parent: tp.pid_ref, root_path: []const u8, file_path: []const u8, mtime_high: i64, mtime_low: i64) error{Exit}"}
{"instruction":"Write a Zig function similar to close from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/text_editor/main.zig","output":"fn close(_: *webui.Event) void {\n    std.debug.print(\"Exit.\\n\", .{}"}
{"instruction":"Write a Zig const similar to mouse_button from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"const mouse_button: Core.MouseButton = @enumFromInt(button - c.BTN_LEFT);"}
{"instruction":"Write a Zig function similar to call from kristoff-it/zine","input":"Repository: kristoff-it/zine (1176 ⭐)\nFile: src/context/Array.zig","output":"pub fn call(\n            arr: Array,\n            gpa: Allocator,\n            _: *const context.Template,\n            args: []const Value,\n        ) context.CallError!Value {\n            const bad_arg: Value = .{ .err = \"expected 1 integer argument\" }"}
{"instruction":"Write a Zig function similar to instanceTypeVal from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn instanceTypeVal(self: Type, analyser: *Analyser) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to runner from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const runner: *const Runner = @alignCast(@fieldParentPtr(\"metrics\", metrics));"}
{"instruction":"Write a Zig function similar to encodeRexPrefix from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/encoder.zig","output":"fn encodeRexPrefix(inst: Instruction, encoder: anytype) !void {\n        const op_en = inst.encoding.data.op_en;\n\n        var rex = Rex{}"}
{"instruction":"Write a Zig struct similar to Debug from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub const Debug = struct {\n    pub const PanicCodes = enum(usize) {\n        //Hardware vector reason codes: 0x0..0x7\n        BranchThroughZero,\n        UndefinedInstr,\n        SoftwareInterrupt,\n        PrefetchAbort,\n        DataAbort,\n        AddressException,\n        IRQ,\n        FIQ,\n\n        //Software reason codes (0x20 - 0x29)\n        BreakPoint = 0x20,\n        WatchPoint,\n        StepComplete,\n        RunTimeErrorUnknown,\n        InternalError,\n        UserInterruption,\n        ApplicationExit,\n        StackOverflow,\n        DivisionByZero,\n        OSSpecific,\n    }"}
{"instruction":"Write a Zig function similar to isMultiValueProperty from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/cssom/CSSStyleDeclaration.zig","output":"fn isMultiValueProperty(value: []const u8) bool {\n    var parts = std.mem.splitAny(u8, value, \" \");\n    var multi_value_parts: usize = 0;\n    var all_parts_valid = true;\n\n    while (parts.next()) |part| {\n        if (part.len == 0) continue;\n        multi_value_parts += 1;\n\n        if (isNumericWithUnit(part)) {\n            continue;\n        }"}
{"instruction":"Write a Zig function similar to get_emitted_elf from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub fn get_emitted_elf(fw: *Firmware) LazyPath {\n                if (fw.emitted_elf == null) {\n                    const raw_elf = fw.artifact.getEmittedBin();\n                    fw.emitted_elf = if (fw.target.patch_elf) |patch_elf|\n                        patch_elf(fw.target.dep, raw_elf)\n                    else\n                        raw_elf;\n                }"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn callback(\n                ud: ?*anyopaque,\n                l: *Loop,\n                c: *Completion,\n                r: Result,\n            ) CallbackAction {\n                _ = l;\n                _ = c;\n                _ = r.close catch unreachable;\n                const ptr = @as(*posix.socket_t, @ptrCast(@alignCast(ud.?)));\n                ptr.* = 0;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig struct similar to AsyncDiffer from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/diff.zig","output":"pub const AsyncDiffer = struct {\n    pid: ?tp.pid,\n\n    pub fn deinit(self: *@This()) void {\n        if (self.pid) |pid| {\n            pid.send(.{\"shutdown\"}"}
{"instruction":"Write a Zig function similar to perform from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"fn perform(self: *Completion, ev_: ?*const Kevent) Result {\n        return switch (self.op) {\n            .cancel,\n            .noop,\n            .timer,\n            .shutdown,\n            => {\n                log.warn(\"perform op={s}"}
{"instruction":"Write a Zig function similar to sliceToZ from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"fn sliceToZ(bytes: []const u8, ptr: bun.StringPointer) [:0]const u8 {\n        if (ptr.length == 0) return \"\";\n\n        return bytes[ptr.offset..][0..ptr.length :0];\n    }"}
{"instruction":"Write a Zig function similar to deinit from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn deinit(self: *Defaults) void {\n\t\t\t\tself.localArena.deinit();\n\t\t\t}"}
{"instruction":"Write a Zig function similar to read from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/cdc.zig","output":"pub fn read(self: *@This(), dst: []u8) usize {\n            const read_count = self.rx.read(dst);\n            self.prep_out_transaction();\n            return read_count;\n        }"}
{"instruction":"Write a Zig function similar to installCompiler from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn installCompiler(allocator: Allocator, compiler_dir: []const u8, url: []const u8) !void {\n    if (try existsAbsolute(compiler_dir)) {\n        loginfo(\"compiler '{s}"}
{"instruction":"Write a Zig const similar to state from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"const state: Fd.State = v.value;"}
{"instruction":"Write a Zig const similar to child_err from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const child_err: SpawnError = @errorCast(@errorFromInt(child_err_int));"}
{"instruction":"Write a Zig function similar to hasSubBlock from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"fn hasSubBlock(stairData: u8, x: u1, y: u1, z: u1) bool {\n\treturn stairData & subBlockMask(x, y, z) == 0;\n}"}
{"instruction":"Write a Zig function similar to getSymbolEnumLiteral from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn getSymbolEnumLiteral(\n    analyser: *Analyser,\n    handle: *DocumentStore.Handle,\n    source_index: usize,\n    name: []const u8,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to DebuggerType from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn DebuggerType(comptime AdapterType: anytype) type {\n    return struct {\n        const Self = @This();\n\n        // Is a ThreadSafeAllocator under the hood\n        perm_alloc: Allocator,\n\n        adapter: *AdapterType = undefined,\n\n        data: Data,\n        file_cache: *file.Cache,\n\n        requests: Queue(proto.Request),\n        responses: Queue(proto.Response),\n\n        pub fn init(thread_safe_alloc: *ThreadSafeAllocator, file_cache: *file.Cache) !*Self {\n            const q_timeout = time.ns_per_ms * 10;\n\n            const perm_alloc = thread_safe_alloc.allocator();\n            const self = try perm_alloc.create(Self);\n            errdefer perm_alloc.destroy(self);\n\n            self.* = .{\n                .perm_alloc = thread_safe_alloc.allocator(),\n                .data = try Data.init(thread_safe_alloc),\n                .file_cache = file_cache,\n                .requests = Queue(proto.Request).init(\n                    thread_safe_alloc,\n                    .{ .timeout_ns = q_timeout }"}
{"instruction":"Write a Zig function similar to can_write from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/uart.zig","output":"pub fn can_write(self: Self) bool {\n            return self.internal.can_write();\n        }"}
{"instruction":"Write a Zig const similar to itemHitBoxMarginVec from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const itemHitBoxMarginVec: Vec3f = @splat(itemHitBoxMargin);"}
{"instruction":"Write a Zig struct similar to Call from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const Call = struct {\n    is_async: bool,\n    callee: Node.Index,\n    // We need this because in a dot.call, callee is dot and its type will be == to call return type\n    callee_type_def: *obj.ObjTypeDef,\n    arguments: []const Argument,\n    catch_default: ?Node.Index,\n    tail_call: bool = false,\n\n    pub const Argument = struct {\n        name: ?TokenIndex,\n        value: Node.Index,\n    }"}
{"instruction":"Write a Zig function similar to deinit from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"pub fn deinit(self: *DualBuffer, allocator: std.mem.Allocator) void {\n        allocator.free(self.buffer_2.buffer);\n        allocator.free(self.buffer_1.buffer);\n    }"}
{"instruction":"Write a Zig function similar to isRex from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/Encoding.zig","output":"pub fn isRex(mode: Mode) bool {\n        return switch (mode) {\n            else => false,\n            .rex, .rex_short => true,\n        }"}
{"instruction":"Write a Zig function similar to initialize from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub fn initialize(self: *AccessKit) void {\n    const window: *dvui.Window = @alignCast(@fieldParentPtr(\"accesskit\", self));\n\n    if (builtin.os.tag == .windows) {\n        if (dvui.backend.kind == .dx11) {\n            self.adapter = c.accesskit_windows_adapter_new(\n                windowsHWND(window),\n                // If the window currently has focus.\n                // TODO: We currently assume we always have focus as this initialization is performed\n                //       at program startup so we are most likely focused. This should be verified in some way\n                true,\n                doAction,\n                self,\n            ) orelse @panic(\"null\");\n        }"}
{"instruction":"Write a Zig function similar to TupleSome from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn TupleSome(vm: *cy.VM, v: Value) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionTuple, &.{ Value.initInt(1), v }"}
{"instruction":"Write a Zig function similar to HOST_OBJECT from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"fn HOST_OBJECT(out_type_id: ?*Type, get_children: GetChildrenFn, finalizer: FinalizerFn) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_HOSTOBJ,\n        .data = .{ .hostobj = .{\n            .out_type_id = out_type_id,\n            .get_children = get_children,\n            .finalizer = finalizer,\n            .pre = false,\n        }"}
{"instruction":"Write a Zig function similar to getCAbiIntReturnRegs from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: deps/zig/arch/x86_64/abi.zig","output":"pub fn getCAbiIntReturnRegs(cc: std.builtin.CallingConvention) []const Register {\n    return switch (cc) {\n        .SysV => &SysV.c_abi_int_return_regs,\n        .Win64 => &Win64.c_abi_int_return_regs,\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig const similar to hdr from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zip.zig","output":"const hdr: std.zip.EndRecord = .{\n                .signature = std.zip.end_record_sig,\n                .disk_number = 0,\n                .central_directory_disk_number = 0,\n                .record_count_disk = @intCast(self.central_count),\n                .record_count_total = @intCast(self.central_count),\n                .central_directory_size = @intCast(cd_end - cd_offset),\n                .central_directory_offset = @intCast(cd_offset),\n                .comment_len = 0,\n            };"}
{"instruction":"Write a Zig function similar to runQueue from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/Scheduler.zig","output":"fn runQueue(self: *Scheduler, queue: *Queue) !?i32 {\n    // this is O(1)\n    if (queue.count() == 0) {\n        return null;\n    }"}
{"instruction":"Write a Zig function similar to dataCallback from lightpanda-io/browser","input":"Repository: lightpanda-io/browser (10112 ⭐)\nFile: src/browser/ScriptManager.zig","output":"fn dataCallback(transfer: *Http.Transfer, data: []const u8) !void {\n    const script: *PendingScript = @ptrCast(@alignCast(transfer.ctx));\n    script.dataCallback(transfer, data) catch |err| {\n        log.err(.http, \"SM.dataCallback\", .{ .err = err, .transfer = transfer, .len = data.len }"}
{"instruction":"Write a Zig function similar to loadFromZonLegacy from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn loadFromZonLegacy(allocator: NeverFailingAllocator, zon: ZonElement) !*Palette {\n\t\t// Using zon.object.count() here has the implication that array can not be sparse.\n\t\tconst paletteLength = zon.object.count();\n\t\tconst translationPalette = main.stackAllocator.alloc(?[]const u8, paletteLength);\n\t\tdefer main.stackAllocator.free(translationPalette);\n\n\t\t@memset(translationPalette, null);\n\n\t\tvar iterator = zon.object.iterator();\n\t\twhile(iterator.next()) |entry| {\n\t\t\tconst numericId = entry.value_ptr.as(?usize, null) orelse return error.InvalidPaletteFormat;\n\t\t\tconst name = entry.key_ptr.*;\n\n\t\t\tif(numericId >= translationPalette.len) {\n\t\t\t\tstd.log.err(\"ID {}"}
{"instruction":"Write a Zig const similar to slice from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/kqueue.zig","output":"const slice: []u8 = switch (v.buffer) {\n                    .slice => |slice| slice,\n                    .array => |*arr| arr,\n                };"}
{"instruction":"Write a Zig const similar to generate_linker_script_args from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"const generate_linker_script_args: GenerateLinkerScriptArgs = .{\n                    .cpu_name = cpu.name,\n                    .cpu_arch = zig_resolved_target.result.cpu.arch,\n                    .chip_name = target.chip.name,\n                    .memory_regions = target.chip.memory_regions,\n                    .generate = linker_script_options.generate,\n                    .ram_image = target.ram_image,\n                };"}
{"instruction":"Write a Zig function similar to format from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn format(value: @This(), writer: *std.Io.Writer) !void {\n        switch (value) {\n            .ipv4 => |a| try a.format(writer),\n            .ipv6 => |a| try a.format(writer),\n        }"}
{"instruction":"Write a Zig function similar to fileExists from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/build/auto-detect.zig","output":"pub fn fileExists(path: []const u8) bool {\n    std.fs.cwd().access(path, .{}"}
{"instruction":"Write a Zig function similar to coerceInt from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn coerceInt(\n    ip: *InternPool,\n    gpa: Allocator,\n    dest_ty: Index,\n    val: Index,\n) Allocator.Error!Index {\n    switch (ip.indexToKey(val)) {\n        .int_i64_value => |int| return try ip.get(gpa, .{ .int_i64_value = .{ .int = int.int, .ty = dest_ty }"}
{"instruction":"Write a Zig function similar to isHotspot from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn isHotspot(self: Tag) bool {\n            return switch (self) {\n                .While,\n                .For,\n                .ForEach,\n                => true,\n                else => false,\n            }"}
{"instruction":"Write a Zig function similar to convertTimestampToTime from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/ntp_client.zig","output":"pub fn convertTimestampToTime(buf: []u8, timestamp: u64) ![]const u8 {\n    const epochSeconds = EpochSeconds{ .secs = timestamp }"}
{"instruction":"Write a Zig function similar to timer from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"pub fn timer(\n        self: *Loop,\n        c: *Completion,\n        next_ms: u64,\n        userdata: ?*anyopaque,\n        comptime cb: xev.Callback,\n    ) void {\n        c.* = .{\n            .op = .{\n                .timer = .{\n                    .next = timer_next(next_ms),\n                }"}
{"instruction":"Write a Zig function similar to warp from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn warp(cursor: *Cursor) void {\n    cursor.may_need_warp = false;\n\n    const focused_output = cursor.seat.focused_output orelse return;\n\n    // Warp pointer to center of the focused view/output (In layout coordinates) if enabled.\n    var output_layout_box: wlr.Box = undefined;\n    server.root.output_layout.getBox(focused_output.wlr_output, &output_layout_box);\n    const target_box = switch (server.config.warp_cursor) {\n        .disabled => return,\n        .@\"on-output-change\" => output_layout_box,\n        .@\"on-focus-change\" => switch (cursor.seat.focused) {\n            .layer, .lock_surface, .none => output_layout_box,\n            .view => |view| wlr.Box{\n                .x = output_layout_box.x + view.current.box.x,\n                .y = output_layout_box.y + view.current.box.y,\n                .width = view.current.box.width,\n                .height = view.current.box.height,\n            }"}
{"instruction":"Write a Zig function similar to pushUpdates from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub fn pushUpdates(self: *AccessKit) void {\n    self.mutex.lock();\n    defer self.mutex.unlock();\n\n    if (self.status != .on) {\n        return;\n    }"}
{"instruction":"Write a Zig function similar to update_now from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/wasi_poll.zig","output":"pub fn update_now(self: *Loop) void {\n        if (get_now()) |t| self.cached_now = t else |_| {}"}
{"instruction":"Write a Zig function similar to init from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/NativeActivity.zig","output":"pub fn init(activity: *android.ANativeActivity) Self {\n    var env: *android.JNIEnv = undefined;\n    _ = activity.vm.*.AttachCurrentThread(activity.vm, &env, null);\n    return fromJniEnv(activity, env);\n}"}
{"instruction":"Write a Zig function similar to timerInvoke from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/examples/invocationhandler/main.zig","output":"pub fn timerInvoke(data: ?*anyopaque, jni: *android.JNI, method: android.jobject, args: android.jobjectArray) !android.jobject {\n    var btn_data = @as(*ButtonData, @ptrCast(@alignCast(@alignOf(*ButtonData), data)));\n    btn_data.count += 1;\n    std.log.info(\"Running invoke!\", .{}"}
{"instruction":"Write a Zig const similar to prog_pipe from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"const prog_pipe: [2]posix.fd_t = p: {\n        if (self.progress_node.index == .none) {\n            break :p .{ -1, -1 };"}
{"instruction":"Write a Zig function similar to createBlockModel from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig","output":"pub fn createBlockModel(_: Block, _: *u16, _: ZonElement) ModelIndex {\n\tif(modelIndex) |idx| return idx;\n\n\tfor(0..64) |i| {\n\t\tvar quads = main.List(main.models.QuadInfo).init(main.stackAllocator);\n\t\tdefer quads.deinit();\n\n\t\tconst data = LogData.init(@intCast(i));\n\n\t\tfor(Neighbor.iterable) |neighbor| {\n\t\t\tconst pattern = getPattern(data, neighbor);\n\n\t\t\tquads.append(rotateQuad(pattern, neighbor));\n\t\t}"}
{"instruction":"Write a Zig function similar to body from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn body(self: *const Message) amqp.Encoder.Body {\n        const vtable: amqp.Encoder.Body.VTable = comptime .{\n            .write = &struct {\n                fn write(context: *const anyopaque, buffer: []u8) usize {\n                    const message: *const Message = @ptrCast(@alignCast(context));\n                    var fbs = std.io.fixedBufferStream(buffer);\n                    std.json.stringify(message, .{\n                        .whitespace = .minified,\n                        .emit_nonportable_numbers_as_strings = true,\n                    }"}
{"instruction":"Write a Zig function similar to setContentAreaOpaque from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"fn setContentAreaOpaque(wl: *const Native, new_size: Core.Size) void {\n    const region = c.wl_compositor_create_region(wl.interfaces.wl_compositor) orelse return;\n\n    c.wl_region_add(region, 0, 0, @intCast(new_size.width), @intCast(new_size.height));\n    c.wl_surface_set_opaque_region(wl.surface, region);\n    c.wl_region_destroy(region);\n\n    // FIX: What is the Mach Object System way of doing this?\n    // core_ptr.swap_chain_update.set();\n}"}
{"instruction":"Write a Zig function similar to main from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_header.zig","output":"pub fn main() !void {\n    @setEvalBranchQuota(100_000);\n\n    var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n\n    var buffer = std.ArrayList(u8).init(allocator);\n    try buffer.writer().print(\n        \\\\ //////////////////////////////////////////////////////////\n        \\\\ // This file was auto-generated by tb_client_header.zig //\n        \\\\ //              Do not manually modify.                 //\n        \\\\ //////////////////////////////////////////////////////////\n        \\\\\n        \\\\#ifndef TB_CLIENT_H\n        \\\\#define TB_CLIENT_H\n        \\\\\n        \\\\#ifdef __cplusplus\n        \\\\extern \"C\" {{\n        \\\\#endif\n        \\\\\n        \\\\#include <stddef.h>\n        \\\\#include <stdint.h>\n        \\\\#include <stdbool.h>\n        \\\\\n        \\\\typedef __uint128_t tb_uint128_t;\n        \\\\\n        \\\\\n    , .{}"}
{"instruction":"Write a Zig struct similar to DepositOrSwap from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const DepositOrSwap = struct { // MARK: DepositOrSwap\n\t\tdest: InventoryAndSlot,\n\t\tsource: InventoryAndSlot,\n\n\t\tfn run(self: DepositOrSwap, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, gamemode: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig struct similar to threading from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub const threading = struct {\n    const Waiter = struct {\n        frame: coro.Frame,\n        thread: *const AsyncThread,\n        next: ?*Waiter = null,\n    }"}
{"instruction":"Write a Zig const similar to blue from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub const blue: PMA = .fromColor(.blue);"}
{"instruction":"Write a Zig struct similar to For from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const For = struct {\n    init_declarations: []const Node.Index,\n    condition: Node.Index,\n    post_loop: []const Node.Index,\n    body: Node.Index,\n    label: ?TokenIndex,\n}"}
{"instruction":"Write a Zig function similar to callback from mitchellh/libxev","input":"Repository: mitchellh/libxev (3095 ⭐)\nFile: src/backend/io_uring.zig","output":"fn callback(ud: ?*anyopaque, l: *Loop, c: *Completion, r: Result) CallbackAction {\n                _ = l;\n                _ = c;\n                _ = r.connect catch unreachable;\n                const b = @as(*bool, @ptrCast(ud.?));\n                b.* = true;\n                return .disarm;\n            }"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn forward(self: ModernBertEmbeddings, input_ids: Tensor) Tensor {\n        // Perform tok_embeddings\n        const hidden_states = zml.call(self.tok_embeddings, .forward, .{input_ids}"}
{"instruction":"Write a Zig function similar to run from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub fn run(\n    exec: *Executor,\n    comptime func: anytype,\n    args: anytype,\n    stack: anytype,\n) !stdx.meta.FnSignature(func, @TypeOf(args)).ReturnPayloadT {\n    stdx.debug.assert(libcoro.inCoro() == false, \"Not in a coroutine\", .{}"}
{"instruction":"Write a Zig function similar to addHealth from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub fn addHealth(health: f32, cause: main.game.DamageType, side: Side, userId: u32) void {\n\t\tif(side == .client) {\n\t\t\tSync.ClientSide.executeCommand(.{.addHealth = .{.target = userId, .health = health, .cause = cause}"}
{"instruction":"Write a Zig const similar to set_state from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"const set_state: State = .set;"}
{"instruction":"Write a Zig function similar to grow from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"fn grow(self: *Self, gpa: mem.Allocator) !void {\n            const capacity = @as(u64, 1) << (63 - self.shift + 1);\n            const overflow = capacity / 10 + (63 - @as(usize, self.shift) + 1) << 1;\n            const end = self.entries + @as(usize, @intCast(capacity + overflow));\n\n            const map = try Self.initCapacity(gpa, @as(usize, @intCast(capacity * 2)));\n            var src = self.entries;\n            var dst = map.entries;\n\n            while (src != end) {\n                const entry = src[0];\n\n                const i = if (!entry.isEmpty()) entry.hash >> map.shift else 0;\n                const p = map.entries + i;\n\n                dst = if (@intFromPtr(p) >= @intFromPtr(dst)) p else dst;\n                dst[0] = entry;\n\n                src += 1;\n                dst += 1;\n            }"}
{"instruction":"Write a Zig function similar to report from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn report(diag: Diagnostic, stream: *std.Io.Writer, err: anyerror) !void {\n        var longest = diag.name.longest();\n        if (longest.kind == .positional)\n            longest.name = diag.arg;\n\n        switch (err) {\n            streaming.Error.DoesntTakeValue => try stream.print(\n                \"The argument '{s}"}
{"instruction":"Write a Zig function similar to cyan from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn cyan(comptime message: []const u8) []const u8 {\n    return wrap(codes.cyan, message);\n}"}
{"instruction":"Write a Zig function similar to createTestDir from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: build.zig","output":"fn createTestDir() !void {\n    const cwd = std.fs.cwd();\n    const test_dir = try cwd.makeOpenPath(TEST_DIR_PATH, std.fs.Dir.OpenOptions{}"}
{"instruction":"Write a Zig function similar to getBool from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getBool(e: *Event) bool {\n        return c.webui_get_bool(e);\n    }"}
{"instruction":"Write a Zig function similar to collect from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/std.zig","output":"pub fn collect(ctx: @import(\"bog.zig\").Vm.Context) i64 {\n        return @intCast(ctx.vm.gc.collect());\n    }"}
{"instruction":"Write a Zig function similar to count from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn count(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const stype = obj.getType();\n    if (stype.isAstring()) {\n        return Value.initInt(obj.len());\n    }"}
{"instruction":"Write a Zig function similar to generateFloat from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn generateFloat(self: *Self, node: Ast.Node.Index, _: ?*Breaks) Error!?*obj.ObjFunction {\n    try self.emitConstant(\n        self.ast.nodes.items(.location)[node],\n        try self.ast.toValue(node, self.gc),\n    );\n\n    try self.patchOptJumps(node);\n    try self.endScope(node);\n\n    return null;\n}"}
{"instruction":"Write a Zig function similar to handleNewIdleInhibitor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/IdleInhibitManager.zig","output":"fn handleNewIdleInhibitor(listener: *wl.Listener(*wlr.IdleInhibitorV1), inhibitor: *wlr.IdleInhibitorV1) void {\n    const inhibit_manager: *IdleInhibitManager = @fieldParentPtr(\"new_idle_inhibitor\", listener);\n    const inhibitor_node = util.gpa.create(std.TailQueue(IdleInhibitor).Node) catch return;\n    inhibitor_node.data.init(inhibitor, inhibit_manager) catch {\n        util.gpa.destroy(inhibitor_node);\n        return;\n    }"}
{"instruction":"Write a Zig function similar to setup_libexeobj_step from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn setup_libexeobj_step(step: *LibExeObjStep) void {\n    step.setTarget(_target);\n    step.setBuildMode(_mode);\n\n    step.want_lto = _lto;\n    step.strip = _strip;\n\n    // compile\n    if (step.kind == .obj)\n        step.use_stage1 = true; // required by coroutine (.zig)\n\n    step.single_threaded = true;\n\n    step.link_function_sections = true;\n    // step.link_data_sections = true; // not supported in 0.10.1\n\n    // link\n    if (step.kind == .exe or step.isDynamicLibrary())\n        step.link_gc_sections = true;\n\n    step.pie = false;\n\n    if (is_musl())\n        step.force_pic = false;\n\n    // this is needed even for the compile step, as zig needs to do some preparation for linking libc\n    step.linkLibC();\n}"}
{"instruction":"Write a Zig function similar to write_state from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"pub fn write_state(self: *Self, writer: anytype) !void {\n    return self.write_state_v1(writer);\n}"}
{"instruction":"Write a Zig function similar to getFileByName from mewz-project/mewz","input":"Repository: mewz-project/mewz (637 ⭐)\nFile: src/fs.zig","output":"pub fn getFileByName(self: *Self, file_name: []const u8) ?*RegularFile {\n        for (&files) |*file| {\n            if (file.name.len != self.name.len + file_name.len) {\n                continue;\n            }"}
{"instruction":"Write a Zig function similar to finalize from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"fn finalize(pushed: PushedScope) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to exec_command from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn exec_command(argv: []const []const u8, exit_code: ?*u8) Builder.ExecError![]u8 {\n    var code: u8 = undefined;\n    const p_code = exit_code orelse &code;\n    return _b.execAllowFail(argv, p_code, .Inherit) catch |err| {\n        const cmd = string_concat(argv, \" \");\n        defer _b.allocator.free(cmd);\n        print_err(\"failed to execute: {s}"}
{"instruction":"Write a Zig function similar to saveInstallDir from marler8997/zigup","input":"Repository: marler8997/zigup (1061 ⭐)\nFile: zigup.zig","output":"fn saveInstallDir(allocator: Allocator, maybe_dir: ?[]const u8) !void {\n    const settings_dir_path = getSettingsDir(allocator) orelse {\n        std.log.err(\"cannot save install dir, unable to find a suitable settings directory\", .{}"}
{"instruction":"Write a Zig function similar to handleTouchDown from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleTouchDown(\n    listener: *wl.Listener(*wlr.Touch.event.Down),\n    event: *wlr.Touch.event.Down,\n) void {\n    const cursor: *Cursor = @fieldParentPtr(\"touch_down\", listener);\n\n    cursor.seat.handleActivity();\n\n    var lx: f64 = undefined;\n    var ly: f64 = undefined;\n    cursor.wlr_cursor.absoluteToLayoutCoords(event.device, event.x, event.y, &lx, &ly);\n\n    cursor.touch_points.putNoClobber(util.gpa, event.touch_id, .{ .lx = lx, .ly = ly }"}
{"instruction":"Write a Zig function similar to elapsed from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn elapsed() TimeError!u64 {\n        var ticks = Elapsed{ .low = 0, .high = 0 }"}
{"instruction":"Write a Zig const similar to trymain from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/common.zig","output":"const trymain: ?string = u.detct_mainfile(options.alloc, d.main, moddirO, tryname) catch |err| switch (err) {\n                        error.CantFindMain => null,\n                        else => |ee| return ee,\n                    };"}
{"instruction":"Write a Zig function similar to Arg from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap/streaming.zig","output":"pub fn Arg(comptime Id: type) type {\n    return struct {\n        const Self = @This();\n\n        param: *const clap.Param(Id),\n        value: ?[]const u8 = null,\n    }"}
{"instruction":"Write a Zig function similar to setHighContrast from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn setHighContrast(self: webui, status: bool) void {\n    c.webui_set_high_contrast(self.window_handle, status);\n}"}
{"instruction":"Write a Zig function similar to deinit from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn deinit(self: *Self, alloc: Allocator) void {\n        self.breakpoints.deinit(alloc);\n\n        self.clearAndFreeWatchExpressions(alloc);\n        self.watch_expressions.deinit(alloc);\n    }"}
{"instruction":"Write a Zig const similar to g from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"const g: f32 = std.math.lerp(@as(f32, @floatFromInt(self.g)) / 255, @as(f32, @floatFromInt(other.g)) / 255, t);"}
{"instruction":"Write a Zig function similar to next from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/node.zig","output":"pub fn next(self: *DescendantsIterator) ?*Node {\n            if (self.pos.first_child) |ch| {\n                self.pos = ch;\n            }"}
{"instruction":"Write a Zig const similar to exe_targets from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"const exe_targets: []const std.Target.Query = &.{\n    .{ .cpu_arch = .aarch64, .os_tag = .macos },\n    .{ .cpu_arch = .aarch64, .os_tag = .linux },\n    .{ .cpu_arch = .aarch64, .os_tag = .windows },\n    .{ .cpu_arch = .x86_64, .os_tag = .macos },\n    .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .musl },\n    .{ .cpu_arch = .x86_64, .os_tag = .windows },\n};"}
{"instruction":"Write a Zig function similar to futureResolverGetChildren from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig","output":"pub fn futureResolverGetChildren(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) C.ValueSlice {\n    var resolver: *cy.heap.FutureResolver = @ptrCast(@alignCast(obj));\n    return .{\n        .ptr = @ptrCast(&resolver.future),\n        .len = 1,\n    }"}
{"instruction":"Write a Zig const similar to OCW_READ_LOAD_LSB_ONLY from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const OCW_READ_LOAD_LSB_ONLY: u8 = 0x10;"}
{"instruction":"Write a Zig struct similar to TCP from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"const TCP = struct {\n    session_node: SessionNode = .{ .type = .tcp }"}
{"instruction":"Write a Zig function similar to log10 from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig","output":"pub fn log10(vm: *cy.VM) Value {\n    return Value.initF64(std.math.log10(vm.getFloat(0)));\n}"}
{"instruction":"Write a Zig struct similar to frame from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"const frame = struct {\n        fn frame() !dvui.App.Result {\n            dvui.Examples.demo();\n            return .ok;\n        }"}
{"instruction":"Write a Zig function similar to run from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn run(_: Open, _: NeverFailingAllocator, _: *Command, _: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig function similar to forkChildErrReport from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/Child.zig","output":"fn forkChildErrReport(fd: i32, err: ChildProcess.SpawnError) noreturn {\n    writeIntFd(fd, @as(ErrInt, @intFromError(err))) catch {}"}
{"instruction":"Write a Zig const similar to kp_up from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_up: u21 = 57419;"}
{"instruction":"Write a Zig function similar to endsWith from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig","output":"pub fn endsWith(vm: *cy.VM) Value {\n    const str = vm.getString(0);\n    const needle = vm.getString(1);\n    return Value.initBool(std.mem.endsWith(u8, str, needle));\n}"}
{"instruction":"Write a Zig function similar to execute from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/zpm/tags.zig","output":"pub fn execute(self_name: []const u8, args: [][:0]u8) !void {\n    _ = self_name;\n    _ = args;\n\n    const out = std.io.getStdOut().writer();\n\n    const url = try std.mem.join(gpa, \"/\", &.{ zpm.server_root, \"tags\" }"}
{"instruction":"Write a Zig function similar to simple_query_recent_files from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn simple_query_recent_files(self: *Self, from: tp.pid_ref, max: usize, query: []const u8) ClientError!usize {\n    var i: usize = 0;\n    defer from.send(.{ \"PRJ\", \"recent_done\", self.longest_file_path, query }"}
{"instruction":"Write a Zig function similar to assert from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/std/debug.zig","output":"pub fn assert(val: bool) !void {\n    if (!val) return error.AssertionFailed;\n}"}
{"instruction":"Write a Zig function similar to BaseIterator from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"fn BaseIterator(comptime SelfType: type, comptime ElementPtr: type) type {\n            return struct {\n                list: SelfType,\n                index: usize,\n                box_index: usize,\n                shelf_index: ShelfIndex,\n                shelf_size: usize,\n\n                pub fn next(it: *@This()) ?ElementPtr {\n                    if (it.index >= it.list.len) return null;\n                    if (it.index < prealloc_item_count) {\n                        const ptr = &it.list.prealloc_segment[it.index];\n                        it.index += 1;\n                        if (it.index == prealloc_item_count) {\n                            it.box_index = 0;\n                            it.shelf_index = 0;\n                            it.shelf_size = prealloc_item_count * 2;\n                        }"}
{"instruction":"Write a Zig function similar to hide from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"pub fn hide(cursor: *Cursor) void {\n    if (cursor.pressed_count > 0) return;\n\n    // Hiding the cursor and sending wl_pointer.leave whlie a pointer constraint\n    // is active does not make much sense. In particular, doing so seems to interact\n    // poorly with Xwayland's pointer constraints implementation.\n    if (cursor.constraint) |constraint| {\n        if (constraint.state == .active) return;\n    }"}
{"instruction":"Write a Zig function similar to getCount from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getCount(e: *Event) usize {\n        return c.webui_get_count(e);\n    }"}
{"instruction":"Write a Zig function similar to __imatmul__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __imatmul__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ *= other.num_;\n        return self;\n    }"}
{"instruction":"Write a Zig struct similar to Command from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"pub const Command = struct { // MARK: Command\n\tpub const PayloadType = enum(u8) {\n\t\topen = 0,\n\t\tclose = 1,\n\t\tdepositOrSwap = 2,\n\t\tdeposit = 3,\n\t\ttakeHalf = 4,\n\t\tdrop = 5,\n\t\tfillFromCreative = 6,\n\t\tdepositOrDrop = 7,\n\t\tdepositToAny = 11,\n\t\tclear = 8,\n\t\tupdateBlock = 9,\n\t\taddHealth = 10,\n\t}"}
{"instruction":"Write a Zig const similar to my_num from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const my_num: f64 = webui_get_float(e);"}
{"instruction":"Write a Zig function similar to init from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn init(allocator: std.mem.Allocator, tree: Ast) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to lcrValue from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/serial.zig","output":"fn lcrValue(char_len: u8, stop_bit: bool, parity_bit: bool, msb: u1) SerialError!u8 {\n    if (char_len != 0 and (char_len < 5 or char_len > 8))\n        return SerialError.InvalidCharacterLength;\n    // Set the msb and OR in all arguments passed\n    const val = char_len & 0x3 |\n        @intCast(u8, @boolToInt(stop_bit)) << 2 |\n        @intCast(u8, @boolToInt(parity_bit)) << 3 |\n        @intCast(u8, msb) << 7;\n    return val;\n}"}
{"instruction":"Write a Zig const similar to ball_radius from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/window_flags.zig","output":"const ball_radius: f32 = 20;"}
{"instruction":"Write a Zig function similar to getBoolAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getBoolAt(e: *Event, index: usize) bool {\n        return c.webui_get_bool_at(e, index);\n    }"}
{"instruction":"Write a Zig const similar to idx from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/raw_stream.zig","output":"const idx: f32 = @floatFromInt(i);"}
{"instruction":"Write a Zig struct similar to keyboard_listener from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/linux/Wayland.zig","output":"const keyboard_listener = struct {\n    fn keyboardHandleKeymap(window_id: mach.ObjectID, keyboard: ?*c.struct_wl_keyboard, format: u32, fd: i32, keymap_size: u32) callconv(.C) void {\n        _ = keyboard;\n        var core_window = core_ptr.windows.getValue(window_id);\n        const wl = &core_window.native.?.wayland;\n\n        if (format != c.WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1) {\n            @panic(\"TODO\");\n        }"}
{"instruction":"Write a Zig function similar to __bos0 from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {\n    _ = &ptr;\n    return __builtin_object_size(ptr, @as(c_int, 0));\n}"}
{"instruction":"Write a Zig function similar to updateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"pub fn updateData(block: *Block, neighbor: Neighbor, neighborBlock: Block) bool {\n\tconst canConnectToNeighbor = block.mode() == neighborBlock.mode() and block.modeData() == neighborBlock.modeData();\n\tvar currentData = BranchData.init(block.data);\n\n\t// Handle joining with other branches. While placed, branches extend in a\n\t// opposite direction than they were placed from, effectively connecting\n\t// to the block they were placed at.\n\tif(canConnectToNeighbor) {\n\t\tconst neighborData = BranchData.init(neighborBlock.data);\n\t\tcurrentData.setConnection(neighbor, neighborData.isConnected(neighbor.reverse()));\n\t}"}
{"instruction":"Write a Zig function similar to searchPaths from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn searchPaths(self: *Self, file_name: []const u8) ![][]const u8 {\n    var paths = std.ArrayList([]const u8).empty;\n\n    for (search_paths) |path| {\n        const filled = try std.mem.replaceOwned(\n            u8,\n            self.gc.allocator,\n            path,\n            \"?\",\n            file_name,\n        );\n        defer self.gc.allocator.free(filled);\n        const suffixed = try std.mem.replaceOwned(\n            u8,\n            self.gc.allocator,\n            filled,\n            \"!\",\n            \"buzz\",\n        );\n        defer self.gc.allocator.free(suffixed);\n        const prefixed = try std.mem.replaceOwned(\n            u8,\n            self.gc.allocator,\n            suffixed,\n            \"$\",\n            try buzzLibPath(self.gc.allocator),\n        );\n\n        if (builtin.os.tag == .windows) {\n            const windows = try std.mem.replaceOwned(\n                u8,\n                self.gc.allocator,\n                prefixed,\n                \"/\",\n                \"\\\\\",\n            );\n            try paths.append(self.gc.allocator, windows);\n        }"}
{"instruction":"Write a Zig function similar to iterateLabels from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn iterateLabels(handle: *DocumentStore.Handle, source_index: usize, comptime callback: anytype, context: anytype) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to create from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/DragIcon.zig","output":"pub fn create(wlr_drag_icon: *wlr.Drag.Icon, cursor: *Cursor) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to ret from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const ret: bool = webui_set_port(my_window, 8080);"}
{"instruction":"Write a Zig function similar to encodeRoot from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"fn encodeRoot(ctx: *cy.EncodeValueContext, val: anytype) !void {\n            const T = @TypeOf(val);\n            if (T == cy.Value) {\n                switch (val.getTypeId()) {\n                    bt.Float => {\n                        try ctx.encodeFloat(val.asF64());\n                    }"}
{"instruction":"Write a Zig function similar to hash from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn hash(self: Context, item: NodeWithUri) u64 {\n            _ = self;\n            var hasher: std.hash.Wyhash = .init(0);\n            std.hash.autoHash(&hasher, item.node);\n            hasher.update(item.uri);\n            return hasher.final();\n        }"}
{"instruction":"Write a Zig function similar to patchOptJumps from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn patchOptJumps(self: *Self, node: Ast.Node.Index) !void {\n    const location = self.ast.nodes.items(.location)[node];\n\n    if (self.ast.nodes.items(.patch_opt_jumps)[node]) {\n        std.debug.assert(self.opt_jumps.items.len > 0);\n\n        // Hope over OP_POP if actual value\n        const njump: usize = try self.emitJump(location, .OP_JUMP);\n\n        for (self.opt_jumps.items[self.opt_jumps.items.len - 1].items) |jump| {\n            self.patchJump(jump);\n        }"}
{"instruction":"Write a Zig function similar to hash32 from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn hash32(self: Type) u32 {\n        return @truncate(self.hash64());\n    }"}
{"instruction":"Write a Zig const similar to kp_4 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_4: u21 = 57403;"}
{"instruction":"Write a Zig function similar to static from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/EventHandler.zig","output":"pub fn static(T: type) Self {\n    return .{\n        .ptr = &none,\n        .vtable = comptime &.{\n            .type_name = @typeName(T),\n            .deinit = struct {\n                pub fn deinit(_: *anyopaque) void {}"}
{"instruction":"Write a Zig function similar to peek from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"pub fn peek(self: *Tokenizer) Error!u8 {\n        return if (self.pos < self.input.len) self.input[self.pos] else error.Eof;\n    }"}
{"instruction":"Write a Zig function similar to peek from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/segmented_list.zig","output":"pub fn peek(it: *@This()) ?ElementPtr {\n                    if (it.index >= it.list.len)\n                        return null;\n                    if (it.index < prealloc_item_count)\n                        return &it.list.prealloc_segment[it.index];\n\n                    return &it.list.dynamic_segments[it.shelf_index][it.box_index];\n                }"}
{"instruction":"Write a Zig function similar to parse from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"pub fn parse(allocator: std.mem.Allocator, selector: []const u8) !Selector {\n        var parser = Parser.init(allocator, selector);\n\n        return try parser.parse(Selector);\n    }"}
{"instruction":"Write a Zig const similar to bytecode from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"const bytecode: StringPointer = brk: {\n                if (output_file.bytecode_index != std.math.maxInt(u32)) {\n                    // Use up to 256 byte alignment for bytecode\n                    // Not aligning it correctly will cause a runtime assertion error, or a segfault.\n                    const bytecode = output_files[output_file.bytecode_index].value.buffer.bytes;"}
{"instruction":"Write a Zig function similar to processNode from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn processNode(self: *IsConstantContext, _: std.mem.Allocator, ast: Self.Slice, node: Self.Node.Index) (std.mem.Allocator.Error || std.fmt.BufPrintError)!bool {\n            switch (ast.nodes.items(.tag)[node]) {\n                .AnonymousObjectType,\n                .FiberType,\n                .FunctionType,\n                .GenericResolveType,\n                .GenericType,\n                .ListType,\n                .MapType,\n                .SimpleType,\n                .UserType,\n                .Boolean,\n                .Integer,\n                .Double,\n                .Pattern,\n                .Null,\n                .StringLiteral,\n                .TypeExpression,\n                .Void,\n                .Namespace,\n                => self.result = self.result == null or self.result.?,\n\n                .AsyncCall,\n                .Block,\n                .Break,\n                .Continue,\n                .Call,\n                .DoUntil,\n                .Enum,\n                .Export,\n                .For,\n                .ForEach,\n                .Function,\n                .FunDeclaration,\n                .Import,\n                .NamedVariable,\n                .ObjectDeclaration,\n                .ObjectInit,\n                .ProtocolDeclaration,\n                .Resolve,\n                .Resume,\n                .Return,\n                .Try,\n                .Throw,\n                .VarDeclaration,\n                .While,\n                .Yield,\n                .Zdef,\n                .BlockExpression,\n                .Out,\n                => {\n                    self.result = false;\n                    return true;\n                }"}
{"instruction":"Write a Zig function similar to parseMapType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseMapType(self: *Self, generic_types: ?std.AutoArrayHashMapUnmanaged(*obj.ObjString, *obj.ObjTypeDef), mutable: bool) Error!Ast.Node.Index {\n    const start_location = if (mutable) self.current_token.? - 2 else self.current_token.? - 1;\n\n    const key_type = try self.parseTypeDef(generic_types, true);\n\n    try self.consume(.Colon, \"Expected `:` after key type.\");\n\n    const value_type = try self.parseTypeDef(generic_types, true);\n\n    try self.consume(.RightBrace, \"Expected `}"}
{"instruction":"Write a Zig function similar to updateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig","output":"pub fn updateData(block: *Block, neighbor: Neighbor, neighborBlock: Block) bool {\n\tconst blockBaseModelIndex = blocks.meshes.modelIndexStart(block.*);\n\tconst neighborBaseModelIndex = blocks.meshes.modelIndexStart(neighborBlock);\n\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\tconst targetVal = !neighborBlock.replacable() and !neighborBlock.transparent() and (blockBaseModelIndex == neighborBaseModelIndex or neighborModel.isNeighborOccluded[neighbor.reverse().toInt()]);\n\tvar currentData: FenceData = @bitCast(@as(u4, @truncate(block.data)));\n\tswitch(neighbor) {\n\t\t.dirNegX => {\n\t\t\tcurrentData.isConnectedNegX = targetVal;\n\t\t}"}
{"instruction":"Write a Zig function similar to get_language_server_instance from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/Project.zig","output":"fn get_language_server_instance(self: *Self, language_server: []const u8) StartLspError!*const LSP {\n    if (self.get_existing_language_server(language_server)) |lsp| return lsp;\n    const lsp = try LSP.open(self.allocator, self.name, .{ .buf = language_server }"}
{"instruction":"Write a Zig struct similar to Message from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"pub const Message = struct {\n    pub const content_type = \"application/json\";\n\n    pub const json_string_size_max = size: {\n        var counting_writer = std.io.countingWriter(std.io.null_writer);\n        std.json.stringify(\n            worse_case(Message),\n            stringify_options,\n            counting_writer.writer(),\n        ) catch unreachable;\n        break :size counting_writer.bytes_written;\n    }"}
{"instruction":"Write a Zig function similar to create from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn create() *ZVM {\n    return @ptrCast(c.clCreate());\n}"}
{"instruction":"Write a Zig function similar to fromFile from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/OutputFile.zig","output":"pub fn fromFile(fd: bun.FD, pathname: string) FileOperation {\n        return .{\n            .fd = fd,\n            .pathname = pathname,\n        }"}
{"instruction":"Write a Zig const similar to OCW_MODE_TERMINAL_COUNT from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const OCW_MODE_TERMINAL_COUNT: u8 = 0x00;"}
{"instruction":"Write a Zig function similar to execute from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/zpm/showjson.zig","output":"pub fn execute(self_name: []const u8, args: [][:0]u8) !void {\n    _ = self_name;\n\n    const out = std.io.getStdOut().writer();\n\n    const url = try std.mem.join(gpa, \"/\", &.{ zpm.server_root, args[0] }"}
{"instruction":"Write a Zig function similar to sys_time from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_time() isize {\n    return call(.SYS_TIME, &0);\n}"}
{"instruction":"Write a Zig function similar to get from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dragging.zig","output":"pub fn get(self: *Dragging, p: Point.Physical, opts: GetOptions) ?Point.Physical {\n    if (opts.name) |name| {\n        if (!std.mem.eql(u8, name, self.name orelse \"\")) return null;\n    }"}
{"instruction":"Write a Zig struct similar to Pointer from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Pointer = struct {\n        elem_type: Index,\n        sentinel: Index = .none,\n        flags: Flags,\n        packed_offset: PackedOffset = .{ .bit_offset = 0, .host_size = 0 }"}
{"instruction":"Write a Zig function similar to flip from nektro/zigmod","input":"Repository: nektro/zigmod (891 ⭐)\nFile: src/cmd/generate.zig","output":"fn flip(foo: anytype) !void {\n        \\\\    _ = foo catch return;\n        \\\\    return error.ExpectedError;\n        \\\\}"}
{"instruction":"Write a Zig function similar to printNum3SigFigs from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"fn printNum3SigFigs(w: anytype, num: f64) !void {\n    if (num >= 1000 or @round(num) == num) {\n        try w.print(\"{d: >4.0}"}
{"instruction":"Write a Zig function similar to seek from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn seek(file: File, offset: usize) FileError!void {\n            return if (sys_seek(&Seek{ .file = file, .seek = offset }"}
{"instruction":"Write a Zig function similar to build from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig","output":"pub fn build(b: *std.Build) !void {\n\ttry createLaunchConfig();\n\n\t// Standard target options allows the person running `zig build` to choose\n\t// what target to build for. Here we do not override the defaults, which\n\t// means any target is allowed, and the default is native. Other options\n\t// for restricting supported target set are available.\n\tconst target = b.standardTargetOptions(.{}"}
{"instruction":"Write a Zig struct similar to AnimatingDialog from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples/animations.zig","output":"const AnimatingDialog = struct {\n    pub fn dialogDisplay(id: dvui.Id) !void {\n        const modal = dvui.dataGet(null, id, \"_modal\", bool) orelse unreachable;\n        const title = dvui.dataGetSlice(null, id, \"_title\", []u8) orelse unreachable;\n        const message = dvui.dataGetSlice(null, id, \"_message\", []u8) orelse unreachable;\n        const callafter = dvui.dataGet(null, id, \"_callafter\", DialogCallAfterFn);\n        const duration = dvui.dataGet(null, id, \"duration\", i32) orelse unreachable;\n        const easing = dvui.dataGet(null, id, \"easing\", *const dvui.easing.EasingFn) orelse unreachable;\n\n        // once we record a response, refresh it until we close\n        _ = dvui.dataGet(null, id, \"response\", enums.DialogResponse);\n\n        var win = FloatingWindowWidget.init(@src(), .{ .modal = modal }"}
{"instruction":"Write a Zig function similar to path_exists from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn path_exists(rel_path: []const u8) bool {\n    return if (std.fs.cwd().access(rel_path, .{}"}
{"instruction":"Write a Zig function similar to reportPlaceholder from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Reporter.zig","output":"pub fn reportPlaceholder(self: *Self, ast: Ast.Slice, placeholder: PlaceholderDef) void {\n    @branchHint(.cold);\n\n    if (placeholder.parent) |parent| {\n        if (parent.def_type == .Placeholder) {\n            self.reportPlaceholder(ast, parent.resolved_type.?.Placeholder);\n        }"}
{"instruction":"Write a Zig function similar to pixelSize from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn pixelSize(self: Backend) dvui.Size.Physical {\n    return self.impl.pixelSize();\n}"}
{"instruction":"Write a Zig function similar to startMove from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"pub fn startMove(cursor: *Cursor, view: *View) void {\n    // Guard against assertion in enterMode()\n    if (view.current.output == null) return;\n\n    if (cursor.constraint) |constraint| {\n        if (constraint.state == .active) constraint.deactivate();\n    }"}
{"instruction":"Write a Zig function similar to num from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn num(self: *const Self) i64 {\n        return self.num_;\n    }"}
{"instruction":"Write a Zig function similar to generateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"pub fn generateData(\n\t_: *main.game.World,\n\t_: Vec3i,\n\t_: Vec3f,\n\t_: Vec3f,\n\t_: Vec3i,\n\tneighbor: ?Neighbor,\n\tcurrentBlock: *Block,\n\tneighborBlock: Block,\n\tblockPlacing: bool,\n) bool {\n\tconst canConnectToNeighbor = currentBlock.mode() == neighborBlock.mode() and currentBlock.modeData() == neighborBlock.modeData();\n\n\tif(blockPlacing or canConnectToNeighbor or !neighborBlock.replacable()) {\n\t\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\n\t\tvar currentData = BranchData.init(currentBlock.data);\n\t\t// Branch block upon placement should extend towards a block it was placed\n\t\t// on if the block is solid or also uses branch model.\n\t\tconst targetVal = ((!neighborBlock.replacable() and (!neighborBlock.viewThrough() or canConnectToNeighbor)) and (canConnectToNeighbor or neighborModel.isNeighborOccluded[neighbor.?.reverse().toInt()]));\n\t\tcurrentData.setConnection(neighbor.?, targetVal);\n\n\t\tconst result: u16 = currentData.enabledConnections;\n\t\tif(result == currentBlock.data) return false;\n\n\t\tcurrentBlock.data = result;\n\t\treturn true;\n\t}"}
{"instruction":"Write a Zig function similar to resolveFuncProtoOfCallable from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn resolveFuncProtoOfCallable(analyser: *Analyser, ty: Type) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to exe from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: build.zig","output":"const exe: *std.Build.Step.Compile = b.addExecutable(.{\n                .name = name,\n                .root_source_file = programPath,\n                .target = target,\n                .optimize = optimize,\n            });"}
{"instruction":"Write a Zig function similar to exit from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn exit(status: c_int) noreturn;\npub extern fn abort() noreturn;\n\npub inline fn connect(fd: c_int, addr: *const SockAddr) ?void {\n    const raw = struct {\n        extern fn connect(fd: c_int, addr: *const anyopaque, addrlen: c.socklen_t) c_int;\n    }"}
{"instruction":"Write a Zig function similar to format from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_rule.zig","output":"pub fn format(self: Self, comptime _: []const u8, _: std.fmt.FormatOptions, writer: anytype) !void {\n            return writer.print(\"{}"}
{"instruction":"Write a Zig function similar to toCyon from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig","output":"pub fn toCyon(vm: *cy.VM) anyerror!cy.Value {\n    const res = try allocToCyon(vm, vm.alloc, vm.getValue(0));\n    defer vm.alloc.free(res);\n    return vm.allocString(res);\n}"}
{"instruction":"Write a Zig function similar to is_null from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig","output":"pub fn is_null(self: *const DynStr) bool {\n    return self.vec.is_null();\n}"}
{"instruction":"Write a Zig function similar to toCacheSpec from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig","output":"fn toCacheSpec(spec: []const u8) ![]const u8 {\n    // Remove scheme part.\n    if (std.mem.startsWith(u8, spec, \"http://\")) {\n        return spec[7..];\n    }"}
{"instruction":"Write a Zig function similar to assert_state from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"fn assert_state(self: *const DualBuffer) void {\n        // Two buffers: one can be producing while the other is consuming,\n        // but never two consumers or producers.\n        assert(!(self.buffer_1.state == .producing and self.buffer_2.state == .producing));\n        assert(!(self.buffer_1.state == .consuming and self.buffer_2.state == .consuming));\n        assert(!(self.buffer_1.state == .ready and self.buffer_2.state == .ready));\n        maybe(self.buffer_1.state == .free and self.buffer_2.state == .free);\n    }"}
{"instruction":"Write a Zig struct similar to TextDirection from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub const TextDirection = struct {\n    pub const left_to_right = c.ACCESSKIT_TEXT_DIRECTION_LEFT_TO_RIGHT;\n    pub const right_to_left = c.ACCESSKIT_TEXT_DIRECTION_RIGHT_TO_LEFT;\n    pub const top_to_bottom = c.ACCESSKIT_TEXT_DIRECTION_TOP_TO_BOTTOM;\n    pub const bottom_to_top = c.ACCESSKIT_TEXT_DIRECTION_BOTTOM_TO_TOP;\n}"}
{"instruction":"Write a Zig function similar to wrote from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: misctools/compression.zig","output":"pub fn wrote(this: *@This(), w: usize) ![]u8 {\n                try this.writer.writeAll(this.scratch_buffer[0..w]);\n                return this.scratch_buffer;\n            }"}
{"instruction":"Write a Zig function similar to Loop from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Loop.zig","output":"pub fn Loop(comptime T: type) type {\n    return struct {\n        const Self = @This();\n\n        const Event = T;\n\n        tty: *Tty,\n        vaxis: *Vaxis,\n\n        queue: Queue(T, 512) = .{}"}
{"instruction":"Write a Zig function similar to setRate from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/rtc.zig","output":"fn setRate(rate: u8) RtcError!void {\n    if (rate < 3 or rate > 0xF) {\n        return RtcError.RateError;\n    }"}
{"instruction":"Write a Zig const similar to media_play from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const media_play: u21 = 57428;"}
{"instruction":"Write a Zig function similar to main from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/udp_broadcast.zig","output":"pub fn main() !void {\n    std.debug.print(\"   UDP broadcast example\\n\\n\", .{}"}
{"instruction":"Write a Zig struct similar to Node from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const Node = struct {\n    tag: Tag,\n    /// First token of this node\n    location: TokenIndex,\n    /// Last token of this node\n    end_location: TokenIndex,\n    /// Docblock if any\n    docblock: ?TokenIndex = null,\n\n    /// If null, either its a statement or its a reference to something unknown that should ultimately raise a compile error\n    type_def: ?*obj.ObjTypeDef = null,\n    /// Wether optional jumps must be patch before generate this node bytecode\n    patch_opt_jumps: bool = false,\n    /// Does this node closes a scope\n    ends_scope: ?[]const Chunk.OpCode = null,\n\n    /// Data related to this node\n    components: Components,\n\n    /// To avoid generating a node const value multiple times\n    value: ?Value = null,\n\n    /// How many time it was visited at runtime (used to decide wether its a hotspot that needs to be compiled)\n    count: usize = 0,\n\n    /// Wether its blacklisted or already compiled\n    compilable: bool = true,\n\n    pub fn deinit(self: *Node, allocator: std.mem.Allocator) void {\n        if (self.ends_scope) |ends_scope| {\n            allocator.free(ends_scope);\n        }"}
{"instruction":"Write a Zig struct similar to UnionValue from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const UnionValue = struct {\n        ty: Index,\n        field_index: u32,\n        val: Index,\n    }"}
{"instruction":"Write a Zig function similar to handleRequest from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"pub fn handleRequest(self: *Self, comptime respT: anytype, req: anytype) !respT {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            logRequest(\"sync\", req.req());\n\n            switch (req.req()) {\n                .get_state => |cmd| return proto.GetStateResponse{\n                    .state = try self.getStateSnapshot(cmd),\n                }"}
{"instruction":"Write a Zig function similar to registerRecipesFromZon from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn registerRecipesFromZon(zon: ZonElement) void {\n\titems_zig.registerRecipes(zon);\n}"}
{"instruction":"Write a Zig function similar to desc_cpu from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"fn desc_cpu() []const u8 {\n    if (get_optval_cpu()) |cpu| return cpu;\n    const cpu_model = _target.getCpuModel().name;\n    return if (_target.isNativeCpu()) fmt(\"{s}"}
{"instruction":"Write a Zig function similar to runtimeWrap from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"fn runtimeWrap(allocator: std.mem.Allocator, attribute: []const u8, message: []const u8) ![]const u8 {\n    return try std.mem.join(\n        allocator,\n        \"\",\n        &[_][]const u8{ codes.escape, attribute, message, codes.escape, codes.reset }"}
{"instruction":"Write a Zig function similar to symbol from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig","output":"pub fn symbol(vm: *ZVM, str: []const u8) Value {\n    return c.clSymbol(@ptrCast(vm), toStr(str));\n}"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/music_stream.zig","output":"pub fn main() !void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const screenWidth = 800;\n    const screenHeight = 450;\n\n    rl.initWindow(screenWidth, screenHeight, \"raylib [audio] example - music playing (streaming)\");\n    defer rl.closeWindow(); // Close window and OpenGL context\n\n    rl.initAudioDevice(); // Initialize audio device\n    defer rl.closeAudioDevice(); // Close audio device (music streaming is automatically stopped)\n\n    const music: rl.Music = try rl.loadMusicStream(\"resources/audio/country.mp3\");\n    defer rl.unloadMusicStream(music); // Unload music stream buffers from RAM\n\n    rl.playMusicStream(music);\n\n    var timePlayed: f32 = 0; // Time played normalized [0.0f..1.0f]\n    var pause: bool = false; // Music playing paused\n\n    rl.setTargetFPS(30); // Set our game to run at 30 frames-per-second\n    //--------------------------------------------------------------------------------------\n\n    // Main game loop\n    while (!rl.windowShouldClose()) // Detect window close button or ESC key\n    {\n        // Update\n        //----------------------------------------------------------------------------------\n        rl.updateMusicStream(music); // Update music buffer with new stream data\n\n        // Restart music playing (stop and play)\n        if (rl.isKeyPressed(.space)) {\n            rl.stopMusicStream(music);\n            rl.playMusicStream(music);\n        }"}
{"instruction":"Write a Zig function similar to initShape from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/llama/llama.zig","output":"pub fn initShape(kv_shape: zml.Shape) ShapeOf(KvCache) {\n        return .{\n            .k = kv_shape,\n            .v = kv_shape,\n            .layer_index = zml.Shape.init(.{}"}
{"instruction":"Write a Zig function similar to handleTouchFrame from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleTouchFrame(listener: *wl.Listener(void)) void {\n    const cursor: *Cursor = @fieldParentPtr(\"touch_frame\", listener);\n\n    cursor.seat.handleActivity();\n\n    cursor.seat.wlr_seat.touchNotifyFrame();\n}"}
{"instruction":"Write a Zig function similar to id from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/selector.zig","output":"fn id(i: usize) []const u8 {\n            return ids[i];\n        }"}
{"instruction":"Write a Zig const similar to opt_aarch64 from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig","output":"const opt_aarch64: [:0]const u8 = if (_target.getCpuArch() == .aarch64) \"1\" else \"0\";"}
{"instruction":"Write a Zig const similar to payload from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const payload: Command.Payload = switch(typ) {\n\t\t\t\tinline else => |_typ| @unionInit(Command.Payload, @tagName(_typ), try @FieldType(Command.Payload, @tagName(_typ)).deserialize(reader, .server, source)),\n\t\t\t};"}
{"instruction":"Write a Zig function similar to decode_base_64 from ziglang/zig","input":"Repository: ziglang/zig (41797 ⭐)\nFile: doc/langref/base64.zig","output":"fn decode_base_64(\n    dest_ptr: [*]u8,\n    dest_len: usize,\n    source_ptr: [*]const u8,\n    source_len: usize,\n) usize {\n    const src = source_ptr[0..source_len];\n    const dest = dest_ptr[0..dest_len];\n    const base64_decoder = base64.standard.Decoder;\n    const decoded_size = base64_decoder.calcSizeForSlice(src) catch unreachable;\n    base64_decoder.decode(dest[0..decoded_size], src) catch unreachable;\n    return decoded_size;\n}"}
{"instruction":"Write a Zig function similar to createAssetStringID from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig","output":"fn createAssetStringID(\n\texternalAllocator: NeverFailingAllocator,\n\taddonName: []const u8,\n\trelativeFilePath: []const u8,\n) []u8 {\n\tconst baseNameEndIndex = if(std.ascii.endsWithIgnoreCase(relativeFilePath, \".zig.zon\")) relativeFilePath.len - \".zig.zon\".len else std.mem.lastIndexOfScalar(u8, relativeFilePath, '.') orelse relativeFilePath.len;\n\tconst pathNoExtension: []const u8 = relativeFilePath[0..baseNameEndIndex];\n\n\tconst assetId: []u8 = externalAllocator.alloc(u8, addonName.len + 1 + pathNoExtension.len);\n\n\t@memcpy(assetId[0..addonName.len], addonName);\n\tassetId[addonName.len] = ':';\n\n\t// Convert from windows to unix style separators.\n\tfor(0..pathNoExtension.len) |i| {\n\t\tif(pathNoExtension[i] == '\\\\') {\n\t\t\tassetId[addonName.len + 1 + i] = '/';\n\t\t}"}
{"instruction":"Write a Zig function similar to setReadTimeout from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn setReadTimeout(self: *Self, read: ?u32) !void {\n        std.debug.assert(read == null or read.? != 0);\n        const micros = read orelse 0;\n        var opt = if (is_windows) @as(u32, @divTrunc(micros, 1000)) else std.posix.timeval{\n            .sec = @intCast(@divTrunc(micros, std.time.us_per_s)),\n            .usec = @intCast(@mod(micros, std.time.us_per_s)),\n        }"}
{"instruction":"Write a Zig const similar to id from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const id: usize = webui_interface_bind(my_window, \"myID\", myCallback);"}
{"instruction":"Write a Zig function similar to Bun__getStandaloneModuleGraphMachoLength from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StandaloneModuleGraph.zig","output":"fn Bun__getStandaloneModuleGraphMachoLength() ?*align(1) u32;\n\n        pub fn getData() ?[]const u8 {\n            if (Bun__getStandaloneModuleGraphMachoLength()) |length| {\n                if (length.* < 8) {\n                    return null;\n                }"}
{"instruction":"Write a Zig function similar to OP_GET_STRING_PROPERTY from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_GET_STRING_PROPERTY(self: *Self, location: Ast.TokenIndex, property_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_GET_STRING_PROPERTY,\n        property_idx,\n    );\n}"}
{"instruction":"Write a Zig function similar to parse from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn parse(string: []const u8) !IPv6 {\n            if (string.len < 2 or string.len > 39) {\n                return error.InvalidFormat;\n            }"}
{"instruction":"Write a Zig function similar to runtimeCyan from jetzig-framework/jetzig","input":"Repository: jetzig-framework/jetzig (1283 ⭐)\nFile: cli/colors.zig","output":"pub fn runtimeCyan(allocator: std.mem.Allocator, message: []const u8) ![]const u8 {\n    return try runtimeWrap(allocator, codes.cyan, message);\n}"}
{"instruction":"Write a Zig const similar to rwx from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig","output":"pub const rwx: Access = .{ .read = true, .write = true, .execute = true };"}
{"instruction":"Write a Zig const similar to arg_len from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const arg_len: usize = webui_get_size_at(e, 0);"}
{"instruction":"Write a Zig function similar to hash from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"pub fn hash(_: HashMapKey, val: HashMapKey) u64 {\n\t\tvar hasher = std.hash.Wyhash.init(0);\n\t\tstd.hash.autoHashStrat(&hasher, val, .DeepRecursive);\n\t\treturn hasher.final();\n\t}"}
{"instruction":"Write a Zig function similar to hasContext from oven-sh/bun","input":"Repository: oven-sh/bun (81759 ⭐)\nFile: src/StaticHashMap.zig","output":"pub fn hasContext(self: *const Self, key: K, ctx: Context) bool {\n            const hash = ctx.hash(key);\n            assert(hash != Self.empty_hash);\n\n            for (self.entries[hash >> self.shift ..]) |entry| {\n                if (entry.hash >= hash) {\n                    if (!ctx.eql(entry.key, key)) {\n                        return false;\n                    }"}
{"instruction":"Write a Zig const similar to ret from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const ret: bool = webui_set_tls_certificate(\"-----BEGIN\n/// CERTIFICATE-----\\n...\", \"-----BEGIN PRIVATE KEY-----\\n...\");"}
{"instruction":"Write a Zig function similar to handlePinchEnd from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handlePinchEnd(\n    listener: *wl.Listener(*wlr.Pointer.event.PinchEnd),\n    event: *wlr.Pointer.event.PinchEnd,\n) void {\n    const cursor: *Cursor = @fieldParentPtr(\"pinch_end\", listener);\n    server.input_manager.pointer_gestures.sendPinchEnd(\n        cursor.seat.wlr_seat,\n        event.time_msec,\n        event.cancelled,\n    );\n}"}
{"instruction":"Write a Zig function similar to ev_ctl from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"fn ev_ctl(self: *EvLoop, op: c_int, fd: c_int, ev: ?*Ev) bool {\n    cc.epoll_ctl(self.epfd, op, fd, ev) orelse {\n        const op_name = switch (op) {\n            c.EPOLL_CTL_ADD => \"ADD\",\n            c.EPOLL_CTL_MOD => \"MOD\",\n            c.EPOLL_CTL_DEL => \"DEL\",\n            else => unreachable,\n        }"}
{"instruction":"Write a Zig function similar to __f64 from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/c.zig","output":"fn __f64(x: anytype) @TypeOf(x) {\n    _ = &x;\n    return x;\n}"}
{"instruction":"Write a Zig const similar to OCW_BINARY_COUNT_BINARY from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const OCW_BINARY_COUNT_BINARY: u8 = 0x00;"}
{"instruction":"Write a Zig function similar to checkAhead from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn checkAhead(self: *Self, tag: Token.Type, n: usize) !bool {\n    // Parse tokens if we didn't already look that far ahead\n    while (n + 1 > self.ast.tokens.len - self.current_token.? - 1) {\n        while (true) {\n            const token = try self.scanner.?.scanToken();\n            _ = try self.ast.appendToken(token);\n\n            if (token.tag == .Eof) {\n                return false;\n            }"}
{"instruction":"Write a Zig function similar to OP_FCONTAINER_INSTANCE from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_FCONTAINER_INSTANCE(self: *Self, location: Ast.TokenIndex) !void {\n    try self.emitOpCode(location, .OP_FCONTAINER_INSTANCE);\n}"}
{"instruction":"Write a Zig function similar to nextBreakpointID from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn nextBreakpointID(self: *Self) types.BID {\n        return types.BID.from(self.max_breakpoint_id.fetchAdd(1, .seq_cst));\n    }"}
{"instruction":"Write a Zig function similar to system_time from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn system_time() usize {\n        return @as(usize, @bitCast(sys_time()));\n    }"}
{"instruction":"Write a Zig function similar to callStaticObjectMethod from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/jni.zig","output":"fn callStaticObjectMethod(class: Class, name: [:0]const u8, signature: [:0]const u8, args: anytype) Error!android.jobject {\n            const method_id = try class.jni.invokeJni(.GetStaticMethodID, .{ class.class, name, signature }"}
{"instruction":"Write a Zig function similar to getLabelName from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig","output":"pub fn getLabelName(self: DebugMarker) []const u8 {\n        return self.data.label.namePtr[0..self.data.label.nameLen];\n    }"}
{"instruction":"Write a Zig function similar to main from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/calling-c/translate-c.zig","output":"pub fn main() !void {\n    const x: f32 = 1772.94122;\n    _ = c.printf(\"%.3f\\n\", x);\n}"}
{"instruction":"Write a Zig const similar to f29 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f29: u21 = 57392;"}
{"instruction":"Write a Zig function similar to errorSetMerge from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn errorSetMerge(ip: *InternPool, gpa: Allocator, a_ty: Index, b_ty: Index) Allocator.Error!Index {\n    assert(ip.zigTypeTag(a_ty) == .error_set);\n    assert(ip.zigTypeTag(b_ty) == .error_set);\n\n    // Anything merged with anyerror is anyerror.\n    if (a_ty == .anyerror_type or b_ty == .anyerror_type) {\n        return .anyerror_type;\n    }"}
{"instruction":"Write a Zig const similar to left from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const left: u21 = 57350;"}
{"instruction":"Write a Zig const similar to result from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"const result: AddHealth = .{\n\t\t\t\t.target = try reader.readInt(u32),\n\t\t\t\t.health = @bitCast(try reader.readInt(u32)),\n\t\t\t\t.cause = try reader.readEnum(main.game.DamageType),\n\t\t\t};"}
{"instruction":"Write a Zig function similar to pop_qmsg from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"fn pop_qmsg(self: *TCP) ?*RcMsg {\n        const qmsg = self.send_list.pop(true) orelse return null;\n        self.on_send_msg(qmsg);\n        return qmsg;\n    }"}
{"instruction":"Write a Zig function similar to rotateZ from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig","output":"pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tcomptime var rotationTable: [4][6]u8 = undefined;\n\tcomptime for(0..6) |i| {\n\t\trotationTable[0][i] = i;\n\t}"}
{"instruction":"Write a Zig struct similar to history from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/compressions/deflate/consts.zig","output":"pub const history = struct {\n    pub const len = match.max_distance;\n}"}
{"instruction":"Write a Zig function similar to add from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/classes.zig","output":"pub fn add(args: struct { x: i32, y: i32 }) i32 {\n        return args.x + args.y;\n    }"}
{"instruction":"Write a Zig const similar to pause from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const pause: u21 = 57362;"}
{"instruction":"Write a Zig function similar to forward from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/modernbert.zig","output":"pub fn forward(\n        self: ModernBertAttention,\n        hidden_states: Tensor,\n        global_mask: Tensor,\n        local_mask: Tensor,\n    ) Tensor {\n        const batch_size = hidden_states.shape().dim(0);\n        const seq_length = hidden_states.shape().dim(1);\n        const hidden_size = hidden_states.shape().dim(2);\n        const num_heads = self.num_heads;\n        const head_dim = @divExact(hidden_size, num_heads);\n\n        // Project to query, key, value - { batch_size, seq_len, 3 * num_heads * head_dim }"}
{"instruction":"Write a Zig const similar to num_lock from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const num_lock: u21 = 57360;"}
{"instruction":"Write a Zig function similar to postEvent from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Loop.zig","output":"pub fn postEvent(self: *Self, event: T) void {\n            self.queue.push(event);\n        }"}
{"instruction":"Write a Zig function similar to genTrait from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig","output":"fn genTrait(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .trait);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Any, true, node);\n    const exprv = try genExpr(c, data.expr, Cstr.simpleRetain);\n    try initTempValue(c, exprv, node);\n\n    const key = VtableKey{ .type = data.expr_t, .trait = data.trait_t }"}
{"instruction":"Write a Zig function similar to deinit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn deinit(self: *Self, allocator: std.mem.Allocator) void {\n    self.tokens.deinit(allocator);\n    self.nodes.deinit(allocator);\n}"}
{"instruction":"Write a Zig const similar to arg_len from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const arg_len: usize = webui_interface_get_size_at(my_window, e.event_number, 0);"}
{"instruction":"Write a Zig const similar to f5 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f5: u21 = 57368;"}
{"instruction":"Write a Zig function similar to isBusy from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/rtc.zig","output":"fn isBusy() bool {\n    return (cmos.readStatusRegister(cmos.StatusRegister.A, false) & 0x80) != 0;\n}"}
{"instruction":"Write a Zig struct similar to Server from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: examples/discovery/client.zig","output":"const Server = struct {\n    const Self = @This();\n    address: network.Address,\n    name: []u8,\n\n    pub fn format(value: Self, writer: anytype) !void {\n        try writer.print(\"Server: {f}"}
{"instruction":"Write a Zig function similar to fromColor from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Color.zig","output":"pub fn fromColor(color: Color) HSV {\n        const r: f32 = @as(f32, @floatFromInt(color.r)) / 255.0;\n        const g: f32 = @as(f32, @floatFromInt(color.g)) / 255.0;\n        const b: f32 = @as(f32, @floatFromInt(color.b)) / 255.0;\n        const a: f32 = @as(f32, @floatFromInt(color.a)) / 255.0;\n\n        const max = @max(r, g, b);\n        const min = @min(r, g, b);\n        const delta = max - min;\n\n        const h = 60 * (if (delta == 0)\n            0\n        else if (max == r)\n            @mod((g - b) / delta, 6)\n        else if (max == g)\n            (b - r) / delta + 2\n        else if (max == b)\n            (r - g) / delta + 4\n        else\n            unreachable);\n\n        const s = if (max == 0) 0 else delta / max;\n\n        return .{ .h = h, .s = s, .v = max, .a = a }"}
{"instruction":"Write a Zig function similar to run from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn run(_: Close, _: NeverFailingAllocator, _: *Command, _: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig function similar to init from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Config.zig","output":"pub fn init() !Config {\n    const xkb_context = xkb.Context.new(.no_flags) orelse return error.XkbContextFailed;\n    defer xkb_context.unref();\n\n    // Passing null here indicates that defaults from libxkbcommon and\n    // its XKB_DEFAULT_LAYOUT, XKB_DEFAULT_OPTIONS, etc. should be used.\n    const keymap = xkb.Keymap.newFromNames(xkb_context, null, .no_flags) orelse return error.XkbKeymapFailed;\n    defer keymap.unref();\n\n    var config = Config{\n        .mode_to_id = std.StringHashMap(u32).init(util.gpa),\n        .modes = try std.ArrayListUnmanaged(Mode).initCapacity(util.gpa, 2),\n        .xkb_context = xkb_context.ref(),\n        .keymap = keymap.ref(),\n    }"}
{"instruction":"Write a Zig const similar to id from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/c.zig","output":"const id: usize = webui_get_parent_process_id(my_window);"}
{"instruction":"Write a Zig function similar to OP_TAIL_CALL_INSTANCE_PROPERTY from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Codegen.zig","output":"fn OP_TAIL_CALL_INSTANCE_PROPERTY(self: *Self, location: Ast.TokenIndex, field_idx: u24) !void {\n    try self.emitCodeArg(\n        location,\n        .OP_TAIL_CALL_INSTANCE_PROPERTY,\n        field_idx,\n    );\n}"}
{"instruction":"Write a Zig function similar to closeScope from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn closeScope(self: *Self, upto_depth: usize) ![]Chunk.OpCode {\n    const current = self.current.?;\n    var closing = std.ArrayList(Chunk.OpCode).empty;\n\n    var local_count = current.local_count;\n    while (local_count > 0 and current.locals[local_count - 1].depth > upto_depth - 1) {\n        if (current.locals[local_count - 1].captured) {\n            try closing.append(self.gc.allocator, .OP_CLOSE_UPVALUE);\n        }"}
{"instruction":"Write a Zig function similar to isSinglePointer from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn isSinglePointer(ip: *InternPool, ty: Index) bool {\n    return switch (ip.indexToKey(ty)) {\n        .pointer_type => |pointer_info| pointer_info.flags.size == .one,\n        else => false,\n    }"}
{"instruction":"Write a Zig function similar to getPythonIncludePath from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: build.zig","output":"fn getPythonIncludePath(\n    python_exe: []const u8,\n    allocator: std.mem.Allocator,\n) ![]const u8 {\n    const includeResult = try runProcess(.{\n        .allocator = allocator,\n        .argv = &.{ python_exe, \"-c\", \"import sysconfig; print(sysconfig.get_path('include'), end='')\" }"}
{"instruction":"Write a Zig const similar to fxOgg from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/audio/sound_loading.zig","output":"const fxOgg: rl.Sound = try rl.loadSound(\"resources/audio/target.ogg\");"}
{"instruction":"Write a Zig function similar to getStatScore95 from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/main.zig","output":"pub fn getStatScore95(df: ?u64) f64 {\n    if (df) |dff| {\n        const dfv: usize = @intCast(dff);\n        if (dfv <= 30) {\n            return t_table95_1to30[dfv - 1];\n        }"}
{"instruction":"Write a Zig function similar to addWatchExpression from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn addWatchExpression(self: *Self, alloc: Allocator, expression: String) Allocator.Error!void {\n        const z = trace.zone(@src());\n        defer z.end();\n\n        const e = try strings.clone(alloc, expression);\n        errdefer alloc.free(e);\n\n        try self.watch_expressions.append(alloc, e);\n    }"}
{"instruction":"Write a Zig const similar to rotationTable from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig","output":"const rotationTable: [4][2*centerRotations + sideRotations]u8 = .{\n\t\t.{\n\t\t\t0,  1,  2,  3,  4,  5,  6,  7,\n\t\t\t8,  9,  10, 11, 12, 13, 14, 15,\n\t\t\t16, 17, 18, 19,\n\t\t},\n\t\t.{\n\t\t\t2,  3,  4,  5,  6,  7,  0, 1,\n\t\t\t10, 11, 12, 13, 14, 15, 8, 9,\n\t\t\t17, 18, 19, 16,\n\t\t},\n\t\t.{\n\t\t\t4,  5,  6,  7,  0, 1, 2,  3,\n\t\t\t12, 13, 14, 15, 8, 9, 10, 11,\n\t\t\t18, 19, 16, 17,\n\t\t},\n\t\t.{\n\t\t\t6,  7,  0,  1,  2,  3,  4,  5,\n\t\t\t14, 15, 8,  9,  10, 11, 12, 13,\n\t\t\t19, 16, 17, 18,\n\t\t},\n\t};"}
{"instruction":"Write a Zig const similar to target from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/cdc/runner.zig","output":"const target: []tb.ChangeEvent = runner.buffer.get_producer_buffer();"}
{"instruction":"Write a Zig struct similar to Document from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/document.zig","output":"pub const Document = struct {\n    node: Node,\n    allocator: std.mem.Allocator,\n    style_sheets: std.ArrayList(StyleSheet),\n\n    /// Creates a new document.\n    pub fn init(allocator: std.mem.Allocator) !*Document {\n        var document = try allocator.create(Document);\n        document.* = .{\n            .node = .{\n                .owner_document = document,\n                .node_type = .document,\n                .layout = .{\n                    .style = .{ .display = .block, .width = .{ .percent = 100 }"}
{"instruction":"Write a Zig function similar to testResolvePeerTypes from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn testResolvePeerTypes(ip: *InternPool, a: Index, b: Index, expected: Index) !void {\n    try ip.testResolvePeerTypesInOrder(a, b, expected);\n    try ip.testResolvePeerTypesInOrder(b, a, expected);\n}"}
{"instruction":"Write a Zig function similar to declarePlaceholder from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn declarePlaceholder(self: *Self, name: Ast.TokenIndex, placeholder: ?*obj.ObjTypeDef) Error!usize {\n    var placeholder_type: *obj.ObjTypeDef = undefined;\n\n    if (placeholder) |uplaceholder| {\n        placeholder_type = uplaceholder;\n    }"}
{"instruction":"Write a Zig function similar to match from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: common/globber.zig","output":"pub fn match(s: []const u8, glob: []const u8) bool {\n    if (std.debug.runtime_safety) {\n        validate(glob) catch unreachable;\n    }"}
{"instruction":"Write a Zig const similar to expected_loc from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"const expected_loc: offsets.Loc = .{ .start = 19, .end = 26 };"}
{"instruction":"Write a Zig function similar to handleSubordinateStoppedAlreadyLocked from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn handleSubordinateStoppedAlreadyLocked(self: *Self, scratch: Allocator, req: proto.SubordinateStoppedRequest) !void {\n            defer self.stateUpdated();\n\n            if (self.data.subordinate == null) return;\n\n            // we received a signal that we don't care about, so don't actually pause the debugger\n            if (!req.flags.should_stop_debugger) {\n                try self.continueExecution(.{}"}
{"instruction":"Write a Zig function similar to beginScope from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn beginScope(self: *Self, at: ?Ast.Node.Index) !void {\n    try self.current.?.scopes.append(self.gc.allocator, at);\n    self.current.?.scope_depth += 1;\n}"}
{"instruction":"Write a Zig function similar to dropInside from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn dropInside(self: BlockDropLocation, pos: Vec3i, _drop: main.blocks.BlockDrop) void {\n\t\t\t\tfor(_drop.items) |itemStack| {\n\t\t\t\t\tmain.server.world.?.drop(itemStack.clone(), self.insidePos(pos), self.dropDir(), self.dropVelocity());\n\t\t\t\t}"}
{"instruction":"Write a Zig function similar to __del__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/buffers.zig","output":"pub fn __del__(self: *Self) void {\n        py.allocator.free(self.values);\n        py.allocator.free(self.shape);\n    }"}
{"instruction":"Write a Zig function similar to makeHandler from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn makeHandler(comptime syscall: syscalls.Syscall) Handler {\n    return struct {\n        fn func(ctx: *const arch.CpuState, arg1: usize, arg2: usize, arg3: usize, arg4: usize, arg5: usize) anyerror!usize {\n            return syscalls.handle(syscall, ctx, arg1, arg2, arg3, arg4, arg5);\n        }"}
{"instruction":"Write a Zig function similar to reset from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig","output":"pub fn reset() void {\n\tbranchModels.clearRetainingCapacity();\n}"}
{"instruction":"Write a Zig function similar to ref from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn ref(self: *Fd) *Fd {\n        self.rc.ref();\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to deinit from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub fn deinit(self: Components, allocator: std.mem.Allocator) void {\n            switch (self) {\n                .AnonymousObjectType => allocator.free(self.AnonymousObjectType.fields),\n                .Block => allocator.free(self.Block),\n                .BlockExpression => allocator.free(self.BlockExpression),\n                .Call => allocator.free(self.Call.arguments),\n                .Enum => allocator.free(self.Enum.cases),\n                .Export => if (self.Export.name) |name| allocator.free(name) else void,\n                .For => {\n                    allocator.free(self.For.init_declarations);\n                    allocator.free(self.For.post_loop);\n                }"}
{"instruction":"Write a Zig function similar to updateOutputFocus from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn updateOutputFocus(cursor: Cursor, lx: f64, ly: f64) void {\n    if (server.root.output_layout.outputAt(lx, ly)) |wlr_output| {\n        const output: *Output = @ptrFromInt(wlr_output.data);\n        cursor.seat.focusOutput(output);\n    }"}
{"instruction":"Write a Zig struct similar to StartOptions from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/App.zig","output":"pub const StartOptions = struct {\n    /// The initial size of the application window\n    size: dvui.Size,\n    /// Set the minimum size of the window\n    min_size: ?dvui.Size = null,\n    /// Set the maximum size of the window\n    max_size: ?dvui.Size = null,\n    vsync: bool = true,\n    /// The application title to display\n    title: [:0]const u8,\n    /// content of a PNG image (or any other format stb_image can load)\n    /// tip: use @embedFile\n    icon: ?[]const u8 = null,\n    /// use when running tests\n    hidden: bool = false,\n    /// Will be passed to `dvui.Window.init`\n    ///\n    /// Options like `keybinds` should be used with care as it will\n    /// be used for all backends and platforms, meaning the platform\n    /// defaults will be overrulled.\n    window_init_options: dvui.Window.InitOptions = .{}"}
{"instruction":"Write a Zig function similar to fromSocketAddress from ikskuh/zig-network","input":"Repository: ikskuh/zig-network (592 ⭐)\nFile: network.zig","output":"pub fn fromSocketAddress(src: *const std.posix.sockaddr, size: usize) !Self {\n        switch (src.family) {\n            std.posix.AF.INET => {\n                if (size < @sizeOf(std.posix.sockaddr.in))\n                    return error.InsufficientBytes;\n                const value: *align(4) const std.posix.sockaddr.in = @ptrCast(@alignCast(src));\n                return EndPoint{\n                    .port = std.mem.bigToNative(u16, value.port),\n                    .address = .{\n                        .ipv4 = .{\n                            .value = @bitCast(value.addr),\n                        }"}
{"instruction":"Write a Zig struct similar to State from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"const State = struct {\n    const Self = @This();\n\n    shutdown_wg: WaitGroup = .{}"}
{"instruction":"Write a Zig function similar to createComment from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/document.zig","output":"pub fn createComment(self: *Document, data: []const u8) !*CharacterData {\n        var text = try self.allocator.create(CharacterData);\n        text.* = .{\n            .node = .{\n                .owner_document = self,\n                .node_type = .comment,\n                .layout = .{\n                    .style = .{ .display = .none }"}
{"instruction":"Write a Zig const similar to f9 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f9: u21 = 57372;"}
{"instruction":"Write a Zig function similar to floatBits from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn floatBits(ip: *InternPool, ty: Index, target: std.Target) u16 {\n    _ = ip;\n    return switch (ty) {\n        .f16_type => 16,\n        .f32_type => 32,\n        .f64_type => 64,\n        .f80_type => 80,\n        .f128_type, .comptime_float_type => 128,\n        .c_longdouble_type => target.cTypeBitSize(.longdouble),\n\n        else => unreachable,\n    }"}
{"instruction":"Write a Zig const similar to f20 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f20: u21 = 57383;"}
{"instruction":"Write a Zig const similar to f17 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f17: u21 = 57380;"}
{"instruction":"Write a Zig function similar to collectImports from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn collectImports(allocator: std.mem.Allocator, tree: Ast) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to toLinearFast from zigimg/zigimg","input":"Repository: zigimg/zigimg (690 ⭐)\nFile: src/color.zig","output":"pub fn toLinearFast(value: f32) f32 {\n            return removeGamma(value, params.display_gamma);\n        }"}
{"instruction":"Write a Zig function similar to stepOutOf from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: src/debugger/debugger.zig","output":"fn stepOutOf(self: *Self, scratch: Allocator, bpp: BreakpointAndPID) !void {\n            const z = trace.zone(@src());\n            defer z.end();\n\n            //\n            // @SEARCH: STEPOUT\n            //\n            // Find the next source instruction past the caller's frame base address, then continue\n            // until it is hit. This is equivalent to \"pop up the stack one, and step once\". Note\n            // that in the case of recursive functions, this is not sufficient because we may be at\n            // depth 2, but may be recursing until depth 10, which means that the first time we hit\n            // the breakpoint at the base frame address, we will be at max depth. So, when we hit\n            // those breakpoints, we repeatedly ignore them until we're at the correct depth, or we\n            // hit some other breakpoint along the way.\n            //\n\n            const frames = self.data.subordinate.?.paused.?.stack_frames;\n            if (frames.len > 1) {\n                // attempt to find the next line of code\n                var addr = frames[1].address;\n                if (self.functionAtAddr(addr)) |func| {\n                    for (func.func.statements) |stmt| {\n                        if (stmt.breakpoint_addr.int() >= addr.int()) {\n                            addr = stmt.breakpoint_addr;\n                            break;\n                        }"}
{"instruction":"Write a Zig function similar to forStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn forStatement(self: *Self) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    try self.consume(.LeftParen, \"Expected `(` after `for`.\");\n\n    try self.beginScope(null);\n\n    // Should be either VarDeclaration or expression\n    var init_declarations = std.ArrayList(Ast.Node.Index).empty;\n    while (!self.check(.Semicolon) and !self.check(.Eof)) {\n        try self.consume(.Identifier, \"Expected identifier\");\n        const identifier = self.current_token.? - 1;\n\n        try init_declarations.append(\n            self.gc.allocator,\n            try self.varDeclaration(\n                identifier,\n                if (try self.match(.Colon))\n                    try self.parseTypeDef(null, true)\n                else\n                    null,\n                .Nothing,\n                false,\n                true,\n                true,\n                false,\n            ),\n        );\n\n        self.markInitialized();\n\n        if (!self.check(.Semicolon)) {\n            try self.consume(.Comma, \"Expected `,` after for loop variable\");\n        }"}
{"instruction":"Write a Zig function similar to textureCreateTarget from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn textureCreateTarget(self: Backend, width: u32, height: u32, interpolation: dvui.enums.TextureInterpolation) TextureError!dvui.TextureTarget {\n    return self.impl.textureCreateTarget(width, height, interpolation);\n}"}
{"instruction":"Write a Zig const similar to expected_hz from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const expected_hz: u32 = 10027;"}
{"instruction":"Write a Zig function similar to main from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/input_mouse_wheel.zig","output":"pub fn main() anyerror!void {\n    // Initialization\n    //--------------------------------------------------------------------------------------\n    const screenWidth = 800;\n    const screenHeight = 450;\n\n    rl.initWindow(screenWidth, screenHeight, \"raylib-zig [core] example - basic window\");\n    defer rl.closeWindow(); // Close window and OpenGL context\n\n    var boxPositionY: f32 = screenHeight / 2 - 40;\n    const scrollSpeed: f32 = 4; // Scrolling speed in pixels\n\n    rl.setTargetFPS(60); // Set our game to run at 60 frames-per-second\n    //--------------------------------------------------------------------------------------\n\n    // Main game loop\n    while (!rl.windowShouldClose()) { // Detect window close button or ESC key\n        // Update\n        //----------------------------------------------------------------------------------\n        boxPositionY -= (rl.getMouseWheelMove() * scrollSpeed);\n        //----------------------------------------------------------------------------------\n\n        // Draw\n        //----------------------------------------------------------------------------------\n        rl.beginDrawing();\n        defer rl.endDrawing();\n\n        rl.clearBackground(.white);\n\n        rl.drawRectangle(screenWidth / 2 - 40, @as(i32, @intFromFloat(boxPositionY)), 80, 80, .maroon);\n\n        rl.drawText(\"Use mouse wheel to move the cube up and down!\", 10, 10, 20, .gray);\n\n        rl.drawText(\n            rl.textFormat(\"Box position Y: %03i\", .{@as(i32, @intFromFloat(boxPositionY))}"}
{"instruction":"Write a Zig function similar to resolveTypeOfNodeUncached from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"fn resolveTypeOfNodeUncached(analyser: *Analyser, options: ResolveOptions) error{OutOfMemory}"}
{"instruction":"Write a Zig const similar to OCW_SELECT_COUNTER_1 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const OCW_SELECT_COUNTER_1: u8 = 0x40;"}
{"instruction":"Write a Zig function similar to run from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn run(self: FillFromCreative, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, mode: Gamemode) error{serverFailure}"}
{"instruction":"Write a Zig struct similar to DateTime from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/rtc.zig","output":"pub const DateTime = struct {\n    second: u32,\n    minute: u32,\n    hour: u32,\n    day: u32,\n    month: u32,\n    year: u32,\n    century: u32,\n    day_of_week: u32,\n}"}
{"instruction":"Write a Zig function similar to raise_value_error from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/exceptions.zig","output":"pub fn raise_value_error(args: struct { message: py.PyString }) !void {\n    return py.ValueError(root).raise(try args.message.asSlice());\n}"}
{"instruction":"Write a Zig const similar to WIDTH_PADDING from andrewrk/poop","input":"Repository: andrewrk/poop (1708 ⭐)\nFile: src/progress.zig","output":"const WIDTH_PADDING: usize = 100;"}
{"instruction":"Write a Zig const similar to right from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const right: u21 = 57351;"}
{"instruction":"Write a Zig function similar to clipboardText from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn clipboardText(self: Backend) GenericError![]const u8 {\n    return try self.impl.clipboardText();\n}"}
{"instruction":"Write a Zig function similar to updateDrawFrame from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/basic_window_web.zig","output":"fn updateDrawFrame() void {\n    // Update\n    //----------------------------------------------------------------------------------\n    // TODO: Update your variables here\n    //----------------------------------------------------------------------------------\n\n    // Draw\n    //----------------------------------------------------------------------------------\n    rl.beginDrawing();\n    defer rl.endDrawing();\n\n    rl.clearBackground(.white);\n\n    rl.drawText(\"Congrats! You created your first window!\", 190, 200, 20, .light_gray);\n    //----------------------------------------------------------------------------------\n}"}
{"instruction":"Write a Zig function similar to serialize from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig","output":"fn serialize(self: DepositOrSwap, writer: *utils.BinaryWriter) void {\n\t\t\tself.dest.write(writer);\n\t\t\tself.source.write(writer);\n\t\t}"}
{"instruction":"Write a Zig function similar to reexposed from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/classes.zig","output":"pub fn reexposed(self: *const Self) i32 {\n        // return self.get_number();\n        return self.number;\n    }"}
{"instruction":"Write a Zig function similar to recursive from jcalabro/uscope","input":"Repository: jcalabro/uscope (1003 ⭐)\nFile: assets/zigrecursion/main.zig","output":"fn recursive(depth: *i32) void {\n    if (depth.* > max_depth) {\n        return;\n    }"}
{"instruction":"Write a Zig const similar to event_size from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client/echo_client.zig","output":"const event_size: usize = switch (operation) {\n                inline else => |operation_comptime| @sizeOf(\n                    StateMachine.EventType(operation_comptime),\n                ),\n            };"}
{"instruction":"Write a Zig function similar to get_tick_freq from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn get_tick_freq() TimeError!usize {\n        const ret = sys_tickfreq();\n        return if (ret == -1) TimeError.UnknownTickFreq else @as(usize, @bitCast(ret));\n    }"}
{"instruction":"Write a Zig function similar to wait_readable from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn wait_readable(self: *EvLoop, fdobj: *Fd) ?void {\n    self.add_listener(fdobj, .read, @frame());\n    suspend {}"}
{"instruction":"Write a Zig const similar to args from hexops/mach","input":"Repository: hexops/mach (4289 ⭐)\nFile: src/core/Darwin.zig","output":"const args: *Args = @ptrCast(&block.context);"}
{"instruction":"Write a Zig function similar to rest from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"pub fn rest(self: *Tokenizer) []const u8 {\n        return self.input[self.pos..];\n    }"}
{"instruction":"Write a Zig function similar to toNode from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn toNode(scope_handle: ScopeWithHandle) Ast.Node.Index {\n        if (scope_handle.scope == Scope.Index.root) return .root;\n        var doc_scope = scope_handle.handle.getDocumentScopeCached();\n        return doc_scope.getScopeAstNode(scope_handle.scope).?;\n    }"}
{"instruction":"Write a Zig const similar to droppedFiles from raylib-zig/raylib-zig","input":"Repository: raylib-zig/raylib-zig (1396 ⭐)\nFile: examples/core/drop_files.zig","output":"const droppedFiles: rl.FilePathList = rl.loadDroppedFiles();"}
{"instruction":"Write a Zig function similar to generateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig","output":"pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, relativeDir: Vec3i, neighbor: ?Neighbor, currentData: *Block, neighborBlock: Block, _: bool) bool {\n\tif(neighbor == null) return false;\n\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\tconst neighborSupport = !neighborBlock.replacable() and neighborModel.neighborFacingQuads[neighbor.?.reverse().toInt()].len != 0;\n\tif(!neighborSupport) return false;\n\tvar data: TorchData = @bitCast(@as(u5, @truncate(currentData.data)));\n\tif(relativeDir[0] == 1) data.posX = true;\n\tif(relativeDir[0] == -1) data.negX = true;\n\tif(relativeDir[1] == 1) data.posY = true;\n\tif(relativeDir[1] == -1) data.negY = true;\n\tif(relativeDir[2] == -1) data.center = true;\n\tif(@as(u5, @bitCast(data)) != currentData.data) {\n\t\tcurrentData.data = @as(u5, @bitCast(data));\n\t\treturn true;\n\t}"}
{"instruction":"Write a Zig function similar to updateElement from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/document.zig","output":"fn updateElement(self: *Document, element: *Element) void {\n        // clear\n        element.node.layout.style = .{}"}
{"instruction":"Write a Zig function similar to Result from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"pub fn Result(\n    comptime Id: type,\n    comptime params: []const Param(Id),\n    comptime value_parsers: anytype,\n) type {\n    return struct {\n        args: Arguments(Id, params, value_parsers, .slice),\n        positionals: Positionals(Id, params, value_parsers, .slice),\n        exe_arg: ?[]const u8,\n        arena: std.heap.ArenaAllocator,\n\n        pub fn deinit(result: @This()) void {\n            result.arena.deinit();\n        }"}
{"instruction":"Write a Zig function similar to testHelp from Hejsil/zig-clap","input":"Repository: Hejsil/zig-clap (1343 ⭐)\nFile: clap.zig","output":"fn testHelp(opt: HelpOptions, str: []const u8) !void {\n    const params = try parseParams(std.testing.allocator, str);\n    defer std.testing.allocator.free(params);\n\n    var buf: [2048]u8 = undefined;\n    var writer = std.Io.Writer.fixed(&buf);\n    try help(&writer, Help, params, opt);\n    try std.testing.expectEqualStrings(str, writer.buffered());\n}"}
{"instruction":"Write a Zig function similar to cancel from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig","output":"pub fn cancel(self: *Fd) void {\n        if (self.canceled)\n            return;\n\n        self.canceled = true;\n\n        _ = self.ref();\n        defer self.unref();\n\n        if (self.read_frame) |frame|\n            co.do_resume(frame);\n\n        if (self.write_frame) |frame|\n            co.do_resume(frame);\n\n        assert(self.read_frame == null);\n        assert(self.write_frame == null);\n    }"}
{"instruction":"Write a Zig function similar to resetLine from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"fn resetLine(self: *Self) void {\n            self.current_line_empty = true;\n            self.indent_next_line = 0;\n        }"}
{"instruction":"Write a Zig function similar to literal from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn literal(self: *Self, _: bool) Error!Ast.Node.Index {\n    var node = Ast.Node{\n        .tag = undefined,\n        .location = self.current_token.? - 1,\n        .end_location = self.current_token.? - 1,\n        .components = undefined,\n    }"}
{"instruction":"Write a Zig function similar to fun from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn fun(self: *Self, _: bool) Error!Ast.Node.Index {\n    return try self.function(null, .Anonymous, null);\n}"}
{"instruction":"Write a Zig function similar to floatGreaterEq from fubark/cyber","input":"Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig","output":"pub fn floatGreaterEq(vm: *cy.VM) Value {\n    return Value.initBool(vm.getFloat(0) >= vm.getFloat(1));\n}"}
{"instruction":"Write a Zig function similar to parseGenericResolve from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseGenericResolve(self: *Self, callee_type_def: *obj.ObjTypeDef, expr: ?Ast.Node.Index) Error!Ast.Node.Index {\n    const start_location = if (expr) |e|\n        self.ast.nodes.items(.location)[e]\n    else\n        self.current_token.? - 1;\n\n    var resolved_generics = std.ArrayList(Ast.Node.Index).empty;\n    var resolved_generics_types = std.ArrayList(*obj.ObjTypeDef).empty;\n\n    try self.consume(.Less, \"Expected `<` at start of generic types list\");\n\n    while (!self.check(.Greater) and !self.check(.Eof)) {\n        const resolved_generic = try self.parseTypeDef(null, true);\n\n        if (callee_type_def.def_type == .Any) {\n            self.reportErrorAtNode(\n                .any_generic,\n                resolved_generic,\n                \"`any` not allowed as generic type\",\n                .{}"}
{"instruction":"Write a Zig function similar to Closeable from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"fn Closeable(comptime T: type, comptime StreamT: type) fn (T) anyerror!void {\n    return struct {\n        const Self = T;\n        const CloseResult = xev.CloseError!void;\n        pub fn close(self: Self) anyerror!void {\n            const ResultT = CloseResult;\n            const Data = struct {\n                result: ResultT = undefined,\n                frame: ?Frame = null,\n\n                fn callback(\n                    userdata: ?*@This(),\n                    l: *xev.Loop,\n                    c: *xev.Completion,\n                    s: StreamT,\n                    result: ResultT,\n                ) xev.CallbackAction {\n                    _ = l;\n                    _ = c;\n                    _ = s;\n                    const data = userdata.?;\n                    data.result = result;\n                    if (data.frame != null) libcoro.xresume(data.frame.?);\n                    return .disarm;\n                }"}
{"instruction":"Write a Zig function similar to method from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn method(self: *Self, abstract: bool, static: bool, this: *obj.ObjTypeDef) Error!Ast.Node.Index {\n    try self.consume(.Identifier, \"Expected method name.\");\n\n    return try self.function(\n        self.current_token.? - 1,\n        if (abstract)\n            .Abstract\n        else if (static)\n            .Function\n        else\n            .Method,\n        this,\n    );\n}"}
{"instruction":"Write a Zig function similar to Pollable from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"fn Pollable(comptime T: type, comptime StreamT: type) fn (T) anyerror!void {\n    return struct {\n        const PollResult = xev.PollError!void;\n        pub fn poll(self: T) anyerror!void {\n            const ResultT = PollResult;\n            const Data = struct {\n                result: ResultT = undefined,\n                frame: ?Frame = null,\n\n                fn callback(\n                    userdata: ?*@This(),\n                    l: *xev.Loop,\n                    c: *xev.Completion,\n                    s: StreamT,\n                    result: ResultT,\n                ) xev.CallbackAction {\n                    _ = l;\n                    _ = c;\n                    _ = s;\n                    const data = userdata.?;\n                    data.result = result;\n                    if (data.frame != null) libcoro.xresume(data.frame.?);\n                    return .disarm;\n                }"}
{"instruction":"Write a Zig const similar to f12 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f12: u21 = 57375;"}
{"instruction":"Write a Zig function similar to unhide from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"pub fn unhide(cursor: *Cursor) void {\n    cursor.hide_cursor_timer.timerUpdate(server.config.cursor_hide_timeout) catch {\n        log.err(\"failed to update cursor hide timeout\", .{}"}
{"instruction":"Write a Zig function similar to getContainerFromArgs from NilsIrl/dockerc","input":"Repository: NilsIrl/dockerc (4820 ⭐)\nFile: src/main.zig","output":"fn getContainerFromArgs(file: std.fs.File, rootfs_absolute_path: []const u8, parentAllocator: std.mem.Allocator) ![*c]c.libcrun_container_t {\n    var arena = std.heap.ArenaAllocator.init(parentAllocator);\n    defer arena.deinit();\n    const allocator = arena.allocator();\n\n    var jsonReader = std.json.reader(allocator, file.reader());\n\n    // TODO: having to specify max_value_len seems like a bug\n    var root_value = try std.json.Value.jsonParse(allocator, &jsonReader, .{ .max_value_len = 99999999 }"}
{"instruction":"Write a Zig struct similar to Export from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Ast.zig","output":"pub const Export = struct {\n    name: ?[]const TokenIndex,\n    alias: ?TokenIndex,\n    declaration: ?Node.Index,\n}"}
{"instruction":"Write a Zig const similar to old from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig","output":"const old: CarpetData = @bitCast(@as(u6, @intCast(rotationTable[a - 1][i])));"}
{"instruction":"Write a Zig function similar to map from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn map(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    var value_type_node: ?Ast.Node.Index = null;\n    var value_type_def: ?*obj.ObjTypeDef = null;\n    var key_type_node: ?Ast.Node.Index = null;\n    var key_type_def: ?*obj.ObjTypeDef = null;\n\n    // A map expression can specify its type `{<str: str>, ...}"}
{"instruction":"Write a Zig function similar to localName from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/element.zig","output":"pub fn localName(el: *Element) []const u8 {\n                return el.local_name;\n            }"}
{"instruction":"Write a Zig function similar to setWindowSize from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: examples/window_management/main.zig","output":"fn setWindowSize(e: *webui.Event, width: i64, height: i64) void {\n    const win = e.getWindow();\n    win.setSize(@intCast(width), @intCast(height));\n    \n    var buffer: [128]u8 = undefined;\n    const response = std.fmt.bufPrint(buffer[0..], \n        \"Size set to {}"}
{"instruction":"Write a Zig function similar to register_log_callback from tigerbeetle/tigerbeetle","input":"Repository: tigerbeetle/tigerbeetle (14142 ⭐)\nFile: src/clients/c/tb_client_exports.zig","output":"pub fn register_log_callback(\n    callback_maybe: ?Logging.Callback,\n    debug: bool,\n) callconv(.c) tb_register_log_callback_status {\n    Logging.global.mutex.lock();\n    defer Logging.global.mutex.unlock();\n    if (Logging.global.callback == null) {\n        if (callback_maybe) |callback| {\n            Logging.global.callback = callback;\n            Logging.global.debug = debug;\n            return .success;\n        }"}
{"instruction":"Write a Zig function similar to updateData from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig","output":"pub fn updateData(block: *Block, neighbor: Neighbor, _: Block) bool {\n\tconst shouldBeBroken = switch(neighbor) {\n\t\t.dirNegX => block.data == 2*centerRotations,\n\t\t.dirNegY => block.data == 2*centerRotations + 1,\n\t\t.dirPosX => block.data == 2*centerRotations + 2,\n\t\t.dirPosY => block.data == 2*centerRotations + 3,\n\t\t.dirDown => block.data < centerRotations,\n\t\t.dirUp => block.data >= centerRotations and block.data < 2*centerRotations,\n\t}"}
{"instruction":"Write a Zig function similar to gracefulUnwrap from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn gracefulUnwrap(self: *Self, _: bool, unwrapped: Ast.Node.Index) Error!Ast.Node.Index {\n    return self.unwrap(false, unwrapped);\n}"}
{"instruction":"Write a Zig function similar to parseObjType from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn parseObjType(self: *Self, generic_types: ?std.AutoArrayHashMapUnmanaged(*obj.ObjString, *obj.ObjTypeDef)) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    try self.consume(.LeftBrace, \"Expected `{` after `obj`\");\n\n    const qualifier = try std.mem.replaceOwned(u8, self.gc.allocator, self.script_name, \"/\", \".\");\n    defer self.gc.allocator.free(qualifier);\n    var qualified_name = std.ArrayList(u8).empty;\n    defer qualified_name.deinit(self.gc.allocator);\n    try qualified_name.writer(self.gc.allocator).print(\"{s}"}
{"instruction":"Write a Zig const similar to modelIndex from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig","output":"const modelIndex: ModelIndex = baseModel.transformModel(rotation.rotationMatrixTransform, .{Mat4f.rotationZ(std.math.pi/2.0)});"}
{"instruction":"Write a Zig function similar to from_str from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn from_str(str: []const u8) ?Proto {\n        const map = if (has_tls) .{\n            .{ .str = \"udp://\", .proto = .udp }"}
{"instruction":"Write a Zig struct similar to UDP from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/asyncio.zig","output":"pub const UDP = struct {\n    const Self = @This();\n\n    exec: *Executor,\n    udp: xev.UDP,\n\n    pub const close = Closeable(Self, xev.UDP);\n    pub const poll = Pollable(Self, xev.UDP);\n\n    pub fn init(exec: *Executor, udp: xev.UDP) Self {\n        return .{ .exec = exec, .udp = udp }"}
{"instruction":"Write a Zig function similar to testCoerce from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn testCoerce(ip: *InternPool, dest_ty: Index, inst: Index, expected: Index) !void {\n    assert(ip.isType(dest_ty));\n\n    const gpa = std.testing.allocator;\n    var arena_allocator: std.heap.ArenaAllocator = .init(gpa);\n    defer arena_allocator.deinit();\n    const arena = arena_allocator.allocator();\n\n    var err_msg: ErrorMsg = undefined;\n    const actual = try ip.coerce(gpa, arena, dest_ty, inst, builtin.target, &err_msg);\n    if (expected == actual) return;\n\n    std.debug.print(\n        \\\\expression: @as({f}"}
{"instruction":"Write a Zig const similar to neighbor from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig","output":"const neighbor: Neighbor = @enumFromInt(rotationTable[a - 1][i] + 2);"}
{"instruction":"Write a Zig function similar to testResolvePeerTypesInOrder from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"fn testResolvePeerTypesInOrder(ip: *InternPool, lhs: Index, rhs: Index, expected: Index) !void {\n    const actual = try resolvePeerTypes(ip, std.testing.allocator, &.{ lhs, rhs }"}
{"instruction":"Write a Zig const similar to end from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const end: u21 = 57357;"}
{"instruction":"Write a Zig function similar to runtimeTests from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn runtimeTests() void {\n    registerSyscall(121, testHandler6) catch |e| panic(@errorReturnTrace(), \"FAILURE registering handler 6: {}"}
{"instruction":"Write a Zig function similar to handleFrame from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleFrame(listener: *wl.Listener(*wlr.Cursor), _: *wlr.Cursor) void {\n    const cursor: *Cursor = @fieldParentPtr(\"frame\", listener);\n    cursor.seat.wlr_seat.pointerNotifyFrame();\n}"}
{"instruction":"Write a Zig function similar to testHandler6 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn testHandler6(ctx: *const arch.CpuState, arg1: usize, arg2: usize, arg3: usize, arg4: usize, arg5: usize) anyerror!usize {\n    // Suppress unused variable warnings\n    _ = ctx;\n    _ = arg1;\n    _ = arg2;\n    _ = arg3;\n    _ = arg4;\n    _ = arg5;\n    return error.OutOfMemory;\n}"}
{"instruction":"Write a Zig function similar to testStatement from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn testStatement(self: *Self) Error!Ast.Node.Index {\n    const node_slot = try self.ast.nodes.addOne(self.gc.allocator);\n    const start_location = self.current_token.? - 1;\n    // We can't consume the name because declareVariable will do it\n    const name_token = self.current_token.?;\n\n    var function_def_placeholder = obj.ObjTypeDef{\n        .def_type = .Function,\n    }"}
{"instruction":"Write a Zig function similar to parseWith from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/values/color.zig","output":"pub fn parseWith(parser: *Parser) !Color {\n        const tok = try parser.tokenizer.next();\n\n        switch (tok) {\n            .ident => if (named(tok.ident)) |c| return c,\n            .function => inline for (.{ \"rgb\", \"rgba\", \"hsl\", \"hsla\" }"}
{"instruction":"Write a Zig function similar to handlePinchUpdate from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handlePinchUpdate(\n    listener: *wl.Listener(*wlr.Pointer.event.PinchUpdate),\n    event: *wlr.Pointer.event.PinchUpdate,\n) void {\n    const cursor: *Cursor = @fieldParentPtr(\"pinch_update\", listener);\n    server.input_manager.pointer_gestures.sendPinchUpdate(\n        cursor.seat.wlr_seat,\n        event.time_msec,\n        event.dx,\n        event.dy,\n        event.scale,\n        event.rotation,\n    );\n}"}
{"instruction":"Write a Zig const similar to print_screen from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const print_screen: u21 = 57361;"}
{"instruction":"Write a Zig function similar to get from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/classes.zig","output":"pub fn get(self: *const Self) !py.PyString {\n            return py.PyString.createFmt(\"Hello, {s}"}
{"instruction":"Write a Zig function similar to drawClippedTriangles from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn drawClippedTriangles(self: Backend, texture: ?dvui.Texture, vtx: []const dvui.Vertex, idx: []const u16, clipr: ?dvui.Rect.Physical) GenericError!void {\n    return self.impl.drawClippedTriangles(texture, vtx, idx, clipr);\n}"}
{"instruction":"Write a Zig const similar to OCW2_ROTATION from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pic.zig","output":"const OCW2_ROTATION: u8 = 0x80;"}
{"instruction":"Write a Zig function similar to handleSwipeBegin from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleSwipeBegin(\n    listener: *wl.Listener(*wlr.Pointer.event.SwipeBegin),\n    event: *wlr.Pointer.event.SwipeBegin,\n) void {\n    const cursor: *Cursor = @fieldParentPtr(\"swipe_begin\", listener);\n    server.input_manager.pointer_gestures.sendSwipeBegin(\n        cursor.seat.wlr_seat,\n        event.time_msec,\n        event.fingers,\n    );\n}"}
{"instruction":"Write a Zig const similar to f28 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f28: u21 = 57391;"}
{"instruction":"Write a Zig function similar to declareVariable from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn declareVariable(\n    self: *Self,\n    node: Ast.Node.Index,\n    variable_type: *obj.ObjTypeDef,\n    name: Ast.TokenIndex,\n    final: bool,\n    mutable: bool,\n    check_name: bool,\n) Error!usize {\n    const lexemes = self.ast.tokens.items(.lexeme);\n    const name_lexeme = lexemes[name];\n\n    if (self.current.?.scope_depth > 0) {\n        // Check a local with the same name doesn't exists\n        if (self.current.?.local_count > 0) {\n            var i: usize = self.current.?.local_count - 1;\n            while (check_name and i >= 0) : (i -= 1) {\n                const local: *Local = &self.current.?.locals[i];\n\n                if (local.depth != -1 and local.depth < self.current.?.scope_depth) {\n                    break;\n                }"}
{"instruction":"Write a Zig function similar to resolveFiber from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn resolveFiber(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    if (self.current.?.scope_depth == 0) {\n        const location = self.ast.tokens.get(self.current_token.? - 1);\n        self.reporter.reportErrorAt(\n            .syntax,\n            location,\n            location,\n            \"`resolve` not allowed in global scope\",\n        );\n    }"}
{"instruction":"Write a Zig const similar to tokens from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: examples/modernbert/main.zig","output":"const tokens: []const u32 = try tokenize(allocator, tokenizer, text);"}
{"instruction":"Write a Zig function similar to instanceStdBuiltinType from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn instanceStdBuiltinType(analyser: *Analyser, type_name: []const u8) error{OutOfMemory}"}
{"instruction":"Write a Zig function similar to qualifiedName from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn qualifiedName(self: *Self) Error![]const Ast.TokenIndex {\n    // Assumes one identifier has already been consumed\n    std.debug.assert(self.ast.tokens.items(.tag)[self.current_token.? - 1] == .Identifier);\n\n    var name = std.ArrayList(Ast.TokenIndex).empty;\n\n    try name.append(self.gc.allocator, self.current_token.? - 1);\n    while ((try self.match(.AntiSlash)) and !self.check(.Eof)) {\n        try self.consume(.Identifier, \"Expected identifier\");\n\n        try name.append(self.gc.allocator, self.current_token.? - 1);\n    }"}
{"instruction":"Write a Zig function similar to remove from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/style_declaration.zig","output":"fn remove(self: *Self, tag: std.meta.Tag(Property)) void {\n            if (self.find(tag)) |i| {\n                _ = self.properties.orderedRemove(i);\n            }"}
{"instruction":"Write a Zig function similar to next from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"pub fn next(self: *Tokenizer) Error!Token {\n        self.space_before = false;\n\n        if (self.consumeNumber()) |num| {\n            if (self.consumeSeq(\"%\")) {\n                return Token{ .dimension = .{ .value = num, .unit = \"percent\" }"}
{"instruction":"Write a Zig function similar to documentElement from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/dom/document.zig","output":"pub fn documentElement(self: *Document) ?*Element {\n        return if (self.node.first_child) |node| node.element() else null;\n    }"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig","output":"pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@min(centerRotations*2 + sideRotations, block.data));\n}"}
{"instruction":"Write a Zig function similar to DDIV from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Jit.zig","output":"fn DDIV(self: *Self, dest: m.MIR_op_t, left: m.MIR_op_t, right: m.MIR_op_t) void {\n    self.append(\n        m.MIR_new_insn_arr(\n            self.ctx,\n            @intFromEnum(m.MIR_Instruction.DDIV),\n            3,\n            &[_]m.MIR_op_t{\n                dest,\n                left,\n                right,\n            }"}
{"instruction":"Write a Zig struct similar to VerticalOffset from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"pub const VerticalOffset = struct {\n    pub const subscript = c.ACCESSKIT_VERTICAL_OFFSET_SUBSCRIPT;\n    pub const superscript = c.ACCESSKIT_VERTICAL_OFFSET_SUPERSCRIPT;\n}"}
{"instruction":"Write a Zig const similar to OCW_SELECT_COUNTER_2 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/pit.zig","output":"const OCW_SELECT_COUNTER_2: u8 = 0x80;"}
{"instruction":"Write a Zig function similar to callable from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: pydust/src/builtins.zig","output":"pub fn callable(comptime root: type, object: anytype) bool {\n    const obj = try py.object(root, object);\n    return ffi.PyCallable_Check(obj.py) == 1;\n}"}
{"instruction":"Write a Zig function similar to raise_custom_error from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/exceptions.zig","output":"pub fn raise_custom_error() !void {\n    return CustomError.Oops;\n}"}
{"instruction":"Write a Zig function similar to updateKeyboardFocus from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn updateKeyboardFocus(cursor: Cursor, result: Root.AtResult) void {\n    switch (result.data) {\n        .view => |view| {\n            cursor.seat.focus(view);\n        }"}
{"instruction":"Write a Zig function similar to typeExpression from buzz-language/buzz","input":"Repository: buzz-language/buzz (1414 ⭐)\nFile: src/Parser.zig","output":"fn typeExpression(self: *Self, _: bool) Error!Ast.Node.Index {\n    const start_location = self.current_token.? - 1;\n\n    const type_def = try self.parseTypeDef(null, true);\n\n    try self.consume(.Greater, \"Expected `>` after type expression.\");\n\n    return try self.ast.appendNode(\n        .{\n            .tag = .TypeExpression,\n            .location = start_location,\n            .end_location = self.current_token.? - 1,\n            .type_def = try self.gc.type_registry.getTypeDef(.{ .def_type = .Type }"}
{"instruction":"Write a Zig function similar to scaleOffset from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"pub fn scaleOffset(self: demoKind) struct { scale: f32, offset: dvui.Point }"}
{"instruction":"Write a Zig struct similar to Slice from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub const Slice = struct {\n        ty: Index,\n        ptr: Index,\n        len: Index,\n    }"}
{"instruction":"Write a Zig const similar to gravx from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"const gravx: f32, const tindex: u16 = switch (dvui.currentWindow().button_order) {\n            .cancel_ok => .{ 1.0, 4 },\n            .ok_cancel => .{ 0.0, 2 },\n        };"}
{"instruction":"Write a Zig function similar to dialogDirect from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"pub fn dialogDirect() void {\n    const data = struct {\n        var extra_stuff: bool = false;\n    }"}
{"instruction":"Write a Zig const similar to in_proto from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"const in_proto: Proto = if (udpi) .udpi else .tcpi;"}
{"instruction":"Write a Zig const similar to n from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/comptime/comptime_arg_runtime_error.zig","output":"const n: u32 = try std.fmt.parseInt(u32, buffer[0 .. buffer.len - 1], 10);"}
{"instruction":"Write a Zig function similar to demo from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Examples.zig","output":"pub fn demo() void {\n    if (!show_demo_window) {\n        return;\n    }"}
{"instruction":"Write a Zig function similar to testHandler4 from ZystemOS/pluto","input":"Repository: ZystemOS/pluto (692 ⭐)\nFile: src/kernel/arch/x86/syscalls.zig","output":"fn testHandler4(ctx: *const arch.CpuState, arg1: usize, arg2: usize, arg3: usize, arg4: usize, arg5: usize) anyerror!usize {\n    // Suppress unused variable warnings\n    _ = ctx;\n    _ = arg5;\n    test_int += arg1 + arg2 + arg3 + arg4;\n    return 4;\n}"}
{"instruction":"Write a Zig function similar to deinit from capy-ui/capy","input":"Repository: capy-ui/capy (2356 ⭐)\nFile: android/src/NativeActivity.zig","output":"pub fn deinit(self: *Self) void {\n    _ = self.activity.vm.*.DetachCurrentThread(self.activity.vm);\n    self.* = undefined;\n}"}
{"instruction":"Write a Zig const similar to rmsg from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"const rmsg: *RcMsg = if (free_rmsg) |rmsg| rmsg.realloc(len) else RcMsg.new(len);"}
{"instruction":"Write a Zig function similar to consume from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"fn consume(self: *Tokenizer, f1: anytype, f2: anytype) ?[]const u8 {\n        const start = self.pos;\n\n        if (f1(self.peek() catch return null)) {\n            self.pos += 1;\n\n            while (self.peek() catch null) |ch2| : (self.pos += 1) {\n                if (!f2(ch2)) break;\n            }"}
{"instruction":"Write a Zig function similar to getSymbolFieldAccesses from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn getSymbolFieldAccesses(\n    analyser: *Analyser,\n    arena: std.mem.Allocator,\n    handle: *DocumentStore.Handle,\n    source_index: usize,\n    held_loc: offsets.Loc,\n    name: []const u8,\n) error{OutOfMemory}"}
{"instruction":"Write a Zig struct similar to ResetEventSingle from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/async.zig","output":"pub const ResetEventSingle = struct {\n        const State = union(enum) {\n            unset,\n            waiting: *Waiter,\n            set,\n\n            const unset_state: State = .unset;\n            const set_state: State = .set;\n        }"}
{"instruction":"Write a Zig function similar to send from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn send(self: *Group, qmsg: *RcMsg, udpi: bool) void {\n        const verbose_info = if (g.verbose()) .{\n            .qid = dns.get_id(qmsg.msg()),\n            .from = cc.b2s(udpi, \"udp\", \"tcp\"),\n        }"}
{"instruction":"Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"pub fn canBeChangedInto(oldBlock: Block, newBlock: Block, item: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) RotationMode.CanBeChangedInto {\n\tif(oldBlock.typ != newBlock.typ) return RotationMode.DefaultFunctions.canBeChangedInto(oldBlock, newBlock, item, shouldDropSourceBlockOnSuccess);\n\tif(oldBlock.data == newBlock.data) return .no;\n\tif(item.item != null and item.item.? == .baseItem and std.mem.eql(u8, item.item.?.baseItem.id(), \"cubyz:chisel\")) {\n\t\treturn .yes; // TODO: Durability change, after making the chisel a proper tool.\n\t}"}
{"instruction":"Write a Zig function similar to writeNoIndent from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/render.zig","output":"fn writeNoIndent(self: *Self, bytes: []const u8) Error!usize {\n            if (bytes.len == 0)\n                return @as(usize, 0);\n\n            if (self.disabled_offset == null) try self.underlying_writer.writeAll(bytes);\n            if (bytes[bytes.len - 1] == '\\n')\n                self.resetLine();\n            return bytes.len;\n        }"}
{"instruction":"Write a Zig function similar to nextCharSkipComments from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/tokenizer.zig","output":"fn nextCharSkipComments(self: *Tokenizer) Error!u8 {\n        while (self.consumeSeq(\"/*\")) {\n            while (!self.consumeSeq(\"*/\")) self.pos += 1;\n        }"}
{"instruction":"Write a Zig function similar to format from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/values/angle.zig","output":"pub fn format(self: Angle, comptime _: []const u8, _: std.fmt.FormatOptions, writer: anytype) !void {\n        return switch (self) {\n            .percent => |v| writer.print(\"{d}"}
{"instruction":"Write a Zig const similar to DEFAULT_LIFE from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"const DEFAULT_LIFE: ParamValue = 10;"}
{"instruction":"Write a Zig function similar to getScopeTag from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/DocumentScope.zig","output":"pub fn getScopeTag(\n    doc_scope: DocumentScope,\n    scope: Scope.Index,\n) Scope.Tag {\n    return doc_scope.scopes.items(.data)[@intFromEnum(scope)].tag;\n}"}
{"instruction":"Write a Zig function similar to call from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn call(number: Syscalls, param: *const anyopaque) isize {\n    return asm volatile (\n        \\\\mov r0, %[num]\n        \\\\mov r1, %[p]\n        \\\\bkpt #0xAB\n        \\\\mov %[ret], r0\n        : [ret] \"=r\" (-> isize),\n        : [num] \"r\" (number),\n          [p] \"r\" (param),\n        : .{ .memory = true, .r0 = true, .r1 = true }"}
{"instruction":"Write a Zig const similar to n_groups from pedropark99/zig-book","input":"Repository: pedropark99/zig-book (1944 ⭐)\nFile: ZigExamples/base64/base64_basic.zig","output":"const n_groups: usize = try std.math.divFloor(usize, input.len, 4);"}
{"instruction":"Write a Zig function similar to clear from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig","output":"pub fn clear(self: *MsgQueue) void {\n            while (self.pop(false)) |msg|\n                msg.unref();\n        }"}
{"instruction":"Write a Zig function similar to parseWith from cztomsik/graffiti","input":"Repository: cztomsik/graffiti (935 ⭐)\nFile: src/css/values/dimension.zig","output":"pub fn parseWith(parser: *Parser) !Dimension {\n        switch (try parser.tokenizer.next()) {\n            .number => |n| if (n == 0) return .{ .px = 0 }"}
{"instruction":"Write a Zig function similar to logEventAddError from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/AccessKit.zig","output":"fn logEventAddError(src: std.builtin.SourceLocation, err: anyerror) void {\n    dvui.logError(src, err, \"Accesskit: Event for action has not been added\", .{}"}
{"instruction":"Write a Zig function similar to __errno_location from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig","output":"fn __errno_location() *c_int;\n\npub inline fn errno() c_int {\n    return __errno_location().*;\n}"}
{"instruction":"Write a Zig function similar to model from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig","output":"pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data & 15);\n}"}
{"instruction":"Write a Zig const similar to f31 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const f31: u21 = 57394;"}
{"instruction":"Write a Zig function similar to handle from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Event.zig","output":"pub fn handle(self: *Event, src: std.builtin.SourceLocation, wd: *const dvui.WidgetData) void {\n    if (dvui.currentWindow().debug.logEvents(null)) {\n        dvui.log.debug(\"{s}"}
{"instruction":"Write a Zig function similar to getStringAt from webui-dev/zig-webui","input":"Repository: webui-dev/zig-webui (674 ⭐)\nFile: src/webui.zig","output":"pub fn getStringAt(e: *Event, index: usize) [:0]const u8 {\n        const ptr = c.webui_get_string_at(e, index);\n        const len = std.mem.len(ptr);\n        return ptr[0..len :0];\n    }"}
{"instruction":"Write a Zig struct similar to Iterator from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Dialogs.zig","output":"pub const Iterator = struct {\n    dialogs: *Dialogs,\n    subwindow_id: ?Id,\n    i: usize = 0,\n    last_id: Id = .zero,\n\n    pub fn next(self: *Iterator) ?Dialog {\n        self.dialogs.mutex.lock();\n        defer self.dialogs.mutex.unlock();\n\n        // have to deal with toasts possibly removing themselves inbetween\n        // calls to next()\n\n        const items = self.dialogs.stack.items;\n        if (self.i < items.len and self.last_id == items[self.i].id) {\n            // we already did this one, move to the next\n            self.i += 1;\n        }"}
{"instruction":"Write a Zig function similar to handleRequestSetCursor from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleRequestSetCursor(\n    listener: *wl.Listener(*wlr.Seat.event.RequestSetCursor),\n    event: *wlr.Seat.event.RequestSetCursor,\n) void {\n    // This event is rasied by the seat when a client provides a cursor image\n    const cursor: *Cursor = @fieldParentPtr(\"request_set_cursor\", listener);\n    const focused_client = cursor.seat.wlr_seat.pointer_state.focused_client;\n\n    // This can be sent by any client, so we check to make sure this one is\n    // actually has pointer focus first.\n    if (focused_client == event.seat_client) {\n        // Once we've vetted the client, we can tell the cursor to use the\n        // provided surface as the cursor image. It will set the hardware cursor\n        // on the output that it's currently on and continue to do so as the\n        // cursor moves between outputs.\n        log.debug(\"focused client set cursor\", .{}"}
{"instruction":"Write a Zig function similar to clipboardTextSet from david-vanderson/dvui","input":"Repository: david-vanderson/dvui (960 ⭐)\nFile: src/Backend.zig","output":"pub fn clipboardTextSet(self: Backend, text: []const u8) GenericError!void {\n    return self.impl.clipboardTextSet(text);\n}"}
{"instruction":"Write a Zig function similar to writer from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"pub fn writer(file: File, buffer: []u8) Writer {\n            return .{\n                .file = file,\n                .interface = .{\n                    .vtable = &.{\n                        .drain = drain,\n                    }"}
{"instruction":"Write a Zig function similar to createBlockModel from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig","output":"pub fn createBlockModel(_: Block, _: *u16, _: ZonElement) ModelIndex {\n\tif(modelIndex) |idx| return idx;\n\tfor(0..256) |i| {\n\t\tvar quads = main.List(main.models.QuadInfo).init(main.stackAllocator);\n\t\tdefer quads.deinit();\n\t\tfor(Neighbor.iterable) |neighbor| {\n\t\t\tconst xComponent = @abs(neighbor.textureX());\n\t\t\tconst yComponent = @abs(neighbor.textureY());\n\t\t\tconst normal = Vec3i{neighbor.relX(), neighbor.relY(), neighbor.relZ()}"}
{"instruction":"Write a Zig const similar to kp_0 from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const kp_0: u21 = 57399;"}
{"instruction":"Write a Zig function similar to add_include_path from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build.zig","output":"pub fn add_include_path(fw: *Firmware, path: LazyPath) void {\n                fw.artifact.addIncludePath(path);\n            }"}
{"instruction":"Write a Zig function similar to __irshift__ from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/operators.zig","output":"pub fn __irshift__(self: *Self, other: *const Self) !*Self {\n        py.incref(root, self);\n        self.num_ = self.num_ >> @as(u6, @intCast(other.num_));\n        return self;\n    }"}
{"instruction":"Write a Zig function similar to get from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/std/fs.zig","output":"pub fn get(_: *anyopaque, ctx: Vm.Context, index: *const Value, res: *?*Value) Value.NativeError!void {\n        switch (index.*) {\n            .str => |*s| {\n                if (res.* == null) {\n                    res.* = try ctx.vm.gc.alloc(.int);\n                }"}
{"instruction":"Write a Zig function similar to sys_clock from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_clock() isize {\n    return call(.SYS_CLOCK, &0);\n}"}
{"instruction":"Write a Zig function similar to unlink from zfl9/chinadns-ng","input":"Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig","output":"pub fn unlink(node: *Node) void {\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n    node.prev = undefined;\n    node.next = undefined;\n}"}
{"instruction":"Write a Zig function similar to sys_errno from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/semihosting.zig","output":"fn sys_errno() isize {\n    return call(.SYS_ERRNO, &0);\n}"}
{"instruction":"Write a Zig function similar to derive from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: build-internals/build.zig","output":"pub fn derive(from: *const Target, options: DeriveOptions) *Target {\n        const ret = from.dep.builder.allocator.create(Target) catch @panic(\"out of memory\");\n        ret.* = .{\n            .dep = from.dep,\n            .preferred_binary_format = options.preferred_binary_format orelse from.preferred_binary_format,\n            .zig_target = options.zig_target orelse from.zig_target,\n            .cpu = options.cpu orelse from.cpu,\n            .chip = options.chip orelse from.chip,\n            .single_threaded = options.single_threaded orelse from.single_threaded,\n            .bundle_compiler_rt = options.bundle_compiler_rt orelse from.bundle_compiler_rt,\n            .ram_image = options.ram_image orelse from.ram_image,\n            .hal = options.hal orelse from.hal,\n            .board = options.board orelse from.board,\n            .linker_script = options.linker_script orelse from.linker_script,\n            .entry = options.entry orelse from.entry,\n            .patch_elf = options.patch_elf orelse from.patch_elf,\n        }"}
{"instruction":"Write a Zig function similar to sleep_release from spiraldb/ziggy-pydust","input":"Repository: spiraldb/ziggy-pydust (673 ⭐)\nFile: example/gil.zig","output":"pub fn sleep_release(args: struct { millis: u64 }) void {\n    const nogil = py.nogil();\n    defer nogil.acquire();\n    std.Thread.sleep(args.millis * 1_000_000);\n}"}
{"instruction":"Write a Zig function similar to writer_write from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/experimental/debug.zig","output":"fn writer_write(ctx: void, string: []const u8) DebugErr!usize {\n    _ = ctx;\n    write(string);\n    return string.len;\n}"}
{"instruction":"Write a Zig function similar to focus from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/InputRelay.zig","output":"pub fn focus(relay: *InputRelay, new_focus: ?*wlr.Surface) void {\n    // Send leave events\n    {\n        var it = relay.text_inputs.iterator(.forward);\n        while (it.next()) |text_input| {\n            if (text_input.wlr_text_input.focused_surface) |surface| {\n                // This function should not be called unless focus changes\n                assert(surface != new_focus);\n                text_input.wlr_text_input.sendLeave();\n            }"}
{"instruction":"Write a Zig function similar to indexToKey from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analyser/InternPool.zig","output":"pub fn indexToKey(ip: *InternPool, index: Index) Key {\n    assert(index != .none);\n\n    ip.lock.lockShared();\n    defer ip.lock.unlockShared();\n    return ip.indexToKeyNoLock(index);\n}"}
{"instruction":"Write a Zig const similar to right_meta from rockorager/libvaxis","input":"Repository: rockorager/libvaxis (1301 ⭐)\nFile: src/Key.zig","output":"pub const right_meta: u21 = 57452;"}
{"instruction":"Write a Zig function similar to getDocCommentTokenIndex from zigtools/zls","input":"Repository: zigtools/zls (4263 ⭐)\nFile: src/analysis.zig","output":"pub fn getDocCommentTokenIndex(tree: *const Ast, base_token: Ast.TokenIndex) ?Ast.TokenIndex {\n    var idx = base_token;\n    if (idx == 0) return null;\n    idx -|= 1;\n    if (tree.tokenTag(idx) == .keyword_threadlocal and idx > 0) idx -|= 1;\n    if (tree.tokenTag(idx) == .string_literal and idx > 1 and tree.tokenTag(idx -| 1) == .keyword_extern) idx -|= 1;\n    if (tree.tokenTag(idx) == .keyword_extern and idx > 0) idx -|= 1;\n    if (tree.tokenTag(idx) == .keyword_export and idx > 0) idx -|= 1;\n    if (tree.tokenTag(idx) == .keyword_inline and idx > 0) idx -|= 1;\n    if (tree.tokenTag(idx) == .identifier and idx > 0) idx -|= 1;\n    if (tree.tokenTag(idx) == .keyword_pub and idx > 0) idx -|= 1;\n\n    // Find first doc comment token\n    if (!(tree.tokenTag(idx) == .doc_comment))\n        return null;\n    return while (tree.tokenTag(idx) == .doc_comment) {\n        if (idx == 0) break 0;\n        idx -|= 1;\n    }"}
{"instruction":"Write a Zig function similar to receive_ from neurocyte/flow","input":"Repository: neurocyte/flow (1255 ⭐)\nFile: src/LSP.zig","output":"fn receive_(self: *@This(), _: tp.pid_ref, m: tp.message) tp.result {\n            defer self.deinit();\n            self.ctx.receive(m) catch |e| return tp.exit_error(e, @errorReturnTrace());\n            return tp.exit_normal();\n        }"}
{"instruction":"Write a Zig function similar to createBlockModel from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig","output":"pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst floorModelId: []const u8 = zon.get([]const u8, \"floor\", \"cubyz:cube\");\n\tconst sideModelId: []const u8 = zon.get([]const u8, \"side\", \"cubyz:cube\");\n\tconst ceilingModelId: []const u8 = zon.get([]const u8, \"ceiling\", \"cubyz:cube\");\n\tconst key: []const u8 = std.mem.concat(main.stackAllocator.allocator, u8, &.{floorModelId, sideModelId, ceilingModelId}"}
{"instruction":"Write a Zig const similar to ceilingModelId from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig","output":"const ceilingModelId: []const u8 = zon.get([]const u8, \"ceiling\", \"cubyz:cube\");"}
{"instruction":"Write a Zig function similar to handleSwipeUpdate from riverwm/river","input":"Repository: riverwm/river (3752 ⭐)\nFile: river/Cursor.zig","output":"fn handleSwipeUpdate(\n    listener: *wl.Listener(*wlr.Pointer.event.SwipeUpdate),\n    event: *wlr.Pointer.event.SwipeUpdate,\n) void {\n    const cursor: *Cursor = @fieldParentPtr(\"swipe_update\", listener);\n    server.input_manager.pointer_gestures.sendSwipeUpdate(\n        cursor.seat.wlr_seat,\n        event.time_msec,\n        event.dx,\n        event.dy,\n    );\n}"}
{"instruction":"Write Zig 0.13.0 code for: Operators §","input":"There is no operator overloading. When you see an operator in Zig, you know that it is doing something from this table, and nothing else. Table of Operators § Name Syntax Types Remarks Example Addition Integers Floats Can cause overflow for integers. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Wrapping Addition Integers Twos-complement wrapping behavior. Invokes Peer Type Resolution for the operands. See also @addWithOverflow . Saturating Addition Integers Invokes","output":"<span class=\"tok-kw\">const</span> value: ?<span class=\"tok-type\">u32</span> = <span class=\"tok-null\">null</span>;\n<span class=\"tok-kw\">const</span> unwrapped = value <span class=\"tok-kw\">orelse</span> <span class=\"tok-number\">1234</span>;\nunwrapped == <span class=\"tok-number\">1234</span>"}
{"instruction":"Write a Zig function similar to block from Vexu/toy-lang","input":"Repository: Vexu/toy-lang (584 ⭐)\nFile: src/parser.zig","output":"fn block(p: *Parser, level: u8) Error!?Node.Index {\n        const nl = p.eatToken(.nl, .keep_nl) orelse return null;\n        const node_buf_top = p.node_buf.items.len;\n        defer p.node_buf.items.len = node_buf_top;\n\n        const new_level = indent: {\n            const indent = p.eatIndentExtra();\n            if (indent == null or indent.? <= level)\n                return p.reportErr(\"expected indentation\", p.tok_i);\n            p.tok_i += 1;\n\n            break :indent indent.?;\n        }"}
{"instruction":"Write a Zig function similar to addBin from Vexu/arocc","input":"Repository: Vexu/arocc (1509 ⭐)\nFile: src/aro/CodeGen.zig","output":"fn addBin(c: *CodeGen, tag: Ir.Inst.Tag, lhs: Ir.Ref, rhs: Ir.Ref, qt: QualType) !Ir.Ref {\n    return c.builder.addInst(tag, .{ .bin = .{ .lhs = lhs, .rhs = rhs }"}
{"instruction":"Write a Zig function similar to endpoint_open from ZigEmbeddedGroup/microzig","input":"Repository: ZigEmbeddedGroup/microzig (1852 ⭐)\nFile: core/src/core/usb/types.zig","output":"pub fn endpoint_open(self: *@This(), ep_desc: []const u8) void {\n        return self.fn_endpoint_open(ep_desc);\n    }"}
{"instruction":"Write a Zig function similar to writeName from judofyr/spice","input":"Repository: judofyr/spice (895 ⭐)\nFile: examples/zig-parallel-example/main.zig","output":"pub fn writeName(self: *SpiceTreeSum, writer: anytype) !void {\n        if (self.num_threads == 1) {\n            try std.fmt.format(writer, \"Spice 1 thread\", .{}"}
{"instruction":"Write a Zig function similar to Channel from zml/zml","input":"Repository: zml/zml (2827 ⭐)\nFile: async/channel.zig","output":"pub fn Channel(comptime T: type, comptime capacity: usize) type {\n    const Storage = stdx.queue.ArrayQueue(T, capacity);\n\n    return struct {\n        const Self = @This();\n\n        q: Storage = .{}"}
{"instruction":"Write a Zig function similar to loadBlockPalette from PixelGuys/Cubyz","input":"Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig","output":"fn loadBlockPalette(allocator: NeverFailingAllocator, paletteBlockCount: usize, reader: *BinaryReader) ![][]const u8 {\n\t\tvar palette = allocator.alloc([]const u8, paletteBlockCount);\n\n\t\tfor(0..@intCast(paletteBlockCount)) |index| {\n\t\t\tconst blockNameSize = try reader.readInt(BlockIdSizeType);\n\t\t\tconst blockName = try reader.readSlice(blockNameSize);\n\t\t\tpalette[index] = blockName;\n\t\t}"}