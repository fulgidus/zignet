[
  {
    "instruction": "Write a Zig function similar to build from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub fn build(b: *std.Build) !void {\n    rtarget = b.standardTargetOptions(.{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createAllModule from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn createAllModule(b: *std.Build, build_options: *std.Build.Module, stdx: *std.Build.Module, opts: Options) !*std.Build.Module {\n    const mod = b.createModule(.{\n        .root_source_file = b.path(\"src/all.zig\"),\n        .target = rtarget,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "createAllModule",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildAndLinkDeps from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub fn buildAndLinkDeps(mod: *std.Build.Module, build_options: *std.Build.Module, stdx: *std.Build.Module, opts: Options) !void {\n    const b = mod.owner;\n\n    mod.addIncludePath(b.path(\"src\"));\n    mod.addImport(\"build_options\", build_options);\n    mod.addImport(\"stdx\", stdx);\n\n    mod.link_libc = true;\n\n    if (opts.malloc == .mimalloc) {\n        const mimalloc = mimalloc_lib.createModule(b);\n        mod.addImport(\"mimalloc\", mimalloc);\n        mimalloc_lib.buildAndLink(b, mod, .{\n            .target = rtarget,\n            .optimize = optimize,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "buildAndLinkDeps",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to applyOverrides from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn applyOverrides(self: *Options) void {\n        if (optMalloc) |malloc| {\n            self.malloc = malloc;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "applyOverrides",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getDefaultOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn getDefaultOptions() Options {\n    var malloc: config.Allocator = undefined;\n    // Use mimalloc for fast builds.\n    if (target.cpu.arch.isWasm()) {\n        malloc = .zig;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "getDefaultOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBuildOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn createBuildOptions(b: *std.Build, opts: Options) !*std.Build.Module {\n    const buildTag = std.process.getEnvVarOwned(b.allocator, \"BUILD\") catch |err| b: {\n        if (err == error.EnvironmentVariableNotFound) {\n            break :b \"0\";\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "createBuildOptions",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addUnitTest from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn addUnitTest(b: *std.Build, opts: Options) !*std.Build.Step.Compile {\n    const step = b.addTest(.{\n        .name = \"unit_test\",\n        .root_source_file = b.path(\"./src/unit_test.zig\"),\n        .target = rtarget,\n        .optimize = optimize,\n        .filter = testFilter,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "addUnitTest",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addBehaviorTest from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn addBehaviorTest(b: *std.Build, opts: Options) !*std.Build.Step.Compile {\n    const step = b.addTest(.{\n        .name = \"test\",\n        .root_source_file = b.path(\"./test/main_test.zig\"),\n        .target = rtarget,\n        .optimize = optimize,\n        .filter = testFilter,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "addBehaviorTest",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addTraceTest from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn addTraceTest(b: *std.Build, opts: Options) !*std.Build.Step.Compile {\n    const step = b.addTest(.{\n        .name = \"trace_test\",\n        .root_source_file = b.path(\"./test/trace_test.zig\"),\n        .optimize = optimize,\n        .target = rtarget,\n        .filter = testFilter,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "addTraceTest",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is32Bit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn is32Bit(target_: std.Target) bool {\n    switch (target_.cpu.arch) {\n        .wasm32, .x86 => return true,\n        else => return false,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "is32Bit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to thisDir from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn thisDir() []const u8 {\n    return comptime std.fs.path.dirname(@src().file) orelse \".\";\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "thisDir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub fn init(build_: *std.Build, str: []const u8) PrintStep {\n        return PrintStep{\n            .build = build_,\n            .step = std.Build.Step.init(.{\n                .id = .custom,\n                .name = \"print\",\n                .owner = build_,\n                .makeFn = make,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to make from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn make(step: *std.Build.Step, _: std.Build.Step.MakeOptions) anyerror!void {\n        const self: *PrintStep = @fieldParentPtr(\"step\", step);\n        std.io.getStdOut().writer().writeAll(self.str) catch unreachable;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "make",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildCVM from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub fn buildCVM(b: *std.Build, opts: Options) !*std.Build.Step.Compile {\n    const lib = b.addObject(.{\n        .name = \"vm\",\n        .target = rtarget,\n        .optimize = optimize,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "buildCVM",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildLib from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "fn buildLib(b: *std.Build, opts: Options) !*std.Build.Step.Compile {\n    var lib: *std.Build.Step.Compile = undefined;\n    if (opts.static) {\n        lib = b.addStaticLibrary(.{\n            .name = \"cyber\",\n            .root_source_file = b.path(\"src/lib.zig\"),\n            .target = rtarget,\n            .optimize = optimize,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "buildLib",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createLinenoiseModule from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub fn createLinenoiseModule(b: *std.Build) *std.Build.Module {\n    const mod = b.createModule(.{\n        .root_source_file = b.path(\"lib/linenoise/linenoise.zig\"),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "createLinenoiseModule",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildAndLinkLinenoise from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub fn buildAndLinkLinenoise(b: *std.Build, mod: *std.Build.Module) void {\n    const lib = b.addStaticLibrary(.{\n        .name = \"linenoise\",\n        .target = rtarget,\n        .optimize = optimize,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "function",
      "name": "buildAndLinkLinenoise",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Options from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub const Options = struct {\n    selinux: bool,\n    trackGlobalRc: bool,\n    trace: bool,\n    log_mem: bool,\n    target: std.Target,\n    optimize: std.builtin.OptimizeMode,\n    malloc: config.Allocator,\n    static: bool,\n    gc: bool,\n    ffi: bool,\n    cli: bool,\n    jit: bool,\n    rt: config.Runtime,\n\n    /// Link with the lib when building test root.\n    /// Disable to see better Zig stack traces.\n    link_test: bool,\n\n    export_vmz: bool,\n\n    fn applyOverrides(self: *Options) void {\n        if (optMalloc) |malloc| {\n            self.malloc = malloc;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "struct",
      "name": "Options",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to PrintStep from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "pub const PrintStep = struct {\n    step: std.Build.Step,\n    build: *std.Build,\n    str: []const u8,\n\n    pub fn init(build_: *std.Build, str: []const u8) PrintStep {\n        return PrintStep{\n            .build = build_,\n            .step = std.Build.Step.init(.{\n                .id = .custom,\n                .name = \"print\",\n                .owner = build_,\n                .makeFn = make,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "struct",
      "name": "PrintStep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to self from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: build.zig",
    "response": "const self: *PrintStep = @fieldParentPtr(\"step\", step);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "build.zig",
      "type": "const",
      "name": "self",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createModule from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/lib.zig",
    "response": "pub fn createModule(b: *std.Build) *std.Build.Module {\n    const mod = b.createModule(.{\n        .root_source_file = b.path(thisDir() ++ \"/mimalloc.zig\"),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/lib.zig",
      "type": "function",
      "name": "createModule",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildAndLink from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/lib.zig",
    "response": "pub fn buildAndLink(b: *std.Build, mod: *std.Build.Module, opts: BuildOptions) void {\n    const lib = b.addStaticLibrary(.{\n        .name = \"mimalloc\",\n        .target = opts.target,\n        .optimize = opts.optimize,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/lib.zig",
      "type": "function",
      "name": "buildAndLink",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to thisDir from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/lib.zig",
    "response": "fn thisDir() []const u8 {\n    return comptime std.fs.path.dirname(@src().file) orelse @panic(\"error\");\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/lib.zig",
      "type": "function",
      "name": "thisDir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BuildOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/lib.zig",
    "response": "const BuildOptions = struct {\n    target: std.Build.ResolvedTarget,\n    optimize: std.builtin.OptimizeMode,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/lib.zig",
      "type": "struct",
      "name": "BuildOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to collect from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "pub fn collect(force: bool) void {\n    c.mi_collect(force);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "collect",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "pub fn init(self: *Allocator) void {\n        self.* = .{\n            .dummy = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "pub fn deinit(self: *Allocator) void {\n        _ = self;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocator from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "pub fn allocator(self: *Allocator) std.mem.Allocator {\n        return std.mem.Allocator{\n            .ptr = self,\n            .vtable = &vtable,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to alloc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "fn alloc(\n        ptr: *anyopaque,\n        len: usize,\n        alignment: std.mem.Alignment,\n        ret_addr: usize,\n    ) ?[*]u8 {\n        _ = ptr;\n        _ = ret_addr;\n        return @ptrCast(c.mi_malloc_aligned(len, alignment.toByteUnits()));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "alloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to resize from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "fn resize(\n        ptr: *anyopaque,\n        buf: []u8,\n        alignment: std.mem.Alignment,\n        new_len: usize,\n        ret_addr: usize,\n    ) bool {\n        _ = ptr;\n        _ = alignment;\n        _ = ret_addr;\n        if (new_len > buf.len) {\n            if (c.mi_expand(buf.ptr, new_len)) |_| {\n                return true;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "resize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to remap from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "fn remap(\n        ptr: *anyopaque,\n        buf: []u8,\n        alignment: std.mem.Alignment,\n        new_len: usize,\n        ret_addr: usize\n    ) ?[*]u8 {\n        _ = ptr;\n        _ = ret_addr;\n        return @ptrCast(c.mi_realloc_aligned(buf.ptr, new_len, alignment.toByteUnits()));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "remap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "fn free(\n        ptr: *anyopaque,\n        buf: []u8,\n        alignment: std.mem.Alignment,\n        ret_addr: usize,\n    ) void {\n        _ = ptr;\n        _ = ret_addr;\n        _ = alignment;\n        c.mi_free(buf.ptr);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "function",
      "name": "free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Allocator from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/mimalloc/mimalloc.zig",
    "response": "pub const Allocator = struct {\n    dummy: bool,\n\n    const vtable = std.mem.Allocator.VTable{\n        .alloc = alloc,\n        .resize = resize,\n        .remap = remap,\n        .free = free,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/mimalloc/mimalloc.zig",
      "type": "struct",
      "name": "Allocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createModule from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/tcc/lib.zig",
    "response": "pub fn createModule(b: *std.Build) *std.Build.Module {\n    const mod = b.createModule(.{\n        .root_source_file = b.path(\"lib/tcc/tcc.zig\"),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/tcc/lib.zig",
      "type": "function",
      "name": "createModule",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addImport from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/tcc/lib.zig",
    "response": "pub fn addImport(root: *std.Build.Module, b: *std.Build, name: []const u8, mod: *std.Build.Module) void {\n    root.addImport(name, mod);\n    root.addIncludePath(b.path(\"lib/tcc/vendor\"));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/tcc/lib.zig",
      "type": "function",
      "name": "addImport",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildAndLink from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/tcc/lib.zig",
    "response": "pub fn buildAndLink(b: *std.Build, mod: *std.Build.Module, opts: BuildOptions) void {\n    const lib = b.addStaticLibrary(.{\n        .name = \"tcc\",\n        .target = opts.target,\n        .optimize = opts.optimize,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/tcc/lib.zig",
      "type": "function",
      "name": "buildAndLink",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to thisDir from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/tcc/lib.zig",
    "response": "fn thisDir() []const u8 {\n    return comptime std.fs.path.dirname(@src().file) orelse @panic(\"error\");\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/tcc/lib.zig",
      "type": "function",
      "name": "thisDir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BuildOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: lib/tcc/lib.zig",
    "response": "const BuildOptions = struct {\n    selinux: bool = false,\n    target: std.Build.ResolvedTarget,\n    optimize: std.builtin.OptimizeMode,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "lib/tcc/lib.zig",
      "type": "struct",
      "name": "BuildOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to release from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn release(vm: *cy.VM, val: cy.Value) void {\n    if (cy.Trace) {\n        vm.c.trace.numReleaseAttempts += 1;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "release",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isObjectAlreadyFreed from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn isObjectAlreadyFreed(vm: *cy.VM, obj: *cy.HeapObject) bool {\n    if (obj.isFreed()) {\n        // Can check structId for pool objects since they are still in memory.\n        return true;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "isObjectAlreadyFreed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkDoubleFree from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn checkDoubleFree(vm: *cy.VM, obj: *cy.HeapObject) void {\n    if (isObjectAlreadyFreed(vm, obj)) {\n        const msg = std.fmt.allocPrint(vm.alloc, \"{*}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "checkDoubleFree",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to releaseObject from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn releaseObject(vm: *cy.VM, obj: *cy.HeapObject) void {\n    if (cy.Trace) {\n        checkDoubleFree(vm, obj);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "releaseObject",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to runUnwindReleases from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn runUnwindReleases(vm: *cy.VM, fp: [*]const cy.Value, key: cy.fiber.UnwindKey) void {\n    log.tracev(\"unwind releases\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "runUnwindReleases",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to runUnwindReleasesUntilCatch from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn runUnwindReleasesUntilCatch(vm: *cy.VM, fp: [*]const cy.Value, key: cy.fiber.UnwindKey) ?u32 {\n    log.tracev(\"unwind releases until catch\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "runUnwindReleasesUntilCatch",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to retainObject from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "fn retainObject(self: *cy.VM, obj: *cy.HeapObject) void {\n    obj.head.rc += 1;\n    if (cy.Trace) {\n        checkRetainDanglingPointer(self, obj);\n        log.tracevIf(log_mem, \"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "retainObject",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkRetainDanglingPointer from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn checkRetainDanglingPointer(vm: *cy.VM, obj: *cy.HeapObject) void {\n    if (isObjectAlreadyFreed(vm, obj)) {\n        const msg = std.fmt.allocPrint(vm.alloc, \"{*}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "checkRetainDanglingPointer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to retain from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "fn retain(self: *cy.VM, val: cy.Value) void {\n    if (cy.Trace) {\n        self.c.trace.numRetainAttempts += 1;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "retain",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to retainInc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "fn retainInc(self: *cy.VM, val: cy.Value, inc: u32) void {\n    if (cy.Trace) {\n        self.c.trace.numRetainAttempts += inc;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "retainInc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getGlobalRC from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn getGlobalRC(self: *const cy.VM) usize {\n    if (cy.TrackGlobalRC) {\n        return self.c.refCounts;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "getGlobalRC",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to performGC from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn performGC(vm: *cy.VM) !c.GCResult {\n    log.tracev(\"Run gc.\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "performGC",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to performMark from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "fn performMark(vm: *cy.VM) !void {\n    log.tracev(\"Perform mark.\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "performMark",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to performSweep from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "fn performSweep(vm: *cy.VM) !c.GCResult {\n    log.tracev(\"Perform sweep.\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "performSweep",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to markMainStackRoots from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "fn markMainStackRoots(vm: *cy.VM) !void {\n    if (vm.c.pc[0].opcode() == .end) {\n        return;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "markMainStackRoots",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to markValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "fn markValue(vm: *cy.VM, v: cy.Value) void {\n    const obj = v.asHeapObject();\n    if (!obj.isGcMarked()) {\n        obj.setGcMarked();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "markValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to countObjects from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn countObjects(vm: *cy.VM) usize {\n    var count: usize = 0;\n    for (vm.heapPages.items()) |page| {\n        var i: u32 = 1;\n        while (i < page.objects.len) {\n            const obj = &page.objects[i];\n            if (obj.freeSpan.typeId != cy.NullId) {\n                count += 1;\n                i += 1;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "countObjects",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkGlobalRC from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn checkGlobalRC(ivm: *cy.VM) !void {\n    const vm: *c.ZVM = @ptrCast(ivm);\n    const rc = getGlobalRC(ivm);\n    if (rc != 0) {\n        std.debug.print(\"unreleased refcount: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "checkGlobalRC",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to dumpObjectAllocTrace from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub fn dumpObjectAllocTrace(vm: *cy.VM, obj: *cy.HeapObject, allocPc: u32) !void {\n    var buf: [256]u8 = undefined;\n    const typeId = obj.getTypeId();\n    const typeName = vm.getTypeName(typeId);\n    const valStr = try vm.bufPrintValueShortStr(&vm.tempBuf, cy.Value.initNoCycPtr(obj));\n    const msg = try std.fmt.bufPrint(&buf, \"{*}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "function",
      "name": "dumpObjectAllocTrace",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to VmExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "pub const VmExt = struct {\n    pub const retainObject = Root.retainObject;\n    pub const retain = Root.retain;\n    pub const releaseObject = Root.releaseObject;\n    pub const release = Root.release;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "struct",
      "name": "VmExt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to num_freed from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "const num_freed: u32 = 0;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "const",
      "name": "num_freed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to vm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/arc.zig",
    "response": "const vm: *c.ZVM = @ptrCast(ivm);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/arc.zig",
      "type": "const",
      "name": "vm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getAttrs from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn getAttrs(self: *TemplateDecl) []const *Attribute {\n        switch (self.child_decl.type()) {\n            .funcDecl => {\n                return self.child_decl.cast(.funcDecl).attrs;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "getAttrs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn setType(self: *Node, node_t: NodeType) void {\n        @as(*NodeHeader, @ptrFromInt(@intFromPtr(self) - 1)).*.type = node_t;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "setType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isBlockExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn isBlockExpr(self: *Node) bool {\n        return @as(*NodeHeader, @ptrFromInt(@intFromPtr(self) - 1)).*.is_block_expr;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "isBlockExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setBlockExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn setBlockExpr(self: *Node, is_block_expr: bool) void {\n        @as(*NodeHeader, @ptrFromInt(@intFromPtr(self) - 1)).*.is_block_expr = is_block_expr;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "setBlockExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cast from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn cast(self: *Node, comptime node_t: NodeType) *NodeData(node_t) {\n        if (cy.Trace) {\n            if (self.type() != node_t) {\n                std.debug.panic(\"Expected {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "cast",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to name from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn name(self: BinaryExprOp) []const u8 {\n        return switch (self) {\n            .index => \"$index\",\n            .less => \"$infix<\",\n            .greater => \"$infix>\",\n            .less_equal => \"$infix<=\",\n            .greater_equal => \"$infix>=\",\n            .minus => \"$infix-\",\n            .plus => \"$infix+\",\n            .star => \"$infix*\",\n            .slash => \"$infix/\",\n            .percent => \"$infix%\",\n            .caret => \"$infix^\",\n            .bitwiseAnd => \"$infix&\",\n            .bitwiseOr => \"$infix|\",\n            .bitwiseXor => \"$infix||\",\n            .bitwiseLeftShift => \"$infix<<\",\n            .bitwiseRightShift => \"$infix>>\",\n            else => \"unknown\",\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to name from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn name(self: UnaryOp) []const u8 {\n        return switch (self) {\n            .minus => \"$prefix-\",\n            .not => \"$prefix!\",\n            .bitwiseNot => \"$prefix~\",\n            .address_of => \"$prefix&\",\n            else => \"unknown\",\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn init(self: *Ast, alloc: std.mem.Allocator, src: []const u8) !void {\n        self.* = .{\n            .node_alloc_handle = std.heap.ArenaAllocator.init(alloc),\n            .node_alloc = undefined,\n            .root = null,\n            .null_node = undefined,\n            .src = src,\n            .srcGen = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn deinit(self: *Ast, alloc: std.mem.Allocator) void {\n        self.node_alloc_handle.deinit();\n        self.srcGen.deinit(alloc);\n        for (self.strs.items) |str| {\n            alloc.free(str);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clearNodes from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn clearNodes(self: *Ast) !void {\n        _ = self.node_alloc_handle.reset(.retain_capacity);\n        self.null_node = try self.newEmptyNode(.null);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "clearNodes",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to view from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn view(self: *const Ast) AstView {\n        return .{\n            .root = self.root,\n            .null_node = self.null_node,\n            .src = self.src,\n            .srcGen = self.srcGen.items,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "view",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dupeNodes from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn dupeNodes(self: *Ast, nodes: []const *Node) ![]*Node {\n        return self.node_alloc.dupe(*Node, nodes);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "dupeNodes",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newEmptyNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn newEmptyNode(self: *Ast, comptime node_t: NodeType) !*NodeData(node_t) {\n        const Align = @alignOf(NodeData(node_t));\n        const slice = try self.node_alloc.alignedAlloc(u8, Align, @sizeOf(NodeData(node_t)) + Align);\n        @as(*NodeType, @ptrFromInt(@intFromPtr(slice.ptr) + Align - 1)).* = node_t;\n        return @ptrFromInt(@intFromPtr(slice.ptr) + Align);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "newEmptyNode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to newNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn newNode(self: *Ast, comptime node_t: NodeType, data: NodeData(node_t)) !*NodeData(node_t) {\n        const n = try self.newEmptyNode(node_t);\n        n.* = data;\n        return n;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "newNode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to newNodeErase from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn newNodeErase(self: *Ast, comptime node_t: NodeType, data: NodeData(node_t)) !*Node {\n        const n = try self.newEmptyNode(node_t);\n        n.* = data;\n        return @ptrCast(n);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "newNodeErase",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genSpanNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn genSpanNode(self: *Ast, alloc: std.mem.Allocator, comptime node_t: NodeType, str: []const u8) !*Span {\n        const pos = self.srcGen.items.len;\n        try self.srcGen.appendSlice(alloc, str);\n        const span = try self.newSpanNode(node_t, pos, pos + str.len);\n        span.srcGen = true;\n        return span;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "genSpanNode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to newSpanNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn newSpanNode(self: *Ast, comptime node_t: NodeType, src_pos: usize, src_end: usize) !*Span {\n        const span = try self.newEmptyNode(node_t);\n        span.* = .{\n            .pos = @intCast(src_pos),\n            .len = @intCast(src_end-src_pos),\n            .srcGen = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "newSpanNode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to nodeString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn nodeString(self: Ast, n: *Node) []const u8 {\n        const span: *Span = @ptrCast(@alignCast(n));\n        if (span.srcGen) {\n            return self.srcGen.items[span.pos..span.pos+span.len];\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "nodeString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to computeLinePos from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn computeLinePos(self: AstView, pos: u32, outLine: *u32, outCol: *u32, outLineStart: *u32) void {\n        var line: u32 = 0;\n        var lineStart: u32 = 0;\n        for (self.src, 0..) |ch, i| {\n            if (i == pos) {\n                break;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "computeLinePos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to declNamePath from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn declNamePath(self: AstView, n: *Node) ![]const u8 {\n        switch (n.type()) {\n            .cstruct_decl => {\n                const cstruct = n.cast(.cstruct_decl);\n                if (cstruct.name) |name| {\n                    return self.nodeString(name);\n                }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "declNamePath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nodeString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn nodeString(self: AstView, n: *Node) []const u8 {\n        const span: *Span = @ptrCast(@alignCast(n));\n        if (span.srcGen) {\n            return self.srcGen[span.pos..span.pos+span.len];\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "nodeString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nodeStringAndDelim from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn nodeStringAndDelim(self: AstView, n: *Node) []const u8 {\n        const span: *Span = @ptrCast(n);\n        if (span.srcGen) {\n            return self.srcGen[span.pos-1..span.pos+span.len+1];\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "nodeStringAndDelim",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isMethodDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn isMethodDecl(self: AstView, decl: *FuncDecl) bool {\n        if (decl.params.len == 0) {\n            return false;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "isMethodDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getNamePathInfo from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn getNamePathInfo(self: AstView, name: *Node) NamePathInfo {\n        if (name.type() != .name_path) {\n            const base = self.nodeString(name);\n            return .{\n                .name_path = base,\n                .base_name = base,\n                .base = name,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "getNamePathInfo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isAdjacentLine from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn isAdjacentLine(self: AstView, aEnd: u32, bStart: u32) bool {\n        var i = aEnd;\n        if (self.src[i] == '\\r') {\n            i += 1;\n            if (self.src[i] != '\\n') {\n                return false;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "isAdjacentLine",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getUnOpStr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "fn getUnOpStr(op: UnaryOp) []const u8 {\n    return switch (op) {\n        .minus => \"-\",\n        .not => \"!\",\n        .bitwiseNot => \"~\",\n        .address_of => \"&\",\n        .dummy => cy.unexpected(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "getUnOpStr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getBinOpStr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "fn getBinOpStr(op: BinaryExprOp) []const u8 {\n    return switch (op) {\n        .plus => \"+\",\n        .minus => \"-\",\n        .star => \"*\",\n        .caret => \"^\",\n        .slash => \"/\",\n        .percent => \"%\",\n        .bitwiseAnd => \"&\",\n        .bitwiseOr => \"|\",\n        .bitwiseXor => \"||\",\n        .bitwiseLeftShift => \"<<\",\n        .bitwiseRightShift => \">>\",\n        .bang_equal => \"!=\",\n        .less => \"<\",\n        .less_equal => \"<=\",\n        .greater => \">\",\n        .greater_equal => \">=\",\n        .equal_equal => \"==\",\n        .and_op => \" and \",\n        .or_op => \" or \",\n        .cast => \"as\",\n        .range,\n        .reverse_range,\n        .index,\n        .dummy => cy.unexpected(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "getBinOpStr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocFmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn allocFmt(self: Encoder, alloc: std.mem.Allocator, node: ?*Node) ![]const u8 {\n        if (node == null) {\n            return \"\";\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "allocFmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn format(self: Encoder, node: ?*Node, buf: []u8) ![]const u8 {\n        if (node == null) {\n            return \"\";\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "format",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn write(self: Encoder, w: anytype, node: *Node) !void {\n        switch (node.type()) {\n            .funcDecl => {\n                const decl = node.cast(.funcDecl);\n                try w.writeAll(\"func \");\n                try self.write(w, decl.name);\n                try w.writeAll(\"(\");\n                if (decl.params.len > 0) {\n                    try self.write(w, @ptrCast(decl.params[0]));\n                    for (decl.params[1..]) |param| {\n                        try w.writeAll(\", \");\n                        try self.write(w, @ptrCast(param));\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "write",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn deinit(self: *Visitor) void {\n//         self.stack.deinit(self.alloc);\n//     }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to visit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn visit(self: *Visitor, rootId: *Node,\n//         comptime C: type, ctx: C, visitFn: *const fn(ctx: C, nodeId: NodeId, enter: bool) bool) !void {\n\n//         self.stack.clearRetainingCapacity();\n//         try self.pushNode(rootId);\n//         while (self.stack.items.len > 0) {\n//             const vnode = &self.stack.items[self.stack.items.len-1];\n//             if (!vnode.visited) {\n//                 if (visitFn(ctx, vnode.nodeId, true)) {\n//                     vnode.visited = true;\n//                     const node = self.ast.node(vnode.nodeId);\n//                     switch (node.type()) {\n//                         .objectField => {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "visit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "fn pushNode(self: *Visitor, nodeId: NodeId) !void {\n//         try self.stack.append(self.alloc, .{\n//             .nodeId = @intCast(nodeId),\n//             .visited = false,\n//         }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "pushNode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushNodeList from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "fn pushNodeList(self: *Visitor, head: NodeId, size: u32) !void {\n//         try self.stack.ensureUnusedCapacity(self.alloc, size);\n//         self.stack.items.len += size;\n\n//         var i: u32 = 0;\n//         var cur = head;\n//         while (cur != cy.NullNode) {\n//             self.stack.items[self.stack.items.len-1-i] = .{\n//                 .nodeId = @intCast(cur),\n//                 .visited = false,\n//             }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "pushNodeList",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to findAttr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub fn findAttr(attrs: []const *Attribute, attr_t: AttributeType) ?*Attribute {\n    if (attrs.len == 0) {\n        return null;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "function",
      "name": "findAttr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to PtrSlice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const PtrSlice = struct {\n    elem: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "PtrSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ExpandOpt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ExpandOpt = struct {\n    param: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ExpandOpt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to RefSlice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const RefSlice = struct {\n    elem: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "RefSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Ref from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const Ref = struct {\n    elem: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Ref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const Ptr = struct {\n    elem: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ExprStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ExprStmt = struct {\n    child: *Node align(8),\n    isLastRootStmt: bool = false, \n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ExprStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ReturnExprStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ReturnExprStmt = struct {\n    child: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ReturnExprStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ImportStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ImportStmt = struct {\n    name: *Node align(8),\n    spec: ?*Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ImportStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Token from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Token = struct {\n    pos: u32 align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Token",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Span from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Span = struct {\n    // This can be different from Node.srcPos if the literal was generated.\n    pos: u32 align(8),\n    len: u16,\n    srcGen: bool,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to NamePath from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const NamePath = struct {\n    path: []*Node align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "NamePath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to NamedArg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const NamedArg = struct {\n    name_pos: u32 align(8),\n    name_len: u32,\n    arg: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "NamedArg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TryStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const TryStmt = struct {\n    stmts: []*Node align(8),\n    catchStmt: *CatchStmt,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "TryStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CatchStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const CatchStmt = struct {\n    errorVar: ?*Node align(8),\n    stmts: []*Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "CatchStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TryExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const TryExpr = struct {\n    expr: *Node align(8),\n    catchExpr: ?*Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "TryExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CastExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const CastExpr = struct {\n    expr: *Node align(8),\n    typeSpec: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "CastExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AssignStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const AssignStmt = struct {\n    left: *Node align(8),\n    right: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "AssignStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BinExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const BinExpr = struct {\n    left: *Node align(8),\n    right: *Node,\n    op: BinaryExprOp,\n    op_pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "BinExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to OpAssignStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const OpAssignStmt = struct {\n    left: *Node align(8),\n    right: *Node,\n    op: BinaryExprOp,\n    assign_pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "OpAssignStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CaseBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const CaseBlock = struct {\n    // conds.len == 0 if `else` case.\n    conds: []*Node align(8),\n    capture: ?*Node,\n    stmts: []*Node,\n    bodyIsExpr: bool,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "CaseBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SwitchBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const SwitchBlock = struct {\n    expr: *Node align(8),\n    cases: []*CaseBlock,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "SwitchBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Attribute from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Attribute = struct {\n    type: AttributeType align(8),\n    value: ?*Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Attribute",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ThrowExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ThrowExpr = struct {\n    child: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ThrowExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Group from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const Group = struct {\n    child: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Group",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Coresume from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const Coresume = struct {\n    child: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Coresume",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Coinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const Coinit = struct {\n    child: *CallExpr align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Coinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to IfStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const IfStmt = struct {\n    cond: *Node align(8),\n    stmts: []const *Node,\n    else_blocks: []*ElseBlock,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "IfStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ElseBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ElseBlock = struct {\n    // for else ifs only.\n    cond: ?*Node align(8),\n    stmts: []const *Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ElseBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to IfUnwrapStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const IfUnwrapStmt = struct {\n    opt: *Node align(8),\n    unwrap: *Node,\n    stmts: []const *Node,\n    else_blocks: []*ElseBlock,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "IfUnwrapStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AwaitExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const AwaitExpr = struct {\n    child: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "AwaitExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AccessExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const AccessExpr = struct {\n    left: *Node align(8),\n    right: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "AccessExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UnwrapChoice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const UnwrapChoice = struct {\n    left: *Node align(8),\n    right: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "UnwrapChoice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DerefExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const DerefExpr = struct {\n    left: *Node align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "DerefExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Unwrap from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const Unwrap = struct {\n    opt: *Node align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Unwrap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UnwrapOr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const UnwrapOr = struct {\n    opt: *Node align(8),\n    default: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "UnwrapOr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CallExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const CallExpr = struct {\n    callee: *Node align(8),\n    args: []*Node,\n    hasNamedArg: bool,\n    ct: bool = false,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "CallExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ArrayLit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ArrayLit = struct {\n    args: []*Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ArrayLit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DotInitLit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const DotInitLit = struct {\n    init: *InitLit align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "DotInitLit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ArrayExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ArrayExpr = struct {\n    left: *Node align(8),\n    args: []*Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ArrayExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ArrayType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ArrayType = struct {\n    size: *Node align(8),\n    elem: *Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ArrayType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InitExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const InitExpr = struct {\n    left: *Node align(8),\n    init: *InitLit,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "InitExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InitLit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const InitLit = struct {\n    // KeyValue or Expr.\n    args: []*Node align(8),\n    pos: u32,\n\n    /// This only reflects the literal by itself.\n    array_like: bool,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "InitLit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Unary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const Unary = struct {\n    child: *Node align(8),\n    op: UnaryOp,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Unary",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Root from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Root = struct {\n    stmts: []const *Node align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Root",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to KeyValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const KeyValue = struct {\n    key: *Node align(8),\n    value: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "KeyValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ComptimeExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ComptimeExpr = struct {\n    child: *Node align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ComptimeExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ComptimeStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ComptimeStmt = struct {\n    expr: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ComptimeStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to FuncType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const FuncType = struct {\n    params: []const *FuncParam align(8),\n    ret: ?*Node,\n    pos: u32,\n    is_union: bool,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "FuncType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to LambdaExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const LambdaExpr = struct {\n    params: []const *FuncParam align(8),\n    // For single expr lambda, `stmts.ptr` refers to the node.\n    stmts: []const *Node,\n    sig_t: FuncSigType,\n    ret: ?*Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "LambdaExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to FuncDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const FuncDecl = struct {\n    name: *Node align(8),\n    attrs: []*Attribute,\n    params: []const *FuncParam,\n    ret: ?*Node,\n    hidden: bool,\n    stmts: []*Node,\n    sig_t: FuncSigType,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "FuncDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to FuncParam from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const FuncParam = struct {\n    name_type: *Node align(8),\n    type: ?*Node,\n\n    // Used by sema to indicate that the parameter's type is inferred.\n    sema_infer_tparam: bool = false,\n    sema_tparam: bool = false,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "FuncParam",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UseAlias from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const UseAlias = struct {\n    name: *Node align(8),\n    target: *Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "UseAlias",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TypeAliasDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const TypeAliasDecl = struct {\n    name: *Node align(8),\n    typeSpec: *Node,\n    hidden: bool,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "TypeAliasDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CustomDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const CustomDecl = struct {\n    name: *Node align(8),\n    attrs: []*Attribute,\n    hidden: bool,\n    funcs: []*FuncDecl,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "CustomDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DistinctDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const DistinctDecl = struct {\n    name: *Node align(8),\n    attrs: []*Attribute,\n    target: *Node,\n    hidden: bool,\n    funcs: []*FuncDecl,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "DistinctDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Field from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Field = struct {\n    name: *Node align(8),\n    typeSpec: ?*Node,\n    hidden: bool,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Field",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TraitDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const TraitDecl = struct {\n    name: *Node align(8),\n    attrs: []*Attribute,\n    funcs: []*FuncDecl,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "TraitDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ImplWith from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ImplWith = struct {\n    trait: *Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ImplWith",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ObjectDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ObjectDecl = struct {\n    /// If unnamed, this points to the *Sym.\n    name: ?*Node align(8),\n    attrs: []*Attribute,\n    impl_withs: []*ImplWith,\n    fields: []*Field,\n    funcs: []*FuncDecl,\n    unnamed: bool,\n    is_tuple: bool,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ObjectDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to StaticVarDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const StaticVarDecl = struct {\n    name: *Node align(8),\n    attrs: []*Attribute,\n    typeSpec: ?*Node,\n    right: ?*Node,\n    typed: bool,\n    // Declared with `.` prefix.\n    root: bool,\n    hidden: bool,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "StaticVarDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to VarDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const VarDecl = struct {\n    name: *Node align(8),\n    typeSpec: ?*Node,\n    right: *Node,\n    typed: bool,\n    pos: u32\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "VarDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ContextDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ContextDecl = struct {\n    name: *Node align(8),\n    type: ?*Node,\n    right: ?*Node,\n    pos: u32\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ContextDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to EnumMember from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const EnumMember = struct {\n    name: *Node align(8),\n    typeSpec: ?*Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "EnumMember",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to EnumDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const EnumDecl = struct {\n    name: *Node align(8),\n    members: []*EnumMember,\n    isChoiceType: bool,\n    hidden: bool,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "EnumDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to WhileInfStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const WhileInfStmt = struct {\n    stmts: []*Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "WhileInfStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to WhileCondStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const WhileCondStmt = struct {\n    cond: *Node align(8),\n    stmts: []const *Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "WhileCondStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to WhileOptStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const WhileOptStmt = struct {\n    opt: *Node align(8),\n    capture: *Node,\n    stmts: []const *Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "WhileOptStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ForRangeStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const ForRangeStmt = struct {\n    start: *Node align(8),\n    end: *Node,\n    each: ?*Node,\n    increment: bool,\n    stmts: []*Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ForRangeStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ForIterStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const ForIterStmt = struct {\n    iterable: *Node align(8),\n    each: ?*Node,\n    count: ?*Node,\n    stmts: []const *Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "ForIterStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SemaSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const SemaSym = struct {\n    sym: *cy.Sym align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "SemaSym",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SeqDestructure from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const SeqDestructure = struct {\n    args: []*Node align(8),\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "SeqDestructure",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TemplateDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const TemplateDecl = struct {\n    params: []*FuncParam align(8),\n    child_decl: *Node,\n\n    pub fn getAttrs(self: *TemplateDecl) []const *Attribute {\n        switch (self.child_decl.type()) {\n            .funcDecl => {\n                return self.child_decl.cast(.funcDecl).attrs;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "TemplateDecl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Range from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Range = struct {\n    start: ?*Node align(8),\n    end: ?*Node,\n    inc: bool,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Range",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to IfExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const IfExpr = struct {\n    cond: *Node align(8),\n    body: *Node,\n    else_expr: *Node,\n    pos: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "IfExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to StringTemplate from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const StringTemplate = struct {\n    // Begins with a string lit and alternates between expr and string lits.\n    parts: []*Node align(8),\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "StringTemplate",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Node from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Node = struct {\n    dummy: u8 align(8) = undefined,\n\n    pub fn @\"type\"(self: *Node) NodeType {\n        return @as(*NodeHeader, @ptrFromInt(@intFromPtr(self) - 1)).*.type;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Node",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Ast from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Ast = struct {\n    node_alloc_handle: std.heap.ArenaAllocator,\n    node_alloc: std.mem.Allocator,\n    root: ?*Root,\n    null_node: *Node,\n    src: []const u8,\n\n    /// Generated source literals from templates or CTE.\n    srcGen: std.ArrayListUnmanaged(u8),\n\n    /// Heap generated strings, stable pointers unlike `srcGen`.\n    /// Used for:\n    /// - Unnamed struct identifiers.\n    /// - Unescaped strings.\n    strs: std.ArrayListUnmanaged([]const u8),\n\n    /// Optionally parsed by tokenizer.\n    comments: std.ArrayListUnmanaged(cy.IndexSlice(u32)),\n\n    pub fn init(self: *Ast, alloc: std.mem.Allocator, src: []const u8) !void {\n        self.* = .{\n            .node_alloc_handle = std.heap.ArenaAllocator.init(alloc),\n            .node_alloc = undefined,\n            .root = null,\n            .null_node = undefined,\n            .src = src,\n            .srcGen = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Ast",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AstView from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const AstView = struct {\n    root: ?*Root,\n    null_node: *Node,\n    src: []const u8,\n    srcGen: []const u8,\n\n    /// Find the line/col in `src` at `pos`.\n    /// Iterating tokens could be faster but it would still require counting new lines for skipped segments like comments, multiline strings.\n    pub fn computeLinePos(self: AstView, pos: u32, outLine: *u32, outCol: *u32, outLineStart: *u32) void {\n        var line: u32 = 0;\n        var lineStart: u32 = 0;\n        for (self.src, 0..) |ch, i| {\n            if (i == pos) {\n                break;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "AstView",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to NamePathInfo from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const NamePathInfo = struct {\n    name_path: []const u8,\n    base_name: []const u8,\n    base: *Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "NamePathInfo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Encoder from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Encoder = struct {\n    ast: AstView,\n    eventHandler: ?*const fn (Encoder, EncodeEvent, *Node) void = null,\n\n    pub fn allocFmt(self: Encoder, alloc: std.mem.Allocator, node: ?*Node) ![]const u8 {\n        if (node == null) {\n            return \"\";\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Encoder",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Visitor from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "pub const Visitor = struct {\n//     alloc: std.mem.Allocator,\n//     ast: AstView,\n//     stack: std.ArrayListUnmanaged(VisitNode),\n\n//     pub fn deinit(self: *Visitor) void {\n//         self.stack.deinit(self.alloc);\n//     }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "struct",
      "name": "Visitor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to span from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const span: *Span = @ptrCast(@alignCast(n));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "const",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to span from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const span: *Span = @ptrCast(@alignCast(n));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "const",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to span from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/ast.zig",
    "response": "const span: *Span = @ptrCast(n);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/ast.zig",
      "type": "const",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genAll from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn genAll(c: *cy.Compiler) !void {\n    // Constants.\n    c.vm.emptyString = try c.buf.getOrPushStaticAstring(\"\");\n\n    // Prepare types.\n    for (c.newTypes(), c.type_start..) |stype, typeId| {\n        if (stype.kind == .null) {\n            // Skip placeholders.\n            continue;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genAll",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to prepareSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn prepareSym(c: *cy.Compiler, sym: *cy.Sym) !void {\n    log.tracev(\"prep sym: {s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "prepareSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to prepareFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn prepareFunc(c: *cy.Compiler, opt_group: ?rt.FuncGroupId, func: *cy.Func) !void {\n    switch (func.type) {\n        .trait => return,\n        .userLambda => {\n            if (cy.Trace) {\n                const symPath = try cy.sym.allocSymName(&c.sema, c.alloc, func.parent, .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "prepareFunc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addGroupFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn addGroupFunc(c: *cy.Compiler, group: rt.FuncGroupId, func: *cy.Func, rtFunc: rt.FuncSymbol) !u32 {\n    const id = try c.vm.addGroupFunc(group, func.name(), func.funcSigId, rtFunc);\n    try c.genSymMap.put(c.alloc, func, .{ .func = .{ .id = @intCast(id), .pc = 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "addGroupFunc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn reserveFunc(c: *cy.Compiler, func: *cy.Func) !u32 {\n    const res = try c.genSymMap.getOrPut(c.alloc, func);\n    if (!res.found_existing) {\n        const id = try c.vm.addFunc(func.name(), func.funcSigId, rt.FuncSymbol.initNull());\n        res.value_ptr.* = .{ .func = .{ .id = id, .pc = 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveFunc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to completeFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn completeFunc(c: *cy.Compiler, id: u32, func: *cy.Func, sym: rt.FuncSymbol) void {\n    log.tracev(\"complete func gen: {s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "completeFunc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genChunk from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genChunk(c: *Chunk) !void {\n    genChunkInner(c) catch |err| {\n        if (err != error.CompileError) {\n            // Wrap all other errors as a CompileError.\n            return c.reportErrorFmt(\"error.{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genChunk",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genStmts from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genStmts(c: *Chunk, idx: u32) !void {\n    var stmt = idx;\n    while (stmt != cy.NullId) {\n        try genStmt(c, stmt);\n        stmt = c.ir.getStmtNext(stmt);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genStmts",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genStmt(c: *Chunk, idx: u32) anyerror!void {\n    const code = c.ir.getStmtCode(idx);\n    const node = c.ir.getNode(idx);\n    c.curNode = node;\n    if (cy.Trace) {\n        const contextStr = try c.encoder.format(node, &cy.tempBuf);\n        if (cc.verbose()) {\n            rt.logFmt(\"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genChunkInner from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genChunkInner(c: *Chunk) !void {\n    c.dataStack.clearRetainingCapacity();\n    c.dataU8Stack.clearRetainingCapacity();\n    c.listDataStack.clearRetainingCapacity();\n\n    c.indent = 0;\n\n    for (c.ir.func_blocks.items) |block| {\n        try genStmt(c, block);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genChunkInner",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genExpr(c: *Chunk, idx: usize, cstr: Cstr) anyerror!GenValue {\n    const code = c.ir.getExprCode(idx);\n    const node = c.ir.getNode(idx);\n    if (cy.Trace) {\n        c.indent += 1;\n        const contextStr = try c.encoder.format(node, &cy.tempBuf);\n        if (cc.verbose()) {\n            rt.logFmt(\"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushDebugLabel from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushDebugLabel(c: *Chunk, idx: usize) !void {\n    const data = c.ir.getStmtData(idx, .pushDebugLabel);\n    try c.buf.pushDebugLabel(data.name);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushDebugLabel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mainBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn mainBlock(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .mainBlock);\n    log.tracev(\"main block: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "mainBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to funcBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn funcBlock(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .funcBlock);\n    const func = data.func;\n\n    // Skip if marked as skip (usually for one-off compile-time functions)\n    if (data.skip) {\n        return;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "funcBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genAwait from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genAwait(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .await_expr);\n    const ret_t = c.ir.getExprType(idx).id;\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n    const childv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, childv, node);\n\n    try c.pushCode(.await_op, &.{childv.reg}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genAwait",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCoresume from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCoresume(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .coresume);\n    const inst = try bc.selectForDstInst(c, cstr, bt.Any, true, node);\n\n    const childv = try genExpr(c, data.expr, Cstr.simpleRetain);\n    try initTempValue(c, childv, node);\n\n    try c.pushCode(.coresume, &.{childv.reg, inst.dst}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCoresume",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCoyield from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCoyield(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    _ = idx;\n    try c.pushFCode(.coyield, &.{0, 0}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCoyield",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCoinitCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCoinitCall(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const call = c.ir.getExprData(idx, .coinitCall).call;\n    const callCode: ir.ExprCode = @enumFromInt(c.ir.buf.items[call]);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Fiber, true, node);\n\n    const tempStart = numSlots(c);\n    var numArgs: u32 = 0;\n    var args: []align(1) const u32 = undefined;\n    if (callCode == .call_sym) {\n        const data = c.ir.getExprData(call, .call_sym);\n        numArgs = data.numArgs;\n\n        args = c.ir.getArray(data.args, u32, numArgs);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCoinitCall",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCast from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCast(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .cast);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    if (!data.isRtCast) {\n        return genExpr(c, data.expr, cstr);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCast",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genFieldDyn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genFieldDyn(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .fieldDyn);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Dyn, true, node);\n\n    const recv = try genExpr(c, data.rec, Cstr.simple);\n    try initTempValue(c, recv, node);\n\n    const field_id = try c.compiler.vm.ensureField(data.name);\n    try pushFieldDyn(c, recv.reg, inst.dst, @intCast(field_id), node);\n\n    try popTempValue(c, recv, node);\n    if (inst.own_dst) {\n        try initSlot(c, inst.dst, true, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genFieldDyn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genAddressOf from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genAddressOf(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .address_of);\n    return genAddressOf2(c, data.expr, cstr, node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genAddressOf",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genAddressOf2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genAddressOf2(c: *Chunk, expr: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const code = c.ir.getExprCode(expr);\n    switch (code) {\n        .local => {\n            const data = c.ir.getExprData(expr, .local);\n            const local_slot = toLocalReg(c, data.id);\n            const slot = getSlot(c, local_slot);\n\n            const inst = try bc.selectForDstInst(c, cstr, bt.Integer, false, node);\n\n            const expr_t = c.ir.getExprType(expr).id;\n            const type_sym = c.sema.getTypeSym(expr_t);\n            var is_ptr = false;\n            if (type_sym.getVariant()) |variant| {\n                if (variant.getSymTemplate() == c.sema.pointer_tmpl) {\n                    is_ptr = true;\n                }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genAddressOf2",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genDeref from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genDeref(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .deref);\n\n    const ret_t = c.ir.getExprType(idx).id;\n    const ret_te = c.sema.getType(ret_t);\n    const ret_is_struct = ret_te.kind == .struct_t;\n    const retain = ret_is_struct or c.sema.isRcCandidateType(ret_t);\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, ret_is_struct, node);\n    const srcv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, srcv, node);\n\n    if (ret_is_struct) {\n        const nfields: u8 = @intCast(c.sema.types.items[ret_t].data.struct_t.nfields);\n        const start = c.buf.ops.items.len;\n        try c.pushCode(.deref_struct, &.{ srcv.reg, 0, 0, nfields, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genDeref",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genField(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .field);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n\n    const rec_t = c.ir.getExprType(data.rec).id;\n    const rec_te = c.sema.getType(rec_t);\n    const rec_is_pointer = c.sema.isPointerType(rec_t);\n    const willRetain = c.sema.isRcCandidateType(ret_t);\n    if (rec_te.kind == .struct_t or rec_is_pointer) {\n        const addrv = try genAddressOf2(c, idx, Cstr.simple, node);\n        try initTempValue(c, addrv, node);\n\n        const ret_te = c.sema.getType(ret_t);\n        if (ret_te.kind == .struct_t) {\n            const numFields: u8 = @intCast(c.sema.types.items[ret_t].data.struct_t.nfields);\n            const start = c.buf.ops.items.len;\n            try c.pushCode(.deref_struct, &.{ addrv.reg, 0, 0, numFields, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genField",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genStructInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genStructInit(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .object_init);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n\n    const args = c.ir.getArray(data.args, u32, data.numArgs);\n    const argStart = numSlots(c);\n    for (args) |argIdx| {\n        const arg_t = c.ir.getExprType(argIdx).id;\n        const temp = try bc.reserveTemp(c, arg_t);\n        const argv = try genExpr(c, argIdx, Cstr.toTempRetain(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genStructInit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genObjectInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genObjectInit(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const ret_t = c.ir.getExprType(idx).id;\n    const ret_te = c.sema.getType(ret_t);\n    if (ret_te.kind == .struct_t) {\n        return genStructInit(c, idx, cstr, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genObjectInit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to breakStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn breakStmt(c: *Chunk, node: *ast.Node) !void {\n    // Release from startLocal of the first parent loop block.\n    var idx = c.blocks.items.len-1;\n    while (true) {\n        const b = c.blocks.items[idx];\n        if (b.isLoopBlock) {\n            try genReleaseSlots(c, c.curBlock.slot_start, b.slot_off, node);\n            break;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "breakStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to contStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn contStmt(c: *Chunk, node: *ast.Node) !void {\n    // Release from startLocal of the first parent loop block.\n    var idx = c.blocks.items.len-1;\n    while (true) {\n        const b = c.blocks.items[idx];\n        if (b.isLoopBlock) {\n            try genReleaseSlots(c, c.curBlock.slot_start, b.slot_off, node);\n            break;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "contStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genThrow from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genThrow(c: *Chunk, idx: usize, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .throw);\n    const childv = try genExpr(c, data.expr, Cstr.simple);\n    if (childv.type == .temp) {\n        try initSlot(c, childv.reg, childv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genThrow",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn setIndex(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .setIndex).index;\n    if (data.recvT != bt.ListDyn and data.recvT != bt.Map) {\n        return error.Unexpected;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "setIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setFieldDyn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn setFieldDyn(c: *Chunk, idx: usize, opts: SetFieldDynOptions, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .set_field_dyn).set_field_dyn;\n\n    const field_id = try c.compiler.vm.ensureField(data.name);\n    const ownRecv = opts.recv == null;\n\n    // LHS\n    var recv: GenValue = undefined;\n    if (opts.recv) |recv_| {\n        recv = recv_;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "setFieldDyn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genSetDeref from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genSetDeref(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .set_deref);\n\n    const ptrv = try genExpr(c, data.ptr, Cstr.simple);\n    try initTempValue(c, ptrv, node);\n\n    const rightv = try genExpr(c, data.right, Cstr.simple);\n    try initTempValue(c, rightv, node);\n\n    const right_t = c.ir.getExprType(data.right).id;\n    const right_te = c.sema.types.items[right_t];\n    if (right_te.kind == .struct_t) {\n        try c.pushCode(.set_deref_struct, &.{ ptrv.reg, @intCast(right_te.data.struct_t.nfields), rightv.reg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genSetDeref",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn setField(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .set_field).set_field;\n    const fieldData = c.ir.getExprData(data.field, .field);\n\n    const type_id = c.ir.getExprType(fieldData.rec).id;\n    const type_e = c.sema.getType(type_id);\n    // const rec_is_pointer = c.sema.isPointerType(type_id);\n\n    // Receiver.\n    if (type_e.kind == .struct_t) {\n        const addrv = try genAddressOf2(c, data.field, Cstr.simple, node);\n        try initTempValue(c, addrv, node);\n\n        const rightv = try genExpr(c, data.right, Cstr.simpleRetain);\n        try initTempValue(c, rightv, node);\n\n        const right_te = c.sema.getType(c.ir.getExprType(data.right).id);\n        if (right_te.kind == .struct_t) {\n            try c.pushCode(.set_deref_struct, &.{ addrv.reg, @intCast(right_te.data.struct_t.nfields), rightv.reg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "setField",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genError from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genError(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .errorv);\n\n    const symId = try c.compiler.vm.ensureSymbol(data.name);\n    const errval = cy.Value.initErrorSymbol(@intCast(symId));\n    const constIdx = try c.buf.getOrPushConst(errval);\n\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Error, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genError",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTagLit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genTagLit(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .tag_lit);\n\n    const sym = try c.compiler.vm.ensureSymbol(data.name);\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.TagLit, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genTagLit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genSymbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genSymbol(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .symbol);\n\n    const symId = try c.compiler.vm.ensureSymbol(data.name);\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Symbol, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genSymbol",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTypeCheck from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genTypeCheck(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(loc, .type_check);\n\n    const inst = try selectForDstInst(c, cstr, data.exp_type, false, node);\n\n    const exprv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, exprv, node);\n\n    try pushTypeCheck(c, exprv.reg, data.exp_type, inst.dst, node);\n    try consumeTempValue(c, exprv, node);\n    try popTempValue(c, exprv, node);\n    if (inst.own_dst) {\n        try initSlot(c, inst.dst, exprv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genTypeCheck",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTypeCheckOption from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genTypeCheckOption(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(loc, .typeCheckOption);\n\n    const expr = try genExpr(c, data.expr, cstr);\n    try pushTypeCheckOption(c, expr.reg, node);\n    return expr;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genTypeCheckOption",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genUnwrapChoice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genUnwrapChoice(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(loc, .unwrapChoice);\n    const ret_t = c.ir.getExprType(loc).id;\n    const retain = c.sema.isRcCandidateType(ret_t);\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, retain, node);\n\n    const choice = try genExpr(c, data.choice, Cstr.simple);\n    try initTempValue(c, choice, node);\n\n    try c.pushFCode(.unwrapChoice, &.{ choice.reg, data.tag, data.fieldIdx, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genUnwrapChoice",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genVoid from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genVoid(c: *Chunk, cstr: Cstr, node: *ast.Node) !GenValue {\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Void, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genVoid",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTrue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genTrue(c: *Chunk, cstr: Cstr, node: *ast.Node) !GenValue {\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Boolean, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genTrue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genFalse from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genFalse(c: *Chunk, cstr: Cstr, node: *ast.Node) !GenValue {\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Boolean, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genFalse",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genByte from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genByte(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .byte);\n\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Byte, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genByte",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genInt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genInt(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .int);\n\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Integer, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genInt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genFloat from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genFloat(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .float);\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.Float, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genFloat",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genNone(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .none);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const childv = try genExpr(c, data.child, Cstr.simple);\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, false, node);\n    try c.pushCode(.none, &.{childv.reg, inst.dst}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genNone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genStringTemplate from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genStringTemplate(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .stringTemplate);\n    const strsIdx = c.ir.advanceExpr(idx, .stringTemplate);\n    const strs = c.ir.getArray(strsIdx, []const u8, data.numExprs+1);\n    const args = c.ir.getArray(data.args, u32, data.numExprs);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.String, true, node); \n    const argStart = numSlots(c);\n\n    for (args, 0..) |argIdx, i| {\n        const temp = try bc.reserveTemp(c, bt.Any);\n        if (cy.Trace and temp != argStart + i) return error.Unexpected;\n        const argv = try genExpr(c, argIdx, Cstr.toTemp(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genStringTemplate",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genString(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .string);\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, bt.String, true, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genString",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushStringConst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushStringConst(c: *Chunk, str: []const u8, dst: SlotId, node: *ast.Node) !void {\n    const idx = try c.buf.getOrPushStaticStringConst(str);\n    try genConst(c, idx, dst, true, node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushStringConst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genUnOp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genUnOp(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .preUnOp).unOp;\n    const ret_t = c.ir.getExprType(idx).id;\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, false, node);\n\n    const childv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, childv, node);\n\n    switch (data.op) {\n        .not => {\n            try c.buf.pushOp2(.not, childv.reg, inst.dst);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genUnOp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCallSymDyn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCallSymDyn(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .call_sym_dyn);\n\n    const inst = try beginCall(c, cstr, bt.Dyn, false, node);\n\n    const argStart = numSlots(c);\n    const args = c.ir.getArray(data.args, u32, data.nargs);\n    for (args, 0..) |argIdx, i| {\n        const temp = try bc.reserveTemp(c, bt.Dyn);\n        if (cy.Trace and temp != argStart + i) return error.Unexpected;\n        const argv = try genExpr(c, argIdx, Cstr.toTemp(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCallSymDyn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCallObjSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCallObjSym(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .call_obj_sym);\n\n    const inst = try beginCall(c, cstr, bt.Dyn, false, node);\n\n    // Receiver.\n    const argStart = numSlots(c);\n    var temp = try bc.reserveTemp(c, bt.Dyn);\n    const recv = try genExpr(c, data.rec, Cstr.toTemp(temp));\n    try initSlot(c, temp, recv.retained, node);\n\n    const args = c.ir.getArray(data.args, u32, data.numArgs);\n    for (args, 0..) |argIdx, i| {\n        temp = try bc.reserveTemp(c, bt.Dyn);\n        if (cy.Trace and temp != argStart + 1 + i) return error.Unexpected;\n        const argv = try genExpr(c, argIdx, Cstr.toTemp(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCallObjSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCallTrait from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCallTrait(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .call_trait);\n\n    const ret_t = c.ir.getExprType(idx).id;\n    const inst = try beginCall(c, cstr, ret_t, true, node);\n\n    // Trait ref.\n    const argStart = numSlots(c);\n    var temp = try bc.reserveTemp(c, bt.Any);\n    const trait = try genExpr(c, data.trait, Cstr.toTemp(temp));\n    try initTempValue(c, trait, node);\n\n    // Reserve slot for unwrapped impl.\n    const placeholder = try bc.reserveTemp(c, bt.Any);\n    try initSlot(c, placeholder, false, node);\n\n    // Args. Skip impl placeholder.\n    const args = c.ir.getArray(data.args, u32, data.nargs)[1..];\n    for (args, 2..) |argIdx, i| {\n        const arg_t = c.ir.getExprType(argIdx).id;\n        temp = try bc.reserveTemp(c, arg_t);\n        if (cy.Trace and temp != argStart + i) return error.Unexpected;\n        const argv = try genExpr(c, argIdx, Cstr.toTemp(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCallTrait",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCallFuncSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCallFuncSym(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .call_sym);\n\n    if (true) {\n        // TODO: Handle specialized. (eg. listIndex, listAppend)\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCallFuncSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCallDyn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCallDyn(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .call_dyn);\n    const inst = try beginCall(c, cstr, bt.Dyn, true, node);\n\n    // Callee.\n    const argStart = numSlots(c);\n    var temp = try bc.reserveTemp(c, bt.Dyn);\n    const callee = try genExpr(c, data.callee, Cstr.toTemp(temp));\n    try initSlot(c, temp, callee.retained, node);\n\n    // Args.\n    const args = c.ir.getArray(data.args, u32, data.numArgs);\n    for (args, 0..) |argIdx, i| {\n        temp = try bc.reserveTemp(c, bt.Dyn);\n        if (cy.Trace and temp != argStart + 1 + i) return error.Unexpected;\n        const argv = try genExpr(c, argIdx, Cstr.toTemp(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCallDyn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genBinOp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genBinOp(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .preBinOp).binOp;\n    const ret_t = c.ir.getExprType(idx).id;\n    log.tracev(\"binop {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genBinOp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTrait from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genTrait(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .trait);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Any, true, node);\n    const exprv = try genExpr(c, data.expr, Cstr.simpleRetain);\n    try initTempValue(c, exprv, node);\n\n    const key = VtableKey{ .type = data.expr_t, .trait = data.trait_t }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genTrait",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genUnbox from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genUnbox(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .unbox);\n    const ret_t = c.ir.getExprType(idx).id;\n    if (c.sema.isUnboxedType(ret_t)) {\n        const inst = try bc.selectForDstInst(c, cstr, ret_t, false, node);\n        const childv = try genExpr(c, data.expr, Cstr.simple);\n        try initTempValue(c, childv, node);\n\n        const pc = c.buf.len();\n        try c.pushFCode(.unbox, &.{ childv.reg, 0, 0, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genUnbox",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genBox from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genBox(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .box);\n    const expr_t = c.ir.getExprType(data.expr);\n    if (c.sema.isUnboxedType(expr_t.id)) {\n        const inst = try bc.selectForDstInst(c, cstr, bt.Any, true, node);\n        const childv = try genExpr(c, data.expr, Cstr.simple);\n        const pc = c.buf.len();\n        try c.pushFCode(.box, &.{ childv.reg, 0, 0, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genBox",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCaptured from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genCaptured(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .captured);\n\n    const value_t = c.ir.getExprType(idx).id;\n    const retain = !c.sema.isUnboxedType(value_t);\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, value_t, retain, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genCaptured",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to initTempValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn initTempValue(c: *Chunk, val: GenValue, node: *ast.Node) !void {\n    if (val.type == .temp) {\n        try initSlot(c, val.reg, val.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initTempValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to initSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn initSlot(c: *Chunk, slot_id: SlotId, retained_val: bool, node: *ast.Node) !void {\n    // log.tracev(\"initSlot {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initSlot",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getSlotPtr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn getSlotPtr(c: *const Chunk, idx: usize) *Slot {\n    return &c.slot_stack.items[c.curBlock.slot_start + idx];\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getSlotPtr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn getSlot(c: *const Chunk, idx: usize) Slot {\n    return c.slot_stack.items[c.curBlock.slot_start + idx];\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn setSlot(c: *Chunk, idx: usize, slot: Slot) void {\n    c.slot_stack.items[c.curBlock.slot_start + idx] = slot;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "setSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toLocalReg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toLocalReg(c: *Chunk, irVarId: u8) SlotId {\n    return c.genIrLocalMapStack.items[c.curBlock.irLocalMapStart + irVarId];\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toLocalReg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genValueLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genValueLocal(c: *Chunk, reg: SlotId, cstr: Cstr, node: *ast.Node) !GenValue {\n    if (!cstr.isExact()) {\n        // Prefer no copy.\n        const retain = cstr.type == .simple and cstr.data.simple.retain;\n        if (retain) {\n            try c.pushCode(.retain, &.{ reg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genValueLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genLiftedValueLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genLiftedValueLocal(c: *Chunk, reg: SlotId, local: Slot, cstr: Cstr, node: *ast.Node) !GenValue {\n    _ = c;\n    _ = reg;\n    _ = local;\n    _ = cstr;\n    _ = node;\n\n    // const inst = try c.rega.selectForDstInst(cstr, true, node);\n    // try c.pushCode(.up_value, &.{ reg, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genLiftedValueLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genLocalReg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genLocalReg(c: *Chunk, reg: SlotId, slot_t: cy.TypeId, cstr: Cstr, node: *ast.Node) !GenValue {\n    const slot = getSlot(c, reg);\n\n    if (!slot.boxed_up) {\n        const type_e = c.sema.getType(slot_t);\n        if (type_e.kind == .struct_t) {\n            return genValueLocal(c, reg, cstr, node);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genLocalReg",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genLocal(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .local);\n    const reg = toLocalReg(c, data.id);\n    const slot_t = c.ir.getExprType(idx).id;\n    return genLocalReg(c, reg, slot_t, cstr, node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genEnumMemberSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genEnumMemberSym(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .enumMemberSym);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, ret_t, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genEnumMemberSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genContext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genContext(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .context);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, ret_t, true, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genContext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genVarSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genVarSym(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .varSym);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const varId = c.compiler.genSymMap.get(data.sym).?.varSym.id;\n\n    const inst = try bc.selectForNoErrNoDepInst(c, cstr, ret_t, false, node);\n    if (inst.requiresPreRelease) {\n        try pushRelease(c, inst.dst, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genVarSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genFuncPtr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genFuncPtr(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .func_ptr);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Any, true, node);\n\n    const pc = c.buf.len();\n    try c.pushCode(.func_ptr, &.{ 0, 0, 0, 0, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genFuncPtr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genFuncUnion from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genFuncUnion(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .func_union);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Any, true, node);\n    const childv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, childv, node);\n\n    const pc = c.buf.len();\n    try c.pushCode(.func_union, &.{ childv.reg, 0, 0, inst.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genFuncUnion",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genType(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .type);\n\n    const inst = try bc.selectForDstInst(c, cstr, if (data.expr_type) bt.ExprType else bt.Type, true, node);\n    const pc = c.buf.len();\n\n    try c.pushCode(.type, &.{0, 0, 0, 0, @intFromBool(data.expr_type), inst.dst}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveFuncSlots from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn reserveFuncSlots(c: *Chunk, maxIrLocals: u8, numParamCopies: u8, params: []align(1) const ir.FuncParam) !void {\n    const numParams = params.len;\n    try c.genIrLocalMapStack.resize(c.alloc, c.curBlock.irLocalMapStart + maxIrLocals);\n\n    c.curBlock.num_pre_slots = @intCast(4 + 1 + numParams);\n    c.genBlock().num_locals += numParamCopies;\n\n    const maxLocalRegs = 4 + 1 + numParams + numParamCopies + (maxIrLocals - numParams);\n    log.tracev(\"reserveFuncRegs {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveFuncSlots",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to initVarSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn initVarSym(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    _ = node;\n    const data = c.ir.getStmtData(idx, .init_var_sym);\n\n    const ir_save = c.ir;\n    defer c.ir = ir_save;\n\n    c.ir = data.src_ir;\n    const id = c.compiler.genSymMap.get(data.sym).?.varSym.id;\n    _ = try genExpr(c, data.expr, Cstr.toVarSym(id, false));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initVarSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setVarSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn setVarSym(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    _ = node;\n    const data = c.ir.getStmtData(idx, .set_var_sym);\n    const id = c.compiler.genSymMap.get(data.sym).?.varSym.id;\n    const expr_t = c.ir.getExprType(data.expr).id;\n    const boxed = !c.sema.isUnboxedType(expr_t);\n    _ = try genExpr(c, data.expr, Cstr.toVarSym(id, boxed));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "setVarSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to declareLocalInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn declareLocalInit(c: *Chunk, idx: u32, node: *ast.Node) !SlotId {\n    const data = c.ir.getStmtData(idx, .declareLocalInit);\n\n    const slot = try reserveLocal(c, data.declType, data.lifted, node);\n    c.genIrLocalMapStack.items[c.curBlock.irLocalMapStart + data.id] = slot;\n    c.genBlock().num_locals += 1;\n    if (data.zeroMem) {\n        try c.buf.pushOp2Ext(.constIntV8, 0, slot, null);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "declareLocalInit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to declareLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn declareLocal(c: *Chunk, idx: u32, node: *ast.Node) !SlotId {\n    const data = c.ir.getStmtData(idx, .declareLocal);\n    const slot = try reserveLocal(c, data.declType, data.lifted, node);\n    c.genIrLocalMapStack.items[c.curBlock.irLocalMapStart + data.id] = slot;\n    c.genBlock().num_locals += 1;\n\n    const local = getSlot(c, slot);\n    try initSlot(c, slot, local.boxed, node);\n    return slot;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "declareLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setCaptured from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn setCaptured(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    _ = node;\n    const data = c.ir.getStmtData(idx, .setCaptured).generic;\n    const capData = c.ir.getExprData(data.left, .captured);\n\n    // RHS.\n    // const dstRetained = c.sema.isRcCandidateType(data.leftT.id);\n    _ = try genExpr(c, data.right, Cstr.toCaptured(capData.idx));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "setCaptured",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to irSetLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn irSetLocal(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .setLocal).local;\n    try setLocal(c, data, node, .{ .check_type = null }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "irSetLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn setLocal(c: *Chunk, data: ir.SetLocal, node: *ast.Node, opts: SetLocalOptions) !void {\n    const reg = toLocalReg(c, data.id);\n    const local = getSlot(c, reg);\n\n    var dst: Cstr = undefined;\n    if (local.boxed_up) {\n        const right_t = c.ir.getExprType(data.right).id;\n        const boxed_child = !c.sema.isUnboxedType(right_t);\n        dst = Cstr.toLiftedLocal(reg, boxed_child);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "setLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSet(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    _ = node;\n    const data = c.ir.getStmtData(idx, .opSet);\n    // TODO: Perform optimizations depending on the next set* code.\n    try genStmt(c, data.set_stmt);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSet",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetField(c: *Chunk, data: ir.OpSet, node: *ast.Node) !void {\n//     try pushIrData(c, .{ .opSet = data }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetField",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetFieldLeftEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetFieldLeftEnd(c: *Chunk) !void {\n//     const top = getTop(c);\n//     const info = getLastTaskInfo(c).basic;\n//     const data = getLastIrData(c).opSet;\n\n//     const recv = c.genValueStack.getLast();\n//     const dst = try c.rega.consumeNextTemp();\n\n//     top.type = .opSetFieldRightEnd;\n//     try pushCstr(c, Cstr.initBc(RegisterCstr.exact(dst)));\n//     const funcSigId = try sema.ensureFuncSig(c.compiler, &.{ bt.Any, bt.Any }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetFieldLeftEnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetFieldRightEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetFieldRightEnd(c: *Chunk) !void {\n//     const data = popIrData(c).opSet;\n//     const info = getLastTaskInfo(c).basic;\n\n//     getTop(c).type = .opSetFieldEnd;\n//     const val = popValue(c);\n//     const recv = popValue(c);\n//     try setField(c, data.set.field, .{ .recv = recv, .right = val }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetFieldRightEnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetFieldEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetFieldEnd(c: *Chunk) !void {\n//     const info = popTaskInfo(c).basic;\n\n//     const retainedTemps = c.popUnwindTempsFrom(info.retainedStart);\n//     try pushReleases(c, retainedTemps, info.node);\n\n//     c.rega.setNextTemp(info.tempStart);\n//     removeTop(c);\n// }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetFieldEnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetObjectField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetObjectField(c: *Chunk, data: ir.OpSet, node: *ast.Node) !void {\n//     const opStrat = getOpStrat(data.op, data.leftT) orelse {\n//         return c.reportErrorFmt(\"Unsupported op: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetObjectField",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetObjectFieldLeftEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetObjectFieldLeftEnd(c: *Chunk) !void {\n//     const top = getTop(c);\n//     const info = getLastTaskInfo(c).basic;\n//     const data = getLastIrData(c).opSet;\n//     const opStrat = popDataU8(c).opStrat;\n\n//     const recv = c.genValueStack.getLast();\n//     const dst = try c.rega.consumeNextTemp();\n\n//     const fieldIdx = data.set.objectField.idx;\n//     switch (opStrat) {\n//         .inlineOp => {\n//             top.type = .opSetObjectFieldRightEnd;\n//             try pushCstr(c, Cstr.initBc(RegisterCstr.exact(dst)));\n//             const binLeftCstr = Task.init(Cstr.initBc(RegisterCstr.exact(dst)));\n//             try binOp(c, .{ .op = data.op, .leftT = data.leftT }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetObjectFieldLeftEnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetObjectFieldRightEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetObjectFieldRightEnd(c: *Chunk) !void {\n//     const data = popIrData(c).opSet;\n//     const info = getLastTaskInfo(c).basic;\n\n//     getTop(c).type = .opSetObjectFieldEnd;\n//     const val = popValue(c);\n//     const recv = popValue(c);\n//     try setObjectField(c, data.set.objectField, .{ .recv = recv, .right = val }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetObjectFieldRightEnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetObjectFieldEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetObjectFieldEnd(c: *Chunk) !void {\n//     const info = popTaskInfo(c).basic;\n\n//     const retainedTemps = c.popUnwindTempsFrom(info.retainedStart);\n//     try pushReleases(c, retainedTemps, info.node);\n\n//     c.rega.setNextTemp(info.tempStart);\n//     removeTop(c);\n// }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetObjectFieldEnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSetLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn opSetLocal(c: *Chunk, data: ir.OpSet, node: *ast.Node) !void {\n//     const opStrat = getOpStrat(data.op, data.leftT) orelse {\n//         return c.reportErrorFmt(\"Unsupported op: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "opSetLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOpStrat from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn getOpStrat(op: cy.BinaryExprOp, leftT: TypeId) ?OpStrat {\n//     switch (op) {\n//         .star,\n//         .slash,\n//         .percent,\n//         .caret,\n//         .plus,\n//         .minus => {\n//             if (leftT == bt.Float or leftT == bt.Integer) {\n//                 return .inlineOp;\n//             }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getOpStrat",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to orOp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn orOp(c: *Chunk, data: ir.BinOp, cstr: Cstr, node: *ast.Node) !GenValue {\n    const merged_cstr = try toMergedDst(c, cstr, bt.Boolean);\n    const cond = try reserveTemp(c, bt.Boolean);\n    try initSlot(c, cond, false, node);\n\n    const leftv = try genExpr(c, data.left, Cstr.toTemp(cond));\n    const jump_false = try c.pushEmptyJumpNotCond(cond);\n    _ = try genToExact(c, leftv, merged_cstr, node);\n    try popTemp(c, cond, node);\n    const jump_end = try c.pushEmptyJump();\n\n    c.patchJumpCondToCurPc(jump_false);\n    _ = try genExpr(c, data.right, merged_cstr);\n    c.patchJumpToCurPc(jump_end);\n\n    return merged_cstr.toMergedValue(c, bt.Boolean);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "orOp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to andOp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn andOp(c: *Chunk, data: ir.BinOp, cstr: Cstr, node: *ast.Node) !GenValue {\n    const merged_cstr = try toMergedDst(c, cstr, bt.Boolean);\n    const cond = try reserveTemp(c, bt.Boolean);\n    try initSlot(c, cond, false, node);\n\n    const leftv = try genExpr(c, data.left, Cstr.toTemp(cond));\n    const jump_true = try c.pushEmptyJumpCond(cond);\n    _ = try genToExact(c, leftv, merged_cstr, node);\n    try popTemp(c, cond, node);\n    const jump_end = try c.pushEmptyJump();\n\n    c.patchJumpCondToCurPc(jump_true);\n    _ = try genExpr(c, data.right, merged_cstr);\n    c.patchJumpToCurPc(jump_end);\n\n    return merged_cstr.toMergedValue(c, bt.Boolean);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "andOp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genRetStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genRetStmt(c: *Chunk) !void {\n    if (c.curBlock.type == .main) {\n        try genReleaseBlock(c);\n        try c.buf.pushOp1(.end, 255);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genRetStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to retExprStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn retExprStmt(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .retExprStmt);\n\n    // TODO: If the returned expr is a local, consume the local after copying to reg 0.\n    var childv: GenValue = undefined;\n    if (c.curBlock.type == .main) {\n        // Main block.\n        childv = try genExpr(c, data.expr, Cstr.simpleRetain);\n        try initTempValue(c, childv, node);\n        try consumeTempValue(c, childv, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "retExprStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to numSlots from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn numSlots(c: *Chunk) usize {\n    return c.slot_stack.items.len - c.curBlock.slot_start;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "numSlots",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genReleaseBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genReleaseBlock(c: *Chunk) !void {\n    const block = c.curBlock;\n    try genReleaseSlots(c, c.curBlock.slot_start, block.startLocalReg, block.debugNode);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genReleaseBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genReleaseSlots from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genReleaseSlots(c: *Chunk, slot_base: usize, slot_off: usize, debugNode: *ast.Node) !void {\n    const start = c.operandStack.items.len;\n    defer c.operandStack.items.len = start;\n\n    const slots = c.slot_stack.items[slot_base + slot_off..];\n    log.tracev(\"Generate release for slots[{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genReleaseSlots",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genFuncEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genFuncEnd(c: *Chunk) !void {\n    try genReleaseBlock(c);\n    if (c.curBlock.requiresEndingRet1) {\n        try c.buf.pushOp(.ret1);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genFuncEnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveFiberCallRegs from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn reserveFiberCallRegs(c: *Chunk, numArgs: u8) !void {\n    var nextReg: u8 = 1;\n\n    if (numArgs > 0) {\n        // Advance 1 + prelude + numArgs.\n        nextReg += 5 + numArgs;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveFiberCallRegs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveMainRegs from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn reserveMainRegs(c: *Chunk, maxLocals: u8) !void {\n    log.tracev(\"reserveMainRegs maxLocals={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveMainRegs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to beginCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn beginCall(c: *Chunk, cstr: Cstr, ret_t: cy.TypeId, hasCalleeValue: bool, node: *ast.Node) !CallInst {\n    var ret: SlotId = undefined;\n    var own_ret: bool = undefined;\n    var allocTempRet = true;\n\n    // Optimization: Check to use dst cstr as ret.\n    if (cstr.type == .tempReg or cstr.type == .localReg) {\n        if (!cstr.data.slot.releaseDst and cstr.data.slot.dst + 1 == numSlots(c)) {\n            if (cstr.data.slot.dst != 0) {\n                ret = cstr.data.slot.dst;\n                own_ret = false;\n                allocTempRet = false;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "beginCall",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to finishInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn finishInst(c: *Chunk, cstr: Cstr, dst: SlotId, has_final_dst: bool, retainedToDst: bool, node: *ast.Node) !GenValue {\n    if (has_final_dst) {\n        const val = regValue(c, dst, retainedToDst);\n        return try genToFinalDst(c, val, cstr, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "finishInst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to finishCallInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn finishCallInst(c: *Chunk, inst: CallInst, retainedToDst: bool) !GenValue {\n    return finishInst(c, inst.cstr, inst.ret, inst.has_final_dst, retainedToDst, inst.node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "finishCallInst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to finishDstInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn finishDstInst(c: *Chunk, inst: DstInst, retainedToDst: bool) !GenValue {\n    return finishInst(c, inst.cstr, inst.dst, inst.has_final_dst, retainedToDst, inst.node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "finishDstInst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to finishNoErrNoDepInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn finishNoErrNoDepInst(c: *Chunk, inst: NoErrInst, retainedToDst: bool) !GenValue {\n    return finishInst(c, inst.cstr, inst.dst, inst.has_final_dst, retainedToDst, inst.node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "finishNoErrNoDepInst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to shouldRetain from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn shouldRetain(c: *Chunk, src: SlotId, dst: SlotId, retain_override: bool) bool {\n    const src_s = getSlot(c, src);\n    const dst_s = getSlot(c, dst);\n    if (!src_s.boxed) {\n        return false;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "shouldRetain",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genToExact from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genToExact(c: *Chunk, src: GenValue, dst: Cstr, node: *ast.Node) !GenValue {\n    return genToExactDesc(c, src, dst, node, null);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genToExact",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genToExactDesc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genToExactDesc(c: *Chunk, src: GenValue, dst: Cstr, node: *ast.Node, extraIdx: ?u32) !GenValue {\n    switch (dst.type) {\n        .localReg,\n        .tempReg => {\n            const data = dst.data.slot;\n\n            if (src.reg != data.dst) {\n                const retain = shouldRetain(c, src.reg, data.dst, dst.data.slot.retain);\n                if (data.releaseDst) {\n                    if (retain) {\n                        try c.pushCodeExt(.copyRetainRelease, &.{ src.reg, data.dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genToExactDesc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genToFinalDst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genToFinalDst(c: *Chunk, val: GenValue, dst: Cstr, node: *ast.Node) !GenValue {\n    log.tracev(\"genToFinalDst src: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genToFinalDst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to endCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn endCall(c: *Chunk, inst: CallInst, retained: bool) !GenValue {\n    popNullSlots(c, inst.numPreludeTemps);\n    return finishCallInst(c, inst, retained);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "endCall",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genIterNext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genIterNext(c: *Chunk, iterTemp: u8, hasCounter: bool, iterNodeId: *ast.Node) !void {\n    var desc = try c.fmtExtraDesc(\"push iterator arg\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genIterNext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to loopStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn loopStmt(c: *cy.Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .loopStmt);\n\n    const top_pc = c.buf.ops.items.len;\n    const jump_start: u32 = @intCast(c.blockJumpStack.items.len);\n    defer c.blockJumpStack.items.len = jump_start;\n\n    {\n        try pushBlock(c, true, node);\n        try genStmts(c, data.body_head);\n        try popLoopBlock(c);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "loopStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to forRangeStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn forRangeStmt(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .forRangeStmt);\n\n    // Reserve vars until end of block, hidden from user.\n    const counter = try bc.reserveTemp(c, bt.Integer);\n    const rangeEnd = try bc.reserveTemp(c, bt.Integer);\n\n    // Range start.\n    const startv = try genExpr(c, data.start, Cstr.simple);\n\n    // Range end.\n    const endv = try genExpr(c, data.end, Cstr.toTemp(rangeEnd));\n    _ = endv;\n\n    // Begin sub-block.\n    try pushBlock(c, true, node);\n\n    // Copy counter to itself if no each clause\n    var eachLocal: SlotId = counter;\n    if (data.eachLocal) |irVar| {\n        try genStmt(c, data.declHead);\n        eachLocal = toLocalReg(c, irVar);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "forRangeStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to verbose from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn verbose(c: *cy.Chunk, idx: usize, node: *ast.Node) !void {\n    _ = node;\n    const data = c.ir.getStmtData(idx, .verbose);\n    cc.setVerbose(data.verbose);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "verbose",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTryStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genTryStmt(c: *cy.Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .tryStmt);\n\n    try pushUnwindTry(c);\n\n    try pushBlock(c, false, node);\n    try genStmts(c, data.bodyHead);\n    try popBlock(c);\n\n    const catch_pc = c.buf.ops.items.len;\n    try popUnwindTry(c, catch_pc, node);\n    try c.pushCode(.catch_op, &.{0, 0, 0, 0}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genTryStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTryExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genTryExpr(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .tryExpr);\n\n    const type_id = c.ir.getExprType(idx).id;\n\n    const dst_cstr = try toMergedDst(c, cstr, type_id);\n\n    // Body expr.\n    try pushUnwindTry(c);\n    const childv = try genExpr(c, data.expr, Cstr.simple);\n    try initTempValue(c, childv, node);\n    const retv = try genToExact(c, childv, dst_cstr, node);\n    try popTempValue(c, childv, node);\n    const catch_pc = c.buf.ops.items.len;\n    try popUnwindTry(c, catch_pc, node);\n\n    try c.pushCode(.catch_op, &.{ 0, 0, 0, 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genTryExpr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genUnwrapOr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genUnwrapOr(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(loc, .unwrap_or);\n    const ret_t = c.ir.getExprType(loc).id;\n\n    const merged_cstr = try toMergedDst(c, cstr, ret_t);\n\n    const optv = try genExpr(c, data.opt, Cstr.simple);\n    try initTempValue(c, optv, node);\n\n    const cond = try bc.reserveTemp(c, bt.Boolean);\n    try c.pushCode(.none, &.{optv.reg, cond}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genUnwrapOr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genIfExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genIfExpr(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .if_expr);\n    const condNodeId = c.ir.getNode(data.cond);\n    const type_id = c.ir.getExprType(idx).id;\n\n    const merged_cstr = try toMergedDst(c, cstr, type_id);\n\n    // Cond.\n    const condv = try genExpr(c, data.cond, Cstr.simple);\n    try initTempValue(c, condv, node);\n\n    const condFalseJump = try c.pushEmptyJumpNotCond(condv.reg);\n\n    // If body.\n    const bodyv = try genExpr(c, data.body, merged_cstr);\n    var retained = bodyv.retained;\n    const bodyEndJump = try c.pushEmptyJump();\n\n    // Else body.\n    // Don't need to free cond since it evaluated to false.\n    c.patchJumpNotCondToCurPc(condFalseJump);\n    const elsev = try genExpr(c, data.elseBody, merged_cstr);\n    retained = retained or elsev.retained;\n\n    // End.\n    c.patchJumpToCurPc(bodyEndJump);\n\n    try popTempValue(c, condv, condNodeId);\n\n    return GenValue.initRetained(retained);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genIfExpr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genIfStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genIfStmt(c: *cy.Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .ifStmt);\n\n    const condNodeId = c.ir.getNode(data.cond);\n    const condv = try genExpr(c, data.cond, Cstr.simple);\n    try initTempValue(c, condv, node);\n\n    const jump_miss = try c.pushEmptyJumpNotCond(condv.reg);\n\n    try pushBlock(c, false, node);\n    try genStmts(c, data.body_head);\n    try popBlock(c);\n\n    var jump_end: u32 = undefined;\n    if (data.else_block != cy.NullId) {\n        jump_end = try c.pushEmptyJump();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genIfStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to elseBlocks from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn elseBlocks(c: *cy.Chunk, else_head: u32) !void {\n    const bodyEndJumpsStart = c.listDataStack.items.len;\n    defer c.listDataStack.items.len = bodyEndJumpsStart;\n\n    var else_loc = else_head;\n    while (else_loc != cy.NullId) {\n        const else_nid = c.ir.getNode(else_loc);\n        const else_b = c.ir.getExprData(else_loc, .else_block);\n\n        if (else_b.cond != cy.NullId) {\n            const condNodeId = c.ir.getNode(else_b.cond);\n            const condv = try genExpr(c, else_b.cond, Cstr.simple);\n            try initTempValue(c, condv, condNodeId);\n\n            const jump_miss = try c.pushEmptyJumpNotCond(condv.reg);\n\n            try pushBlock(c, false, else_nid);\n            try genStmts(c, else_b.body_head);\n            try popBlock(c);\n\n            if (else_b.else_block != cy.NullId) {\n                const jump_end = try c.pushEmptyJump();\n                try c.listDataStack.append(c.alloc, .{ .pc = jump_end }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "elseBlocks",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genBlockExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genBlockExpr(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(loc, .blockExpr);\n    const ret_t = c.ir.getExprType(loc).id;\n\n    // Select merged dst.\n    const retain = !c.sema.isUnboxedType(ret_t);\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, retain, node);\n\n    try pushBlock(c, false, node);\n    const b = c.genBlock();\n    b.blockExprCstr = Cstr.toTempRetain(inst.dst);\n\n    try genStmts(c, data.bodyHead);\n    try popBlock(c);\n\n    if (inst.own_dst) {\n        try initSlot(c, inst.dst, retain, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genBlockExpr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genSwitchStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genSwitchStmt(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const switchLoc = c.ir.advanceStmt(idx, .switchStmt);\n    _ = try genSwitch(c, switchLoc, null, node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genSwitchStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genSwitch from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genSwitch(c: *Chunk, idx: usize, cstr: ?Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .switchExpr);\n\n    const ret_t = c.ir.getExprType(idx).id;\n    var merged_cstr: Cstr = undefined;\n    var childBreakJumpsStart: u32 = undefined;\n    if (!data.is_expr) {\n        childBreakJumpsStart = @intCast(c.blockJumpStack.items.len);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genSwitch",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genMap from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genMap(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    _ = idx;\n    const inst = try bc.selectForDstInst(c, cstr, bt.Map, true, node);\n    try c.buf.pushOp1(.map, inst.dst);\n    if (inst.own_dst) {\n        try initSlot(c, inst.dst, true, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genMap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genList from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genList(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .list);\n    const args = c.ir.getArray(data.args, u32, data.nargs);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n    const argStart = numSlots(c);\n\n    for (args) |argIdx| {\n        const arg_t = c.ir.getExprType(argIdx).id;\n        const temp = try bc.reserveTemp(c, arg_t);\n        const argv = try genExpr(c, argIdx, Cstr.toTempRetain(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genList",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genArray from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genArray(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .array);\n    const args = c.ir.getArray(data.args, u32, data.nargs);\n    const ret_t = c.ir.getExprType(idx).id;\n\n    const inst = try bc.selectForDstInst(c, cstr, ret_t, true, node);\n    const argStart = numSlots(c);\n\n    for (args) |argIdx| {\n        const arg_t = c.ir.getExprType(argIdx).id;\n        const temp = try bc.reserveTemp(c, arg_t);\n        const argv = try genExpr(c, argIdx, Cstr.toTempRetain(temp));\n        try initSlot(c, temp, argv.retained, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genArray",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFiberBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushFiberBlock(c: *Chunk, numArgs: u8, node: *ast.Node) !void {\n    log.tracev(\"push fiber block: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushFiberBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popFiberBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn popFiberBlock(c: *Chunk) !void {\n    try genReleaseBlock(c);\n\n    // Pop boundary index.\n    try popUnwindBoundary(c, c.curBlock.debugNode);\n\n    try popProc(c);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popFiberBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFuncBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn pushFuncBlock(c: *Chunk, data: ir.FuncBlock, params: []align(1) const ir.FuncParam, node: *ast.Node) !void {\n    log.tracev(\"push func block: params={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushFuncBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFuncBlockCommon from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushFuncBlockCommon(c: *Chunk, maxIrLocals: u8, numParamCopies: u8, params: []align(1) const ir.FuncParam, func: *cy.Func, node: *ast.Node) !void {\n    try pushProc(c, .func, func.name(), node);\n\n    if (c.compiler.config.gen_debug_func_markers) {\n        try c.compiler.buf.pushDebugFuncStart(func, c.id);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushFuncBlockCommon",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popFuncBlockCommon from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popFuncBlockCommon(c: *Chunk, func: *cy.Func) !void {\n    // TODO: Check last statement to skip adding ret.\n    try genFuncEnd(c);\n\n    if (c.compiler.config.gen_debug_func_markers) {\n        try c.compiler.buf.pushDebugFuncEnd(func, c.id);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popFuncBlockCommon",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genLambda from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genLambda(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !GenValue {\n    const data = c.ir.getExprData(idx, .lambda);\n    const func = data.func;\n    const params = c.ir.getArray(data.params, ir.FuncParam, func.numParams);\n\n    const inst = try bc.selectForDstInst(c, cstr, bt.Any, true, node);\n\n    // Prepare jump to skip the body.\n    const skipJump = try c.pushEmptyJump();\n\n    log.tracev(\"push lambda block: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genLambda",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to shouldGenMainScopeReleaseOps from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn shouldGenMainScopeReleaseOps(c: *cy.Compiler) bool {\n    return !c.vm.config.single_run;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "shouldGenMainScopeReleaseOps",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genBlock(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .block);\n\n    try pushBlock(c, false, node);\n    try genStmts(c, data.bodyHead);\n    try popBlock(c);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushProc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn pushProc(c: *Chunk, btype: ProcType, name: []const u8, debugNode: *ast.Node) !void {\n    const id = c.procs.items.len;\n    try c.procs.append(c.alloc, name);\n    try c.proc_stack.append(c.alloc, Proc.init(btype, id));\n    c.curBlock = &c.proc_stack.items[c.proc_stack.items.len-1];\n    c.curBlock.irLocalMapStart = @intCast(c.genIrLocalMapStack.items.len);\n    c.curBlock.slot_start = @intCast(c.slot_stack.items.len);\n    c.curBlock.debugNode = debugNode;\n\n    try pushUnwindBoundary(c);\n    try pushBlock(c, false, debugNode);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushProc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popProc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popProc(c: *Chunk) !void {\n    log.tracev(\"pop gen block\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popProc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn pushBlock(c: *Chunk, isLoop: bool, node: *ast.Node) !void {\n    log.tracev(\"push block {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popBlock(c: *Chunk) !void {\n    log.tracev(\"pop block {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to popLoopBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popLoopBlock(c: *Chunk) !void {\n    const b = c.blocks.pop().?;\n\n    try popLocals(c, b.num_locals, b.node);\n\n    c.curBlock.block_depth -= 1;\n\n    if (cy.Trace) {\n        c.indent -= 1;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popLoopBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn init(btype: ProcType, id: usize) Proc {\n        return .{\n            .id = @intCast(id),\n            .type = btype,\n            .requiresEndingRet1 = false,\n            .closureLocal = cy.NullU8,\n            .irLocalMapStart = 0,\n            .slot_start = 0,\n            .num_pre_slots = 0,\n            .max_slots = 0,\n            .startLocalReg = 0,\n            .debugNode = undefined,\n            .block_depth = 0,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn deinit(self: *Proc, alloc: std.mem.Allocator) void {\n        _ = self;\n        _ = alloc;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genConstFloat from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genConstFloat(c: *Chunk, val: f64, dst: LocalId, node: *ast.Node) !GenValue {\n    const idx = try c.buf.getOrPushConst(cy.Value.initF64(val));\n    try genConst(c, idx, dst, false, node);\n    return regValue(c, dst, false);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genConstFloat",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genConst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genConst(c: *cy.Chunk, idx: usize, dst: u8, retain: bool, node: *ast.Node) !void {\n    const pc = c.buf.len();\n    if (retain) {\n        try c.pushCode(.constRetain, &.{ 0, 0, dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genConst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genExprStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genExprStmt(c: *Chunk, idx: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .exprStmt);\n\n    if (data.isBlockResult) {\n        const inMain = c.curBlock.block_depth == 1;\n        if (inMain) {\n            const exprv = try genExpr(c, data.expr, Cstr.simpleRetain);\n            try initTempValue(c, exprv, node);\n            c.curBlock.endLocal = exprv.reg;\n            try consumeTempValue(c, exprv, node);\n            try popTempValue(c, exprv, node);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genExprStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushValue(c: *Chunk, reg: SlotId, retained: bool) !GenValue {\n    if (c.isTempLocal(reg)) {\n        log.tracev(\"temp value at: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to regValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn regValue(c: *const Chunk, local: LocalId, retained: bool) GenValue {\n    if (isTempSlot(c, local)) {\n        return GenValue.initTempValue(local, retained);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "regValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initConstant from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn initConstant(val: cy.Value) GenValue {\n        return .{ .type = .constant, \n            .reg = undefined, .retained = false,\n            .data = .{ .constant = .{\n                .val = val,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initConstant",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initJitCondFlag from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn initJitCondFlag(condt: jitgen.JitCondFlagType) GenValue {\n        return .{ .type = .jitCondFlag,\n            .reg = undefined, .retained = false,\n            .data = .{ .jitCondFlag = .{\n                .type = condt,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initJitCondFlag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initRetained from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn initRetained(retained: bool) GenValue {\n        return .{\n            .type = .generic,\n            .reg = 255,\n            .retained = retained,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initRetained",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initNoValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn initNoValue() GenValue {\n        return .{\n            .type = .generic,\n            .reg = 255,\n            .retained = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initNoValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initLocalValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn initLocalValue(reg: SlotId, retained: bool) GenValue {\n        return .{\n            .type = .local,\n            .reg = reg,\n            .retained = retained,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initLocalValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initTempValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn initTempValue(reg: SlotId, retained: bool) GenValue {\n        return .{\n            .type = .temp,\n            .reg = reg,\n            .retained = retained,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initTempValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn isTemp(self: GenValue) bool {\n        return self.type == .temp;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "isTemp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isRetainedTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn isRetainedTemp(self: GenValue) bool {\n        return self.type == .temp and self.retained;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "isRetainedTemp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isRetainedLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn isRetainedLocal(self: GenValue) bool {\n        return self.type == .local and self.retained;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "isRetainedLocal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushReleaseVals from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushReleaseVals(c: *Chunk, vals: []const GenValue, debugNode: *ast.Node) !void {\n    if (vals.len > 1) {\n        try c.pushOptionalDebugSym(debugNode);\n        try c.buf.pushOp1(.releaseN, @intCast(vals.len));\n\n        const start = c.buf.ops.items.len;\n        try c.buf.ops.resize(c.alloc, c.buf.ops.items.len + vals.len);\n        for (vals, 0..) |val, i| {\n            c.buf.ops.items[start+i] = .{ .val = val.reg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushReleaseVals",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushReleases from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushReleases(c: *Chunk, regs: []const u8, debugNode: *ast.Node) !void {\n    if (regs.len > 1) {\n        try c.pushOptionalDebugSym(debugNode);\n        try c.buf.pushOp1(.releaseN, @intCast(regs.len));\n        try c.buf.pushOperands(regs);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushReleases",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to releaseCond2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn releaseCond2(c: *Chunk, releaseA: bool, a: SlotId, releaseB: bool, b: SlotId, debugId: *ast.Node) !void {\n    if (releaseA and releaseB) {\n        try pushReleases(c, &.{ a, b }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "releaseCond2",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to releaseTempValue2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn releaseTempValue2(c: *Chunk, a: GenValue, b: GenValue, debugId: *ast.Node) !void {\n    const releaseA = a.isRetainedTemp();\n    const releaseB = b.isRetainedTemp();\n    if (releaseA and releaseB) {\n        try pushReleases(c, &.{ a.reg, b.reg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "releaseTempValue2",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to releaseIf from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn releaseIf(c: *Chunk, cond: bool, reg: SlotId, node: *ast.Node) !void {\n    if (cond) {\n        try pushRelease(c, reg, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "releaseIf",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to releaseTempValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn releaseTempValue(c: *Chunk, val: GenValue, node: *ast.Node) !void {\n    if (val.isRetainedTemp()) {\n        const slot = getSlot(c, val.reg);\n        if (!slot.boxed or slot.type != .temp or !slot.has_unwind) {\n            std.debug.panic(\"Expected retained temp {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "releaseTempValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushRelease from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushRelease(c: *Chunk, slot: u8, node: *ast.Node) !void {\n    log.tracev(\"release: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushRelease",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushReleaseExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushReleaseExt(c: *Chunk, slot: u8, node: *ast.Node, desc: u32) !void {\n    log.tracev(\"release: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushReleaseExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genConstIntExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn genConstIntExt(c: *Chunk, val: i64, dst: LocalId, node: *ast.Node) !GenValue {\n    // TODO: Can be constU8.\n    if (val >= 0 and val <= std.math.maxInt(i8)) {\n        try c.pushCode(.constIntV8, &.{ @bitCast(@as(i8, @intCast(val))), dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "genConstIntExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushTypeCheckOption from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushTypeCheckOption(c: *cy.Chunk, local: SlotId, node: *ast.Node) !void {\n    try c.pushFCode(.typeCheckOption, &.{ local }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushTypeCheckOption",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushTypeCheck from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushTypeCheck(c: *cy.Chunk, local: SlotId, typeId: cy.TypeId, dst: SlotId, node: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    try c.pushFCode(.typeCheck, &.{ local, 0, 0, dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushTypeCheck",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCallSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushCallSym(c: *cy.Chunk, ret: u8, numArgs: u32, numRet: u8, symId: u32, node: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    try c.pushFCode(.callSym, &.{ ret, @as(u8, @intCast(numArgs)), numRet, 0, 0, 0, 0, 0, 0, 0, 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushCallSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCallSymDyn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushCallSymDyn(c: *cy.Chunk, ret: u8, numArgs: u32, numRet: u8, symId: u32, node: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    try c.pushFCode(.call_sym_dyn, &.{ ret, @as(u8, @intCast(numArgs)), numRet, 0, 0, 0, 0, 0, 0, 0, 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushCallSymDyn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushCall(c: *cy.Chunk, ret: u8, numArgs: u32, numRet: u8, node: *ast.Node) !void {\n    try c.pushFCode(.call, &.{ret, @as(u8, @intCast(numArgs)), numRet}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushCall",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn reserveLocal(c: *Chunk, declType: types.TypeId, lifted: bool, node: *ast.Node) !SlotId {\n    const slot = try reserveSlot(c);\n\n    // Stacks are always big enough because of pushProc.\n    log.tracev(\"reserve slot={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveRtSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn reserveRtSlot(c: *Chunk) !u8 {\n    const slot = try reserveSlot(c);\n    log.tracev(\"reserve rt slot={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveRtSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveRetSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn reserveRetSlot(c: *Chunk) !u8 {\n    const slot = try reserveSlot(c);\n    log.tracev(\"reserve ret slot={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveRetSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveSlots from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn reserveSlots(c: *Chunk, n: usize) !void {\n    try c.slot_stack.resize(c.alloc, c.slot_stack.items.len + n);\n    const zero = Slot{\n        .type = .null,\n        .owned = undefined,\n        .boxed_up = undefined,\n        .boxed = undefined,\n        .boxed_init = undefined,\n        .boxed_retains = undefined,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveSlots",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn reserveSlot(c: *Chunk) !u8 {\n    const slot = c.slot_stack.items.len - c.curBlock.slot_start;\n    if (slot > std.math.maxInt(u8)) {\n        return c.reportError(\"Exceeded max locals.\", null);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn reserveTemp(c: *Chunk, type_id: cy.TypeId) !u8 {\n    const slot = try reserveSlot(c);\n    log.tracev(\"reserve temp: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "reserveTemp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCallObjSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushCallObjSym(c: *cy.Chunk, ret: u8, numArgs: u8, method: u16, node: *ast.Node) !void {\n    try pushCallObjSymExt(c, ret, numArgs, method, node, cy.NullId);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushCallObjSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCallObjSymExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushCallObjSymExt(c: *cy.Chunk, ret: u8, numArgs: u8, method: u16, node: *ast.Node, desc: u32) !void {\n    try c.pushFailableDebugSym(node);\n    const start = c.buf.ops.items.len;\n    try c.buf.pushOpSliceExt(.callObjSym, &.{\n        ret, numArgs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushCallObjSymExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushInlineUnExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushInlineUnExpr(c: *cy.Chunk, code: cy.OpCode, child: u8, dst: u8, node: *ast.Node) !void {\n    try c.pushFCode(code, &.{ child, dst, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushInlineUnExpr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushInlineBinExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushInlineBinExpr(c: *cy.Chunk, code: cy.OpCode, left: u8, right: u8, dst: u8, node: *ast.Node) !void {\n    try c.pushFCode(code, &.{ left, right, dst, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushInlineBinExpr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushInlineTernExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushInlineTernExpr(c: *cy.Chunk, code: cy.OpCode, a: u8, b: u8, c_: u8, dst: u8, node: *ast.Node) !void {\n    try c.pushFCode(code, &.{ a, b, c_, dst, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushInlineTernExpr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to mainEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn mainEnd(c: *cy.Chunk, reg: ?u8) !void {\n    try c.buf.pushOp1(.end, reg orelse cy.NullU8);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "mainEnd",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getIntUnaryOpCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn getIntUnaryOpCode(op: cy.UnaryOp) cy.OpCode {\n    return switch (op) {\n        .bitwiseNot => .bitwiseNot,\n        .minus => .negInt,\n        else => cy.fatal(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getIntUnaryOpCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getFloatUnaryOpCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn getFloatUnaryOpCode(op: cy.UnaryOp) cy.OpCode {\n    return switch (op) {\n        .minus => .negFloat,\n        else => cy.fatal(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getFloatUnaryOpCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getFloatOpCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn getFloatOpCode(op: cy.BinaryExprOp) cy.OpCode {\n    return switch (op) {\n        .less => .lessFloat,\n        .greater => .greaterFloat,\n        .less_equal => .lessEqualFloat,\n        .greater_equal => .greaterEqualFloat,\n        .minus => .subFloat,\n        .plus => .addFloat,\n        .slash => .divFloat,\n        .percent => .modFloat,\n        .star => .mulFloat,\n        .caret => .powFloat,\n        else => cy.fatal(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getFloatOpCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getIntOpCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn getIntOpCode(op: cy.BinaryExprOp) cy.OpCode {\n    return switch (op) {\n        .less => .lessInt,\n        .greater => .greaterInt,\n        .less_equal => .lessEqualInt,\n        .greater_equal => .greaterEqualInt,\n        .minus => .subInt,\n        .plus => .addInt,\n        .slash => .divInt,\n        .percent => .modInt,\n        .star => .mulInt,\n        .caret => .powInt,\n        .bitwiseAnd => .bitwiseAnd,\n        .bitwiseOr => .bitwiseOr,\n        .bitwiseXor => .bitwiseXor,\n        .bitwiseLeftShift => .bitwiseLeftShift,\n        .bitwiseRightShift => .bitwiseRightShift,\n        else => cy.fatal(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getIntOpCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushObjectInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushObjectInit(c: *cy.Chunk, typeId: cy.TypeId, startLocal: u8, numFields: u8, dst: SlotId, debugNode: *ast.Node) !void {\n    if (numFields <= 4) {\n        const start = c.buf.ops.items.len;\n        try c.pushCode(.objectSmall, &.{ 0, 0, startLocal, numFields, dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushObjectInit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushStructInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushStructInit(c: *cy.Chunk, typeId: cy.TypeId, startLocal: u8, val_size: u8, fields: []const cy.sym.FieldInfo, dst: SlotId, debugNode: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    if (val_size <= 4) {\n        try c.pushCode(.struct_small, &.{ 0, 0, startLocal, @intCast(fields.len), dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushStructInit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFieldDyn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushFieldDyn(c: *cy.Chunk, recv: u8, dst: u8, fieldId: u16, debugNode: *ast.Node) !void {\n    const start = c.buf.ops.items.len;\n    try c.pushFCode(.fieldDyn, &.{ recv, dst, 0, 0, 0, 0, 0, 0, 0, 0 }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushFieldDyn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushField(c: *cy.Chunk, recv: u8, fieldIdx: u8, retain: bool, dst: u8, debugNode: *ast.Node) !void {\n    try c.pushCode(.field, &.{ recv, fieldIdx, @intFromBool(retain), dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushField",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushAddrConstIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn pushAddrConstIndex(c: *cy.Chunk, recv: u8, offset: u8, dst: u8, debugNode: *ast.Node) !void {\n    try c.pushCode(.addr_const_index, &.{ recv, offset, dst }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushAddrConstIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to selectForDstInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn selectForDstInst(c: *cy.Chunk, cstr: Cstr, type_id: cy.TypeId, instCouldRetain: bool, node: *ast.Node) !DstInst {\n    switch (cstr.type) {\n        .varSym => {\n            return .{\n                .dst = try bc.reserveTemp(c, type_id),\n                .own_dst = true,\n                .cstr = cstr,\n                .has_final_dst = true,\n                .node = node,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "selectForDstInst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to selectForNoErrNoDepInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn selectForNoErrNoDepInst(c: *Chunk, cstr: Cstr, type_id: cy.TypeId, instCouldRetain: bool, node: *ast.Node) !NoErrInst {\n    _ = instCouldRetain;\n    switch (cstr.type) {\n        .varSym => {\n            return .{\n                .dst = try bc.reserveTemp(c, type_id),\n                .own_dst = true,\n                .requiresPreRelease = false,\n                .cstr = cstr,\n                .has_final_dst = true,\n                .node = node,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "selectForNoErrNoDepInst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to toCaptured from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toCaptured(idx: u8) Cstr {\n        return .{ .type = .captured, .data = .{ .captured = .{\n            .idx = idx,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toCaptured",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toVarSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toVarSym(id: u32, retain: bool) Cstr {\n        return .{ .type = .varSym, .data = .{\n            .varSym = .{\n                .id = id,\n                .retain = retain,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toVarSym",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toRetained from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toRetained(self: Cstr) Cstr {\n        switch (self.type) {\n            .simple => {\n                var res = self;\n                res.data.simple.retain = true;\n                return res;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toRetained",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initLocalOrTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn initLocalOrTemp(mustRetain: bool) Cstr {\n        return .{\n            .type = .localOrTemp,\n            .mustRetain = mustRetain,\n            .data = .{ .localOrTemp = {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "initLocalOrTemp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toTempRetain from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toTempRetain(reg: u8) Cstr {\n        return .{ .type = .tempReg, .data = .{ .slot = .{\n            .dst = reg,\n            .retain = true,\n            .releaseDst = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toTempRetain",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toTemp(reg: u8) Cstr {\n        return .{ .type = .tempReg, .data = .{ .slot = .{\n            .dst = reg,\n            .retain = false,\n            .releaseDst = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toTemp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toRetainedTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toRetainedTemp(reg: u8) Cstr {\n        return .{ .type = .tempReg, .data = .{ .slot = .{\n            .dst = reg,\n            .retain = true,\n            .releaseDst = true,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toRetainedTemp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toLocal(reg: u8, rcCandidate: bool) Cstr {\n        return .{ .type = .localReg, .data = .{ .slot = .{\n            .dst = reg,\n            .retain = true,\n            .releaseDst = rcCandidate,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toLocal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toLiftedLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toLiftedLocal(reg: u8, rcCandidate: bool) Cstr {\n        return .{ .type = .liftedLocal, .data = .{ .liftedLocal = .{\n            .reg = reg,\n            .rcCandidate = rcCandidate,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toLiftedLocal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isExact from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn isExact(self: Cstr) bool {\n        return self.type != .simple;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "isExact",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn isSlot(self: Cstr) bool {\n        return self.type == .localReg or self.type == .tempReg or self.type == .simple;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "isSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toMergedValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toMergedValue(self: Cstr, c: *cy.Chunk, ret_t: cy.TypeId) GenValue {\n        const retain = !c.sema.isUnboxedType(ret_t);\n        if (self.type == .tempReg) {\n            return GenValue.initTempValue(self.data.slot.dst, retain);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toMergedValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to toMergedDst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn toMergedDst(c: *Chunk, cstr: Cstr, type_id: cy.TypeId) !Cstr {\n    if (cstr.type == .localReg or cstr.type == .tempReg) {\n        var new = cstr;\n        new.data.slot.retain = true;\n        return new;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "toMergedDst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to consumeTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn consumeTemp(c: *Chunk, slot: SlotId, node: *ast.Node) !void {\n    getSlotPtr(c, slot).boxed_retains = false;\n    try popUnwindSlot(c, slot, node);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "consumeTemp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to consumeTempValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn consumeTempValue(c: *Chunk, val: GenValue, node: *ast.Node) !void {\n    if (val.isRetainedTemp()) {\n        try consumeTemp(c, val.reg, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "consumeTempValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popTempValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popTempValue(c: *Chunk, val: GenValue, node: *ast.Node) !void {\n    if (val.type == .temp) {\n        try popTemp(c, val.reg, node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popTempValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popTemp(c: *Chunk, slot_id: SlotId, node: *ast.Node) !void {\n    log.tracev(\"pop temp: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popTemp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popTemps from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popTemps(c: *cy.Chunk, n: usize, node: *ast.Node) !void {\n    log.tracev(\"pop temps: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popTemps",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popLocals from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popLocals(c: *cy.Chunk, n: usize, node: *ast.Node) !void {\n    log.tracev(\"pop locals: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popLocals",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popLocal(c: *cy.Chunk, slot: SlotId, node: *ast.Node) !void {\n    if (slot+1 != c.slot_stack.items.len) {\n        std.debug.panic(\"Expected slot {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popNullSlots from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popNullSlots(c: *cy.Chunk, n: u8) void {\n    log.tracev(\"free null slots: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popNullSlots",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to isTempSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "fn isTempSlot(c: *const cy.Chunk, slot: SlotId) bool {\n    return c.slot_stack.items[c.curBlock.slot_start + slot].type == .temp;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "isTempSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to popUnwindBoundary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popUnwindBoundary(c: *Chunk, node: *ast.Node) !void {\n    log.tracev(\"-pop unwind boundary: stack={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popUnwindBoundary",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popUnwindSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popUnwindSlot(c: *Chunk, slot: SlotId, node: *ast.Node) !void {\n    log.tracev(\"-pop unwind slot: stack={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popUnwindSlot",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushUnwindSlot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn pushUnwindSlot(c: *Chunk, slot: u8) !void {\n    log.tracev(\"+push unwind: stack={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushUnwindSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to popUnwindTry from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn popUnwindTry(c: *Chunk, catch_pc: usize, node: *ast.Node) !void {\n    log.tracev(\"-pop unwind try: stack={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "popUnwindTry",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushUnwindTry from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn pushUnwindTry(c: *Chunk) !void {\n    log.tracev(\"+push unwind try: stack={}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushUnwindTry",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getUnwindLen from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn getUnwindLen(c: *Chunk) usize {\n    return c.unwind_stack.items.len;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getUnwindLen",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushUnwindBoundary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn pushUnwindBoundary(c: *Chunk) !void {\n    try c.unwind_stack.append(c.alloc, .{\n        .created = false,\n        .type = .boundary,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "pushUnwindBoundary",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getLastUnwindKey from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub fn getLastUnwindKey(self: *Chunk) !cy.fiber.UnwindKey {\n    const entry = &self.unwind_stack.items[self.unwind_stack.items.len-1];\n    if (entry.type == .boundary) {\n        return cy.fiber.UnwindKey.initNull();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "function",
      "name": "getLastUnwindKey",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SetFieldDynOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const SetFieldDynOptions = struct {\n    recv: ?GenValue = null,\n    right: ?GenValue = null,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "SetFieldDynOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SetLocalOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const SetLocalOptions = struct {\n    rightv: ?GenValue = null,\n    extraIdx: ?u32 = null,\n    check_type: ?cy.TypeId = null,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "SetLocalOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Slot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const Slot = struct {\n    type: SlotType,\n\n    /// Whether the slot is owned by the block. eg. Read-only func params would not be owned.\n    owned: bool,\n\n    boxed: bool,\n\n    /// Whether the slot has been inited with a value. Eligible for tracking.\n    boxed_init: bool,\n\n    /// Holds an `UpValue`.\n    boxed_up: bool,\n\n    boxed_retains: bool,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "Slot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CallInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const CallInst = struct {\n    ret: SlotId,\n    own_ret: bool,\n    numPreludeTemps: u8,\n    cstr: Cstr,\n    has_final_dst: bool,\n    node: *ast.Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "CallInst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Block from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const Block = struct {\n    node: *ast.Node,\n\n    // Offset from `Proc.slot_start`.\n    slot_off: u8,\n\n    isLoopBlock: bool,\n\n    /// Locals declared in this block.\n    num_locals: u8,\n\n    /// Dst for block expression.\n    blockExprCstr: Cstr,\n\n    // Used to check the stack state after each stmt.\n    retainedTempStart: if (cy.Trace) u32 else void = undefined,\n    slot_count: if (cy.Trace) u32 else void = undefined,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "Block",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Proc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const Proc = struct {\n    type: ProcType,\n\n    /// Index into `Chunk.procs`.\n    id: u32,\n\n    /// Whether codegen should create an ending that returns 1 arg.\n    /// Otherwise `ret0` is generated.\n    requiresEndingRet1: bool,\n\n    /// If the function body belongs to a closure, this local\n    /// contains the closure's value which is then used to perform captured var lookup.\n    closureLocal: u8,\n\n    /// Starts after the prelude registers.\n    startLocalReg: u8,\n\n    irLocalMapStart: u32,\n\n    num_pre_slots: u32,\n    slot_start: u32,\n\n    /// Track the max number of slots used to know the stack size required by the block.\n    max_slots: u8,\n\n    debugNode: *ast.Node,\n\n    block_depth: u32,\n\n    /// If the last stmt is an expr stmt, return the local instead of releasing it. (Only for main block.)\n    endLocal: u8 = cy.NullU8,\n\n    /// LLVM\n    // funcRef: if (cy.hasJIT) llvm.ValueRef else void = undefined,\n\n    fn init(btype: ProcType, id: usize) Proc {\n        return .{\n            .id = @intCast(id),\n            .type = btype,\n            .requiresEndingRet1 = false,\n            .closureLocal = cy.NullU8,\n            .irLocalMapStart = 0,\n            .slot_start = 0,\n            .num_pre_slots = 0,\n            .max_slots = 0,\n            .startLocalReg = 0,\n            .debugNode = undefined,\n            .block_depth = 0,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "Proc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to GenValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const GenValue = struct {\n    type: GenValueType,\n\n    reg: SlotId,\n\n    /// Whether this value was retained by 1 refcount.\n    retained: bool,\n\n    data: union {\n        jitCondFlag: struct {\n            type: jitgen.JitCondFlagType,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "GenValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DstInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const DstInst = struct {\n    dst: SlotId,\n    own_dst: bool,\n    cstr: Cstr,\n    has_final_dst: bool,\n    node: *ast.Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "DstInst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to NoErrInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const NoErrInst = struct {\n    dst: SlotId,\n    own_dst: bool,\n    requiresPreRelease: bool,\n    cstr: Cstr,\n    has_final_dst: bool,\n    node: *ast.Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "NoErrInst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Cstr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "pub const Cstr = struct {\n    type: CstrType,\n\n    data: union {\n        simple: struct {\n            retain: bool,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "struct",
      "name": "Cstr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to callCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const callCode: ir.ExprCode = @enumFromInt(c.ir.buf.items[call]);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "callCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to callRet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const callRet: u8 = 1;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "callRet",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to nfields from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const nfields: u8 = @intCast(c.sema.types.items[ret_t].data.struct_t.nfields);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "nfields",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to numFields from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const numFields: u8 = @intCast(c.sema.types.items[ret_t].data.struct_t.nfields);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "numFields",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to numFields from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const numFields: u8 = @intCast(c.sema.types.items[local.some.type].data.object.numFields);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "numFields",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to slot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const slot: SlotId = @intCast(4 + 1 + numParams + paramCopyIdx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "slot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to numPreludeTemps from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const numPreludeTemps: u8 = @intCast(c.slot_stack.items.len - tempStart);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "numPreludeTemps",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to release from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const release: u8 = @intFromBool(lifted.rcCandidate);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "release",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to jump_start from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const jump_start: u32 = @intCast(c.blockJumpStack.items.len);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "jump_start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to jumpBackOffset from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const jumpBackOffset: u16 = @intCast(c.buf.ops.items.len - bodyPc);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "jumpBackOffset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to slot_id from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const slot_id: SlotId = @intCast(nslots - 1 - i);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "slot_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to slot_id from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bc_gen.zig",
    "response": "const slot_id: SlotId = @intCast(nslots-1-i);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bc_gen.zig",
      "type": "const",
      "name": "slot_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getBuiltinSymbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn getBuiltinSymbol(id: u32) ?Symbol {\n    return std.meta.intToEnum(Symbol, id) catch {\n        return null;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "getBuiltinSymbol",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to prepareThrowSymbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn prepareThrowSymbol(vm: *cy.UserVM, sym: Symbol) Value {\n    return vm.prepareThrowSymbol(@intFromEnum(sym));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "prepareThrowSymbol",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bindCore from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn bindCore(self: *cy.VM) !void {\n    @branchHint(.cold);\n    for (std.enums.values(Symbol)) |sym| {\n        try ensureSymbol(self, @tagName(sym), sym);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "bindCore",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ensureSymbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "fn ensureSymbol(vm: *cy.VM, name: []const u8, sym: Symbol) !void {\n    const id = try vm.ensureSymbol(name);\n    std.debug.assert(id == @intFromEnum(sym));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "ensureSymbol",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listSort from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listSort(vm: *cy.VM, args: [*]const Value, nargs: u8) Value {\n    const obj = args[0].asHeapObject();\n    const list = cy.ptrAlignCast(*cy.List(Value), &obj.list.list);\n    const LessContext = struct {\n        lessFn: Value,\n        vm: *cy.UserVM,\n        newFramePtr: u32,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listSort",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to less from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "fn less(ctx_: *LessContext, a: Value, b: Value) bool {\n            const res = ctx_.vm.callFunc(ctx_.newFramePtr, ctx_.lessFn, &.{a, b}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "less",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listRemove from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listRemove(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (index < 0 or index >= inner.len) {\n        return rt.prepThrowError(vm, .OutOfBounds);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listRemove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getGlobal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn getGlobal(vm: *cy.VM) Value {\n    const map = vm.getValue(0).asHeapObject();\n    if (map.map.map().get(vm.getValue(1))) |val| {\n        vm.retain(val);\n        return val;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "getGlobal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tableInitPair from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn tableInitPair(vm: *cy.VM) anyerror!Value {\n    const table = vm.getValue(0).asHeapObject();\n    try table.table.set(vm, vm.getValue(1), vm.getValue(2));\n    return Value.Void;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "tableInitPair",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to tableGet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn tableGet(vm: *cy.VM) Value {\n    const table = vm.getValue(0).asHeapObject();\n    const name = vm.getString(1);\n    if (table.table.map().getByString(name)) |val| {\n        vm.retain(val);\n        return val;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "tableGet",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tableSet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn tableSet(vm: *cy.VM) anyerror!Value {\n    const table = vm.getValue(0).asHeapObject();\n    try table.table.set(vm, vm.getValue(1), vm.getValue(2));\n    return Value.Void;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "tableSet",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to tableIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn tableIndex(vm: *cy.VM) Value {\n    const table = vm.getValue(0).asHeapObject();\n    if (table.table.map().get(vm.getValue(1))) |val| {\n        vm.retain(val);\n        return val;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "tableIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapIndex(vm: *cy.VM) Value {\n    const map = vm.getValue(0).asHeapObject();\n    if (map.map.map().get(vm.getValue(1))) |val| {\n        vm.retain(val);\n        return val;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapSetIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapSetIndex(vm: *cy.VM) anyerror!Value {\n    const map = vm.getValue(0).asHeapObject();\n    try map.map.set(vm, vm.getValue(1), vm.getValue(2));\n    return Value.Void;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapSetIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to tupleIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn tupleIndex(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const tuple = vm.getValue(0).asHeapObject();\n    if (index < 0 or index > tuple.tuple.len) {\n        return vm.prepPanic(\"Out of bounds.\");\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "tupleIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listIndex(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (index < 0 or index > inner.len) {\n        return vm.prepPanic(\"Out of bounds.\");\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listSetIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listSetIndex(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (index < 0 or index > inner.len) {\n        return vm.prepPanic(\"Out of bounds.\");\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listSetIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to List_slice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn List_slice(vm: *cy.VM) anyerror!Value {\n    const list = vm.getValue(0).asHeapObject();\n    const range = vm.getValue(1).castHeapObject(*cy.heap.Range);\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (range.start < 0) {\n        return error.OutOfBounds;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "List_slice",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ListValue_slice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn ListValue_slice(vm: *cy.VM) anyerror!Value {\n    const list = vm.getValue(0).asHeapObject();\n    const slice_t: cy.TypeId = @intCast(vm.getInt(1));\n    const range = vm.getValue(2).castHeapObject(*cy.heap.Range);\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (range.start < 0) {\n        return error.OutOfBounds;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "ListValue_slice",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listInsert from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listInsert(vm: *cy.VM) Value {\n    const index: i64 = @intCast(vm.getInt(1));\n    const value = vm.getValue(2);\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    if (index < 0 or index > inner.len) {\n        return rt.prepThrowError(vm, .OutOfBounds);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listInsert",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listJoin from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listJoin(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const items = obj.list.items();\n    if (items.len > 0) {\n        var is_ascii = vm.getObject(*cy.heap.String, 1).getType().isAstring();\n        const sep = vm.getString(1);\n\n        // First record length.\n        var byteLen: u32 = 0;\n        var out_ascii: bool=  undefined;\n\n        // Record first string part.\n        var str = try vm.getOrBufPrintValueStr2(&cy.tempBuf, items[0], &out_ascii);\n        is_ascii = is_ascii and out_ascii;\n        byteLen += @intCast(str.len);\n\n        // Record other string parts.\n        for (items[1..]) |item| {\n            str = try vm.getOrBufPrintValueStr2(&cy.tempBuf, item, &out_ascii);\n            is_ascii = is_ascii and out_ascii;\n            byteLen += @intCast(str.len);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listJoin",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listAppendAll from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listAppendAll(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const list = vm.getValue(1).asHeapObject();\n    for (list.list.items()) |it| {\n        vm.retain(it);\n        try obj.list.append(vm.alloc, it);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listAppendAll",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listAppend from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listAppend(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getValue(0).asHeapObject();\n    vm.retain(vm.getValue(1));\n    try obj.list.append(vm.alloc, vm.getValue(1));\n    return Value.Void;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listAppend",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listIteratorNext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listIteratorNext(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const option_t: cy.TypeId = @intCast(vm.getInt(1));\n    const list = &obj.listIter.inner.list.asHeapObject().list;\n    if (obj.listIter.inner.nextIdx < list.list.len) {\n        defer obj.listIter.inner.nextIdx += 1;\n        const val = list.list.ptr[obj.listIter.inner.nextIdx];\n        vm.retain(val);\n        return optionSome(vm, option_t, val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listIteratorNext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listIterator from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listIterator(vm: *cy.VM) Value {\n    vm.retain(vm.getValue(0));\n    return vm.allocListIter(@intCast(vm.getInt(1)), vm.getValue(0)) catch fatal();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listIterator",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listResize from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listResize(vm: *cy.VM) !Value {\n    const elem_t: cy.TypeId = @intCast(vm.getInt(1));\n    const recv = vm.getValue(0);\n    const list = recv.asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    const size: u32 = @intCast(vm.getInt(2));\n    if (inner.len < size) {\n        if (elem_t != bt.Dyn) {\n            return error.InvalidArgument;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listResize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapIterator from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapIterator(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    vm.retainObject(obj);\n    return vm.allocMapIterator(vm.getValue(0)) catch fatal();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapIterator",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapIteratorNext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapIteratorNext(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const map: *cy.ValueMap = @ptrCast(&obj.mapIter.map.castHeapObject(*cy.heap.Map).inner);\n    if (map.next(&obj.mapIter.nextIdx)) |entry| {\n        vm.retain(entry.key);\n        vm.retain(entry.value);\n        const res = cy.heap.allocTuple(vm, &.{entry.key, entry.value}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapIteratorNext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapSize from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapSize(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.MapInner, &obj.map.inner);\n    return Value.initInt(@intCast(inner.size));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapSize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapRemove from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapRemove(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.MapInner, &obj.map.inner);\n    const removed = inner.remove(vm, vm.getValue(1));\n    return Value.initBool(removed);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapRemove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listLen from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn listLen(vm: *cy.VM) Value {\n    const list = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.List(Value), &list.list.list);\n    return Value.initInt(@intCast(inner.len));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "listLen",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fiberResume from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "fn fiberResume(vm: *cy.UserVM, recv: Value, args: [*]const Value, _: u8) Value {\n//     const obj = recv.asHeapObject();\n//     if (&obj.fiber != @ptrCast(*cy.VM, vm).curFiber) {\n//         // Only resume fiber if it's not done.\n//         if (obj.fiber.pc != NullId) {\n//             // Obtain the startLocal from looking at previous inst operand.\n//             const startLocal = (@ptrCast(*cy.VM, vm).pc - 14 + 1)[0].arg;\n//             // Obtain previous framePtr by subtracting from args pointer.\n//             const prevFramePtr = @intToPtr([*]Value, @intFromPtr(args - startLocal - 4));\n\n//             const pcOffset = @intCast(u32, @intFromPtr(@ptrCast(*cy.VM, vm).pc) - @intFromPtr(@ptrCast(*cy.VM, vm).ops.ptr));\n//             const res = cy.pushFiber(@ptrCast(*cy.VM, vm), pcOffset, prevFramePtr, &obj.fiber, startLocal);\n//             @ptrCast(*cy.VM, vm).pc = res.pc;\n//             @ptrCast(*cy.VM, vm).framePtr = res.framePtr;\n//             return Value.None;\n//         }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "fiberResume",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapContains from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapContains(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.MapInner, &obj.map.inner);\n    return Value.initBool(inner.contains(vm.getValue(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapContains",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapGet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn mapGet(vm: *cy.VM) Value {\n    const obj = vm.getValue(0).asHeapObject();\n    const inner = cy.ptrAlignCast(*cy.MapInner, &obj.map.inner);\n    if (inner.get(vm.getValue(1))) |val| {\n        vm.retain(val);\n        return anySome(vm, val) catch cy.fatal();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "mapGet",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteNot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteNot(vm: *cy.VM) Value {\n    return Value.initByte(~vm.getByte(0));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteNot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteFmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteFmt(vm: *cy.VM) anyerror!Value {\n    const val = vm.getByte(0);\n    const format = try std.meta.intToEnum(cy.builtins.NumberFormat, vm.getEnumValue(1));\n    return cy.builtins.intFmtExt(vm, @intCast(val), format, .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteFmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteFmt2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteFmt2(vm: *cy.VM) anyerror!Value {\n    const val = vm.getByte(0);\n    const format = try std.meta.intToEnum(cy.builtins.NumberFormat, vm.getEnumValue(1));\n    const optsv = vm.getObject(*cy.heap.Table, 2);\n    const opts = try cy.builtins.getIntFmtOptions(optsv);\n    return cy.builtins.intFmtExt(vm, @intCast(val), format, opts);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteFmt2",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteLess from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteLess(vm: *cy.VM) Value {\n    return Value.initBool(vm.getByte(0) < vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteLess",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteLessEq from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteLessEq(vm: *cy.VM) Value {\n    return Value.initBool(vm.getByte(0) <= vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteLessEq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteGreater from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteGreater(vm: *cy.VM) Value {\n    return Value.initBool(vm.getByte(0) > vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteGreater",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteGreaterEq from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteGreaterEq(vm: *cy.VM) Value {\n    return Value.initBool(vm.getByte(0) >= vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteGreaterEq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteCall(vm: *cy.VM) Value {\n    return vm.getValue(0);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteCall",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteAdd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteAdd(vm: *cy.VM) Value {\n    return Value.initByte(vm.getByte(0) +% vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteAdd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteSub from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteSub(vm: *cy.VM) Value {\n    return Value.initByte(vm.getByte(0) -% vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteSub",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteMul from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteMul(vm: *cy.VM) Value {\n    return Value.initByte(vm.getByte(0) *% vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteMul",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteDiv from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteDiv(vm: *cy.VM) Value {\n    const right = vm.getByte(1);\n    if (right == 0) return vm.prepPanic(\"Division by zero.\");\n    return Value.initByte(@divTrunc(vm.getByte(0), right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteDiv",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteMod from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteMod(vm: *cy.VM) Value {\n    const right = vm.getByte(1);\n    if (right == 0) return vm.prepPanic(\"Division by zero.\");\n    return Value.initByte(@mod(vm.getByte(0), right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteMod",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bytePow from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn bytePow(vm: *cy.VM) Value {\n    const right = vm.getByte(1);\n    if (right == 0) return vm.prepPanic(\"Division by zero.\");\n    return Value.initByte(std.math.powi(u8, vm.getByte(0), right) catch |err| {\n        switch (err) {\n            error.Underflow => return vm.prepPanic(\"Underflow.\"),\n            error.Overflow => return vm.prepPanic(\"Overflow.\"),\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "bytePow",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteAnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteAnd(vm: *cy.VM) Value {\n    return Value.initByte(vm.getByte(0) & vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteAnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteOr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteOr(vm: *cy.VM) Value {\n    return Value.initByte(vm.getByte(0) | vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteOr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteXor from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteXor(vm: *cy.VM) Value {\n    return Value.initByte(vm.getByte(0) ^ vm.getByte(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteXor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteLeftShift from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteLeftShift(vm: *cy.VM) Value {\n    const right = vm.getInt(1);\n    if (right > 8 or right < 0) return vm.prepPanic(\"Out of bounds.\");\n    return Value.initByte(vm.getByte(0) << @intCast(right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteLeftShift",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to byteRightShift from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn byteRightShift(vm: *cy.VM) Value {\n    const right = vm.getByte(1);\n    if (right > 8 or right < 0) return vm.prepPanic(\"Out of bounds.\");\n    return Value.initByte(vm.getByte(0) >> @intCast(right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "byteRightShift",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intNeg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intNeg(vm: *cy.VM) Value {\n    return Value.initInt(-vm.getInt(0));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intNeg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intLess from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intLess(vm: *cy.VM) Value {\n    return Value.initBool(vm.getInt(0) < vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intLess",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intLessEq from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intLessEq(vm: *cy.VM) Value {\n    return Value.initBool(vm.getInt(0) <= vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intLessEq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intGreater from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intGreater(vm: *cy.VM) Value {\n    return Value.initBool(vm.getInt(0) > vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intGreater",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intGreaterEq from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intGreaterEq(vm: *cy.VM) Value {\n    return Value.initBool(vm.getInt(0) >= vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intGreaterEq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intAdd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intAdd(vm: *cy.VM) Value {\n    return Value.initInt(vm.getInt(0) +% vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intAdd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intSub from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intSub(vm: *cy.VM) Value {\n    return Value.initInt(vm.getInt(0) -% vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intSub",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intMul from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intMul(vm: *cy.VM) Value {\n    return Value.initInt(vm.getInt(0) *% vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intMul",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intDiv from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intDiv(vm: *cy.VM) Value {\n    const right = vm.getInt(1);\n    if (right == 0) return vm.prepPanic(\"Division by zero.\");\n    return Value.initInt(@divTrunc(vm.getInt(0), right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intDiv",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intMod from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intMod(vm: *cy.VM) Value {\n    const right = vm.getInt(1);\n    if (right == 0) return vm.prepPanic(\"Division by zero.\");\n    return Value.initInt(@mod(vm.getInt(0), right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intMod",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intPow from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intPow(vm: *cy.VM) Value {\n    const right = vm.getInt(1);\n    if (right == 0) return vm.prepPanic(\"Division by zero.\");\n    return Value.initInt(std.math.powi(i64, vm.getInt(0), right) catch |err| {\n        switch (err) {\n            error.Underflow => return vm.prepPanic(\"Underflow.\"),\n            error.Overflow => return vm.prepPanic(\"Overflow.\"),\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intPow",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to intAnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intAnd(vm: *cy.VM) Value {\n    return Value.initInt(vm.getInt(0) & vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intAnd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intOr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intOr(vm: *cy.VM) Value {\n    return Value.initInt(vm.getInt(0) | vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intOr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intXor from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intXor(vm: *cy.VM) Value {\n    return Value.initInt(vm.getInt(0) ^ vm.getInt(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intXor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intLeftShift from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intLeftShift(vm: *cy.VM) Value {\n    const right = vm.getInt(1);\n    if (right > 64 or right < 0) return vm.prepPanic(\"Out of bounds.\");\n    return Value.initInt(vm.getInt(0) << @intCast(right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intLeftShift",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intRightShift from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intRightShift(vm: *cy.VM) Value {\n    const right = vm.getInt(1);\n    if (right > 64 or right < 0) return vm.prepPanic(\"Out of bounds.\");\n    return Value.initInt(vm.getInt(0) >> @intCast(right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intRightShift",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intNot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn intNot(vm: *cy.VM) Value {\n    return Value.initInt(~vm.getInt(0));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "intNot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatNeg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatNeg(vm: *cy.VM) Value {\n    return Value.initF64(-vm.getFloat(0));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatNeg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatLess from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatLess(vm: *cy.VM) Value {\n    return Value.initBool(vm.getFloat(0) < vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatLess",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatLessEq from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatLessEq(vm: *cy.VM) Value {\n    return Value.initBool(vm.getFloat(0) <= vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatLessEq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatGreater from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatGreater(vm: *cy.VM) Value {\n    return Value.initBool(vm.getFloat(0) > vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatGreater",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatGreaterEq from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatGreaterEq(vm: *cy.VM) Value {\n    return Value.initBool(vm.getFloat(0) >= vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatGreaterEq",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatAdd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatAdd(vm: *cy.VM) Value {\n    return Value.initF64(vm.getFloat(0) + vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatAdd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatSub from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatSub(vm: *cy.VM) Value {\n    return Value.initF64(vm.getFloat(0) - vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatSub",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatMul from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatMul(vm: *cy.VM) Value {\n    return Value.initF64(vm.getFloat(0) * vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatMul",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatDiv from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatDiv(vm: *cy.VM) Value {\n    return Value.initF64(vm.getFloat(0) / vm.getFloat(1));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatDiv",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatMod from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatMod(vm: *cy.VM) Value {\n    return Value.initF64(@mod(vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatMod",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatPow from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn floatPow(vm: *cy.VM) Value {\n    return Value.initF64(std.math.pow(f64, vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "floatPow",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nop from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn nop(vm: *cy.UserVM, _: [*]const Value, _: u8) Value {\n    return vm.returnPanic(\"Unsupported.\");\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "nop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn init(c: *cy.Compiler, symOpt: ?*cy.Sym) ModuleBuilder {\n        var new = ModuleBuilder{\n            .sym = undefined,\n            .compiler = c,\n            .chunk = undefined,\n            .vm = c.vm,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setVar from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn setVar(self: *const ModuleBuilder, name: []const u8, typeId: types.TypeId, val: Value) !void {\n        try self.getMod().setTypedVar(self.compiler, name, typeId, val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "setVar",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to declareFuncSig from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn declareFuncSig(self: *const ModuleBuilder, name: [*:0]const u8, params: []const types.TypeId, ret: types.TypeId, ptr: cy.ZHostFuncFn) !void {\n        cc.declareFunc(self.sym.toC(), name, params.ptr, params.len, ret, @ptrCast(ptr));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "declareFuncSig",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ensureMethodGroup from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn ensureMethodGroup(self: *const ModuleBuilder, name: []const u8) !vmc.MethodGroupId {\n        return self.vm.ensureMethodGroup(name);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "ensureMethodGroup",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addOptimizingMethod from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn addOptimizingMethod(\n        self: *const ModuleBuilder, typeId: cy.TypeId, mgId: vmc.MethodGroupId,\n        params: []const types.TypeId, ret: types.TypeId, ptr: cy.QuickenFuncFn,\n    ) !void {\n        const funcSigId = try sema.ensureFuncSig(self.compiler, params, ret);\n        const funcSig = self.compiler.sema.getFuncSig(funcSigId);\n        if (funcSig.isParamsTyped) {\n            return error.Unsupported;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "addOptimizingMethod",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addMethod from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn addMethod(\n        self: *const ModuleBuilder, typeId: cy.TypeId, mgId: vmc.MethodGroupId,\n        params: []const types.TypeId, ret: types.TypeId, ptr: cy.ZHostFuncFn,\n    ) !void {\n        const funcSigId = try self.compiler.sema.ensureFuncSig(params, ret);\n        const funcSig = self.compiler.sema.getFuncSig(funcSigId);\n        if (funcSig.reqCallTypeCheck) {\n            try self.vm.addMethod(typeId, mgId, rt.MethodInit.initHostTyped(funcSigId, ptr, @intCast(params.len)));\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "addMethod",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getMod from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn getMod(self: *const ModuleBuilder) *cy.Module {\n        return self.compiler.sema.getModulePtr(self.modId);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "getMod",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createAndSetTypeObject from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub fn createAndSetTypeObject(self: *const ModuleBuilder, name: []const u8, fields: []const []const u8) !cy.TypeId {\n        const sym = try self.chunk.declareObjectType(self.sym, name, cy.NullId);\n\n        const modFields = try self.compiler.alloc.alloc(cy.sym.FieldInfo, fields.len);\n\n        for (fields, 0..) |field, i| {\n            const id = try self.vm.ensureFieldSym(field);\n            try self.vm.addFieldSym(sym.type, id, @intCast(i), bt.Any);\n            _ = try self.chunk.declareField(@ptrCast(sym), field, @intCast(i), bt.Any, cy.NullId);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "function",
      "name": "createAndSetTypeObject",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to LessContext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const LessContext = struct {\n        lessFn: Value,\n        vm: *cy.UserVM,\n        newFramePtr: u32,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "struct",
      "name": "LessContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to S from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const S = struct {\n        fn less(ctx_: *LessContext, a: Value, b: Value) bool {\n            const res = ctx_.vm.callFunc(ctx_.newFramePtr, ctx_.lessFn, &.{a, b}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "struct",
      "name": "S",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ModuleBuilder from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "pub const ModuleBuilder = struct {\n    sym: *cy.Sym,\n    chunk: *cy.Chunk,\n    compiler: *cy.Compiler,\n    vm: *cy.VM,\n\n    pub fn init(c: *cy.Compiler, symOpt: ?*cy.Sym) ModuleBuilder {\n        var new = ModuleBuilder{\n            .sym = undefined,\n            .compiler = c,\n            .chunk = undefined,\n            .vm = c.vm,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "struct",
      "name": "ModuleBuilder",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to index from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const index: i64 = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "index",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to index from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const index: i64 = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "index",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to index from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const index: i64 = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "index",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to index from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const index: i64 = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "index",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to slice_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const slice_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "slice_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to index from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const index: i64 = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "index",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to option_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const option_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "option_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to elem_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const elem_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "elem_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to size from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const size: u32 = @intCast(vm.getInt(2));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "size",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to map from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/bindings.zig",
    "response": "const map: *cy.ValueMap = @ptrCast(&obj.mapIter.map.castHeapObject(*cy.heap.Map).inner);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/bindings.zig",
      "type": "const",
      "name": "map",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createFuncSymType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn createFuncSymType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());\n    const type_id = c.sema.pushType() catch @panic(\"error\");\n    const sym = c.createFuncSymType(@ptrCast(chunk_sym), \"funcsym\", type_id, sig, C.fromNode(decl)) catch @panic(\"error\");\n    return @as(*cy.Sym, @ptrCast(sym)).toC();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "createFuncSymType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createFuncUnionType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn createFuncUnionType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());\n    const type_id = c.sema.pushType() catch @panic(\"error\");\n    const sym = c.createFuncUnionType(@ptrCast(chunk_sym), \"Func\", type_id, sig, C.fromNode(decl)) catch @panic(\"error\");\n    return @as(*cy.Sym, @ptrCast(sym)).toC();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "createFuncUnionType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createFuncPtrType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn createFuncPtrType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());\n    const type_id = c.sema.pushType() catch @panic(\"error\");\n    const sym = c.createFuncPtrType(@ptrCast(chunk_sym), \"funcptr\", type_id, sig, C.fromNode(decl)) catch @panic(\"error\");\n    return @as(*cy.Sym, @ptrCast(sym)).toC();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "createFuncPtrType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createArrayType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn createArrayType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = decl;\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const n: usize = @intCast(ctx.ct_params.get(\"N\").?.asBoxInt());\n    const elem_t = ctx.ct_params.get(\"T\").?.castHeapObject(*cy.heap.Type).type;\n    const type_id = c.sema.pushType() catch @panic(\"error\");\n    const sym = c.createArrayType(@ptrCast(chunk_sym), \"array_t\", type_id, n, elem_t) catch @panic(\"error\");\n    return @as(*cy.Sym, @ptrCast(sym)).toC();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "createArrayType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createListType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn createListType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const child_t = ctx.ct_params.get(\"T\").?.castHeapObject(*cy.heap.Type).type;\n    if (child_t == bt.Dyn) {\n        const sym = c.createHostObjectType(@ptrCast(chunk_sym), \"List\", @ptrCast(C.fromNode(decl))) catch @panic(\"error\");\n        cy.sema.resolveHostObjectType(c, sym,\n            listGetChildren,\n            listFinalizer,\n            bt.ListDyn,\n            false,\n            false,\n        ) catch @panic(\"error\");\n        return @as(*cy.Sym, @ptrCast(sym)).toC();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "createListType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createListIterType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn createListIterType(vm: ?*C.VM, c_mod: C.Sym, decl: C.Node) callconv(.C) C.Sym {\n    _ = vm;\n    const chunk_sym = cy.Sym.fromC(c_mod).cast(.chunk);\n    const c = chunk_sym.chunk;\n\n    var ctx = cy.sema.getResolveContext(c);\n    const child_t = ctx.ct_params.get(\"T\").?.castHeapObject(*cy.heap.Type).type;\n    if (child_t == bt.Dyn) {\n        const sym = c.createHostObjectType(@ptrCast(chunk_sym), \"ListIterator\", @ptrCast(C.fromNode(decl))) catch @panic(\"error\");\n        cy.sema.resolveHostObjectType(c, sym,\n            listIterGetChildren,\n            null,\n            bt.ListIterDyn,\n            false,\n            false,\n        ) catch @panic(\"error\");\n        return @as(*cy.Sym, @ptrCast(sym)).toC();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "createListIterType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to create from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn create(vm: *cy.VM, r_uri: []const u8) C.Module {\n    const aot = cy.isAot(vm.compiler.config.backend);\n    const src = if (aot) C.toStr(Src) else C.toStr(VmSrc);\n    const mod = C.createModule(@ptrCast(vm), C.toStr(r_uri), src);\n\n    var config = C.ModuleConfig{\n        .types = if (aot) C.toSlice(C.HostTypeEntry, &types) else C.toSlice(C.HostTypeEntry, &vm_types),\n        .funcs = C.toSlice(C.HostFuncEntry, &funcs),\n        .onLoad = onLoad,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "create",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to onLoad from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn onLoad(vm_: ?*C.VM, mod: C.Sym) callconv(.C) void {\n    log.tracev(\"builtins: on load\", .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "onLoad",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn cFunc(f: *const fn (vm: cy.Context, args: [*]const Value, nargs: u8) callconv(.C) Value) cy.ZHostFuncFn {\n    return @ptrCast(f);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "cFunc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to zErrFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn zErrFunc(comptime f: fn (vm: *cy.VM) anyerror!Value) cy.ZHostFuncFn {\n    const S = struct {\n        pub fn genFunc(vm: *cy.VM) callconv(.C) Value {\n            return @call(.always_inline, f, .{vm}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "zErrFunc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to prepThrowZError from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn prepThrowZError(ctx: cy.Context, err: anyerror, optTrace: ?*std.builtin.StackTrace) Value {\n    if (!cy.isFreestanding and C.verbose()) {\n        log.tracev(\"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "prepThrowZError",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to prepThrowZError2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn prepThrowZError2(ctx: cy.Context, err: anyerror, optTrace: ?*std.builtin.StackTrace) rt.Error {\n    if (!cy.isFreestanding and C.verbose()) {\n        if (optTrace) |trace| {\n            std.debug.dumpStackTrace(trace.*);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "prepThrowZError2",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to errorSymbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn errorSymbol(err: anyerror) Symbol {\n    switch (err) {\n        error.AssertError           => return .AssertError,\n        error.EvalError             => return .EvalError,\n        error.Unicode               => return .Unicode,\n        error.InvalidResult         => return .InvalidResult,\n        error.InvalidArgument       => return .InvalidArgument,\n        error.InvalidEnumTag        => return .InvalidArgument,\n        error.FileNotFound          => return .FileNotFound,\n        error.OutOfBounds           => return .OutOfBounds,\n        error.PermissionDenied      => return .PermissionDenied,\n        error.StdoutStreamTooLong   => return .StreamTooLong,\n        error.StderrStreamTooLong   => return .StreamTooLong,\n        error.EndOfStream           => return .EndOfStream,\n        error.Unsupported           => return .Unsupported,\n        else                        => return .UnknownError,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "errorSymbol",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to traceRetains from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn traceRetains(vm: *cy.VM) Value {\n    return Value.initInt(vm.c.trace.numRetains);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "traceRetains",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to traceReleases from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn traceReleases(vm: *cy.VM) Value {\n    return Value.initInt(vm.c.trace.numReleases);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "traceReleases",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listFill from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn listFill(vm: *cy.VM) Value {\n    const list_t: cy.TypeId = @intCast(vm.getInt(0));\n    const val_t: cy.TypeId = @intCast(vm.getInt(1));\n    return vm.allocListFill(list_t, val_t, vm.getValue(2), @intCast(vm.getInt(3))) catch cy.fatal();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "listFill",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to refcast from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn refcast(vm: *cy.VM) anyerror!Value {\n    return vm.getValue(0);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "refcast",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ptrcast from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn ptrcast(vm: *cy.VM) anyerror!Value {\n    return vm.getValue(1);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "ptrcast",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to bitcast from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn bitcast(vm: *cy.VM) anyerror!Value {\n    const dst_t: cy.TypeId = @intCast(vm.getInt(0));\n    const src_t: cy.TypeId = @intCast(vm.getInt(2));\n    if (vm.c.types[src_t].kind != .int or vm.c.types[dst_t].kind != .int) {\n        return error.InvalidArgument;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "bitcast",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to copy from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn copy(vm: *cy.VM) anyerror!Value {\n    const type_id: cy.TypeId = @intCast(vm.getInt(0));\n    const val = vm.getValue(1);\n    return cy.value.shallowCopy(vm, type_id, val);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "copy",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to choicetag from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn choicetag(vm: *cy.VM) anyerror!Value {\n    const tag_t: cy.TypeId = @intCast(vm.getInt(0));\n    const type_e = vm.sema.getType(tag_t);\n    if (type_e.kind != .enum_t) {\n        return error.InvalidArgument;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "choicetag",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to errorReport from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn errorReport(vm: *cy.VM) anyerror!Value {\n    const curFrameLen = vm.compactTrace.len;\n\n    // Append frames from current call-site.\n    try cy.fiber.recordCurFrames(vm);\n\n    // Remove top two frames since it contains the `errorReport` call.\n    vm.compactTrace.remove(curFrameLen);\n    vm.compactTrace.remove(curFrameLen);\n\n    const trace = try cy.debug.allocStackTrace(vm, vm.c.getStack(), vm.compactTrace.items());\n    defer vm.alloc.free(trace);\n\n    var buf: std.ArrayListUnmanaged(u8) = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "errorReport",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to must from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn must(vm: *cy.VM) anyerror!Value {\n    const val = vm.getValue(0);\n    if (!val.isError()) {\n        vm.retain(val);\n        return val;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "must",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to panic from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn panic(vm: *cy.VM) anyerror!Value {\n    const str = try vm.getOrBufPrintValueStr(&cy.tempBuf, vm.getValue(0));\n    return vm.prepPanic(str);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "panic",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to is from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn is(vm: *cy.VM) Value {\n    return Value.initBool(vm.getValue(0).val == vm.getValue(1).val);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "is",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isAlpha from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn isAlpha(vm: *cy.VM) Value {\n    const num = vm.getInt(0);\n    if (num < 0 or num >= 2 << 21) {\n        return rt.prepThrowError(vm, .InvalidRune);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "isAlpha",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isDigit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn isDigit(vm: *cy.VM) Value {\n    const num = vm.getInt(0);\n    if (num < 0 or num >= 2 << 21) {\n        return rt.prepThrowError(vm, .InvalidRune);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "isDigit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn isNone(vm: *cy.VM) Value {\n    const val = vm.getValue(0);\n    const type_e = vm.c.types[val.getTypeId()];\n    if (type_e.kind != .option) {\n        return Value.False;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "isNone",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to runestr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn runestr(vm: *cy.VM) anyerror!Value {\n    const num = vm.getInt(0);\n    if (num < 0 or num >= 2 << 21) {\n        return rt.prepThrowError(vm, .InvalidRune);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "runestr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to dump from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn dump(vm: *cy.VM) anyerror!Value {\n    // const res = try cy_mod.allocToCyon(vm, vm.alloc, vm.getValue(0));\n    // defer vm.alloc.free(res);\n    // rt.print(vm, res);\n    // rt.print(vm, \"\\n\");\n    cy.vm.zDumpValue(vm, vm.getValue(0));\n    return Value.Void;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "dump",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getObjectRc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn getObjectRc(vm: *cy.VM) anyerror!Value {\n    const val = vm.getValue(0);\n    if (val.isPointer()) {\n        return Value.initInt(@intCast(val.asHeapObject().head.rc));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "getObjectRc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to performGC from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn performGC(vm: *cy.VM) anyerror!Value {\n    const res = try cy.arc.performGC(vm);\n    const map = try vm.allocEmptyMap();\n    const cycKey = try vm.retainOrAllocAstring(\"numCycFreed\");\n    const objKey = try vm.retainOrAllocAstring(\"numObjFreed\");\n    const num_cyc_freed = try vm.allocInt(@intCast(res.numCycFreed));\n    try map.asHeapObject().map.setConsume(vm, cycKey, num_cyc_freed);\n    const num_obj_freed = try vm.allocInt(@intCast(res.numObjFreed));\n    try map.asHeapObject().map.setConsume(vm, objKey, num_obj_freed);\n    return map;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "performGC",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to eprint from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn eprint(vm: *cy.VM) Value {\n    const err = eprint_c(vm, vm.getValue(0));\n    if (!err.isNull()) {\n        return Value.Interrupt;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "eprint",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to eprint_c from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn eprint_c(ctx: cy.Context, arg: rt.Any) callconv(.C) rt.Error {\n    if (build_options.rt == .vm) {\n        const str = ctx.getOrBufPrintValueStr(&cy.tempBuf, arg) catch |err| {\n            return cy.builtins.prepThrowZError2(ctx, err, @errorReturnTrace());\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "eprint_c",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to print from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn print(vm: *cy.VM) Value {\n    const err = print_c(vm, vm.getValue(0));\n    if (!err.isNull()) {\n        return Value.Interrupt;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "print",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to print_c from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn print_c(ctx: cy.Context, arg: rt.Any) callconv(.C) rt.Error {\n    if (build_options.rt == .vm) {\n        const str = ctx.getOrBufPrintValueStr(&cy.tempBuf, arg) catch |err| {\n            return cy.builtins.prepThrowZError2(ctx, err, @errorReturnTrace());\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "print_c",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to queueTask from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn queueTask(vm: *cy.VM) anyerror!Value {\n    const cb = vm.getValue(0);\n    vm.retain(cb);\n    const task = cy.heap.AsyncTask{\n        .type = .callback,\n        .data = .{ .callback = cb }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "queueTask",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to sizeof from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn sizeof(vm: *cy.VM) Value {\n    const type_id: cy.TypeId = @intCast(vm.getInt(0));\n    const type_e = vm.c.types[type_id];\n    if (type_e.kind == .struct_t) {\n        return Value.initInt(8 * type_e.data.struct_t.nfields);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "sizeof",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allTypes from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn allTypes(ivm: *cy.VM) !Value {\n    const vm: *C.ZVM = @ptrCast(ivm);\n\n    const list_tmpl = ivm.sema.list_tmpl.head.toC();\n    const type_v = vm.newType(bt.Type);\n    defer vm.release(type_v);\n    var list_t: cy.TypeId = undefined;\n    _ = vm.expandTemplateType(list_tmpl, &.{type_v}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "allTypes",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to typeInfo from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn typeInfo(ivm: *cy.VM) !Value {\n    const type_id = ivm.getObject(*cy.heap.Type, 0).type;\n\n    const vm: *C.ZVM = @ptrCast(ivm);\n    const info_t = vm.findType(\"TypeInfo\");\n    switch (type_id) {\n        bt.Void => {\n            return @bitCast(vm.newChoice(info_t, \"void_t\", C.Void));\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "typeInfo",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to newFuncInfo from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn newFuncInfo(ivm: *cy.VM, kind: u8, type_e: cy.types.Type) C.Value {\n    const vm: *C.ZVM = @ptrCast(ivm);\n    const func_info_t = vm.findType(\"FuncInfo\");\n    const list_tmpl = ivm.sema.list_tmpl.head.toC();\n    const param_t = vm.findType(\"FuncParam\");\n    const param_tv = vm.newType(param_t);\n    defer vm.release(param_tv);\n    var list_t: cy.TypeId = undefined;\n    _ = vm.expandTemplateType(list_tmpl, &.{param_tv}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "newFuncInfo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to type_call from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn type_call(vm: *cy.VM) !Value {\n    const val = vm.getValue(0);\n    const typeId = val.getTypeId();\n    return cy.heap.allocType(vm, typeId);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "type_call",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to type_id_ from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn type_id_(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.Type, 0);\n    return Value.initInt(obj.type);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "type_id_",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listFinalizer from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn listFinalizer(vm_: ?*C.VM, obj: ?*anyopaque) callconv(.C) void {\n    const vm: *cy.VM = @ptrCast(@alignCast(vm_));\n    var list: *cy.heap.ListInner = @ptrCast(@alignCast(obj));\n    list.getList().deinit(vm.alloc);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "listFinalizer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to listGetChildren from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn listGetChildren(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) C.ValueSlice {\n    var list: *cy.heap.ListInner = @ptrCast(@alignCast(obj));\n    const items = list.items();\n    return .{\n        .ptr = @ptrCast(items.ptr),\n        .len = items.len,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "listGetChildren",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listIterGetChildren from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn listIterGetChildren(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) C.ValueSlice {\n    var iter: *cy.heap.ListIterInner = @ptrCast(@alignCast(obj));\n    return .{\n        .ptr = @ptrCast(&iter.list),\n        .len = 1,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "listIterGetChildren",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to futureGetChildren from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn futureGetChildren(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) C.ValueSlice {\n    var future: *cy.heap.Future = @ptrCast(@alignCast(obj));\n    if (future.completed) {\n        return .{\n            .ptr = @ptrCast(&future.val),\n            .len = 1,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "futureGetChildren",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to futureResolverGetChildren from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn futureResolverGetChildren(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) C.ValueSlice {\n    var resolver: *cy.heap.FutureResolver = @ptrCast(@alignCast(obj));\n    return .{\n        .ptr = @ptrCast(&resolver.future),\n        .len = 1,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "futureResolverGetChildren",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to completeFuture from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn completeFuture(vm: *cy.VM, future: *cy.heap.Future, val: cy.Value) !void {\n    future.val = val;\n    future.completed = true;\n\n    // Copy continuations to the ready queue.\n    var opt_node = future.cont_head;\n    while (opt_node) |node| {\n        try vm.ready_tasks.writeItem(node.task);\n        opt_node = node.next;\n        vm.alloc.destroy(node);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "completeFuture",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to futureResolverComplete from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn futureResolverComplete(vm: *cy.VM) anyerror!Value {\n    const resolver = vm.getHostObject(*cy.heap.FutureResolver, 0);\n    const future = resolver.future.castHostObject(*cy.heap.Future);\n    if (!future.completed) {\n        const value = vm.getValue(1);\n        vm.retain(value);\n        try completeFuture(vm, future, value);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "futureResolverComplete",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to futureResolverFuture from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn futureResolverFuture(vm: *cy.VM) anyerror!Value {\n    const resolver = vm.getHostObject(*cy.heap.FutureResolver, 0);\n    vm.retain(resolver.future);\n    return resolver.future;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "futureResolverFuture",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to futureResolverNew from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn futureResolverNew(vm: *cy.VM) anyerror!Value {\n    const future_t: cy.TypeId = @intCast(vm.getInt(0));\n    const resolver_t: cy.TypeId = @intCast(vm.getInt(1));\n    const future = try vm.allocFuture(future_t);\n    return vm.allocFutureResolver(resolver_t, future);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "futureResolverNew",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to DefaultMemory_alloc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn DefaultMemory_alloc(vm: *cy.VM) anyerror!Value {\n    if (cy.isWasm) return vm.prepPanic(\"Unsupported.\");\n    const size: usize = @intCast(vm.getInt(1));\n    const ptr = std.c.malloc(size);\n    const ptr_v = Value.initRaw(@intCast(@intFromPtr(ptr)));\n\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.PtrSliceByte, &.{ ptr_v, Value.initInt(@intCast(size)) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "DefaultMemory_alloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to DefaultMemory_free from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn DefaultMemory_free(vm: *cy.VM) anyerror!Value {\n    if (cy.isWasm) return vm.prepPanic(\"Unsupported.\");\n    const slice = vm.getObject(*cy.heap.Object, 1);\n    const addr: usize = @intCast(slice.getValue(0).val);\n    const ptr: [*]u8 = @ptrFromInt(addr);\n    std.c.free(ptr);\n    return Value.Void;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "DefaultMemory_free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Slice_startsWith from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn Slice_startsWith(vm: *cy.VM) Value {\n    const slice = vm.getObject(*cy.heap.Array, 0).getSlice();\n    const needle = vm.getArray(1);\n    return Value.initBool(std.mem.startsWith(u8, slice, needle));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "Slice_startsWith",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Slice_endsWith from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn Slice_endsWith(vm: *cy.VM) Value {\n    const slice = vm.getObject(*cy.heap.Array, 0).getSlice();\n    const needle = vm.getArray(1);\n    return Value.initBool(std.mem.endsWith(u8, slice, needle));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "Slice_endsWith",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to arrayConcat from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn arrayConcat(vm: *cy.VM) Value {\n    const slice = vm.getArray(0);\n    const rslice = vm.getArray(1);\n    return vm.allocArrayConcat(slice, rslice) catch fatal();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "arrayConcat",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to arraySlice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn arraySlice(vm: *cy.VM) anyerror!Value {\n    _ = vm;\n    // const arr = vm.getObject(*cy.heap.Object, 0);\n    // const elems = arr.getElemsPtr();\n    // const slice_t: cy.TypeId = @intCast(vm.getInt(1));\n\n    // const range = vm.getObject(*cy.heap.Range, 2);\n    // if (range.start < 0) {\n    //     return error.OutOfBounds;\n    // }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "arraySlice",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to intAsIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn intAsIndex(i: i64, len: usize) !usize {\n    if (i < 0) {\n        return error.OutOfBounds;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "intAsIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to arrayInsert from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn arrayInsert(vm: *cy.VM) anyerror!Value {\n    const slice = vm.getArray(0);\n    const idx = try intAsIndex(vm.getInt(1), slice.len+1);\n    const insert = vm.getArray(2);\n    const new = vm.allocUnsetArrayObject(slice.len + insert.len) catch cy.fatal();\n    const buf = new.array.getMutSlice();\n    @memcpy(buf[0..idx], slice[0..idx]);\n    @memcpy(buf[idx..idx+insert.len], insert);\n    @memcpy(buf[idx+insert.len..], slice[idx..]);\n    return Value.initNoCycPtr(new);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "arrayInsert",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Slice_find from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn Slice_find(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.Array, 0);\n    const slice = obj.getSlice();\n    const needle = vm.getArray(1);\n    if (needle.len > 0 and needle.len <= slice.len) {\n        if (needle.len == 1) {\n            // One byte special case. Perform indexOfChar.\n            if (cy.string.indexOfChar(slice, needle[0])) |idx| {\n                return intSome(vm, @intCast(idx)) catch cy.fatal();\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "Slice_find",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to String_decode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn String_decode(vm: *cy.VM) Value {\n    vm.setSymbol(1, @intFromEnum(Symbol.utf8));\n    return String_decode2(vm);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "String_decode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to String_decode2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn String_decode2(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.Array, 0);\n\n    const encoding = bindings.getBuiltinSymbol(vm.getSymbol(1)) orelse {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "String_decode2",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to arrayIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn arrayIndex(vm: *cy.VM) anyerror!Value {\n    const arr = vm.getObject(*cy.heap.Object, 0);\n    const n: usize = @intCast(vm.getInt(1));\n    const elem_t: cy.TypeId = @intCast(vm.getInt(2));\n    const idx = try intAsIndex(vm.getInt(3), n);\n\n    const elems = arr.getValuesPtr();\n    if (vm.sema.isUnboxedType(elem_t)) {\n        // Always an 8 byte stride.\n        return Value.initRaw(@intFromPtr(elems + idx));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "arrayIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stringGetByte from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn stringGetByte(vm: *cy.VM) anyerror!Value {\n    const slice = vm.getString(0);\n    const idx = vm.getInt(1);\n\n    if (idx < 0 or idx >= slice.len) return error.OutOfBounds;\n    return Value.initByte(slice[@intCast(idx)]);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "stringGetByte",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to String_getInt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn String_getInt(vm: *cy.VM) anyerror!Value {\n    const bytes = vm.getString(0);\n    const idx = vm.getInt(1);\n    const sym = try std.meta.intToEnum(Symbol, vm.getSymbol(2));\n    const endian: std.builtin.Endian = switch (sym) {\n        .little => .little,\n        .big => .big,\n        else => return error.InvalidArgument,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "String_getInt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to String_getInt32 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn String_getInt32(vm: *cy.VM) anyerror!Value {\n    const bytes = vm.getString(0);\n    const idx = vm.getInt(1);\n    const sym = try std.meta.intToEnum(Symbol, vm.getSymbol(2));\n    const endian: std.builtin.Endian = switch (sym) {\n        .little => .little,\n        .big => .big,\n        else => return error.InvalidArgument,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "String_getInt32",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stringFindAnyByte from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn stringFindAnyByte(vm: *cy.VM) Value {\n    const slice = vm.getString(0);\n    const set_slice = vm.getObject(*cy.heap.Object, 1);\n    const set_ptr: [*]u8 = @ptrFromInt(@as(usize, @intCast(set_slice.getValue(0).val)));\n    const set_len: usize = @intCast(set_slice.getValue(1).asInt());\n    const set = set_ptr[0..set_len];\n    const setIsAscii = cy.string.isAstring(set);\n    if (setIsAscii) {\n        if (cy.string.indexOfAsciiSet(slice, set)) |idx| {\n            return intSome(vm, @intCast(idx)) catch cy.fatal();\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "stringFindAnyByte",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stringFindByte from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn stringFindByte(vm: *cy.VM) Value {\n    const slice = vm.getString(0);\n    const byte = vm.getByte(1);\n\n    if (cy.string.indexOfChar(slice, @intCast(byte))) |idx| {\n        return intSome(vm, @intCast(idx)) catch cy.fatal();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "stringFindByte",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stringFmtBytes from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn stringFmtBytes(vm: *cy.VM) anyerror!Value {\n    const str = vm.getString(0);\n    const kind = try std.meta.intToEnum(NumberFormat, vm.getEnumValue(1));\n    if (kind == .asc) {\n        var buf: std.ArrayListUnmanaged(u8) = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "stringFmtBytes",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to sliceTrim from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn sliceTrim(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.Array, 0);\n    const slice = obj.getSlice();\n\n    const trimRunes = vm.getArray(2);\n\n    var res: []const u8 = undefined;\n    const mode = bindings.getBuiltinSymbol(vm.getSymbol(1)) orelse {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "sliceTrim",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to arrayRepeat from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn arrayRepeat(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.Array, 0);\n    const slice = obj.getSlice();\n\n    const n = vm.getInt(1);\n    if (n < 0) {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "arrayRepeat",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to sliceSplit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn sliceSplit(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.Array, 0);\n    const slice = obj.getSlice();\n    const delim = vm.getArray(1);\n\n    const res = try vm.allocEmptyListDyn();\n    if (delim.len == 0) {\n        return res;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "sliceSplit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fiberStatus from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn fiberStatus(vm: *cy.VM) Value {\n    const fiber = vm.getObject(*vmc.Fiber, 0);\n\n    if (vm.c.curFiber == fiber) {\n        return Value.initSymbol(@intFromEnum(Symbol.running));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "fiberStatus",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Future_new from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn Future_new(vm: *cy.VM) anyerror!Value {\n    const type_id: cy.TypeId = @intCast(vm.getInt(0));\n    return vm.allocFuture(type_id);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "Future_new",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Future_complete from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn Future_complete(vm: *cy.VM) anyerror!Value {\n    const type_id: cy.TypeId = @intCast(vm.getInt(1));\n    const future = try vm.allocFuture(type_id);\n    const value = vm.getValue(0);\n    vm.retain(value);\n    future.castHostObject(*cy.heap.Future).val = value;\n    future.castHostObject(*cy.heap.Future).completed = true;\n    return future;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "Future_complete",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerAsObject from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerAsObject(vm: *cy.VM) Value {\n    const ptr = vm.getPointer(0);\n    vm.retainObject(@ptrCast(@alignCast(ptr)));\n    return Value.initPtr(ptr);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerAsObject",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerIndex(vm: *cy.VM) anyerror!Value {\n    const ptr: [*]cy.Value = @ptrCast(@alignCast(vm.getPointer(0)));\n    const elem_t: cy.TypeId = @intCast(vm.getInt(1));\n    const idx: usize = @intCast(vm.getInt(2));\n\n    const elem_te = vm.sema.getType(elem_t);\n    if (elem_te.kind == .struct_t) {\n        const n = elem_te.data.struct_t.nfields;\n        return Value.initRaw(@intCast(@intFromPtr(ptr + idx*n)));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerIndexRange from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerIndexRange(vm: *cy.VM) anyerror!Value {\n    const ptr: [*]cy.Value = @ptrCast(@alignCast(vm.getPointer(0)));\n    const slice_t: cy.TypeId = @intCast(vm.getInt(1));\n    const range = vm.getObject(*cy.heap.Range, 2);\n    if (range.end < range.start) {\n        return error.InvalidArgument;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerIndexRange",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerSetIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerSetIndex(vm: *cy.VM) anyerror!Value {\n    const ptr: [*]cy.Value = @ptrCast(@alignCast(vm.getPointer(0)));\n    const elem_t: cy.TypeId = @intCast(vm.getInt(1));\n    const idx: usize = @intCast(vm.getInt(2));\n    const val = vm.getValue(3);\n\n    const elem_te = vm.sema.getType(elem_t);\n    if (elem_te.kind == .struct_t) {\n        const n = elem_te.data.struct_t.nfields;\n        const dst = ptr[idx*n..idx*n+n];\n        const src = val.asHeapObject().object.getValuesPtr()[0..n];\n        @memcpy(dst, src);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerSetIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerAddr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerAddr(vm: *cy.VM) Value {\n    return vm.getValue(0);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerAddr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerFromCstr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerFromCstr(vm: *cy.VM) anyerror!Value {\n    if (cy.isWasm) return vm.prepPanic(\"Unsupported.\");\n    const ptr: [*]const u8 = @ptrCast(vm.getPointer(0));\n    const off: u64 = @bitCast(vm.getInt(1));\n    const bytes = std.mem.span(@as([*:0]const u8, @ptrCast(ptr + off)));\n    return vm.allocString(bytes);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerFromCstr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerGet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerGet(vm: *cy.VM) anyerror!Value {\n    const ptr = vm.getPointer(0);\n    const off = vm.getInt(1);\n    const ctype = try std.meta.intToEnum(Symbol, vm.getSymbol(2));\n\n    const uoff: u64 = @bitCast(off);\n    switch (ctype) {\n        .voidPtr => {\n            const addr: usize = @intFromPtr(ptr) + @as(usize, @intCast(uoff));\n            const val = @as(*?*anyopaque, @ptrFromInt(addr)).*;\n            const data = vm.getData(*BuiltinsData, \"builtins\");\n            return vm.allocPointer(data.PtrVoid, val);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerGet",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerSet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerSet(vm: *cy.VM) anyerror!Value {\n    const ptr = vm.getPointer(0);\n    const idx: usize = @intCast(vm.getInt(1));\n    const ctype = try std.meta.intToEnum(Symbol, vm.getSymbol(2));\n    const val = vm.getValue(3);\n    const valT = val.getTypeId();\n    switch (ctype) {\n        .int => {\n            switch (valT) {\n                bt.Integer => {\n                    const addr: usize = @intFromPtr(ptr) + idx;\n                    @as(*i32, @ptrFromInt(addr)).* = @intCast(val.asBoxInt());\n                    return Value.Void;\n                }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerSet",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerGetString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerGetString(vm: *cy.VM) anyerror!Value {\n    const ptr: [*]const u8 = @ptrCast(vm.getPointer(0));\n    const off: usize = @intCast(vm.getInt(1));\n    const len: usize = @intCast(vm.getInt(2));\n    return vm.allocString(ptr[off..@intCast(off+len)]);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerGetString",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pointerCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn pointerCall(vm: *cy.VM) anyerror!Value {\n    const val = vm.getInt(0);\n    const addr: usize = @intCast(val);\n    return Value.initRaw(@intCast(addr));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "pointerCall",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to externFuncPtr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn externFuncPtr(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.ExternFunc, 0);\n    return Value.initRaw(@intFromPtr(obj.ptr));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "externFuncPtr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to externFuncAddr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn externFuncAddr(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.ExternFunc, 0);\n    return Value.initInt(@bitCast(@as(u64, @intFromPtr(obj.ptr))));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "externFuncAddr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to errorSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn errorSym(vm: *cy.VM) Value {\n    const recv = vm.getValue(0);\n    return Value.initSymbol(recv.asErrorSymbol());\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "errorSym",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to errorCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn errorCall(vm: *cy.VM) Value {\n    const val = vm.getValue(0);\n    if (val.isPointer()) {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "errorCall",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intFmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn intFmt(vm: *cy.VM) anyerror!Value {\n    const val = vm.getInt(0);\n    const format = try std.meta.intToEnum(NumberFormat, vm.getEnumValue(1));\n    return intFmtExt(vm, val, format, .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "intFmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to intFmt2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn intFmt2(vm: *cy.VM) anyerror!Value {\n    const val = vm.getInt(0);\n    const format = try std.meta.intToEnum(NumberFormat, vm.getEnumValue(1));\n    const optsv = vm.getObject(*cy.heap.Table, 2);\n    const opts = try getIntFmtOptions(optsv);\n    return intFmtExt(vm, val, format, opts);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "intFmt2",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getIntFmtOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn getIntFmtOptions(optsv: *cy.heap.Table) !IntFmtOptions {\n    var opts: IntFmtOptions = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "getIntFmtOptions",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to intFmtExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn intFmtExt(vm: *cy.VM, val: i64, format: NumberFormat, opts: IntFmtOptions) !Value {\n    if (format == .asc) {\n        if (val < 0 or val > 127) {\n            return error.InvalidArgument;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "intFmtExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to intCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn intCall(vm: *cy.VM) Value {\n    const val = vm.getValue(0);\n    switch (val.getTypeId()) {\n        bt.Float => {\n            return Value.initInt(@intFromFloat(@trunc(val.asF64())));\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "intCall",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to boolCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn boolCall(vm: *cy.VM) Value {\n    return Value.initBool(vm.getValue(0).toBool());\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "boolCall",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floatCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn floatCall(vm: *cy.VM) Value {\n    const val = vm.getValue(0);\n    switch (val.getTypeId()) {\n        bt.Float => return val,\n        bt.String => {\n            const res = std.fmt.parseFloat(f64, val.asString()) catch {\n                return Value.initF64(0);\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "floatCall",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to intNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn intNone(vm: *cy.VM) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionInt, &.{ Value.initInt(0), Value.initInt(0) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "intNone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to intSome from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn intSome(vm: *cy.VM, v: i48) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionInt, &.{ Value.initInt(1), Value.initInt(v) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "intSome",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to anyNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn anyNone(vm: *cy.VM) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionAny, &.{ Value.initInt(0), Value.initInt(0) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "anyNone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to anySome from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn anySome(vm: *cy.VM, v: Value) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionAny, &.{ Value.initInt(1), v }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "anySome",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to optionNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn optionNone(vm: *cy.VM, option_t: cy.TypeId) !Value {\n    return vm.allocObjectSmall(option_t, &.{ Value.initInt(0), Value.initInt(0) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "optionNone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to optionSome from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn optionSome(vm: *cy.VM, option_t: cy.TypeId, v: Value) !Value {\n    return vm.allocObjectSmall(option_t, &.{ Value.initInt(1), v }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "optionSome",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to TupleNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn TupleNone(vm: *cy.VM) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionTuple, &.{ Value.initInt(0), Value.initInt(0) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "TupleNone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to TupleSome from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn TupleSome(vm: *cy.VM, v: Value) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionTuple, &.{ Value.initInt(1), v }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "TupleSome",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to MapNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn MapNone(vm: *cy.VM) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionMap, &.{ Value.initInt(0), Value.initInt(0) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "MapNone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to MapSome from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn MapSome(vm: *cy.VM, v: Value) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionMap, &.{ Value.initInt(1), v }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "MapSome",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to StringNone from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn StringNone(vm: *cy.VM) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionString, &.{ Value.initInt(0), Value.initInt(0) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "StringNone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to StringSome from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub fn StringSome(vm: *cy.VM, v: Value) !Value {\n    const data = vm.getData(*BuiltinsData, \"builtins\");\n    return vm.allocObjectSmall(data.OptionString, &.{ Value.initInt(1), v }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "StringSome",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ExprType_getType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "fn ExprType_getType(vm: *cy.VM) anyerror!Value {\n    const val = vm.getObject(*cy.heap.Type, 0);\n    return vm.allocType(val.type);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "function",
      "name": "ExprType_getType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CoreData from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub const CoreData = struct {\n    ValueT: cy.TypeId,\n    VMT: cy.TypeId,\n    EvalResultT: cy.TypeId,\n    EvalConfigT: cy.TypeId,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "struct",
      "name": "CoreData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BuiltinsData from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "pub const BuiltinsData = struct {\n    OptionInt: cy.TypeId,\n    OptionAny: cy.TypeId,\n    OptionTuple: cy.TypeId,\n    OptionMap: cy.TypeId,\n    OptionString: cy.TypeId,\n    PtrVoid: cy.TypeId,\n    PtrSliceByte: cy.TypeId,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "struct",
      "name": "BuiltinsData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to S from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const S = struct {\n        pub fn genFunc(vm: *cy.VM) callconv(.C) Value {\n            return @call(.always_inline, f, .{vm}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "struct",
      "name": "S",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to IntFmtOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const IntFmtOptions = struct {\n    pad: ?u8 = null,\n    width: ?usize = null,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "struct",
      "name": "IntFmtOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sig from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "sig",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sig from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "sig",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sig from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const sig: cy.sema.FuncSigId = @intCast(ctx.ct_params.get(\"SIG\").?.asBoxInt());",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "sig",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to n from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const n: usize = @intCast(ctx.ct_params.get(\"N\").?.asBoxInt());",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "n",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ivm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const ivm: *cy.VM = @ptrCast(@alignCast(vm_));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "ivm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to vm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const vm: *C.ZVM = @ptrCast(vm_);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "vm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to list_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const list_t: cy.TypeId = @intCast(vm.getInt(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "list_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to val_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const val_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "val_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to dst_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const dst_t: cy.TypeId = @intCast(vm.getInt(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "dst_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to src_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const src_t: cy.TypeId = @intCast(vm.getInt(2));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "src_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to type_id from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const type_id: cy.TypeId = @intCast(vm.getInt(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "type_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const tag_t: cy.TypeId = @intCast(vm.getInt(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "tag_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to rune from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const rune: u21 = @intCast(num);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "rune",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to type_id from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const type_id: cy.TypeId = @intCast(vm.getInt(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "type_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to vm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const vm: *C.ZVM = @ptrCast(ivm);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "vm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to vm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const vm: *C.ZVM = @ptrCast(ivm);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "vm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to vm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const vm: *C.ZVM = @ptrCast(ivm);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "vm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to vm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const vm: *cy.VM = @ptrCast(@alignCast(vm_));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "vm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to future_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const future_t: cy.TypeId = @intCast(vm.getInt(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "future_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to resolver_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const resolver_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "resolver_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to size from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const size: usize = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "size",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to addr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const addr: usize = @intCast(slice.getValue(0).val);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "addr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const ptr: [*]u8 = @ptrFromInt(addr);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to slice_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const slice_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "slice_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const start: usize = @intCast(range.start);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to u from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const u: u64 = @bitCast(i);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "u",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to n from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const n: usize = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "n",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to elem_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const elem_t: cy.TypeId = @intCast(vm.getInt(2));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "elem_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to endian from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const endian: std.builtin.Endian = switch (sym) {\n        .little => .little,\n        .big => .big,\n        else => return error.InvalidArgument,\n    };",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "endian",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uidx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const uidx: usize = @intCast(idx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "uidx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to endian from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const endian: std.builtin.Endian = switch (sym) {\n        .little => .little,\n        .big => .big,\n        else => return error.InvalidArgument,\n    };",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "endian",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uidx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const uidx: usize = @intCast(idx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "uidx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to set_ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const set_ptr: [*]u8 = @ptrFromInt(@as(usize, @intCast(set_slice.getValue(0).val)));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "set_ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to set_len from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const set_len: usize = @intCast(set_slice.getValue(1).asInt());",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "set_len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to un from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const un: u32 = @intCast(n);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "un",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to type_id from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const type_id: cy.TypeId = @intCast(vm.getInt(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "type_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to type_id from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const type_id: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "type_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const ptr: [*]cy.Value = @ptrCast(@alignCast(vm.getPointer(0)));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to elem_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const elem_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "elem_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to idx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const idx: usize = @intCast(vm.getInt(2));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const ptr: [*]cy.Value = @ptrCast(@alignCast(vm.getPointer(0)));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to slice_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const slice_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "slice_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const ptr: [*]cy.Value = @ptrCast(@alignCast(vm.getPointer(0)));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to elem_t from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const elem_t: cy.TypeId = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "elem_t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to idx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const idx: usize = @intCast(vm.getInt(2));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const ptr: [*]const u8 = @ptrCast(vm.getPointer(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to off from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const off: u64 = @bitCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "off",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uoff from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const uoff: u64 = @bitCast(off);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "uoff",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to addr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const addr: usize = @intFromPtr(ptr) + @as(usize, @intCast(uoff));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "addr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to idx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const idx: usize = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to addr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const addr: usize = @intFromPtr(ptr) + idx;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "addr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to addr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const addr: usize = @intFromPtr(ptr) + idx;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "addr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to addr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const addr: usize = @intFromPtr(ptr) + idx;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "addr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to right_addr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const right_addr: usize = @intCast(val.asBoxInt());",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "right_addr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ptr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const ptr: [*]const u8 = @ptrCast(vm.getPointer(0));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to off from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const off: usize = @intCast(vm.getInt(1));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "off",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to len from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const len: usize = @intCast(vm.getInt(2));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to addr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const addr: usize = @intCast(val);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "addr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uchar from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const uchar: u8 = @intCast(val);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "uchar",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to base from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/builtins.zig",
    "response": "const base: u8 = switch (format) {\n            .bin => 2,\n            .oct => 8,\n            .dec => 10,\n            .hex => 16,\n            else => return error.InvalidArgument,\n        };",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/builtins.zig",
      "type": "const",
      "name": "base",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to create from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn create(vm: *cy.VM, r_uri: []const u8) C.Module {\n    const core_data = vm.getData(*cy.builtins.CoreData, \"core\");\n    const mod = C.createModule(@ptrCast(vm), C.toStr(r_uri), C.toStr(Src));\n\n    const htype = C.hostTypeEntry;\n    const types = [_]C.HostTypeEntry{\n        htype(\"EvalConfig\", C.DECL_TYPE_GET(&core_data.EvalConfigT)),\n        htype(\"EvalResult\", C.DECL_TYPE_GET(&core_data.EvalResultT)),\n        htype(\"Value\",      C.HOST_OBJECT_PRE(&core_data.ValueT, UserValue_getChildren, UserValue_finalizer)),\n        htype(\"VM\",         C.HOST_OBJECT(&core_data.VMT,    null, UserVM_finalizer)),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "create",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserVM_new from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserVM_new(vm: *cy.VM) anyerror!cy.Value {\n    const core_data = vm.getData(*cy.builtins.CoreData, \"core\");\n\n    // Create an isolated VM.\n    const new: *cy.VM = @ptrCast(@alignCast(C.create()));\n\n    // Use the same printers as the parent VM.\n    C.setPrinter(@ptrCast(new), C.getPrinter(@ptrCast(vm)));\n    C.setErrorPrinter(@ptrCast(new), C.getErrorPrinter(@ptrCast(vm)));\n\n    const uvm: *UserVM = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.VMT, @sizeOf(UserVM))));\n    uvm.* = .{\n        .vm = new,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserVM_new",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserVM_getErrorSummary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserVM_getErrorSummary(vm: *cy.VM) anyerror!cy.Value {\n    const uvm = vm.getValue(0).castHostObject(*UserVM);\n    const cvm: *C.ZVM = @ptrCast(uvm.vm);\n    const summary = cvm.newErrorReportSummary();\n    defer cvm.free(summary);\n    return vm.allocString(summary);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserVM_getErrorSummary",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserVM_getPanicSummary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserVM_getPanicSummary(vm: *cy.VM) anyerror!cy.Value {\n    const uvm = vm.getValue(0).castHostObject(*UserVM);\n    const cvm: *C.ZVM = @ptrCast(uvm.vm);\n    const summary = cvm.newPanicSummary();\n    defer cvm.free(summary);\n    return vm.allocString(summary);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserVM_getPanicSummary",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserValue_dump from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserValue_dump(vm: *cy.VM) anyerror!cy.Value {\n    const uval = vm.getValue(0).castHostObject(*UserValue);\n    const uvm = uval.vm.castHostObject(*UserVM);\n    const cvm: *C.ZVM = @ptrCast(uvm.vm);\n\n    const str = cvm.newValueDump(uval.val);\n    defer cvm.free(str);\n    return vm.allocString(str);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserValue_dump",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserValue_getTypeId from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserValue_getTypeId(vm: *cy.VM) anyerror!cy.Value {\n    const uval = vm.getValue(0).castHostObject(*UserValue);\n    const val: cy.Value = @bitCast(uval.val);\n    return cy.Value.initInt(@intCast(val.getTypeId()));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserValue_getTypeId",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserValue_toHost from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserValue_toHost(vm: *cy.VM) anyerror!cy.Value {\n    const uval = vm.getValue(0).castHostObject(*UserValue);\n    const val: cy.Value = @bitCast(uval.val);\n    switch (val.getTypeId()) {\n        bt.Void => return cy.Value.False,\n        bt.Integer => {\n            return vm.allocInt(val.asBoxInt());\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserValue_toHost",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserVM_eval from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserVM_eval(vm: *cy.VM) anyerror!cy.Value {\n    const core_data = vm.getData(*cy.builtins.CoreData, \"core\");\n    const uvm = vm.getValue(0).castHostObject(*UserVM);\n    const src = vm.getString(1);\n\n    var res: C.Value = @bitCast(cy.Value.Void);\n    const code = C.eval(@ptrCast(uvm.vm), C.toStr(src), &res);\n\n    const value: *UserValue = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.ValueT, @sizeOf(UserValue))));\n    vm.retain(vm.getValue(0));\n    value.vm = vm.getValue(0);\n    if (code == C.Success) {\n        value.val = @bitCast(res);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserVM_eval",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserVM_evalExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserVM_evalExt(vm: *cy.VM) anyerror!cy.Value {\n    const core_data = vm.getData(*cy.builtins.CoreData, \"core\");\n    const uvm = vm.getValue(0).castHostObject(*UserVM);\n    const uri = vm.getString(1);\n    const src = vm.getString(2);\n    const config = vm.getValue(3);\n\n    const config_c = C.EvalConfig{\n        .single_run = (try vm.getFieldName(config, \"single_run\")).asBool(),\n        .file_modules = (try vm.getFieldName(config, \"file_modules\")).asBool(),\n        .gen_all_debug_syms = (try vm.getFieldName(config, \"gen_all_debug_syms\")).asBool(),\n        .backend = (try vm.getFieldName(config, \"backend\")).getEnumValue(),\n        .reload = (try vm.getFieldName(config, \"reload\")).asBool(),\n        .spawn_exe = (try vm.getFieldName(config, \"spawn_exe\")).asBool(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserVM_evalExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserVM_finalizer from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserVM_finalizer(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) void {\n    const uvm: *UserVM = @ptrCast(@alignCast(obj));\n    @as(*C.ZVM, @ptrCast(uvm.vm)).destroy();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserVM_finalizer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserValue_getChildren from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserValue_getChildren(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) C.ValueSlice {\n    const value: *UserValue = @ptrCast(@alignCast(obj));\n    return .{\n        .ptr = @ptrCast(&value.vm),\n        .len = 1,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserValue_getChildren",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to UserValue_finalizer from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn UserValue_finalizer(_: ?*C.VM, obj: ?*anyopaque) callconv(.C) void {\n    const value: *UserValue = @ptrCast(@alignCast(obj));\n    const ivm = value.vm.castHostObject(*UserVM);\n    ivm.vm.release(@bitCast(value.val));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "UserValue_finalizer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn parse(vm: *cy.VM) anyerror!cy.Value {\n    const src = vm.getString(0);\n\n    var parser: cy.Parser = undefined;\n    try parser.init(vm.alloc);\n    defer parser.deinit();\n    _ = try parser.parse(src, .{ .parseComments = true }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "parse",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genTypeSpecString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn genTypeSpecString(vm: *cy.VM, view: ast.AstView, opt_expr: ?*ast.Node) !cy.Value {\n    if (opt_expr) |expr| {\n        var sb: std.ArrayListUnmanaged(u8) = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "genTypeSpecString",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genNodeValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn genNodeValue(vm: *cy.VM, view: ast.AstView, node: *ast.Node) !cy.Value {\n    const res = try vm.allocEmptyMap();\n    const map = res.castHeapObject(*cy.heap.Map);\n    switch (node.type()) {\n        .func_param => {\n            const param = node.cast(.func_param);\n            const name = view.nodeString(param.name_type);\n            try vm.mapSet(map, try vm.retainOrAllocAstring(\"name\"), try vm.allocString(name));\n\n            const typeSpec = try genTypeSpecString(vm, view, param.type);\n            try vm.mapSet(map, try vm.retainOrAllocAstring(\"typeSpec\"), typeSpec);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "genNodeValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genImplicitFuncDeclEntry from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn genImplicitFuncDeclEntry(vm: *cy.VM, view: ast.AstView, node: *ast.FuncDecl, state: *ParseCyberState) !cy.Value {\n    const entryv = try vm.allocEmptyMap();\n    const entry = entryv.castHeapObject(*cy.heap.Map);\n    const name = view.getNamePathInfo(node.name).name_path;\n    \n    const params = try vm.allocEmptyListDyn();\n    for (node.params) |param| {\n        const param_v = try genNodeValue(vm, view, @ptrCast(param));\n        try params.asHeapObject().list.append(vm.alloc, param_v);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "genImplicitFuncDeclEntry",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genDeclEntry from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn genDeclEntry(vm: *cy.VM, view: ast.AstView, decl: *ast.Node, state: *ParseCyberState) !cy.Value {\n    const entryv = try vm.allocEmptyMap();\n    const entry = entryv.castHeapObject(*cy.heap.Map);\n    const name = try view.declNamePath(decl);\n    try vm.mapSet(entry, try vm.retainOrAllocAstring(\"type\"), try vm.retainOrAllocAstring(@tagName(decl.type())));\n\n    switch (decl.type()) {\n        .staticDecl => {\n            const static_decl = decl.cast(.staticDecl);\n            const typeSpec = try genTypeSpecString(vm, view, static_decl.typeSpec);\n            try vm.mapSet(entry, try vm.retainOrAllocAstring(\"typeSpec\"), typeSpec);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "genDeclEntry",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genDocComment from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn genDocComment(vm: *cy.VM, view: ast.AstView, decl_type: ast.NodeType, state: *ParseCyberState) !?cy.Value {\n    const comments = state.comments;\n    if (state.commentIdx < comments.len) {\n        var docStartIdx = state.commentIdx;\n        var docEndIdx = state.commentIdx;\n        while (state.commentIdx < comments.len) {\n            var commentPos = comments[state.commentIdx];\n            if (commentPos.start > state.pos) {\n                break;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "genDocComment",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseCyberGenResult from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn parseCyberGenResult(vm: *cy.VM, parser: *const cy.Parser) !cy.Value {\n    const root = try vm.allocEmptyMap();\n    errdefer vm.release(root);\n\n    const map = root.asHeapObject().map.map();\n\n    const decls = try vm.allocEmptyListDyn();\n    errdefer vm.release(decls);\n\n    const declsList = decls.asHeapObject().list.getList();\n\n    var state = ParseCyberState{\n        .comments = parser.ast.comments.items,\n        .commentIdx = 0,\n        .sb = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "parseCyberGenResult",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseCyon from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn parseCyon(vm: *cy.VM) anyerror!cy.Value {\n    const src = vm.getString(0);\n\n    var parser: cy.Parser = undefined;\n    try parser.init(vm.alloc);\n    defer parser.deinit();\n    const val = try cy.decodeCyon(vm.alloc, &parser, src);\n    return fromCyonValue(vm, val);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "parseCyon",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromCyonValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn fromCyonValue(vm: *cy.VM, val: cy.DecodeValueIR) !cy.Value {\n    switch (val.getValueType()) {\n        .list => {\n            var dlist = try val.getList();\n            defer dlist.deinit();\n            const elems = try vm.alloc.alloc(cy.Value, dlist.arr.len);\n            for (elems, 0..) |*elem, i| {\n                elem.* = try fromCyonValue(vm, dlist.getIndex(i));\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "fromCyonValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to toCyon from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn toCyon(vm: *cy.VM) anyerror!cy.Value {\n    const res = try allocToCyon(vm, vm.alloc, vm.getValue(0));\n    defer vm.alloc.free(res);\n    return vm.allocString(res);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "toCyon",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocToCyon from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub fn allocToCyon(vm: *cy.VM, alloc: std.mem.Allocator, root: cy.Value) ![]const u8 {\n    const S = struct {\n        fn encodeTable(ctx: *cy.EncodeTableContext, val: cy.Value) anyerror!void {\n            const uservm = cy.ptrAlignCast(*cy.VM, ctx.user_ctx);\n            var iter = val.asHeapObject().table.map().iterator();\n            while (iter.next()) |e| {\n                const key = try uservm.getOrBufPrintValueStr(&cy.tempBuf, e.key);\n                switch (e.value.getTypeId()) {\n                    bt.Float => {\n                        try ctx.encodeFloat(key, e.value.asF64());\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "allocToCyon",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to encodeList from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn encodeList(ctx: *cy.EncodeListContext, val: cy.Value) anyerror!void {\n            const items = val.asHeapObject().list.items();\n            for (items) |it| {\n                try ctx.indent();\n                switch (it.getTypeId()) {\n                    bt.Float => {\n                        try ctx.encodeFloat(it.asF64());\n                        _ = try ctx.writer.write(\",\\n\");\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "encodeList",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to encodeRoot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn encodeRoot(ctx: *cy.EncodeValueContext, val: anytype) !void {\n            const T = @TypeOf(val);\n            if (T == cy.Value) {\n                switch (val.getTypeId()) {\n                    bt.Float => {\n                        try ctx.encodeFloat(val.asF64());\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "encodeRoot",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn read(ptr: *anyopaque, prefix: [:0]const u8) anyerror![]const u8 {\n        const self: *@This() = @ptrCast(@alignCast(ptr));\n        const vm_prefix = try self.vm.allocString(prefix);\n        defer self.vm.release(vm_prefix);\n        const line = try self.vm.callFunc(self.read_line, &.{ vm_prefix }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "read",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "fn free(ptr: *anyopaque, line: []const u8) void {\n        const self: *@This() = @ptrCast(@alignCast(ptr));\n        self.vm.alloc.free(line);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "function",
      "name": "free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UserVM from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const UserVM = struct {\n    vm: *cy.VM,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "struct",
      "name": "UserVM",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ParseCyberState from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const ParseCyberState = struct {\n    comments: []const cy.IndexSlice(u32),\n    sb: std.ArrayListUnmanaged(u8),\n    commentIdx: u32,\n    pos: u32,\n    node: *ast.Node,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "struct",
      "name": "ParseCyberState",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to S from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const S = struct {\n        fn encodeTable(ctx: *cy.EncodeTableContext, val: cy.Value) anyerror!void {\n            const uservm = cy.ptrAlignCast(*cy.VM, ctx.user_ctx);\n            var iter = val.asHeapObject().table.map().iterator();\n            while (iter.next()) |e| {\n                const key = try uservm.getOrBufPrintValueStr(&cy.tempBuf, e.key);\n                switch (e.value.getTypeId()) {\n                    bt.Float => {\n                        try ctx.encodeFloat(key, e.value.asF64());\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "struct",
      "name": "S",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to IReplReadLine from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "pub const IReplReadLine = struct {\n    ptr: *anyopaque,\n    read: *const fn(ptr: *anyopaque, prefix: [:0]const u8) anyerror![]const u8,\n    free: *const fn(ptr: *anyopaque, line: []const u8) void,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "struct",
      "name": "IReplReadLine",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to VmReadLine from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const VmReadLine = struct {\n    vm: *cy.VM,\n    read_line: cy.Value,\n\n    fn read(ptr: *anyopaque, prefix: [:0]const u8) anyerror![]const u8 {\n        const self: *@This() = @ptrCast(@alignCast(ptr));\n        const vm_prefix = try self.vm.allocString(prefix);\n        defer self.vm.release(vm_prefix);\n        const line = try self.vm.callFunc(self.read_line, &.{ vm_prefix }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "struct",
      "name": "VmReadLine",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to new from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const new: *cy.VM = @ptrCast(@alignCast(C.create()));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "new",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uvm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const uvm: *UserVM = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.VMT, @sizeOf(UserVM))));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "uvm",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to cvm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const cvm: *C.ZVM = @ptrCast(uvm.vm);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "cvm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cvm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const cvm: *C.ZVM = @ptrCast(uvm.vm);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "cvm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cvm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const cvm: *C.ZVM = @ptrCast(uvm.vm);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "cvm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to val from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const val: cy.Value = @bitCast(uval.val);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "val",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to val from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const val: cy.Value = @bitCast(uval.val);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "val",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to value from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const value: *UserValue = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.ValueT, @sizeOf(UserValue))));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "value",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to eval_res from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const eval_res: *EvalResult = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.EvalResultT, @sizeOf(EvalResult))));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "eval_res",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to value from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const value: *UserValue = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.ValueT, @sizeOf(UserValue))));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "value",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to eval_res from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const eval_res: *EvalResult = @ptrCast(@alignCast(try cy.heap.allocHostNoCycObject(vm, core_data.EvalResultT, @sizeOf(EvalResult))));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "eval_res",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to uvm from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const uvm: *UserVM = @ptrCast(@alignCast(obj));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "uvm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to value from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const value: *UserValue = @ptrCast(@alignCast(obj));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "value",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to value from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const value: *UserValue = @ptrCast(@alignCast(obj));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "value",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to self from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const self: *@This() = @ptrCast(@alignCast(ptr));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "self",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to self from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/cy.zig",
    "response": "const self: *@This() = @ptrCast(@alignCast(ptr));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/cy.zig",
      "type": "const",
      "name": "self",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to create from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn create(vm: *cy.VM, r_uri: []const u8) C.Module {\n    const mod = C.createModule(@ptrCast(vm), C.toStr(r_uri), C.toStr(Src));\n    var config = C.ModuleConfig{\n        .funcs = C.toSlice(C.HostFuncEntry, &funcs),\n        .varLoader = varLoader,\n        .types = C.toSlice(C.HostTypeEntry, &.{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "create",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to varLoader from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "fn varLoader(_: ?*C.VM, v: C.VarInfo, out_: [*c]C.Value) callconv(.C) bool {\n    const out: *C.Value = out_;\n    const name = C.fromStr(v.name);\n    if (std.mem.eql(u8, vars[v.idx].@\"0\", name)) {\n        out.* = vars[v.idx].@\"1\".val;\n        return true;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "varLoader",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to abs from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn abs(vm: *cy.VM) Value {\n    return Value.initF64(@abs(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "abs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to acos from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn acos(vm: *cy.VM) Value {\n    return Value.initF64(std.math.acos(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "acos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to acosh from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn acosh(vm: *cy.VM) Value {\n    return Value.initF64(std.math.acosh(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "acosh",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to asin from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn asin(vm: *cy.VM) Value {\n    return Value.initF64(std.math.asin(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "asin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to asinh from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn asinh(vm: *cy.VM) Value {\n    return Value.initF64(std.math.asinh(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "asinh",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to atan from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn atan(vm: *cy.VM) Value {\n    return Value.initF64(std.math.atan(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "atan",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to atan2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn atan2(vm: *cy.VM) Value {\n    return Value.initF64(std.math.atan2(vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "atan2",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to atanh from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn atanh(vm: *cy.VM) Value {\n    return Value.initF64(std.math.atanh(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "atanh",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cbrt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn cbrt(vm: *cy.VM) Value {\n    return Value.initF64(std.math.cbrt(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "cbrt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ceil from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn ceil(vm: *cy.VM) Value {\n    return Value.initF64(std.math.ceil(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "ceil",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clz32 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn clz32(vm: *cy.VM) Value {\n    return Value.initF64(@floatFromInt(@clz(@as(i32, @intFromFloat(vm.getFloat(0))))));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "clz32",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cos from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn cos(vm: *cy.VM) Value {\n    return Value.initF64(std.math.cos(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "cos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cosh from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn cosh(vm: *cy.VM) Value {\n    return Value.initF64(std.math.cosh(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "cosh",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn exp(vm: *cy.VM) Value {\n    return Value.initF64(std.math.exp(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "exp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to expm1 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn expm1(vm: *cy.VM) Value {\n    return Value.initF64(std.math.expm1(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "expm1",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to floor from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn floor(vm: *cy.VM) Value {\n    return Value.initF64(std.math.floor(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "floor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to frac from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn frac(vm: *cy.VM) Value {\n    const f = vm.getFloat(0);\n    const res = std.math.modf(f);\n    return Value.initF64(res.fpart);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "frac",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hypot from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn hypot(vm: *cy.VM) Value {\n    return Value.initF64(std.math.hypot(vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "hypot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isInt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn isInt(vm: *cy.VM) Value {\n    const f = vm.getFloat(0);\n    if (std.math.isNan(f) or std.math.isInf(f)) {\n        return Value.False;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "isInt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isNaN from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn isNaN(vm: *cy.VM) Value {\n    return Value.initBool(std.math.isNan(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "isNaN",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ln from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn ln(vm: *cy.VM) Value {\n    return Value.initF64(@log(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "ln",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to log from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn log(vm: *cy.VM) Value {\n    return Value.initF64(std.math.log(f64, vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "log",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to log10 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn log10(vm: *cy.VM) Value {\n    return Value.initF64(std.math.log10(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "log10",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to log1p from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn log1p(vm: *cy.VM) Value {\n    return Value.initF64(std.math.log1p(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "log1p",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to log2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn log2(vm: *cy.VM) Value {\n    return Value.initF64(std.math.log2(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "log2",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to max from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn max(vm: *cy.VM) Value {\n    return Value.initF64(@max(vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "max",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to min from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn min(vm: *cy.VM) Value {\n    return Value.initF64(@min(vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "min",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mul32 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn mul32(vm: *cy.VM) Value {\n    return Value.initF64(@floatFromInt(@as(i32, @intFromFloat(vm.getFloat(0))) *% @as(i32, @intFromFloat(vm.getFloat(1)))));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "mul32",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pow from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn pow(vm: *cy.VM) Value {\n    return Value.initF64(std.math.pow(f64, vm.getFloat(0), vm.getFloat(1)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "pow",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to random from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn random(_: *cy.VM) Value {\n    return Value.initF64(rand.random().float(f64));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "random",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to round from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn round(vm: *cy.VM) Value {\n    return Value.initF64(std.math.round(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "round",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sign from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn sign(vm: *cy.VM) Value {\n    return Value.initF64(std.math.sign(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "sign",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sin from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn sin(vm: *cy.VM) Value {\n    return Value.initF64(std.math.sin(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "sin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sinh from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn sinh(vm: *cy.VM) Value {\n    return Value.initF64(std.math.sinh(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "sinh",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sqrt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn sqrt(vm: *cy.VM) Value {\n    return Value.initF64(std.math.sqrt(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "sqrt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tan from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn tan(vm: *cy.VM) Value {\n    return Value.initF64(std.math.tan(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "tan",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tanh from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn tanh(vm: *cy.VM) Value {\n    return Value.initF64(std.math.tanh(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "tanh",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to trunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "pub fn trunc(vm: *cy.VM) Value {\n    return Value.initF64(std.math.trunc(vm.getFloat(0)));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "function",
      "name": "trunc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to NameVar from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "const NameVar = struct { []const u8, cy.Value }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "struct",
      "name": "NameVar",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to out from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/math.zig",
    "response": "const out: *C.Value = out_;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/math.zig",
      "type": "const",
      "name": "out",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to concat from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn concat(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const stype = obj.getType();\n    const str = obj.getSlice();\n    if (stype.isAstring()) {\n        const obj2 = vm.getObject(*cy.heap.String, 1);\n        const rstr = obj2.getSlice();\n        if (obj2.getType().isAstring()) {\n            return vm.allocAstringConcat(str, rstr) catch fatal();\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "concat",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to sliceFn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn sliceFn(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const stype = obj.getType();\n    const str = obj.getSlice();\n    const parent = obj.getParentByType(stype);\n\n    const range = vm.getObject(*cy.heap.Range, 1);\n    if (range.start < 0) {\n        return rt.prepThrowError(vm, .OutOfBounds);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "sliceFn",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to insertByte from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn insertByte(vm: *cy.VM) anyerror!Value {\n    const str = vm.getObject(*cy.heap.String, 0);\n    const slice = str.getSlice();\n    const idx = try cy.builtins.intAsIndex(vm.getInt(1), slice.len + 1);\n    const byte = vm.getByte(2);\n    if (str.getType().isAstring()) {\n        if (byte < 128) {\n            return vm.allocAstringConcat3(slice[0..idx], &.{ byte }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "insertByte",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to insertFn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn insertFn(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const idx = vm.getInt(1);\n    if (idx < 0 or idx > str.len) {\n        return error.OutOfBounds;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "insertFn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to find from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn find(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const needle = vm.getString(1);\n    if (needle.len > 0 and needle.len <= str.len) {\n        if (needle.len == 1) {\n            // One ascii char special case. Perform indexOfChar.\n            if (string.indexOfChar(str, needle[0])) |idx| {\n                return intSome(vm, @intCast(idx)) catch cy.fatal();\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "find",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to startsWith from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn startsWith(vm: *cy.VM) Value {\n    const str = vm.getString(0);\n    const needle = vm.getString(1);\n    return Value.initBool(std.mem.startsWith(u8, str, needle));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "startsWith",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to endsWith from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn endsWith(vm: *cy.VM) Value {\n    const str = vm.getString(0);\n    const needle = vm.getString(1);\n    return Value.initBool(std.mem.endsWith(u8, str, needle));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "endsWith",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isAscii from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn isAscii(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const stype = obj.getType();\n    return Value.initBool(stype.isAstring());\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "isAscii",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to findAnyRune from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn findAnyRune(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const set_list = vm.getObject(*cy.heap.List, 1).items();\n    const stype = obj.getType();\n\n    const tempBuf = &vm.u8Buf;\n    tempBuf.clearRetainingCapacity();\n    defer tempBuf.ensureMaxCapOrClear(vm.alloc, 4096) catch fatal();\n\n    var set_is_ascii = true;\n    for (set_list) |rune| {\n        if (rune.val >= 0 and rune.val < 128) {\n            try tempBuf.append(vm.alloc, @intCast(rune.val));\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "findAnyRune",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to findRune from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn findRune(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const needle = vm.getInt(1);\n    const stype = obj.getType(); \n\n    if (needle > 0) {\n        const code: u21 = @intCast(needle);\n        const needleIsAscii = code < 128;\n        if (stype.isAstring()) {\n            if (needleIsAscii) {\n                if (string.indexOfChar(str, @intCast(code))) |idx| {\n                    return intSome(vm, @intCast(idx)) catch cy.fatal();\n                }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "findRune",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to upper from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn upper(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n    if (stype.isAstring()) {\n        const new = vm.allocUnsetAstringObject(str.len) catch fatal();\n        const newBuf = new.astring.getMutSlice();\n        _ = std.ascii.upperString(newBuf, str);\n        return vm.allocOwnedAstring(new) catch fatal();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "upper",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to lower from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn lower(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n    if (stype.isAstring()) {\n        const new = vm.allocUnsetAstringObject(str.len) catch fatal();\n        const newBuf = new.astring.getMutSlice();\n        _ = std.ascii.lowerString(newBuf, str);\n        return vm.allocOwnedAstring(new) catch fatal();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "lower",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to less from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn less(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const right = vm.getString(1);\n    return Value.initBool(std.mem.lessThan(u8, str, right));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "less",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to lenFn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn lenFn(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    return Value.initInt(obj.len());\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "lenFn",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to count from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn count(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const stype = obj.getType();\n    if (stype.isAstring()) {\n        return Value.initInt(obj.len());\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "count",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to seek from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn seek(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const idx = vm.getInt(1);\n    const stype = obj.getType();\n    if (stype.isAstring()) {\n        if (idx < 0 or idx >= str.len) {\n            return error.OutOfBounds;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "seek",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to runeAt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn runeAt(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const idx = vm.getInt(1);\n    if (idx < 0 or idx >= str.len) {\n        return error.OutOfBounds;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "runeAt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to sliceAt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn sliceAt(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n    const idx = vm.getInt(1);\n\n    if (idx < 0 or idx >= str.len) {\n        return error.OutOfBounds;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "sliceAt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to trim from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn trim(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n\n    const trimRunes = vm.getString(2);\n\n    var res: []const u8 = undefined;\n    const mode = bindings.getBuiltinSymbol(vm.getSymbol(1)) orelse {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "trim",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to stringReplace from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn stringReplace(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n\n    const needle = vm.getObject(*cy.heap.String, 1);\n    const replace = vm.getObject(*cy.heap.String, 2);\n\n    if (stype.isAstring()) {\n        if (astringReplace(vm, str, needle, replace)) |val| {\n            return val;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "stringReplace",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to astringReplace from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "fn astringReplace(vm: *cy.VM, str: []const u8, needlev: *cy.heap.String, replacev: *cy.heap.String) ?Value {\n    const needle = needlev.getSlice();\n    const replacement = replacev.getSlice();\n\n    const idxBuf = &@as(*cy.VM, @ptrCast(vm)).u8Buf;\n    idxBuf.clearRetainingCapacity();\n    defer idxBuf.ensureMaxCapOrClear(vm.alloc, 4096) catch fatal();\n    const newLen = string.prepReplacement(str, needle, replacement, idxBuf.writer(vm.alloc)) catch fatal();\n    const numIdxes = @divExact(idxBuf.len, 4);\n    if (numIdxes > 0) {\n        if (replacev.getType().isAstring()) {\n            const new = vm.allocUnsetAstringObject(newLen) catch fatal();\n            const newBuf = new.astring.getMutSlice();\n            const idxes = @as([*]const u32, @ptrCast(idxBuf.buf.ptr))[0..numIdxes];\n            string.replaceAtIdxes(newBuf, str, @intCast(needle.len), replacement, idxes);\n            return vm.allocOwnedAstring(new) catch fatal();\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "astringReplace",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ustringReplace from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "fn ustringReplace(vm: *cy.VM, str: []const u8, needlev: *cy.heap.String, replacev: *cy.heap.String) ?Value {\n    const needle = needlev.getSlice();\n    const replacement = replacev.getSlice();\n\n    const idxBuf = &@as(*cy.VM, @ptrCast(vm)).u8Buf;\n    idxBuf.clearRetainingCapacity();\n    defer idxBuf.ensureMaxCapOrClear(vm.alloc, 4096) catch fatal();\n    const newLen = string.prepReplacement(str, needle, replacement, idxBuf.writer(vm.alloc)) catch fatal();\n    const numIdxes = @divExact(idxBuf.len, 4);\n    if (numIdxes > 0) {\n        const new = vm.allocUnsetUstringObject(newLen) catch fatal();\n        const newBuf = new.ustring.getMutSlice();\n        const idxes = @as([*]const u32, @ptrCast(idxBuf.buf.ptr))[0..numIdxes];\n        cy.string.replaceAtIdxes(newBuf, str, @intCast(needle.len), replacement, idxes);\n        return vm.allocOwnedUstring(new) catch fatal();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "ustringReplace",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to repeat from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn repeat(vm: *cy.VM) Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n\n    const n = vm.getInt(1);\n    if (n < 0) {\n        return rt.prepThrowError(vm, .InvalidArgument);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "repeat",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to split from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn split(vm: *cy.VM) anyerror!Value {\n    const obj = vm.getObject(*cy.heap.String, 0);\n    const str = obj.getSlice();\n    const stype = obj.getType();\n    const parent = obj.getParentByType(stype);\n    const delim = vm.getString(1);\n\n    const res = try vm.allocEmptyListDyn();\n    if (delim.len == 0) {\n        return res;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "split",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to stringCall from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "pub fn stringCall(vm: *cy.VM) anyerror!Value {\n    const val = vm.getValue(0);\n    if (val.isString()) {\n        vm.retain(val);\n        return val; \n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "function",
      "name": "stringCall",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to ustart from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const ustart: u32 = @intCast(range.start);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "ustart",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uend from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const uend: u32 = @intCast(range.end);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "uend",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uidx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const uidx: u32 = @intCast(idx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "uidx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to code from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const code: u21 = @intCast(needle);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "code",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uidx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const uidx: u32 = @intCast(idx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "uidx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const start: u32 = @intCast(try string.ustringSeekByRuneIndex(str, 0, 0, uidx, &bad_byte));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uidx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const uidx: u32 = @intCast(idx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "uidx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to uidx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const uidx: u32 = @intCast(idx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "uidx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to un from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/builtins/string.zig",
    "response": "const un: u32 = @intCast(n);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/builtins/string.zig",
      "type": "const",
      "name": "un",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn init(alloc: std.mem.Allocator, vm: *cy.VM) !ByteCodeBuffer {\n        var new = ByteCodeBuffer{\n            .alloc = alloc,\n            .mainStackSize = 0,\n            .main_pc = 0,\n            .ops = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn deinit(self: *ByteCodeBuffer) void {\n        self.ops.deinit(self.alloc);\n        self.consts.deinit(self.alloc);\n        self.constMap.deinit(self.alloc);\n        self.debugTable.deinit(self.alloc);\n        self.unwind_table.deinit(self.alloc);\n        self.debugMarkers.deinit(self.alloc);\n        self.unwind_slots.deinit(self.alloc);\n        self.unwind_slot_prevs.deinit(self.alloc);\n        self.unwind_trys.deinit(self.alloc);\n        if (cy.Trace) {\n            self.instDescs.deinit(self.alloc);\n            for (self.instDescExtras.items) |extra| {\n                self.alloc.free(extra.text);\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to clear from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn clear(self: *ByteCodeBuffer) void {\n        self.main_pc = 0;\n        self.ops.clearRetainingCapacity();\n        self.consts.clearRetainingCapacity();\n        self.debugTable.clearRetainingCapacity();\n        self.unwind_table.clearRetainingCapacity();\n        self.debugMarkers.clearRetainingCapacity();\n        self.unwind_slots.clearRetainingCapacity();\n        self.unwind_slot_prevs.clearRetainingCapacity();\n        self.unwind_trys.clearRetainingCapacity();\n        if (cy.Trace) {\n            self.instDescs.clearRetainingCapacity();\n            for (self.instDescExtras.items) |extra| {\n                self.alloc.free(extra.text);\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "clear",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to len from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "fn len(self: *ByteCodeBuffer) usize {\n        return self.ops.items.len;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPushConst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn getOrPushConst(self: *ByteCodeBuffer, val: cy.Value) !u32 {\n        const res = try self.constMap.getOrPut(self.alloc, val.val);\n        if (res.found_existing) {\n            return res.value_ptr.*;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "getOrPushConst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushDebugFuncStart from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushDebugFuncStart(self: *ByteCodeBuffer, func: *cy.Func, chunkId: u32) !void {\n        try self.debugMarkers.append(self.alloc, .{\n            .type = @intFromEnum(DebugMarkerType.funcStart),\n            .pc = @intCast(self.ops.items.len),\n            .data = .{\n                .funcStart = .{\n                    .func = func,\n                    .chunkId = chunkId,\n                }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushDebugFuncStart",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushDebugFuncEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushDebugFuncEnd(self: *ByteCodeBuffer, func: *cy.Func, chunkId: u32) !void {\n        try self.debugMarkers.append(self.alloc, .{\n            .type = @intFromEnum(DebugMarkerType.funcEnd),\n            .pc = @intCast(self.ops.items.len),\n            .data = .{\n                .funcEnd = .{\n                    .func = func,\n                    .chunkId = chunkId,\n                }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushDebugFuncEnd",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushDebugLabel from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushDebugLabel(self: *ByteCodeBuffer, name: []const u8) !void {\n        try self.debugMarkers.append(self.alloc, .{\n            .type = @intFromEnum(DebugMarkerType.label),\n            .pc = @intCast(self.ops.items.len),\n            .data = .{\n                .label = .{\n                    .namePtr = name.ptr,\n                    .nameLen = @intCast(name.len),\n                }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushDebugLabel",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFailableDebugSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushFailableDebugSym(self: *ByteCodeBuffer, pc: usize, file: u32, loc: u32, frameLoc: u32, unwind_key: cy.fiber.UnwindKey) !void {\n        try self.debugTable.append(self.alloc, .{\n            .pc = @intCast(pc),\n            .loc = loc,\n            .file = @intCast(file),\n            .frameLoc = frameLoc,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushFailableDebugSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOp(self: *ByteCodeBuffer, code: OpCode) !void {\n        try self.pushOpExt(code, null);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOpExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOpExt(self: *ByteCodeBuffer, code: OpCode, desc: ?u32) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + 1);\n        self.ops.items[start] = Inst.initOpCode(code);\n        if (cy.Trace) {\n            try self.instDescs.append(self.alloc, desc orelse cy.NullId);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOpExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOp1 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOp1(self: *ByteCodeBuffer, code: OpCode, arg: u8) !void {\n        try self.pushOp1Ext(code, arg, null);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOp1",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOp1Ext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOp1Ext(self: *ByteCodeBuffer, code: OpCode, arg: u8, desc: ?u32) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + 2);\n        self.ops.items[start] = Inst.initOpCode(code);\n        self.ops.items[start+1] = .{ .val = arg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOp1Ext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOp2 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOp2(self: *ByteCodeBuffer, code: OpCode, arg: u8, arg2: u8) !void {\n        try self.pushOp2Ext(code, arg, arg2, null);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOp2",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOp2Ext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOp2Ext(self: *ByteCodeBuffer, code: OpCode, arg: u8, arg2: u8, desc: ?u32) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + 3);\n        self.ops.items[start] = Inst.initOpCode(code);\n        self.ops.items[start+1] = .{ .val = arg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOp2Ext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOp3 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOp3(self: *ByteCodeBuffer, code: OpCode, arg: u8, arg2: u8, arg3: u8) !void {\n        try self.pushOp3Ext(code, arg, arg2, arg3, null);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOp3",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOp3Ext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOp3Ext(self: *ByteCodeBuffer, code: OpCode, arg: u8, arg2: u8, arg3: u8, desc: ?u32) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + 4);\n        self.ops.items[start] = Inst.initOpCode(code);\n        self.ops.items[start+1] = .{ .val = arg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOp3Ext",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOperand from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOperand(self: *ByteCodeBuffer, arg: u8) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + 1);\n        self.ops.items[start] = .{ .val = arg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOperand",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOperands from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOperands(self: *ByteCodeBuffer, operands: []const u8) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + operands.len);\n        for (operands, 0..) |operand, i| {\n            self.ops.items[start+i] = .{ .val = operand }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOperands",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOpSlice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOpSlice(self: *ByteCodeBuffer, code: OpCode, args: []const u8) !void {\n        try self.pushOpSliceExt(code, args, .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOpSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOpSliceExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn pushOpSliceExt(self: *ByteCodeBuffer, code: OpCode, args: []const u8, desc: ?u32) !void {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + args.len + 1);\n        self.ops.items[start] = Inst.initOpCode(code);\n        for (args, 0..) |arg, i| {\n            self.ops.items[start+i+1] = .{ .val = arg }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "pushOpSliceExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveData from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn reserveData(self: *ByteCodeBuffer, size: usize) !usize {\n        const start = self.ops.items.len;\n        try self.ops.resize(self.alloc, self.ops.items.len + size);\n        return start;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "reserveData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setOpArgU48 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn setOpArgU48(self: *ByteCodeBuffer, idx: usize, arg: u48) void {\n        @as(*align(1) u48, @ptrCast(&self.ops.items[idx])).* = arg;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "setOpArgU48",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setOpArgU32 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn setOpArgU32(self: *ByteCodeBuffer, idx: usize, arg: u32) void {\n        @as(*align(1) u32, @ptrCast(&self.ops.items[idx])).* = arg;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "setOpArgU32",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setOpArgU16 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn setOpArgU16(self: *ByteCodeBuffer, idx: usize, arg: u16) void {\n        @as(*align(1) u16, @ptrCast(&self.ops.items[idx])).* = arg;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "setOpArgU16",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setOpArgs1 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn setOpArgs1(self: *ByteCodeBuffer, idx: usize, arg: u8) void {\n        self.ops.items[idx].val = arg;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "setOpArgs1",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPushStaticStringConst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn getOrPushStaticStringConst(self: *ByteCodeBuffer, str: []const u8) !u32 {\n        const val = try self.getOrPushStaticStringValue(str);\n        // TODO: Reuse the same const.\n        return self.getOrPushConst(val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "getOrPushStaticStringConst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPushStaticUstring from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn getOrPushStaticUstring(self: *ByteCodeBuffer, str: []const u8) !cy.Value {\n        var allocated: bool = undefined;\n        const val = try cy.heap.getOrAllocUstring(self.vm, str, &allocated);\n        if (allocated) {\n            try self.vm.staticObjects.append(self.alloc, @ptrCast(val.asHeapObject()));\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "getOrPushStaticUstring",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPushStaticAstring from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn getOrPushStaticAstring(self: *ByteCodeBuffer, str: []const u8) !cy.Value {\n        var allocated: bool = undefined;\n        const val = try cy.heap.getOrAllocAstring(self.vm, str, &allocated);\n        if (allocated) {\n            try self.vm.staticObjects.append(self.alloc, @ptrCast(val.asHeapObject()));\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "getOrPushStaticAstring",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPushStaticStringValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn getOrPushStaticStringValue(self: *ByteCodeBuffer, str: []const u8) !cy.Value {\n        if (cy.string.isAstring(str)) {\n            return try self.getOrPushStaticAstring(str);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "getOrPushStaticStringValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to printStderr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "fn printStderr(comptime format: []const u8, args: anytype) void {\n    if (!cy.isWasmFreestanding) {\n        std.debug.print(format, args);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "printStderr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to printInstArgs from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "fn printInstArgs(w: anytype, names: []const []const u8, args: []const fmt.FmtValue) !u64 {\n    const S = struct {\n        var format: [256]u8 = undefined;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "printInstArgs",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to dumpInst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn dumpInst(vm: *cy.VM, pcOffset: u32, code: OpCode, pc: [*]const Inst, opts: DumpInstOptions) !void {\n    const w = vm.clearTempString();\n    var len: u64 = undefined;\n    if (opts.prefix) |prefix| {\n        len = try fmt.printCount(w, \"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "dumpInst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to hash from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn hash(self: StringIndexContext, s: cy.IndexSlice(u32)) u64 {\n        return std.hash.Wyhash.hash(0, self.buf.items[s.start..s.end]);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "hash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eql from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn eql(self: StringIndexContext, a: cy.IndexSlice(u32), b: cy.IndexSlice(u32)) bool {\n        return std.mem.eql(u8, self.buf.items[a.start..a.end], self.buf.items[b.start..b.end]);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hash from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn hash(self: StringIndexInsertContext, s: []const u8) u64 {\n        _ = self;\n        return std.hash.Wyhash.hash(0, s);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "hash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eql from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn eql(self: StringIndexInsertContext, a: []const u8, b: cy.IndexSlice(u32)) bool {\n        return std.mem.eql(u8, a, self.buf.items[b.start..b.end]);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initOpCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "fn initOpCode(code_: OpCode) Inst {\n        return .{\n            .val = @intFromEnum(code_),\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "initOpCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opcode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "fn opcode(self: *const Inst) OpCode {\n        return @enumFromInt(self.val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "opcode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initArg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn initArg(arg: u8) Inst {\n        return .{\n            .val = arg,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "initArg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getLabelName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn getLabelName(self: DebugMarker) []const u8 {\n        return self.data.label.namePtr[0..self.data.label.nameLen];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "getLabelName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to etype from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn etype(self: *const DebugMarker) DebugMarkerType {\n        return @enumFromInt(self.type);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "etype",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getInstLenAt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub fn getInstLenAt(pc: [*]const Inst) u8 {\n    switch (pc[0].opcode()) {\n        .ret0,\n        .ret1 => {\n            return 1;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "function",
      "name": "getInstLenAt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InstDescExtra from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub const InstDescExtra = struct {\n    text: []const u8,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "struct",
      "name": "InstDescExtra",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InstDesc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub const InstDesc = struct {\n    debug_idx: u32 = cy.NullId,\n    extraIdx: u32 = cy.NullId,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "struct",
      "name": "InstDesc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to S from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "const S = struct {\n        var format: [256]u8 = undefined;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "struct",
      "name": "S",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DumpInstOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "const DumpInstOptions = struct {\n    prefix: ?[]const u8 = null,\n    extra: ?[]const u8 = null,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "struct",
      "name": "DumpInstOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to StringIndexContext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub const StringIndexContext = struct {\n    buf: *std.ArrayListUnmanaged(u8),\n\n    pub fn hash(self: StringIndexContext, s: cy.IndexSlice(u32)) u64 {\n        return std.hash.Wyhash.hash(0, self.buf.items[s.start..s.end]);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "struct",
      "name": "StringIndexContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to StringIndexInsertContext from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "pub const StringIndexInsertContext = struct {\n    buf: *std.ArrayListUnmanaged(u8),\n\n    pub fn hash(self: StringIndexInsertContext, s: []const u8) u64 {\n        _ = self;\n        return std.hash.Wyhash.hash(0, s);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "struct",
      "name": "StringIndexInsertContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to idx from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "const idx: u32 = @intCast(self.consts.items.len);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "const",
      "name": "idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to pcPtr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "const pcPtr: [*]cy.Inst = @ptrFromInt(@as(usize, @intCast(@as(*const align(1) u48, @ptrCast(pc + 6)).*)));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "const",
      "name": "pcPtr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to val from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "const val: i8 = @bitCast(pc[1].val);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "const",
      "name": "val",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to jumpU32 from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/bytecode.zig",
    "response": "const jumpU32: u32 = @bitCast(@as(i32, jump));",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/bytecode.zig",
      "type": "const",
      "name": "jumpU32",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getCyberPath from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "fn getCyberPath(alloc: std.mem.Allocator) ![]const u8 {\n    const S = struct {\n        var buf: [std.fs.max_path_bytes]u8 = undefined;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "getCyberPath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toCacheSpec from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "fn toCacheSpec(spec: []const u8) ![]const u8 {\n    // Remove scheme part.\n    if (std.mem.startsWith(u8, spec, \"http://\")) {\n        return spec[7..];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "toCacheSpec",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to saveNewSpecFile from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn saveNewSpecFile(alloc: std.mem.Allocator, specGroup: SpecHashGroup, spec: []const u8, contents: []const u8) !SpecEntry {\n    const cacheSpec = try toCacheSpec(spec);\n    const cyberPath = try getCyberPath(alloc);\n\n    const now: u64 = @intCast(std.time.timestamp());\n\n    const filePath = try std.fs.path.join(alloc, &.{cyberPath, cacheSpec}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "saveNewSpecFile",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to writeSpecEntry from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "fn writeSpecEntry(file: std.fs.File, entry: SpecEntry) !void {\n    const w = file.writer();\n    try std.fmt.format(w, \"@{s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "writeSpecEntry",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getSpecHashGroup from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn getSpecHashGroup(alloc: std.mem.Allocator, spec: []const u8) !SpecHashGroup {\n    const cacheSpec = try toCacheSpec(spec);\n    const hash = computeSpecHashStr(cacheSpec);\n    const cyberPath = try getCyberPath(alloc);\n    const path = try std.fs.path.join(alloc, &.{cyberPath, EntriesDir, &hash}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "getSpecHashGroup",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to readEntryFile from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "fn readEntryFile(alloc: std.mem.Allocator, path: []const u8) ![]SpecEntry {\n    const content = try std.fs.cwd().readFileAlloc(alloc, path, 1e10);\n    defer alloc.free(content);\n\n    var entries: std.ArrayListUnmanaged(SpecEntry) = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "readEntryFile",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocSpecFilePath from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn allocSpecFilePath(alloc: std.mem.Allocator, entry: SpecEntry) ![]const u8 {\n    const cyberPath = try getCyberPath(alloc);\n    return try std.fs.path.join(alloc, &.{cyberPath, entry.spec}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "allocSpecFilePath",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to allocSpecFileContents from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn allocSpecFileContents(alloc: std.mem.Allocator, entry: SpecEntry) ![]const u8 {\n    const cyberPath = try getCyberPath(alloc);\n    const path = try std.fs.path.join(alloc, &.{cyberPath, entry.spec}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "allocSpecFileContents",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to computeSpecHashStr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "fn computeSpecHashStr(spec: []const u8) [16]u8 {\n    var res: [16]u8 = undefined;\n    const hash = std.hash.Wyhash.hash(0, spec);\n    _ = std.fmt.formatIntBuf(&res, hash, 16, .lower, .{ .width = 16, .fill = '0'}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "computeSpecHashStr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn deinit(self: *const SpecEntry, alloc: std.mem.Allocator) void {\n        alloc.free(self.spec);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn deinit(self: *const SpecHashGroup, alloc: std.mem.Allocator) void {\n        for (self.entries) |e| {\n            e.deinit(alloc);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to markEntryBySpecForRemoval from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn markEntryBySpecForRemoval(self: *const SpecHashGroup, spec: []const u8) !void {\n        const cacheSpec = try toCacheSpec(spec);\n        for (self.entries) |*e| {\n            if (std.mem.eql(u8, e.spec, cacheSpec)) {\n                e.removed = true;\n                break;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "markEntryBySpecForRemoval",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to findEntryBySpec from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "pub fn findEntryBySpec(self: *const SpecHashGroup, spec: []const u8) !?SpecEntry {\n        const cacheSpec = try toCacheSpec(spec);\n        for (self.entries) |e| {\n            if (std.mem.eql(u8, e.spec, cacheSpec)) {\n                return e;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "function",
      "name": "findEntryBySpec",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to S from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "const S = struct {\n        var buf: [std.fs.max_path_bytes]u8 = undefined;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "struct",
      "name": "S",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SpecEntry from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "const SpecEntry = struct {\n    /// Specifier name. Does not include the scheme.\n    spec: []const u8,\n\n    /// Unix timestamp (seconds) of when the file was cached.\n    cacheDate: u64,\n\n    /// Whether the next save should skip this entry.\n    removed: bool = false,\n\n    pub fn deinit(self: *const SpecEntry, alloc: std.mem.Allocator) void {\n        alloc.free(self.spec);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "struct",
      "name": "SpecEntry",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SpecHashGroup from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "const SpecHashGroup = struct {\n    hash: [16]u8,\n    entries: []SpecEntry,\n\n    pub fn deinit(self: *const SpecHashGroup, alloc: std.mem.Allocator) void {\n        for (self.entries) |e| {\n            e.deinit(alloc);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "struct",
      "name": "SpecHashGroup",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to now from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cache.zig",
    "response": "const now: u64 = @intCast(std.time.timestamp());",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cache.zig",
      "type": "const",
      "name": "now",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setVerbose from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn setVerbose(v: bool) void {\n    c.clVerbose = v;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "setVerbose",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setSilent from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn setSilent(v: bool) void {\n    c.clSilent = v;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "setSilent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toAllocator from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn toAllocator(alloc: std.mem.Allocator) Allocator {\n    return .{ .ptr = alloc.ptr, .vtable = @ptrCast(alloc.vtable) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "toAllocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromAllocator from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn fromAllocator(alloc: Allocator) std.mem.Allocator {\n    return .{ .ptr = @ptrCast(alloc.ptr), .vtable = @ptrCast(@alignCast(alloc.vtable)) }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "fromAllocator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setLog from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn setLog(func: LogFn) void {\n    c.clLog = func;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "setLog",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to create from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn create() *ZVM {\n    return @ptrCast(c.clCreate());\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "create",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listAppend from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn listAppend(vm: *ZVM, list: Value, val: Value) void {\n    c.clListAppend(@ptrCast(vm), list, val);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "listAppend",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listInsert from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn listInsert(vm: *ZVM, list: Value, idx: usize, val: Value) void {\n    c.clListInsert(@ptrCast(vm), list, idx, val);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "listInsert",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listGet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn listGet(vm: *ZVM, list: Value, idx: usize) Value {\n    return c.clListGet(@ptrCast(vm), list, idx);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "listGet",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listSet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn listSet(vm: *ZVM, list: Value, idx: usize, val: Value) void {\n    c.clListSet(@ptrCast(vm), list, idx, val);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "listSet",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to symbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn symbol(vm: *ZVM, str: []const u8) Value {\n    return c.clSymbol(@ptrCast(vm), toStr(str));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "symbol",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to asString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn asString(val: Value) []const u8 {\n    return fromStr(c.clAsString(val));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "asString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to CORE_TYPE from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "fn CORE_TYPE(type_id: Type) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_CORE_CUSTOM,\n        .data = .{ .core_custom = .{\n            .type_id = type_id,\n            .get_children = null,\n            .finalizer = null,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "CORE_TYPE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to CORE_TYPE_EXT from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "fn CORE_TYPE_EXT(type_id: Type, get_children: GetChildrenFn, finalizer: FinalizerFn, load_all_methods: bool) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_CORE_CUSTOM,\n        .data = .{ .core_custom = .{\n            .type_id = type_id,\n            .get_children = get_children,\n            .finalizer = finalizer,\n            .load_all_methods = load_all_methods,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "CORE_TYPE_EXT",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to DECL_TYPE from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "fn DECL_TYPE(type_id: Type) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_DECL,\n        .data = .{ .decl = .{\n            .type_id = type_id,\n            .out_type_id = null,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "DECL_TYPE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to DECL_TYPE_GET from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "fn DECL_TYPE_GET(out_type_id: *Type) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_DECL,\n        .data = .{ .decl = .{\n            .type_id = NullId,\n            .out_type_id = out_type_id,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "DECL_TYPE_GET",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to CREATE_TYPE from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "fn CREATE_TYPE(create_fn: CreateTypeFn) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_CREATE,\n        .data = .{ .create = .{\n            .create_fn = create_fn,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "CREATE_TYPE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to HOST_OBJECT from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "fn HOST_OBJECT(out_type_id: ?*Type, get_children: GetChildrenFn, finalizer: FinalizerFn) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_HOSTOBJ,\n        .data = .{ .hostobj = .{\n            .out_type_id = out_type_id,\n            .get_children = get_children,\n            .finalizer = finalizer,\n            .pre = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "HOST_OBJECT",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to HOST_OBJECT_PRE from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "fn HOST_OBJECT_PRE(out_type_id: ?*Type, get_children: GetChildrenFn, finalizer: FinalizerFn) HostType {\n    return HostType{\n        .type = c.CL_BIND_TYPE_HOSTOBJ,\n        .data = .{ .hostobj = .{\n            .out_type_id = out_type_id,\n            .get_children = get_children,\n            .finalizer = finalizer,\n            .pre = true,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "HOST_OBJECT_PRE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromSlice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn fromSlice(comptime T: type, s: Slice) []const T {\n    if (s.len == 0) {\n        return &.{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "fromSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toSlice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn toSlice(comptime T: type, s: []const T) Slice {\n    return .{\n        .ptr = @constCast(s.ptr),\n        .len = s.len,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "toSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromStr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn fromStr(str: Str) []const u8 {\n    if (str.len == 0) {\n        return \"\";\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "fromStr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toStr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn toStr(s: []const u8) Str {\n    return .{\n        .ptr = s.ptr,\n        .len = s.len,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "toStr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn fromNode(node: Node) *cy.ast.Node {\n    return @ptrCast(@alignCast(node.ptr));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "fromNode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn toNode(node: *cy.ast.Node) Node {\n    return Node{ .ptr = node }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "toNode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hostTypeEntry from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn hostTypeEntry(name: []const u8, host_t: HostType) HostTypeEntry {\n    return .{\n        .name = toStr(name),\n        .host_t = host_t,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "hostTypeEntry",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn deinit(self: *ZVM) void {\n        c.clDeinit(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to destroy from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn destroy(self: *ZVM) void {\n        c.clDestroy(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "destroy",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn reset(self: *ZVM) void {\n        c.clReset(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to evalMust from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn evalMust(self: *ZVM, src: []const u8, out: *Value) void {\n        const res = self.eval(src, out);\n        if (res != Success) {\n            const summary = self.newLastErrorSummary();\n            std.debug.panic(\"{s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "evalMust",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eval from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn eval(self: *ZVM, src: []const u8, out: *Value) ResultCode {\n        return c.clEval(@ptrCast(self), toStr(src), out);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "eval",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to evalExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn evalExt(self: *ZVM, uri: []const u8, src: []const u8, config: EvalConfig, out: *Value) ResultCode {\n        return c.clEvalExt(@ptrCast(self), toStr(uri), toStr(src), config, out);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "evalExt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to compile from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn compile(self: *ZVM, uri: []const u8, src: []const u8, config: CompileConfig) ResultCode {\n        return c.clCompile(@ptrCast(self), toStr(uri), toStr(src), config);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "compile",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to validate from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn validate(self: *ZVM, src: []const u8) ResultCode {\n        return c.clValidate(@ptrCast(self), toStr(src));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "validate",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to runReadyTasks from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn runReadyTasks(self: *ZVM) ResultCode {\n        return c.clRunReadyTasks(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "runReadyTasks",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to traceDumpLiveObjects from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn traceDumpLiveObjects(self: *ZVM) void {\n        c.clTraceDumpLiveObjects(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "traceDumpLiveObjects",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to performGC from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn performGC(self: *ZVM) GCResult {\n        return c.clPerformGC(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "performGC",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to countObjects from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn countObjects(self: *ZVM) usize {\n        return c.clCountObjects(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "countObjects",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getGlobalRC from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn getGlobalRC(self: *ZVM) usize {\n        return c.clGetGlobalRC(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "getGlobalRC",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newLastErrorSummary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newLastErrorSummary(self: *ZVM) []const u8 {\n        return fromStr(c.clNewLastErrorSummary(@ptrCast(self)));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newLastErrorSummary",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newErrorReportSummary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newErrorReportSummary(self: *ZVM) []const u8 {\n        return fromStr(c.clNewErrorReportSummary(@ptrCast(self)));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newErrorReportSummary",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newPanicSummary from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newPanicSummary(self: *ZVM) []const u8 {\n        return fromStr(c.clNewPanicSummary(@ptrCast(self)));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newPanicSummary",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to resolve from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn resolve(self: *ZVM, uri: []const u8) []const u8 {\n        return fromStr(c.clResolve(@ptrCast(self), toStr(uri)));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "resolve",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to release from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn release(self: *ZVM, val: Value) void {\n        c.clRelease(@ptrCast(self), val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "release",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to retain from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn retain(self: *ZVM, val: Value) void {\n        c.clRetain(@ptrCast(self), val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "retain",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newInt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newInt(self: *ZVM, n: i64) Value {\n        return c.clNewInt(@ptrCast(self), n);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newInt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newString(self: *ZVM, str: []const u8) Value {\n        return c.clNewString(@ptrCast(self), toStr(str));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newPointerVoid from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newPointerVoid(self: *ZVM, ptr: *anyopaque) Value {\n        return c.clNewPointerVoid(@ptrCast(self), ptr);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newPointerVoid",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newEmptyMap from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newEmptyMap(self: *ZVM) Value {\n        return c.clNewEmptyMap(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newEmptyMap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newFunc(self: *ZVM, params: []const Type, ret_t: Type, ptr: FuncFn) Value {\n        return c.clNewFunc(@ptrCast(self), params.ptr, params.len, ret_t, ptr);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newFunc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newType(self: *ZVM, type_id: Type) Value {\n        return c.clNewType(@ptrCast(self), type_id);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newValueDump from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newValueDump(self: *ZVM, val: Value) []const u8 {\n        return fromStr(c.clNewValueDump(@ptrCast(self), val));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newValueDump",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newInstance from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newInstance(self: *ZVM, type_id: Type, fields: []const FieldInit) Value {\n        return c.clNewInstance(@ptrCast(self), type_id, fields.ptr, fields.len);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newInstance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newChoice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newChoice(self: *ZVM, choice_t: Type, name: []const u8, val: Value) Value {\n        return c.clNewChoice(@ptrCast(self), choice_t, toStr(name), val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newChoice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to newList from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn newList(self: *ZVM, list_t: Type, vals: []const Value) Value {\n        return c.clNewList(@ptrCast(self), list_t, vals.ptr, vals.len);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "newList",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listAppend from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn listAppend(self: *ZVM, list: Value, val: Value) void {\n        c.clListAppend(@ptrCast(self), list, val);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "listAppend",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to findType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn findType(self: *ZVM, path: []const u8) Type {\n        return c.clFindType(@ptrCast(self), toStr(path));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "findType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn getField(self: *ZVM, rec: Value, name: []const u8) Value {\n        return c.clGetField(@ptrCast(self), rec, toStr(name));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "getField",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unwrapChoice from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn unwrapChoice(self: *ZVM, choice: Value, name: []const u8) Value {\n        return c.clUnwrapChoice(@ptrCast(self), choice, toStr(name));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "unwrapChoice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to expandTemplateType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn expandTemplateType(self: *ZVM, template: Sym, args: []const Value, res: *Type) bool {\n        return c.clExpandTemplateType(@ptrCast(self), template, args.ptr, args.len, res);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "expandTemplateType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn free(self: *ZVM, bytes: []const u8) void {\n        c.clFree(@ptrCast(self), toStr(bytes));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "free",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toFieldInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub fn toFieldInit(name: []const u8, val: Value) FieldInit {\n    return .{ .name = toStr(name), .value = val }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "function",
      "name": "toFieldInit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ZVM from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/capi.zig",
    "response": "pub const ZVM = struct {\n\n    pub fn deinit(self: *ZVM) void {\n        c.clDeinit(@ptrCast(self));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/capi.zig",
      "type": "struct",
      "name": "ZVM",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "pub fn deinit(c: *Compiler) void {\n        {\n            var iter = c.syms.valueIterator();\n            while (iter.next()) |val| {\n                c.alloc.free(val.name());\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to overrideSymName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn overrideSymName(c: *Compiler, chunk: *cy.Chunk, name: []const u8, override: []const u8) !void {\n        const sym = chunk.sym.getMod().getSym(name).?;\n        if (c.syms.getPtr(sym)) |c_sym| {\n            c.alloc.free(c_sym.name());\n            const dupe = try c.alloc.dupe(u8, override);\n            c_sym.name_ptr = dupe.ptr;\n            c_sym.name_len = @intCast(dupe.len);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "overrideSymName",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to overrideFuncName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn overrideFuncName(c: *Compiler, chunk: *cy.Chunk, name: []const u8, override: []const u8) !void {\n        const sym = chunk.sym.getMod().getSym(name).?.cast(.func).first;\n        if (c.syms.getPtr(sym)) |c_sym| {\n            c.alloc.free(c_sym.name());\n            const dupe = try c.alloc.dupe(u8, override);\n            c_sym.name_ptr = dupe.ptr;\n            c_sym.name_len = @intCast(dupe.len);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "overrideFuncName",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genSymName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genSymName(c: *Compiler, sym_ptr: *anyopaque, sym_name: []const u8) !void {\n        var buf: [1024]u8 = undefined;\n        const name_n = try normalizeSymName(&buf, sym_name);\n\n        var new_name: []const u8 = undefined;\n        const res = try c.c_names.getOrPut(c.alloc, sym_name);\n        if (res.found_existing) {\n            new_name = try std.fmt.allocPrint(c.alloc, \"{s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genSymName",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to normalizeSymName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn normalizeSymName(buf: []u8, name: []const u8) ![]const u8 {\n    const ReplaceChars = \"&|%^*/+-<>=~\";\n    if (std.mem.indexOfAny(u8, name, ReplaceChars)) |idx| {\n        // Normalize to C name.\n        var fbuf = std.io.fixedBufferStream(buf);\n        const w = fbuf.writer();\n        try w.print(\"{s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "normalizeSymName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to normalizeChar from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn normalizeChar(char: u8) []const u8 {\n    return switch (char) {\n        '&' => \"_am\",\n        '|' => \"_vl\",\n        '^' => \"_ca\",\n        '%' => \"_pe\",\n        '*' => \"_as\",\n        '/' => \"_sl\",\n        '-' => \"_hy\",\n        '+' => \"_pl\",\n        '<' => \"_lt\",\n        '>' => \"_gt\",\n        '=' => \"_eq\",\n        '~' => \"_ti\",\n        else => &.{char}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "normalizeChar",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to name from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn name(self: Sym) []const u8 {\n        return self.name_ptr[0..self.name_len];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn init(name_: []const u8) TypeName {\n        return .{\n            .name = name_,\n            .is_pointer = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initPtr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn initPtr(name_: []const u8) TypeName {\n        return .{\n            .name = name_,\n            .is_pointer = true,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "initPtr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "pub fn format(self: TypeName, comptime fmt: []const u8, opts: std.fmt.FormatOptions, w: anytype) !void {\n        _ = fmt;\n        _ = opts;\n        try w.writeAll(self.name);\n        if (self.is_pointer) {\n            try w.writeByte('*');\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "format",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn deinit(c: *Chunk) void {\n        c.procs.deinit(c.alloc);\n        c.out.deinit(c.alloc);\n        c.buf.deinit(c.alloc);\n        c.localStack.deinit(c.alloc);\n        c.tryStack.deinit(c.alloc);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to proc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn proc(c: *Chunk) *Proc {\n        return &c.procs.items[c.procs.items.len - 1];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "proc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushProc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushProc(c: *Chunk, b: Proc) !void {\n        var b_ = b;\n        b_.localStart = @intCast(c.localStack.items.len);\n        b_.tryStart = @intCast(c.tryStack.items.len);\n        try c.procs.append(c.alloc, b_);\n        c.indent += 1;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushProc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popProc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn popProc(c: *Chunk) void {\n        _ = c.procs.pop();\n        c.indent -= 1;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "popProc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushBlock(c: *Chunk) void {\n        c.indent += 1;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to popBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn popBlock(c: *Chunk) void {\n        c.indent -= 1;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "popBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to beginLine from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn beginLine(c: *Chunk, node: *ast.Node) !void {\n        if (c.emitSourceMap) {\n            try c.pushIndent();\n            var line: u32 = undefined;\n            var col: u32 = undefined;\n            var lineStart: u32 = undefined;\n            c.ast.computeLinePos(node.pos(), &line, &col, &lineStart);\n            try c.pushSpanFmtEnd(\"#line {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "beginLine",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushLine from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushLine(c: *Chunk, line: []const u8, node: *ast.Node) !void {\n        try c.beginLine(node);\n        try c.out.appendSlice(c.alloc, line);\n        try c.out.append(c.alloc, '\\n');\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushLine",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushLineNoMapping from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushLineNoMapping(c: *Chunk, line: []const u8) !void {\n        try c.pushIndent();\n        try c.out.appendSlice(c.alloc, line);\n        try c.out.append(c.alloc, '\\n');\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushLineNoMapping",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushNewLine from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushNewLine(c: *Chunk) !void {\n        try c.out.append(c.alloc, '\\n');\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushNewLine",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to bufStart from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn bufStart(c: *Chunk) u32 {\n        return @intCast(c.buf.items.len);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "bufStart",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bufPushFmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn bufPushFmt(c: *Chunk, comptime format: []const u8, args: anytype) !void {\n        try c.bufw.print(format, args);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "bufPushFmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to bufPush from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn bufPush(c: *Chunk, str: []const u8) !void {\n        try c.bufw.writeAll(str);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "bufPush",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bufPop from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn bufPop(c: *Chunk, start: u32) []const u8 {\n        defer c.buf.items.len = start;\n        return c.buf.items[start..];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "bufPop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushSpanFmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushSpanFmt(c: *Chunk, comptime format: []const u8, args: anytype) !void {\n        try c.outw.print(format, args);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushSpanFmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushSpanFmtEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushSpanFmtEnd(c: *Chunk, comptime format: []const u8, args: anytype) !void {\n        try c.outw.print(format, args);\n        try c.out.append(c.alloc, '\\n');\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushSpanFmtEnd",
      "difficulty": "hard"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushSpanEnd from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushSpanEnd(c: *Chunk, span: []const u8) !void {\n        try c.out.appendSlice(c.alloc, span);\n        try c.out.append(c.alloc, '\\n');\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushSpanEnd",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushSpan from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushSpan(c: *Chunk, span: []const u8) !void {\n        try c.out.appendSlice(c.alloc, span);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushSpan",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to bufPushTrySpan from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn bufPushTrySpan(c: *Chunk) !void {\n        const b = c.proc();\n        if (c.tryStack.items.len > b.tryStart) {\n            const last = c.tryStack.getLast();\n            try c.bufPushFmt(\"TRY_GOTO({}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "bufPushTrySpan",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushIndent from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn pushIndent(c: *Chunk) !void {\n        for (0..c.indent) |_| {\n            try c.out.append(c.alloc, '\\t');\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "pushIndent",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to cSymName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn cSymName(c: *Chunk, ptr: *anyopaque) []const u8 {\n        return c.syms.get(ptr).?.name();\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "cSymName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cTypeName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn cTypeName(c: *Chunk, id: cy.TypeId) !TypeName {\n        return switch (id) {\n            // bt.Pointer,\n            // bt.Fiber,\n            // bt.MetaType,\n            bt.Dyn => TypeName.init(\"CbAny\"),\n            // bt.ExternFunc,\n            bt.Any => TypeName.init(\"CbAny\"),\n            bt.Integer => TypeName.init(\"i64\"),\n            bt.Float => TypeName.init(\"f64\"),\n            bt.Symbol => TypeName.init(\"CbSymbol\"),\n            bt.Void => TypeName.init(\"void\"),\n            bt.Error => TypeName.init(\"CbError\"),\n            // // bt.Undefined,\n            bt.Boolean => TypeName.init(\"bool\"),\n            else => {\n                if (id > bt.Type) {\n                    const sym = c.sema.getTypeSym(id);\n                    const name = c.cSymName(sym);\n                    if (sym.type == .object_t) {\n                        return TypeName.initPtr(name);\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "cTypeName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bufPushBoxMacro from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn bufPushBoxMacro(c: *Chunk, id: cy.TypeId) !void {\n        return switch (id) {\n            bt.Integer => try c.bufw.writeAll(\"BOX_INT(\"),\n            else => {\n                const type_e = c.sema.types.items[id];\n                if (type_e.kind == .object) {\n                    const c_name = c.cSymName(type_e.sym);\n                    try c.bufPushFmt(\"BOX_OBJ({s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "bufPushBoxMacro",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initMain from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn initMain() Proc {\n        return .{\n            .type = .main,\n            .resetVerboseOnEnd = false,\n            .localStart = undefined,\n            .tryStart = undefined,\n            .maxTmpSuffix = 0,\n            .maxTrySuffix = 0,\n            .data = undefined,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "initMain",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initFunc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn initFunc(func: *cy.Func) Proc {\n        return .{\n            .type = .func,\n            .resetVerboseOnEnd = false,\n            .localStart = undefined,\n            .tryStart = undefined,\n            .maxTmpSuffix = 0,\n            .maxTrySuffix = 0,\n            .data = .{\n                .func = func,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "initFunc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to nextTemp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn nextTemp(b: *Proc) u32 {\n        b.maxTmpSuffix += 1;\n        return b.maxTmpSuffix;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "nextTemp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gen from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "pub fn gen(self: *cy.Compiler) !cy.compiler.AotCompileResult {\n    var compiler = Compiler{\n        .base = self,\n        .alloc = self.alloc,\n        .syms = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "gen",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genHead from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genHead(c: *Compiler, w: std.ArrayListUnmanaged(u8).Writer, chunks: []Chunk) !void {\n    _ = c;\n    const head = @embedFile(\"pm.h\");\n    try w.writeAll(head);\n\n    // Predefines.\n    try w.writeAll(\n        \\\\CbRT cb_rt;\n        \\\\int cb_panic() {\n        \\\\    // TODO: Dump stack trace\n        \\\\    fprintf(stderr, \"panic.\\n\");\n        \\\\    exit(1);\n        \\\\}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genHead",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genObjectDecl from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genObjectDecl(c: *Chunk, sym: *cy.Sym, w: std.ArrayListUnmanaged(u8).Writer) !void {\n    const c_sym = c.syms.getPtr(sym).?;\n    if (c_sym.declared) {\n        return;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genObjectDecl",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genChunk from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genChunk(c: *Chunk) !void {\n    genChunkInner(c) catch |err| {\n        if (err != error.CompileError) {\n            // Wrap all other errors as a CompileError.\n            return c.base.reportErrorFmt(\"error.{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genChunk",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genChunkInner from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genChunkInner(c: *Chunk) !void {\n    for (c.ir.func_blocks.items) |block| {\n        try genStmt(c, block);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genChunkInner",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genStmts from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genStmts(c: *Chunk, idx: u32) !void {\n    var stmt = idx;\n    while (stmt != cy.NullId) {\n        try genStmt(c, stmt);\n        stmt = c.ir.getStmtNext(stmt);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genStmts",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genStmt(c: *Chunk, loc: u32) anyerror!void {\n    const code = c.ir.getStmtCode(loc);\n    const node = c.ir.getNode(loc);\n    errdefer if (c.errNode == null) {\n        c.errNode = node;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genStmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genExprAndBox from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genExprAndBox(c: *Chunk, loc: usize, cstr: Cstr) anyerror!Value {\n    const expr_t = c.ir.getExprType(loc);\n    const box = expr_t.id != bt.Any;\n    if (box) {\n        try c.bufPushBoxMacro(expr_t.id);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genExprAndBox",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genExpr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genExpr(c: *Chunk, loc: usize, cstr: Cstr) anyerror!Value {\n    const code = c.ir.getExprCode(loc);\n    const node = c.ir.getNode(loc);\n\n    if (cy.Trace) {\n        const contextStr = try c.encoder.format(node, &cy.tempBuf);\n        log.tracev(\"{s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genExpr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mainBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn mainBlock(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .mainBlock);\n    log.tracev(\"main block: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "mainBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to declareLocalInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn declareLocalInit(c: *Chunk, idx: u32, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(idx, .declareLocalInit);\n\n    // // Don't advance nextLocalReg yet since the rhs hasn't generated so the\n    // // alive locals should not include this declaration.\n    // const reg = try bcgen.reserveLocalReg(c, data.id, data.declType, data.isBoxed, node, false);\n\n    reserveLocal(c, data.id, data.name(), data.declType, data.lifted);\n\n    const start = c.bufStart();\n    try c.bufPushFmt(\"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "declareLocalInit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to declareLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn declareLocal(c: *Chunk, idx: u32, node: *ast.Node) !void {\n    _ = c;\n    _ = idx;\n    _ = node;\n\n    // const reg = try bcgen.reserveLocalReg(c, data.id, data.declType, data.isBoxed, node, true);\n\n    // // Not yet initialized, so it does not have a refcount.\n    // bcgen.getLocalInfoPtr(c, reg).some.rcCandidate = false;\n    return error.TODO;\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "declareLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getBinOpName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn getBinOpName(op: cy.BinaryExprOp) []const u8 {\n    return switch (op) {\n        .index => \"$index\",\n        .less => \"$infix<\",\n        .greater => \"$infix>\",\n        .less_equal => \"$infix<=\",\n        .greater_equal => \"$infix>=\",\n        .minus => \"$infix-\",\n        .plus => \"$infix+\",\n        .star => \"$infix*\",\n        .slash => \"$infix/\",\n        .percent => \"$infix%\",\n        .caret => \"$prefix~\",\n        .bitwiseAnd => \"$infix&\",\n        .bitwiseOr => \"$infix|\",\n        .bitwiseXor => \"$infix||\",\n        .bitwiseLeftShift => \"$infix<<\",\n        .bitwiseRightShift => \"$infix>>\",\n        else => @panic(\"Unsupported op\"),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "getBinOpName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCallDyn from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genCallDyn(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n    const data = c.ir.getExprData(loc, .call_dyn);\n    const args = c.ir.getArray(data.args, u32, data.numArgs);\n\n    try c.bufPush(\"cbCallDyn(rt, \");\n    _ = try genExpr(c, data.callee, Cstr.init());\n    try c.bufPush(\", (CbAny[]){\");\n    if (args.len > 0) {\n        _ = try genExpr(c, args[0], Cstr.init());\n        for (args[1..]) |idx| {\n            try c.bufPush(\", \");\n            _ = try genExpr(c, idx, Cstr.init());\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genCallDyn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genCallFuncSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genCallFuncSym(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n\n    const data = c.ir.getExprData(loc, .call_sym);\n\n    // if (data.hasDynamicArg) {\n    //     try genCallTypeCheck(c, inst.ret + cy.vm.CallArgStart, data.numArgs, data.func.funcSigId, node);\n    // }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genCallFuncSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genString(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n    const data = c.ir.getExprData(loc, .string);\n    // const inst = try c.rega.selectForNoErrNoDepInst(cstr, true, node);\n    // if (inst.requiresPreRelease) {\n    //     try pushRelease(c, inst.dst, node);\n    // }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genString",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genSymbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genSymbol(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n    const data = c.ir.getExprData(loc, .symbol);\n    try c.bufPushFmt(\"CB_SYM(\\\"{s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genSymbol",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genInt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genInt(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n\n    const data = c.ir.getExprData(loc, .int);\n\n    // const inst = try c.rega.selectForNoErrInst(cstr, false);\n    // if (inst.requiresPreRelease) {\n    //     try pushRelease(c, inst.dst, node);\n    // }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genInt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn reserveLocal(c: *Chunk, ir_id: u8, name: []const u8, declType: cy.TypeId, lifted: bool) void {\n    c.localStack.items[c.proc().localStart + ir_id] = .{ .some = .{\n        .name = name,\n        .owned = true,\n        .rcCandidate = c.sema.isRcCandidateType(declType),\n        .lifted = lifted,\n        .type = declType,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "reserveLocal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn setLocal(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .setLocal).generic;\n    const local_loc = c.ir.advanceStmt(loc, .setLocal);\n    const local_data = c.ir.getExprData(local_loc, .local);\n\n    const start = c.bufStart();\n    const b = c.proc();\n    const local = c.localStack.items[b.localStart + local_data.id];\n    try c.bufPushFmt(\"{s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "setLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to opSet from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn opSet(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    _ = node;\n    const setIdx = c.ir.advanceStmt(loc, .opSet);\n    try genStmt(c, @intCast(setIdx));\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "opSet",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn setField(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .set_field).set_field;\n    // const requireTypeCheck = data.left_t.id != bt.Any and data.right_t.dynamic;\n    const field_data = c.ir.getExprData(data.field, .field);\n\n    const start = c.bufStart();\n    _ = try genExpr(c, field_data.rec, Cstr.init());\n\n    const rec_t = c.ir.getExprType(field_data.rec).id;\n    const rec_sym = c.sema.getTypeSym(rec_t);\n    if (rec_sym.type == .object_t) {\n        try c.bufPush(\"->\");\n        const obj_t = c.sema.getTypeSym(rec_t).cast(.object_t);\n        const field = obj_t.fields[field_data.idx];\n        try c.bufPush(field.sym.head.name());\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "setField",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setIndex from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn setIndex(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .setIndex).index;\n    if (data.recvT != bt.ListDyn and data.recvT != bt.Map) {\n        return error.Unexpected;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "setIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to loopStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn loopStmt(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .loopStmt);\n\n    try c.pushLine(\"while (true) {\", node);\n    c.pushBlock();\n    try genStmts(c, data.body_head);\n    c.popBlock();\n    try c.pushLineNoMapping(\"}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "loopStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to forRangeStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn forRangeStmt(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .forRangeStmt);\n\n    const start = c.bufStart();\n    try c.bufPush(\"for (i64 i = \");\n    _ = try genExpr(c, data.start, Cstr.init());\n    try c.bufPush(\"; i < \");\n    _ = try genExpr(c, data.end, Cstr.init());\n\n    try c.beginLine(node);\n    try c.pushSpan(c.bufPop(start));\n    try c.pushSpanEnd(\"; i += 1) {\");\n\n    if (data.eachLocal) |var_id| {\n        reserveLocal(c, var_id, \"i\", bt.Integer, false);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "forRangeStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to exprStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn exprStmt(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .exprStmt);\n\n    // const cstr = RegisterCstr.initSimple(data.returnMain);\n\n    const b = c.proc();\n\n    const expr_t = c.ir.getExprType(data.expr).id;\n    const start = c.bufStart();\n    try c.bufPushFmt(\"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "exprStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genBox from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genBox(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n\n    const data = c.ir.getExprData(loc, .box);\n    const expr_t = c.ir.getExprType(data.expr).id;\n    try c.bufPushBoxMacro(expr_t);\n    _ = try genExpr(c, data.expr, Cstr.init());\n    try c.bufPush(\")\");\n    return Value{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genBox",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genObjectInit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genObjectInit(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n\n    const data = c.ir.getExprData(loc, .object_init);\n    const args = c.ir.getArray(data.args, u32, data.numArgs);\n\n    const typ = c.sema.types.items[data.typeId];\n    switch (typ.kind) {\n        .struct_t => {\n            return error.TODO;\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genObjectInit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genField from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genField(c: *Chunk, idx: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n\n    const data = c.ir.getExprData(idx, .field);\n\n    const rec_t = c.ir.getExprType(data.rec).id;\n    _ = try genExpr(c, data.rec, Cstr.init());\n\n    const rec_sym = c.sema.getTypeSym(rec_t);\n    if (rec_sym.type == .object_t) {\n        try c.bufPush(\"->\");\n        const obj_t = c.sema.getTypeSym(rec_t).cast(.object_t);\n        const field = obj_t.fields[data.idx];\n        try c.bufPush(field.sym.head.name());\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genField",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genLocal(c: *Chunk, loc: usize, cstr: Cstr, node: *ast.Node) !Value {\n    _ = cstr;\n    _ = node;\n\n    const data = c.ir.getExprData(loc, .local);\n    const b = c.proc();\n    log.tracev(\"local: {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genLocal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to funcBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn funcBlock(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .funcBlock);\n    const func = data.func;\n    const paramsIdx = c.ir.advanceStmt(loc, .funcBlock);\n    const params = c.ir.getArray(paramsIdx, ir.FuncParam, func.numParams);\n\n    // try pushFuncBlock(c, data, params, node);\n\n    try c.beginLine(node);\n    try c.pushSpanFmt(\"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "funcBlock",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to breakStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn breakStmt(c: *Chunk, node: *ast.Node) !void {\n    // // Release from startLocal of the first parent loop block.\n    // var idx = c.blocks.items.len-1;\n    // while (true) {\n    //     const b = c.blocks.items[idx];\n    //     if (b.isLoopBlock) {\n    //         try genReleaseLocals(c, b.nextLocalReg, node);\n    //         break;\n    //     }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "breakStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ifStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn ifStmt(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .ifStmt);\n\n    const start = c.bufStart();\n    try c.bufPush(\"if (\");\n\n    const cond_t = c.ir.getExprType(data.cond);\n    if (cond_t.id == bt.Any) {\n        try c.bufPush(\"TRY_UNBOX_BOOL(\");\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "ifStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genBinOp from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn genBinOp(c: *Chunk, loc: usize, cstr: Cstr, opts: BinOpOptions, node: *ast.Node) !Value {\n    _ = cstr;\n    const data = c.ir.getExprData(loc, .preBinOp).binOp;\n    log.tracev(\"binop {}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "genBinOp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to cBinOpLit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn cBinOpLit(op: cy.BinaryExprOp) []const u8 {\n    return switch (op) {\n        .less => \" < \",\n        .greater => \" > \",\n        .less_equal => \" <= \",\n        .greater_equal => \" >= \",\n        .minus => \" - \",\n        .plus => \" + \",\n        .slash => \" / \",\n        .percent => \" % \",\n        .star => \" * \",\n        .caret => cy.fatal(),\n        else => cy.fatal(),\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "cBinOpLit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to retExprStmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "fn retExprStmt(c: *Chunk, loc: usize, node: *ast.Node) !void {\n    const data = c.ir.getStmtData(loc, .retExprStmt);\n\n    // TODO: If the returned expr is a local, consume the local after copying to reg 0.\n    const start = c.bufStart();\n    try c.bufPush(\"return \");\n    var childv: Value = undefined;\n    const b = c.proc();\n    if (b.type == .main) {\n        // // Main block.\n        // childv = try genExpr(c, data.expr, RegisterCstr.simpleMustRetain);\n        return error.TODO;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "retExprStmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to cStringLit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "pub fn cStringLit(self: *Chunk, raw: []const u8) ![]const u8 {\n    // Big enough to hold escaped C literal.\n    try self.base.tempBufU8.resize(self.alloc, raw.len * 2);\n\n    // Escape to C literal.\n    const ReplaceChars = \"\\\\\\\"\";\n    const S = struct {\n        fn replacement(char: u8) []const u8 {\n            return switch (char) {\n                '\\\\' => \"\\\\\\\\\",\n                '\"' => \"\\\\\\\"\",\n                else => &.{char}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "function",
      "name": "cStringLit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Compiler from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const Compiler = struct {\n    alloc: std.mem.Allocator,\n    base: *cy.Compiler,\n\n    /// Can be cy.Sym or cy.Func.\n    syms: std.AutoHashMapUnmanaged(*anyopaque, Sym),\n\n    /// Cyber name to normalized C name's next unique suffix.\n    c_names: std.StringHashMapUnmanaged(u32),\n\n    pub fn deinit(c: *Compiler) void {\n        {\n            var iter = c.syms.valueIterator();\n            while (iter.next()) |val| {\n                c.alloc.free(val.name());\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "Compiler",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Sym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const Sym = struct {\n    name_ptr: [*]const u8,\n    name_len: u16,\n\n    declared: bool,\n\n    fn name(self: Sym) []const u8 {\n        return self.name_ptr[0..self.name_len];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "Sym",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Symbol from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const Symbol = struct {\n    name: []const u8,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "Symbol",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TypeName from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const TypeName = struct {\n    name: []const u8,\n    is_pointer: bool,\n\n    fn init(name_: []const u8) TypeName {\n        return .{\n            .name = name_,\n            .is_pointer = false,\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "TypeName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Chunk from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const Chunk = struct {\n    alloc: std.mem.Allocator,\n    ir: cy.ir.Buffer,\n    encoder: cy.ast.Encoder,\n    out: std.ArrayListUnmanaged(u8),\n    outw: std.ArrayListUnmanaged(u8).Writer,\n    buf: std.ArrayListUnmanaged(u8),\n    bufw: std.ArrayListUnmanaged(u8).Writer,\n    procs: std.ArrayListUnmanaged(Proc),\n\n    /// Alias for `compiler.syms`.\n    syms: std.AutoHashMapUnmanaged(*anyopaque, Sym),\n\n    compiler: *Compiler,\n    base: *cy.Chunk,\n    vm: *cy.VM,\n    sema: *cy.Sema,\n    errNode: ?*ast.Node,\n    localStack: std.ArrayListUnmanaged(Local),\n    tryStack: std.ArrayListUnmanaged(Try),\n    indent: u32,\n    emitSourceMap: bool,\n    ast: cy.ast.AstView,\n    srcUri: []const u8,\n\n    fn deinit(c: *Chunk) void {\n        c.procs.deinit(c.alloc);\n        c.out.deinit(c.alloc);\n        c.buf.deinit(c.alloc);\n        c.localStack.deinit(c.alloc);\n        c.tryStack.deinit(c.alloc);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "Chunk",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Proc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const Proc = struct {\n    type: ProcType,\n\n    /// Starting `Local` in `localStack`.\n    localStart: u32,\n\n    /// Starting `Try` in `tryStack`.\n    tryStart: u32,\n\n    resetVerboseOnEnd: bool,\n\n    /// Track the highest `tmp` suffix for user declared vars.\n    maxTmpSuffix: u32,\n\n    /// Track the highest try block suffix.\n    maxTrySuffix: u32,\n\n    data: union {\n        func: *cy.Func,\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "Proc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Try from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const Try = struct {\n    suffix: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "Try",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Cstr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const Cstr = struct {\n    const none = Cstr{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "Cstr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BinOpOptions from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const BinOpOptions = struct {\n    left: ?Value = null,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "BinOpOptions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to S from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const S = struct {\n        fn replacement(char: u8) []const u8 {\n            return switch (char) {\n                '\\\\' => \"\\\\\\\\\",\n                '\"' => \"\\\\\\\"\",\n                else => &.{char}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "struct",
      "name": "S",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to obj from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const obj: *cy.sym.ObjectType = if (typ.kind == .object) typ.sym.cast(.object_t) else typ.sym.cast(.struct_t);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "const",
      "name": "obj",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to reg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/cgen.zig",
    "response": "const reg: RegisterId = @intCast(4 + 1 + numParams + paramCopyIdx);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/cgen.zig",
      "type": "const",
      "name": "reg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn init(self: *Chunk, c: *cy.Compiler, id: ChunkId, srcUri: []const u8, src: []const u8) !void {\n        self.* = .{\n            .id = id,\n            .alloc = c.alloc,\n            .compiler = c,\n            .sema = &c.sema,\n            .vm = c.vm,\n            .src = src,\n            .ast = undefined,\n            .srcUri = srcUri,\n            .sym = undefined,\n            .parser = undefined,\n            .semaProcs = .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn deinit(self: *Chunk) void {\n        self.tempBufU8.deinit(self.alloc);\n\n        self.host_funcs.deinit(self.alloc);\n        self.host_types.deinit(self.alloc);\n\n        for (self.semaBlocks.items) |*b| {\n            b.deinit(self.alloc);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromC from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn fromC(mod: C.Module) *cy.Chunk {\n        return @ptrCast(@alignCast(mod.ptr));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "fromC",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateAstView from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn updateAstView(self: *cy.Chunk, view: cy.ast.AstView) void {\n        self.ast = view;\n        self.encoder.ast = view;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "updateAstView",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genBlock from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn genBlock(self: *cy.Chunk) *bc.Block {\n        return &self.blocks.items[self.blocks.items.len-1];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "genBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to block from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn block(self: *cy.Chunk) *sema.Block {\n        return &self.semaBlocks.items[self.semaBlocks.items.len-1];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "block",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to proc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn proc(self: *cy.Chunk) *sema.Proc {\n        return &self.semaProcs.items[self.semaProcs.items.len-1];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "proc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getProcParams from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn getProcParams(c: *const cy.Chunk, p: *sema.Proc) []const sema.LocalVar {\n        return c.varStack.items[p.varStart..p.varStart+p.numParams];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "getProcParams",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getProcVars from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn getProcVars(c: *const cy.Chunk, p: *sema.Proc) []const sema.LocalVar {\n        return c.varStack.items[p.varStart+p.numParams..];\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "getProcVars",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getNextUniqUnnamedIdent from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn getNextUniqUnnamedIdent(c: *Chunk, buf: *[16]u8) []const u8 {\n        const symMap = c.sym.getMod().symMap;\n        var fbuf = std.io.fixedBufferStream(buf);\n        const w = fbuf.writer();\n        w.writeAll(\"unnamed\") catch cy.fatal();\n        while (true) {\n            fbuf.pos = \"unnamed\".len;\n            std.fmt.formatInt(c.nextUnnamedId, 10, .lower, .{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "getNextUniqUnnamedIdent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isInStaticInitializer from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "fn isInStaticInitializer(self: *Chunk) bool {\n        return self.compiler.svar_init_stack.items.len > 0;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "isInStaticInitializer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to semaBlockDepth from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "fn semaBlockDepth(self: *Chunk) u32 {\n        return @intCast(self.semaProcs.items.len);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "semaBlockDepth",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reserveIfTempLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn reserveIfTempLocal(self: *Chunk, local: LocalId) !void {\n        if (self.isTempLocal(local)) {\n            try self.setReservedTempLocal(local);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "reserveIfTempLocal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initGenValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn initGenValue(self: *const Chunk, local: LocalId, vtype: types.TypeId, retained: bool) bc.GenValue {\n        if (self.isTempLocal(local)) {\n            return bc.GenValue.initTempValue(local, vtype, retained);\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "initGenValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nextTempDestValue from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "fn nextTempDestValue(self: *cy.Compiler, src1: bc.GenValue, src2: bc.GenValue) !bc.GenValue {\n        if (src1.isTempLocal == src2.isTempLocal) {\n            if (src1.isTempLocal) {\n                const minTempLocal = std.math.min(src1.local, src2.local);\n                self.setFirstFreeTempLocal(minTempLocal + 1);\n                return bc.GenValue.initTempValue(minTempLocal, undefined);\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "nextTempDestValue",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to genEnsureRequiredType from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "fn genEnsureRequiredType(self: *Chunk, genv: bc.GenValue, requiredType: types.Type) !void {\n        if (requiredType.typeT != .any) {\n            if (genv.vtype.typeT == requiredType.typeT) {\n                return;\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "genEnsureRequiredType",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canUseVarAsDst from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "fn canUseVarAsDst(svar: sema.LocalVar) bool {\n        // If boxed, the var needs to be copied out of the box.\n        // If static selected, the var needs to be copied to a local.\n        return !svar.isBoxed and !svar.isStaticAlias;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "canUseVarAsDst",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushTempOperand from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushTempOperand(self: *Chunk, operand: u8) !void {\n        try self.operandStack.append(self.alloc, operand);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushTempOperand",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushReg from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushReg(self: *Chunk, reg: u8) !void {\n        try self.regStack.append(self.alloc, reg);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushReg",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushEmptyJumpNotCond from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushEmptyJumpNotCond(self: *Chunk, condLocal: LocalId) !u32 {\n        const start: u32 = @intCast(self.buf.ops.items.len);\n        try self.buf.pushOp3(.jumpNotCond, condLocal, 0, 0);\n        return start;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushEmptyJumpNotCond",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushJumpBackCond from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushJumpBackCond(self: *Chunk, toPc: usize, condLocal: LocalId) !void {\n        const pc = self.buf.ops.items.len;\n        try self.buf.pushOp3(.jumpCond, condLocal, 0, 0);\n        self.buf.setOpArgU16(pc + 2, @bitCast(-@as(i16, @intCast(pc - toPc))));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushJumpBackCond",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushJumpBackTo from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushJumpBackTo(self: *Chunk, toPc: usize) !void {\n        const pc = self.buf.ops.items.len;\n        try self.buf.pushOp2(.jump, 0, 0);\n        self.buf.setOpArgU16(pc + 1, @bitCast(-@as(i16, @intCast(pc - toPc))));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushJumpBackTo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushEmptyJump from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushEmptyJump(self: *Chunk) !u32 {\n        const start: u32 = @intCast(self.buf.ops.items.len);\n        try self.buf.pushOp2(.jump, 0, 0);\n        return start;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushEmptyJump",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushEmptyJumpExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushEmptyJumpExt(self: *Chunk, desc: ?u32) !u32 {\n        const start: u32 = @intCast(self.buf.ops.items.len);\n        try self.buf.pushOp2Ext(.jump, 0, 0, desc);\n        return start;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushEmptyJumpExt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushEmptyJumpCond from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushEmptyJumpCond(self: *Chunk, condLocal: LocalId) !u32 {\n        const start: u32 = @intCast(self.buf.ops.items.len);\n        try self.buf.pushOp3(.jumpCond, condLocal, 0, 0);\n        return start;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushEmptyJumpCond",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to patchJumpToCurPc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn patchJumpToCurPc(self: *Chunk, jumpPc: u32) void {\n        self.buf.setOpArgU16(jumpPc + 1, @intCast(self.buf.ops.items.len - jumpPc));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "patchJumpToCurPc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to patchJumpCondToCurPc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn patchJumpCondToCurPc(self: *Chunk, jumpPc: u32) void {\n        self.buf.setOpArgU16(jumpPc + 2, @intCast(self.buf.ops.items.len - jumpPc));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "patchJumpCondToCurPc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to patchJumpNotCondToCurPc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn patchJumpNotCondToCurPc(self: *Chunk, jumpPc: u32) void {\n        self.buf.setOpArgU16(jumpPc + 2, @intCast(self.buf.ops.items.len - jumpPc));\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "patchJumpNotCondToCurPc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to patchSubBlockBreakJumps from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn patchSubBlockBreakJumps(self: *Chunk, jumpStackStart: usize, breakPc: usize) usize {\n        var keepIdx = jumpStackStart;\n        for (self.blockJumpStack.items[jumpStackStart..]) |jump| {\n            if (jump.jumpT == .subBlockBreak) {\n                self.buf.setOpArgU16(jump.pc + 1, @intCast(breakPc - jump.pc));\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "patchSubBlockBreakJumps",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to patchBreaks from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn patchBreaks(self: *Chunk, jumpStackStart: usize, breakPc: usize) usize {\n        var keepIdx = jumpStackStart;\n        for (self.blockJumpStack.items[jumpStackStart..]) |jump| {\n            switch (jump.jumpT) {\n                .brk => {\n                    if (breakPc > jump.pc) {\n                        self.buf.setOpArgU16(jump.pc + 1, @intCast(breakPc - jump.pc));\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "patchBreaks",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to patchForBlockJumps from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn patchForBlockJumps(self: *Chunk, jumpStackStart: usize, breakPc: usize, contPc: usize) void {\n        for (self.blockJumpStack.items[jumpStackStart..]) |jump| {\n            switch (jump.jumpT) {\n                .brk => {\n                    if (breakPc > jump.pc) {\n                        self.buf.setOpArgU16(jump.pc + 1, @intCast(breakPc - jump.pc));\n                    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "patchForBlockJumps",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getMaxUsedRegisters from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn getMaxUsedRegisters(self: *Chunk) u8 {\n        return self.curBlock.max_slots;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "getMaxUsedRegisters",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockNumLocals from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn blockNumLocals(self: *Chunk) usize {\n        return sema.curBlock(self).locals.items.len + sema.curBlock(self).params.items.len;\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "blockNumLocals",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genGetVarPtr from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn genGetVarPtr(self: *const Chunk, id: sema.LocalVarId) ?*sema.LocalVar {\n        if (id != cy.NullId) {\n            return &self.vars.items[id];\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "genGetVarPtr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to genGetVar from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn genGetVar(self: *const Chunk, id: sema.LocalVarId) ?sema.LocalVar {\n        if (id != cy.NullId) {\n            return self.vars.items[id];\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "genGetVar",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unescapeString from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn unescapeString(self: *Chunk, literal: []const u8) ![]const u8 {\n        try self.tempBufU8.resize(self.alloc, literal.len);\n        return cy.sema.unescapeString(self.tempBufU8.items, literal, false);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "unescapeString",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to dumpLocals from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn dumpLocals(self: *const Chunk, sproc: *sema.Proc) !void {\n        if (cy.Trace) {\n            rt.print(self.vm, \"Locals:\\n\");\n            const params = self.getProcParams(sproc);\n            for (params) |svar| {\n                const typeId: types.TypeId = svar.vtype.id;\n                rt.printFmt(self.vm, \"{}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "dumpLocals",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reportError from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn reportError(self: *Chunk, msg: []const u8, opt_node: ?*ast.Node) error{OutOfMemory, CompileError}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "reportError",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reportErrorFmt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn reportErrorFmt(self: *Chunk, format: []const u8, args: []const fmt.FmtValue, opt_node: ?*ast.Node) error{CompileError, OutOfMemory, FormatError}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "reportErrorFmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushOptionalDebugSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushOptionalDebugSym(c: *Chunk, node: *ast.Node) !void {\n        if (cy.Trace or c.compiler.vm.config.gen_all_debug_syms) {\n            try c.buf.pushFailableDebugSym(\n                c.buf.ops.items.len, c.id, node.pos(), c.curBlock.id,\n                cy.fiber.UnwindKey.initNull(),\n            );\n        }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushOptionalDebugSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFailableDebugSym from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushFailableDebugSym(self: *Chunk, node: *ast.Node) !void {\n        const key = try bc.getLastUnwindKey(self);\n        try self.buf.pushFailableDebugSym(\n            self.buf.ops.items.len, self.id, node.pos(), self.curBlock.id,\n            key,\n        );\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushFailableDebugSym",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFailableDebugSymAt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "fn pushFailableDebugSymAt(self: *Chunk, pc: usize, node: *ast.Node, unwindTempIdx: u32) !void {\n        try self.buf.pushFailableDebugSym(pc, self.id, node, self.curBlock.frameLoc, unwindTempIdx);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushFailableDebugSymAt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fmtExtraDesc from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn fmtExtraDesc(self: *Chunk, comptime format: []const u8, vals: anytype) !u32 {\n        // Behind a comptime flag since it's doing allocation.\n        if (cy.Trace) {\n            const idx = self.buf.instDescExtras.items.len;\n            const text = try std.fmt.allocPrint(self.alloc, format, vals);\n            try self.buf.instDescExtras.append(self.alloc, .{\n                .text = text,\n            }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "fmtExtraDesc",
      "difficulty": "hard"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushFCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushFCode(c: *Chunk, code: cy.OpCode, args: []const u8, node: *ast.Node) !void {\n        log.tracev(\"pushFCode: {s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushFCode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushCode(c: *Chunk, code: cy.OpCode, args: []const u8, node: *ast.Node) !void {\n        log.tracev(\"pushCode: {s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushCode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCodeExt from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushCodeExt(c: *Chunk, code: cy.OpCode, args: []const u8, node: *ast.Node, desc: ?u32) !void {\n        log.tracev(\"pushCode: {s}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushCodeExt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushCodeBytes from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushCodeBytes(c: *Chunk, bytes: []const u8) !void {\n        try c.buf.pushOperands(bytes);\n    }",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushCodeBytes",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pushData from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn pushData(c: *cy.Chunk, data: Data) !void {\n    try c.dataStack.append(c.alloc, data);\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "pushData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to popData from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub fn popData(c: *cy.Chunk) Data {\n    return c.dataStack.pop();\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "function",
      "name": "popData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BlockJump from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const BlockJump = struct {\n    jumpT: BlockJumpType,\n    pc: u32,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "struct",
      "name": "BlockJump",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ReservedTempLocal from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const ReservedTempLocal = struct {\n    local: LocalId,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "struct",
      "name": "ReservedTempLocal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to LLVM_Func from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub const LLVM_Func = struct {\n    typeRef: llvm.TypeRef,\n    funcRef: llvm.ValueRef,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "struct",
      "name": "LLVM_Func",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TypeDepNode from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "pub const TypeDepNode = struct {\n    visited: bool,\n    hasCircularDep: bool,\n    hasUnsupported: bool,\n}",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "struct",
      "name": "TypeDepNode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const start: u32 = @intCast(self.buf.ops.items.len);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const start: u32 = @intCast(self.buf.ops.items.len);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const start: u32 = @intCast(self.buf.ops.items.len);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const start: u32 = @intCast(self.buf.ops.items.len);",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to typeId from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const typeId: types.TypeId = svar.vtype.id;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "const",
      "name": "typeId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to typeId from fubark/cyber",
    "context": "Repository: fubark/cyber (1357 ⭐)\nFile: src/chunk.zig",
    "response": "const typeId: types.TypeId = svar.vtype.id;",
    "metadata": {
      "repo": "fubark/cyber",
      "stars": 1357,
      "file": "src/chunk.zig",
      "type": "const",
      "name": "typeId",
      "difficulty": "easy"
    }
  }
]