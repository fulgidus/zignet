[
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn init(b: *Builder) void {\n    _b = b;\n\n    if (_b.verbose) {\n        _b.verbose_cimport = true;\n        _b.verbose_llvm_cpu_features = true;\n        _b.prominent_compile_errors = true;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init_dep from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn init_dep(step: *Step, dep: DependLib) void {\n    if (dep.src_dir_always_clean and path_exists(dep.src_dir))\n        return;\n\n    if (!path_exists(dep.tarball))\n        step.dependOn(add_download(dep.url, dep.tarball));\n\n    step.dependOn(add_rm(dep.src_dir));\n\n    step.dependOn(add_tar_extract(dep.tarball, \"dep\"));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "init_dep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_test from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_test() void {\n    _test = _b.option(bool, \"test\", \"build artifacts for testing, default: false\") orelse false;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_test",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_target from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_target() void {\n    _target = _b.standardTargetOptions(.{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_target",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_mode from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_mode() void {\n    const default = if (_test) ModeOpt.debug else ModeOpt.fast;\n    const opt = _b.option(ModeOpt, \"mode\", \"build mode, default: 'fast' (or 'debug' if testing)\") orelse default;\n    _mode = to_mode(opt);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_mode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_lto from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_lto() void {\n    const default = switch (_mode) {\n        .ReleaseFast, .ReleaseSmall, .ReleaseSafe => true,\n        else => false,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_lto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_strip from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_strip() void {\n    const default = switch (_mode) {\n        .ReleaseFast, .ReleaseSmall => true,\n        else => false,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_strip",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_wolfssl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_wolfssl() void {\n    _enable_wolfssl = _b.option(bool, \"wolfssl\", \"enable wolfssl to support DoT protocol, default: false\") orelse false;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_wolfssl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_wolfssl_noasm from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_wolfssl_noasm() void {\n    _wolfssl_noasm = _b.option(bool, \"wolfssl-noasm\", \"disable the assembly acceleration option for wolfssl\") orelse false;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_wolfssl_noasm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_mimalloc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_mimalloc() void {\n    _enable_mimalloc = _b.option(bool, \"mimalloc\", \"using the mimalloc allocator (libc), default: false\") orelse false;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_mimalloc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to option_name from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn option_name() void {\n    var vec = std.ArrayList(u8).init(_b.allocator);\n    defer vec.deinit();\n\n    if (_test)\n        vec.appendSlice(\"test\") catch unreachable\n    else\n        vec.appendSlice(\"chinadns-ng\") catch unreachable;\n\n    if (_enable_wolfssl) {\n        vec.appendSlice(\"+wolfssl\") catch unreachable;\n\n        if (_wolfssl_noasm)\n            vec.appendSlice(\"_noasm\") catch unreachable;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "option_name",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_step from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn add_step(name: []const u8) *Step {\n    const step = _b.allocator.create(Step) catch unreachable;\n    step.* = Step.initNoOp(.custom, name, _b.allocator);\n    return step;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "add_step",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_log from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn add_log(comptime format: []const u8, args: anytype) *Step {\n    return &_b.addLog(format, args).step;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "add_log",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_sh_cmd from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn add_sh_cmd(sh_cmd: []const u8) *Step {\n    const cmd = fmt(\"set -o nounset; set -o errexit; {s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "add_sh_cmd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_sh_cmd_x from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn add_sh_cmd_x(sh_cmd: []const u8) *Step {\n    return add_sh_cmd(fmt(\"set -x; {s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "add_sh_cmd_x",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_rm from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn add_rm(path: []const u8) *Step {\n    return &_b.addRemoveDirTree(path).step;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "add_rm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_download from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn add_download(url: []const u8, path: []const u8) *Step {\n    const cmd_ =\n        \\\\  url='{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "add_download",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_tar_extract from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn add_tar_extract(tarball_path: []const u8, to_dir: []const u8) *Step {\n    const cmd = fmt(\"mkdir -p '{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "add_tar_extract",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to print from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn print(comptime format: []const u8, args: anytype) void {\n    _ = std.io.getStdErr().write(fmt(format ++ \"\\n\", args)) catch unreachable;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "print",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to print_err from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn print_err(comptime format: []const u8, args: anytype) void {\n    if (_first_error) {\n        _first_error = false;\n        newline();\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "print_err",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to err_invalid from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn err_invalid(comptime format: []const u8, args: anytype) void {\n    print_err(format, args);\n    _b.invalid_user_input = true;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "err_invalid",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to err_exit from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn err_exit(comptime format: []const u8, args: anytype) noreturn {\n    print_err(format, args);\n    newline();\n    std.os.exit(1);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "err_exit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to dupeZ from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn dupeZ(bytes: []const u8) [:0]u8 {\n    return _b.allocator.dupeZ(u8, bytes) catch unreachable;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "dupeZ",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fmt from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn fmt(comptime format: []const u8, args: anytype) []const u8 {\n    return _b.fmt(format, args);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "fmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to path_exists from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn path_exists(rel_path: []const u8) bool {\n    return if (std.fs.cwd().access(rel_path, .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "path_exists",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to string_concat from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn string_concat(str_list: []const []const u8, sep: []const u8) []const u8 {\n    return std.mem.join(_b.allocator, sep, str_list) catch unreachable;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "string_concat",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to trim_whitespace from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn trim_whitespace(str: []const u8) []const u8 {\n    return std.mem.trim(u8, str, \" \\t\\r\\n\");\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "trim_whitespace",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_musl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn is_musl() bool {\n    return _target.getAbi().isMusl();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "is_musl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_armv5 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn is_armv5() bool {\n    return _target.getCpuArch() == .arm and\n        (_target.getCpuFeatures().isEnabled(@enumToInt(std.Target.arm.Feature.v5t)) or\n        _target.getCpuFeatures().isEnabled(@enumToInt(std.Target.arm.Feature.v5te)));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "is_armv5",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_x86_64_level from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_x86_64_level() u8 {\n    const name = _target.getCpuModel().name;\n    if (!std.mem.startsWith(u8, name, \"x86_64\"))\n        return 0;\n    if (std.mem.eql(u8, name, \"x86_64\"))\n        return 1;\n    if (std.mem.eql(u8, name, \"x86_64_v2\"))\n        return 2;\n    if (std.mem.eql(u8, name, \"x86_64_v3\"))\n        return 3;\n    if (std.mem.eql(u8, name, \"x86_64_v4\"))\n        return 4;\n    unreachable;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_x86_64_level",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_optval from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_optval(name: []const u8) ?[]const u8 {\n    const opt = _b.user_input_options.getPtr(name) orelse return null;\n    return switch (opt.value) {\n        .scalar => |v| v,\n        else => null,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_optval",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_optval_target from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_optval_target() ?[]const u8 {\n    return get_optval(\"target\");\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_optval_target",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_optval_cpu from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_optval_cpu() ?[]const u8 {\n    return get_optval(\"cpu\");\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_optval_cpu",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exec_command from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn exec_command(argv: []const []const u8, exit_code: ?*u8) Builder.ExecError![]u8 {\n    var code: u8 = undefined;\n    const p_code = exit_code orelse &code;\n    return _b.execAllowFail(argv, p_code, .Inherit) catch |err| {\n        const cmd = string_concat(argv, \" \");\n        defer _b.allocator.free(cmd);\n        print_err(\"failed to execute: {s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "exec_command",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_mode from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn to_mode(opt: ModeOpt) BuildMode {\n    return switch (opt) {\n        .fast => .ReleaseFast,\n        .small => .ReleaseSmall,\n        .safe => .ReleaseSafe,\n        .debug => .Debug,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "to_mode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_mode_opt from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn to_mode_opt(mode: BuildMode) ModeOpt {\n    return switch (mode) {\n        .ReleaseFast => .fast,\n        .ReleaseSmall => .small,\n        .ReleaseSafe => .safe,\n        .Debug => .debug,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "to_mode_opt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to show_builtin from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn show_builtin() []const u8 {\n    var argv = std.ArrayList([]const u8).init(_b.allocator);\n    defer argv.deinit();\n\n    argv.appendSlice(&.{ _b.zig_exe, \"build-exe\" }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "show_builtin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_glibc_version from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_glibc_version() std.builtin.Version {\n    const builtin_info = show_builtin();\n    defer _b.allocator.free(builtin_info);\n\n    var stream = std.io.fixedBufferStream(builtin_info);\n    const reader = stream.reader();\n\n    var buffer: [512]u8 = undefined;\n\n    while (reader.readUntilDelimiterOrEof(&buffer, '\\n') catch unreachable) |raw_line| {\n        const line = trim_whitespace(raw_line);\n\n        if (std.mem.eql(u8, line, \".glibc = .{\")) {\n            // .glibc = .{\n            //     .major = 2,\n            //     .minor = 38,\n            //     .patch = 0,\n            // }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_glibc_version",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to desc_target from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn desc_target() []const u8 {\n    const cpu_arch = _target.getCpuArch();\n    const os_tag = _target.getOsTag();\n    const abi = _target.getAbi();\n\n    if (_target.isGnuLibC()) {\n        const glibc_version = _target.glibc_version orelse get_glibc_version();\n        return fmt(\"{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "desc_target",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to desc_cpu from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn desc_cpu() []const u8 {\n    if (get_optval_cpu()) |cpu| return cpu;\n    const cpu_model = _target.getCpuModel().name;\n    return if (_target.isNativeCpu()) fmt(\"{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "desc_cpu",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to desc_mode from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn desc_mode(mode: ?BuildMode) []const u8 {\n    const res = @tagName(to_mode_opt(mode orelse _mode));\n    return if (_lto) fmt(\"{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "desc_mode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to with_target_desc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn with_target_desc(name: []const u8, in_mode: ?BuildMode) []const u8 {\n    const target = desc_target();\n    const cpu = desc_cpu();\n    const mode = desc_mode(in_mode orelse _mode);\n    return fmt(\"{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "with_target_desc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_target_mcpu from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_target_mcpu() []const u8 {\n    const target = get_optval_target() orelse \"native\";\n    return if (get_optval_cpu()) |cpu|\n        fmt(\"-target {s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_target_mcpu",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_commit_id from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_commit_id() []const u8 {\n    const str = exec_command(&.{ \"git\", \"rev-parse\", \"--short\", \"HEAD\" }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_commit_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gen_modules_zig from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn gen_modules_zig() void {\n    var f = std.fs.cwd().createFile(\"src/modules.zig\", .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "gen_modules_zig",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cmp from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn cmp(_: void, a: []const u8, b: []const u8) bool {\n            return std.mem.order(u8, a, b).compare(.lt);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "cmp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to build_wolfssl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn build_wolfssl() *Step {\n    const wolfssl = add_step(\"wolfssl\");\n\n    // already installed ?\n    if (path_exists(_dep_wolfssl.base_dir))\n        return wolfssl;\n\n    init_dep(wolfssl, _dep_wolfssl);\n\n    const cmd_ =\n        \\\\  install_dir='{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "build_wolfssl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setup_libexeobj_step from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn setup_libexeobj_step(step: *LibExeObjStep) void {\n    step.setTarget(_target);\n    step.setBuildMode(_mode);\n\n    step.want_lto = _lto;\n    step.strip = _strip;\n\n    // compile\n    if (step.kind == .obj)\n        step.use_stage1 = true; // required by coroutine (.zig)\n\n    step.single_threaded = true;\n\n    step.link_function_sections = true;\n    // step.link_data_sections = true; // not supported in 0.10.1\n\n    // link\n    if (step.kind == .exe or step.isDynamicLibrary())\n        step.link_gc_sections = true;\n\n    step.pie = false;\n\n    if (is_musl())\n        step.force_pic = false;\n\n    // this is needed even for the compile step, as zig needs to do some preparation for linking libc\n    step.linkLibC();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "setup_libexeobj_step",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_cflags from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn get_cflags(ex_cflags: []const []const u8) []const []const u8 {\n    var cflags = std.ArrayList([]const u8).init(_b.allocator);\n    defer cflags.deinit();\n\n    cflags.appendSlice(&.{\n        \"-Werror\", // https://github.com/ziglang/zig/issues/10800\n        \"-Wno-option-ignored\",\n        \"-fno-pic\",\n        \"-fno-PIC\",\n        \"-fno-pie\",\n        \"-fno-PIE\",\n        \"-ffunction-sections\",\n        \"-fdata-sections\",\n        \"-fcolor-diagnostics\",\n        \"-fcaret-diagnostics\",\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "get_cflags",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to link_obj_mimalloc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn link_obj_mimalloc(exe: *LibExeObjStep) void {\n    const obj = _b.addObject(\"mimalloc.c\", null);\n    setup_libexeobj_step(obj);\n\n    init_dep(&exe.step, _dep_mimalloc);\n\n    obj.addIncludePath(_dep_mimalloc.include_dir);\n\n    obj.defineCMacro(\"NDEBUG\", null);\n    obj.defineCMacro(\"MI_MALLOC_OVERRIDE\", null);\n\n    const src_file = fmt(\"{s}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "link_obj_mimalloc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to link_obj_chinadns from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn link_obj_chinadns(exe: *LibExeObjStep) void {\n    // generic cflags\n    const cflags = get_cflags(&.{\n        \"-std=c99\",\n        \"-Wall\",\n        \"-Wextra\",\n        \"-Wvla\",\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "link_obj_chinadns",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to configure from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "fn configure() void {\n    // exe: chinadns-ng (or test)\n    const exe = _b.addExecutable(_exe_name, null);\n    setup_libexeobj_step(exe);\n\n    // build the dependency library first\n    if (_enable_wolfssl)\n        exe.step.dependOn(build_wolfssl());\n\n    // to ensure that the standard malloc interface resolves to the mimalloc library, link it as the first object file\n    if (_enable_mimalloc)\n        link_obj_mimalloc(exe);\n\n    link_obj_chinadns(exe);\n\n    // link wolfssl library\n    if (_enable_wolfssl) {\n        exe.addLibraryPath(_dep_wolfssl.lib_dir);\n        exe.linkSystemLibrary(\"wolfssl\");\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "configure",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to build from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "pub fn build(b: *Builder) void {\n    init(b);\n\n    configure();\n\n    if (_b.invalid_user_input)\n        newline();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DependLib from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const DependLib = struct {\n    url: []const u8,\n    version: []const u8,\n    tarball: []const u8, // src tarball file path\n    src_dir: []const u8,\n    src_dir_always_clean: bool,\n    base_dir: []const u8,\n    include_dir: []const u8,\n    lib_dir: []const u8,\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "struct",
      "name": "DependLib",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to _dep_mimalloc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const _dep_mimalloc: DependLib = b: {\n    const version = \"2.1.2\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "_dep_mimalloc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_musl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_musl: [:0]const u8 = if (is_musl()) \"1\" else \"0\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_musl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_lto from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_lto: [:0]const u8 = if (_lto) \"-flto\" else \"\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_lto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_aesni from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_aesni: [:0]const u8 = if (_target.getCpuArch() == .x86_64) \"--enable-aesni\" else \"\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_aesni",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_intelasm from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_intelasm: [:0]const u8 = if (!_wolfssl_noasm and get_x86_64_level() >= 3) \"--enable-intelasm\" else \"\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_intelasm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_armasm from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_armasm: [:0]const u8 = if (!_wolfssl_noasm and _target.getCpuArch() == .aarch64) \"--enable-armasm\" else \"\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_armasm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_aarch64 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_aarch64: [:0]const u8 = if (_target.getCpuArch() == .aarch64) \"1\" else \"0\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_aarch64",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_asm from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_asm: [:0]const u8 = switch (_target.getCpuArch()) {\n        .mips64, .mips64el => \"0\",\n        else => \"1\",\n    };",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_asm",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to opt_cflags from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: build.zig",
    "response": "const opt_cflags: [:0]const u8 = if (is_armv5()) \"-DWOLFSSL_NO_FENCE\" else \"\";",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "build.zig",
      "type": "const",
      "name": "opt_cflags",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "fn init(self: *CacheMsg, in_msg: []const u8, qnamelen: c_int, ttl: i32, hashv: c_uint) *CacheMsg {\n    self.* = .{\n        .hashv = hashv,\n        .update_time = cc.time(),\n        .ttl = ttl,\n        .ttl_r = @divTrunc(ttl * g.cache_refresh, 100),\n        .msg_len = cc.to_u16(in_msg.len),\n        .qnamelen = cc.to_u8(qnamelen),\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to new from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn new(in_msg: []const u8, qnamelen: c_int, ttl: i32, hashv: c_uint) *CacheMsg {\n    const bytes = g.allocator.alignedAlloc(u8, alignment, metadata_len + in_msg.len) catch unreachable;\n    const self: *CacheMsg = std.mem.bytesAsValue(CacheMsg, bytes[0..metadata_len]);\n    return self.init(in_msg, qnamelen, ttl, hashv);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "new",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reuse from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn reuse(self: *CacheMsg, in_msg: []const u8, qnamelen: c_int, ttl: i32, hashv: c_uint) *CacheMsg {\n    if (g.allocator.resize(self.mem(), metadata_len + in_msg.len) != null) {\n        return self.init(in_msg, qnamelen, ttl, hashv);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "reuse",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn free(self: *CacheMsg) void {\n    return g.allocator.free(self.mem());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "free",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_node from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn from_node(node: *Node) *CacheMsg {\n    return @fieldParentPtr(CacheMsg, \"node\", node);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "from_node",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_msg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn from_msg(in_msg: []const u8) *CacheMsg {\n    const metadata_addr = @ptrToInt(in_msg.ptr) - metadata_len;\n    return @intToPtr(*CacheMsg, metadata_addr);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "from_msg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mem from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "fn mem(self: anytype) Bytes(@TypeOf(self), .slice) {\n    const P = Bytes(@TypeOf(self), .ptr);\n    return @ptrCast(P, self)[0 .. metadata_len + self.msg_len];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "mem",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to msg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn msg(self: anytype) Bytes(@TypeOf(self), .slice) {\n    return self.mem()[metadata_len..];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "msg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to question from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn question(self: *const CacheMsg) []const u8 {\n    return dns.question(self.msg(), self.qnamelen);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "question",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to calc_ttl_change from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "fn calc_ttl_change(self: *const CacheMsg, now: c.time_t) i32 {\n    const update_time = self.update_time;\n    const elapsed_sec = if (now > update_time) now - update_time else 0;\n    return -cc.to_i32(elapsed_sec);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "calc_ttl_change",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to update_ttl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn update_ttl(self: *CacheMsg) i32 {\n    const now = cc.time();\n    const ttl_change = self.calc_ttl_change(now);\n\n    if (ttl_change != 0) {\n        self.update_time = now;\n        self.ttl += ttl_change;\n        dns.update_ttl(self.msg(), self.qnamelen, ttl_change);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "update_ttl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_ttl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn get_ttl(self: *const CacheMsg) i32 {\n    return self.ttl + self.calc_ttl_change(cc.time());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "get_ttl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to load from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn load(data: *[]const u8) ?*CacheMsg {\n    const src = @src();\n\n    if (data.len == 0)\n        return null;\n\n    if (data.len <= header_len) {\n        log.warn(src, \"len:%zu <= header_len:%zu\", .{ data.len, header_len }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "load",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dump from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "pub fn dump(self: *const CacheMsg, file: *cc.FILE) void {\n    const h: Header = .{\n        .update_time = cc.to_i64(self.update_time),\n        .hashv = self.hashv,\n        .ttl = self.ttl,\n        .ttl_r = self.ttl_r,\n        .msg_len = self.msg_len,\n        .qnamelen = self.qnamelen,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "function",
      "name": "dump",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to self from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "const self: *CacheMsg = std.mem.bytesAsValue(CacheMsg, bytes[0..metadata_len]);",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "const",
      "name": "self",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to header_len from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "const header_len: usize = @sizeOf(Header);",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "const",
      "name": "header_len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to h from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "const h: *align(1) const Header = std.mem.bytesAsValue(Header, data.*[0..header_len]);",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "const",
      "name": "h",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to h from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/CacheMsg.zig",
    "response": "const h: Header = .{\n        .update_time = cc.to_i64(self.update_time),\n        .hashv = self.hashv,\n        .ttl = self.ttl,\n        .ttl_r = self.ttl_r,\n        .msg_len = self.msg_len,\n        .qnamelen = self.qnamelen,\n    };",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/CacheMsg.zig",
      "type": "const",
      "name": "h",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig",
    "response": "pub fn set(self: *DynStr, str: []const u8) void {\n    return self.set_x(&.{str}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/DynStr.zig",
      "type": "function",
      "name": "set",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_x from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig",
    "response": "pub fn set_x(self: *DynStr, str_list: []const []const u8) void {\n    var strlen: usize = 0;\n    for (str_list) |str|\n        strlen += str.len;\n\n    self.vec.resize(strlen);\n\n    var ptr = self.vec.items.ptr;\n    for (str_list) |str| {\n        @memcpy(ptr, str.ptr, str.len);\n        ptr += str.len;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/DynStr.zig",
      "type": "function",
      "name": "set_x",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to slice from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig",
    "response": "pub fn slice(self: *const DynStr) [:0]const u8 {\n    return self.vec.items;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/DynStr.zig",
      "type": "function",
      "name": "slice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cstr from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig",
    "response": "pub fn cstr(self: *const DynStr) cc.ConstStr {\n    return self.slice().ptr;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/DynStr.zig",
      "type": "function",
      "name": "cstr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_null from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig",
    "response": "pub fn is_null(self: *const DynStr) bool {\n    return self.vec.is_null();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/DynStr.zig",
      "type": "function",
      "name": "is_null",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/DynStr.zig",
    "response": "pub fn is_empty(self: *const DynStr) bool {\n    return self.vec.is_empty();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/DynStr.zig",
      "type": "function",
      "name": "is_empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn is_empty(self: State) bool {\n            return !self.read and !self.write;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "is_empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_events from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn to_events(self: State) u32 {\n            var events: u32 = 0;\n\n            if (self.read)\n                events |= EVENTS.read;\n\n            if (self.write)\n                events |= EVENTS.write;\n\n            if (events != 0)\n                events |= EVENTS.ET;\n\n            return events;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "to_events",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to new from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn new(fd: c_int) *Fd {\n        const self = g.allocator.create(Fd) catch unreachable;\n        self.* = .{ .fd = fd }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "new",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ref from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn ref(self: *Fd) *Fd {\n        self.rc.ref();\n        return self;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "ref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unref from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn unref(self: *Fd) void {\n        return self.free();\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "unref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn free(self: *Fd) void {\n        if (self.rc.unref() > 0) return;\n\n        assert(self.read_frame == null);\n        assert(self.write_frame == null);\n\n        g.evloop.on_close_fd(self);\n        _ = cc.close(self.fd);\n\n        g.allocator.destroy(self);\n\n        // record to the destroyed list, see `evloop.run()`\n        g.evloop.destroyed.put(g.allocator, self, {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "free",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_state from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn get_state(self: *const Fd) State {\n        return .{\n            .read = self.read_frame != null,\n            .write = self.write_frame != null,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "get_state",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_events from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn get_events(self: *const Fd) u32 {\n        var events: u32 = 0;\n\n        if (self.read_frame != null)\n            events |= EVENTS.read;\n\n        if (self.write_frame != null)\n            events |= EVENTS.write;\n\n        if (events != 0)\n            events |= EVENTS.ET;\n\n        return events;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "get_events",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cancel from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn cancel(self: *Fd) void {\n        if (self.canceled)\n            return;\n\n        self.canceled = true;\n\n        _ = self.ref();\n        defer self.unref();\n\n        if (self.read_frame) |frame|\n            co.do_resume(frame);\n\n        if (self.write_frame) |frame|\n            co.do_resume(frame);\n\n        assert(self.read_frame == null);\n        assert(self.write_frame == null);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "cancel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_canceled from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn is_canceled(self: *const Fd) bool {\n        if (self.canceled) {\n            cc.set_errno(c.ECANCELED);\n            return true;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "is_canceled",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to Array from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn Array(comptime N: comptime_int) type {\n        // it is currently not possible to directly return an array type with the align attribute\n        // https://github.com/ziglang/zig/issues/7465\n        return struct {\n            buf: [N * SIZE]u8 align(ALIGN),\n\n            // ======================= for Array =======================\n\n            const Self = @This();\n\n            pub inline fn at(self: *Self, i: usize) *Ev {\n                return from(&self.buf[i * SIZE]);\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "Array",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to len from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn len(_: *const Self) usize {\n                return N;\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn init(events: u32, fdobj: *const Fd) V {\n                var v: V = undefined;\n                v.ptr().set_events(events);\n                v.ptr().set_fdobj(fdobj);\n                return v;\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ptr from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn ptr(v: *V) *Ev {\n                return v.at(0);\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "ptr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn from(ptr: anytype) Ptr(Ev, @TypeOf(ptr)) {\n        return @ptrCast(Ptr(Ev, @TypeOf(ptr)), ptr);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "from",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_events from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn get_events(self: *const Ev) u32 {\n        return c.epev_get_events(self);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "get_events",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_fdobj from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn get_fdobj(self: *const Ev) *Fd {\n        return cc.ptrcast(*Fd, c.epev_get_ptrdata(self));\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "get_fdobj",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_events from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn set_events(self: *Ev, events: u32) void {\n        return c.epev_set_events(self, events);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "set_events",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_fdobj from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn set_fdobj(self: *Ev, fdobj: *const Fd) void {\n        return c.epev_set_ptrdata(self, fdobj);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "set_fdobj",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn init() EvLoop {\n    const epfd = cc.epoll_create1(c.EPOLL_CLOEXEC) orelse {\n        log.err(@src(), \"epoll_create() failed: (%d) %m\", .{cc.errno()}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ev_ctl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn ev_ctl(self: *EvLoop, op: c_int, fd: c_int, ev: ?*Ev) bool {\n    cc.epoll_ctl(self.epfd, op, fd, ev) orelse {\n        const op_name = switch (op) {\n            c.EPOLL_CTL_ADD => \"ADD\",\n            c.EPOLL_CTL_MOD => \"MOD\",\n            c.EPOLL_CTL_DEL => \"DEL\",\n            else => unreachable,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "ev_ctl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ev_add from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn ev_add(self: *EvLoop, fdobj: *const Fd, events: u32) bool {\n    var ev = Ev.V.init(events, fdobj);\n    return self.ev_ctl(c.EPOLL_CTL_ADD, fdobj.fd, ev.ptr());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "ev_add",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ev_mod from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn ev_mod(self: *EvLoop, fdobj: *const Fd, events: u32) bool {\n    var ev = Ev.V.init(events, fdobj);\n    return self.ev_ctl(c.EPOLL_CTL_MOD, fdobj.fd, ev.ptr());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "ev_mod",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ev_del from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn ev_del(self: *EvLoop, fdobj: *const Fd) bool {\n    return self.ev_ctl(c.EPOLL_CTL_DEL, fdobj.fd, null);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "ev_del",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_frame from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn set_frame(fdobj: *Fd, comptime field_name: []const u8, frame: anyframe) void {\n    assert(!fdobj.canceled);\n    assert(@field(fdobj, field_name) == null);\n    @field(fdobj, field_name) = frame;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "set_frame",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to unset_frame from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn unset_frame(fdobj: *Fd, comptime field_name: []const u8, frame: anyframe) void {\n    assert(@field(fdobj, field_name) == frame);\n    @field(fdobj, field_name) = null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "unset_frame",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to field_name from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn field_name(self: EvType) []const u8 {\n        return switch (self) {\n            .read => \"read_frame\",\n            .write => \"write_frame\",\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "field_name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_listener from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn add_listener(self: *EvLoop, fdobj: *Fd, comptime ev: EvType, frame: anyframe) void {\n    self.cache_change(fdobj); // save the original state\n    set_frame(fdobj, comptime ev.field_name(), frame);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "add_listener",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to del_listener from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn del_listener(self: *EvLoop, fdobj: *Fd, comptime ev: EvType, frame: anyframe) void {\n    self.cache_change(fdobj); // save the original state\n    unset_frame(fdobj, comptime ev.field_name(), frame);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "del_listener",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cache_change from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn cache_change(self: *EvLoop, fdobj: *const Fd) void {\n    const res = self.change_list.getOrPut(g.allocator, fdobj) catch unreachable;\n    if (!res.found_existing)\n        res.value_ptr.* = fdobj.get_state();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "cache_change",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to apply_change from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn apply_change(self: *EvLoop) void {\n    var it = self.change_list.iterator();\n    while (it.next()) |v| {\n        const fdobj = v.key_ptr.*;\n        const state: Fd.State = v.value_ptr.*;\n        const old_events = state.to_events();\n        const new_events = fdobj.get_events();\n        if (old_events == new_events) {\n            continue;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "apply_change",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_close_fd from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "fn on_close_fd(self: *EvLoop, fdobj: *const Fd) void {\n    if (self.change_list.fetchRemove(fdobj)) |v| {\n        const state: Fd.State = v.value;\n        if (!state.is_empty())\n            assert(self.ev_del(fdobj));\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "on_close_fd",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to check_deadline from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn check_deadline(self: *Timer, deadline: u64) bool {\n        if (g.evloop.time >= deadline) {\n            return true;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "check_deadline",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_timeout from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn get_timeout(self: *const Timer) c_int {\n        if (self.timeout) |timeout|\n            return cc.to_int(timeout);\n        return -1;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "get_timeout",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn run(self: *EvLoop) void {\n    var evs: Ev.Array(100) = undefined;\n\n    while (true) {\n        self.time = cc.monotime();\n\n        // handling timeout events and get the next interval\n        var timer: Timer = .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "run",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to wait_readable from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn wait_readable(self: *EvLoop, fdobj: *Fd) ?void {\n    self.add_listener(fdobj, .read, @frame());\n    suspend {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "wait_readable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to wait_writable from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn wait_writable(self: *EvLoop, fdobj: *Fd) ?void {\n    self.add_listener(fdobj, .write, @frame());\n    suspend {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "wait_writable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to connect from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn connect(self: *EvLoop, fdobj: *Fd, addr: *const cc.SockAddr) ?void {\n    cc.connect(fdobj.fd, addr) orelse {\n        if (cc.errno() != c.EINPROGRESS)\n            return null;\n\n        self.add_listener(fdobj, .write, @frame());\n        suspend {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "connect",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to accept from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn accept(self: *EvLoop, fdobj: *Fd, src_addr: ?*cc.SockAddr) ?c_int {\n    while (!fdobj.is_canceled()) {\n        return cc.accept4(fdobj.fd, src_addr, c.SOCK_NONBLOCK | c.SOCK_CLOEXEC) orelse {\n            if (cc.errno() != c.EAGAIN)\n                return null;\n\n            self.add_listener(fdobj, .read, @frame());\n            suspend {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "accept",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn read(self: *EvLoop, fdobj: *Fd, buf: []u8) ReadErr!void {\n    var nread: usize = 0;\n\n    while (nread < buf.len) {\n        if (fdobj.is_canceled())\n            return ReadErr.errno; // ECANCELED\n\n        if (cc.read(fdobj.fd, buf[nread..])) |n| {\n            if (n == 0)\n                return ReadErr.eof;\n            nread += n;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read_udp from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn read_udp(self: *EvLoop, fdobj: *Fd, buf: []u8, src_addr: ?*cc.SockAddr) ?usize {\n    while (!fdobj.is_canceled()) {\n        return cc.recvfrom(fdobj.fd, buf, 0, src_addr) orelse {\n            if (cc.errno() != c.EAGAIN)\n                return null;\n\n            self.add_listener(fdobj, .read, @frame());\n            suspend {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "read_udp",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn write(self: *EvLoop, fdobj: *Fd, data: []const u8) ?void {\n    var nsend: usize = 0;\n\n    while (nsend < data.len) {\n        if (fdobj.is_canceled())\n            return null;\n\n        if (cc.send(fdobj.fd, data[nsend..], 0)) |n| {\n            nsend += n;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writev from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub fn writev(self: *EvLoop, fdobj: *Fd, in_iovec: []cc.iovec_t) ?void {\n    var iovec = in_iovec;\n    var iovec_len = cc.iovec_len(iovec);\n\n    while (iovec_len > 0) {\n        if (fdobj.is_canceled())\n            return null;\n\n        if (cc.writev(fdobj.fd, iovec)) |n| {\n            iovec_len -= n;\n            cc.iovec_skip(&iovec, n);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "function",
      "name": "writev",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Fd from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub const Fd = struct {\n    read_frame: ?anyframe = null, // waiting for readable event\n    write_frame: ?anyframe = null, // waiting for writable event\n    fd: c_int,\n    rc: Rc = .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "struct",
      "name": "Fd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Timer from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub const Timer = struct {\n    timeout: ?u64 = null,\n\n    /// return true if the `deadline` has been reached,\n    /// false otherwise (and update the timer state).\n    pub fn check_deadline(self: *Timer, deadline: u64) bool {\n        if (g.evloop.time >= deadline) {\n            return true;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "struct",
      "name": "Timer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to read from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub const read: u32 = c.EPOLLIN | c.EPOLLRDHUP | c.EPOLLPRI;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "const",
      "name": "read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to write from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub const write: u32 = c.EPOLLOUT;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "const",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to err from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub const err: u32 = c.EPOLLERR | c.EPOLLHUP;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "const",
      "name": "err",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ET from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "pub const ET: u32 = c.EPOLLET;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "const",
      "name": "ET",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to state from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "const state: Fd.State = v.value_ptr.*;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "const",
      "name": "state",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to state from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/EvLoop.zig",
    "response": "const state: Fd.State = v.value;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/EvLoop.zig",
      "type": "const",
      "name": "state",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn init(list: *Node) void {\n    list.prev = list;\n    list.next = list;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to head from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "fn head(list: *const Node) *Node {\n    return list.next;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "head",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tail from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "fn tail(list: *const Node) *Node {\n    return list.prev;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "tail",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "fn is_empty(list: *const Node) bool {\n    return list.head() == list;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "is_empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to iterator from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn iterator(list: *const Node) Iterator {\n    return .{\n        .sentinel = list,\n        .node = list.head(),\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "iterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reverse_iterator from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn reverse_iterator(list: *const Node) ReverseIterator {\n    return .{\n        .sentinel = list,\n        .node = list.tail(),\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "reverse_iterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn next(it: *Iterator) ?*Node {\n        const node = it.node;\n        if (node != it.sentinel) {\n            it.node = node.next;\n            return node;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn next(it: *ReverseIterator) ?*Node {\n        const node = it.node;\n        if (node != it.sentinel) {\n            it.node = node.prev;\n            return node;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to link_to_head from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn link_to_head(list: *Node, node: *Node) void {\n    return node.link(list, list.head());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "link_to_head",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to link_to_tail from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn link_to_tail(list: *Node, node: *Node) void {\n    return node.link(list.tail(), list);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "link_to_tail",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to move_to_head from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn move_to_head(list: *Node, node: *Node) void {\n    if (node != list.head()) {\n        node.unlink();\n        list.link_to_head(node);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "move_to_head",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to move_to_tail from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn move_to_tail(list: *Node, node: *Node) void {\n    if (node != list.tail()) {\n        node.unlink();\n        list.link_to_tail(node);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "move_to_tail",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to link from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "fn link(node: *Node, prev: *Node, next: *Node) void {\n    prev.next = node;\n    node.prev = prev;\n    node.next = next;\n    next.prev = node;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "link",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unlink from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn unlink(node: *Node) void {\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n    node.prev = undefined;\n    node.next = undefined;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "unlink",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_node from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub fn from_node(node: *Node) *Object {\n        return @fieldParentPtr(Object, \"node\", node);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "function",
      "name": "from_node",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Iterator from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub const Iterator = struct {\n    sentinel: *const Node,\n    node: *Node,\n\n    pub fn next(it: *Iterator) ?*Node {\n        const node = it.node;\n        if (node != it.sentinel) {\n            it.node = node.next;\n            return node;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "struct",
      "name": "Iterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ReverseIterator from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "pub const ReverseIterator = struct {\n    sentinel: *const Node,\n    node: *Node,\n\n    pub fn next(it: *ReverseIterator) ?*Node {\n        const node = it.node;\n        if (node != it.sentinel) {\n            it.node = node.prev;\n            return node;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "struct",
      "name": "ReverseIterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Object from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Node.zig",
    "response": "const Object = struct {\n    id: u32,\n    node: Node,\n\n    pub fn from_node(node: *Node) *Object {\n        return @fieldParentPtr(Object, \"node\", node);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Node.zig",
      "type": "struct",
      "name": "Object",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ref from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Rc.zig",
    "response": "fn ref(self: *Rc) void {\n    assert(self.ref_count > 0);\n    self.ref_count += 1;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Rc.zig",
      "type": "function",
      "name": "ref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unref from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Rc.zig",
    "response": "fn unref(self: *Rc) u32 {\n    assert(self.ref_count > 0);\n    self.ref_count -= 1;\n    return self.ref_count;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Rc.zig",
      "type": "function",
      "name": "unref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to header from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "fn header(bytes: []align(alignment) u8) *RcMsg {\n    return std.mem.bytesAsValue(RcMsg, bytes[0..header_len]);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "header",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to new from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn new(cap: u16) *RcMsg {\n    const bytes = g.allocator.alignedAlloc(u8, alignment, header_len + cap) catch unreachable;\n    const self = header(bytes);\n    self.* = .{\n        .cap = cap,\n        .len = 0,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "new",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to realloc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn realloc(self: *RcMsg, new_cap: u16) *RcMsg {\n    assert(self.is_unique());\n    if (new_cap > self.cap) {\n        const bytes = g.allocator.reallocAdvanced(\n            self.mem(),\n            alignment,\n            header_len + new_cap,\n            .exact,\n        ) catch unreachable;\n        const new_self = header(bytes);\n        new_self.cap = new_cap;\n        return new_self;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "realloc",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ref from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn ref(self: *RcMsg) *RcMsg {\n    self.rc.ref();\n    return self;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "ref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unref from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn unref(self: *RcMsg) void {\n    return self.free();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "unref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn free(self: *RcMsg) void {\n    if (self.rc.unref() == 0)\n        g.allocator.free(self.mem());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "free",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_unique from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn is_unique(self: *const RcMsg) bool {\n    return self.rc.ref_count == 1;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "is_unique",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mem from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "fn mem(self: anytype) Bytes(@TypeOf(self), .slice) {\n    const P = Bytes(@TypeOf(self), .ptr);\n    return @ptrCast(P, self)[0 .. header_len + self.cap];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "mem",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to buf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn buf(self: anytype) Bytes(@TypeOf(self), .slice) {\n    return self.mem()[header_len..];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "buf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to msg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "pub fn msg(self: anytype) Bytes(@TypeOf(self), .slice) {\n    return self.buf()[0..self.len];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "function",
      "name": "msg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to var_rcmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "const var_rcmsg: *RcMsg = RcMsg.new(512);",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "const",
      "name": "var_rcmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to const_rcmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/RcMsg.zig",
    "response": "const const_rcmsg: *const RcMsg = var_rcmsg;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/RcMsg.zig",
      "type": "const",
      "name": "const_rcmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/StrList.zig",
    "response": "pub fn add(self: *StrList, str: []const u8) void {\n    for (self.items()) |cstr| {\n        if (std.mem.eql(u8, cc.strslice_c(cstr), str))\n            return;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/StrList.zig",
      "type": "function",
      "name": "add",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to items_z from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/StrList.zig",
    "response": "pub fn items_z(self: *const StrList) [:null]?cc.ConstStr {\n    return self.vec.items;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/StrList.zig",
      "type": "function",
      "name": "items_z",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to items from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/StrList.zig",
    "response": "pub fn items(self: *const StrList) []cc.ConstStr {\n    return @ptrCast([]cc.ConstStr, self.items_z());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/StrList.zig",
      "type": "function",
      "name": "items",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_null from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/StrList.zig",
    "response": "pub fn is_null(self: *const StrList) bool {\n    return self.vec.is_null();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/StrList.zig",
      "type": "function",
      "name": "is_null",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/StrList.zig",
    "response": "pub fn is_empty(self: *const StrList) bool {\n    return self.vec.is_empty();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/StrList.zig",
      "type": "function",
      "name": "is_empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eql from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn eql(self: *const Upstream, proto: Proto, addr: *const cc.SockAddr, host: []const u8) bool {\n    return self.proto == proto and\n        self.addr.eql(addr) and\n        std.mem.eql(u8, cc.strslice_c(self.host orelse \"\"), host);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn init(\n    tag: Tag,\n    proto: Proto,\n    addr: *const cc.SockAddr,\n    host: []const u8,\n    ip: []const u8,\n    port: u16,\n    count: ParamValue,\n    life: ParamValue,\n) Upstream {\n    const dupe_host: ?cc.ConstStr = if (host.len > 0)\n        (g.allocator.dupeZ(u8, host) catch unreachable).ptr\n    else\n        null;\n\n    var portbuf: [10]u8 = undefined;\n    const url = cc.to_cstr_x(&.{\n        // tcp://\n        proto.to_str(),\n        // host@\n        host,\n        cc.b2v(host.len > 0, \"@\", \"\"),\n        // ip\n        ip,\n        // #port\n        cc.b2v(proto.is_std_port(port), \"\", cc.snprintf(&portbuf, \"#%u\", .{cc.to_uint(port)}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn deinit(self: *const Upstream) void {\n    assert(self.session == null);\n\n    if (self.host) |host|\n        g.allocator.free(cc.strslice_c(host));\n\n    g.allocator.free(cc.strslice_c(self.url));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to send from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn send(self: *Upstream, qmsg: *RcMsg) void {\n    nosuspend switch (self.proto) {\n        .udpi, .udp => if (self.udp_session()) |s| s.send_query(qmsg),\n        .tcpi, .tcp, .tls => if (self.tcp_session()) |s| s.send_query(qmsg),\n        else => unreachable,\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "send",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to udp_session from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn udp_session(self: *Upstream) ?*UDP {\n    return self.get_session(UDP);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "udp_session",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tcp_session from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn tcp_session(self: *Upstream) ?*TCP {\n    return self.get_session(TCP);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "tcp_session",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_session from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn get_session(self: *Upstream, comptime T: type) ?*T {\n    if (self.session == null)\n        self.session = T.new(self);\n    return cc.ptrcast(?*T, self.session);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "get_session",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to session_eql from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn session_eql(self: *const Upstream, in_session: ?*const anyopaque) bool {\n    return self.session == in_session;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "session_eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to module_init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn module_init() void {\n    _session_list.init();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "module_init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to check_timeout from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn check_timeout(timer: *EvLoop.Timer) void {\n    var it = _session_list.iterator();\n    while (it.next()) |node| {\n        const session_node = SessionNode.from(node);\n        switch (session_node.type) {\n            .udp => {\n                const session = session_node.udp();\n                if (timer.check_deadline(session.get_deadline()))\n                    session.free()\n                else\n                    break;\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "check_timeout",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn from(node: *Node) *SessionNode {\n        return @fieldParentPtr(SessionNode, \"node\", node);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "from",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to udp from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn udp(self: *SessionNode) *UDP {\n        assert(self.type == .udp);\n        return @fieldParentPtr(UDP, \"session_node\", self);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "udp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tcp from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn tcp(self: *SessionNode) *TCP {\n        assert(self.type == .tcp);\n        return @fieldParentPtr(TCP, \"session_node\", self);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "tcp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_work from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn on_work(self: *SessionNode, from_idle_state: bool) void {\n        if (from_idle_state)\n            _session_list.link_to_tail(&self.node)\n        else\n            _session_list.move_to_tail(&self.node);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "on_work",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_idle from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn on_idle(self: *SessionNode) void {\n        self.node.unlink();\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "on_idle",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to new from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn new(upstream: *Upstream) ?*UDP {\n        const fd = net.new_sock(upstream.addr.family(), .udp) orelse return null;\n        const self = g.allocator.create(UDP) catch unreachable;\n        self.* = .{\n            .upstream = upstream,\n            .fdobj = EvLoop.Fd.new(fd),\n            .create_time = g.evloop.time,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "new",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn free(self: *UDP) void {\n        if (self.freed) return;\n        self.freed = true;\n\n        if (!self.is_idle())\n            self.session_node.on_idle();\n\n        if (self.upstream.session_eql(self))\n            self.upstream.session = null;\n\n        self.fdobj.cancel();\n        self.fdobj.free();\n\n        self.query_list.clearAndFree(g.allocator);\n\n        g.allocator.destroy(self);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_deadline from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn get_deadline(self: *const UDP) u64 {\n        assert(!self.is_idle());\n        return self.query_time + cc.to_u64(g.upstream_timeout) * 1000;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "get_deadline",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to send_query from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn send_query(self: *UDP, qmsg: *RcMsg) void {\n        if (self.is_retire()) {\n            const new_session = new(self.upstream);\n            self.upstream.session = new_session;\n\n            if (new_session) |s|\n                nosuspend s.send_query(qmsg);\n\n            if (self.is_idle())\n                self.free();\n\n            return;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "send_query",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_idle from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn is_idle(self: *const UDP) bool {\n        return self.query_list.count() == 0;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "is_idle",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_retire from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn is_retire(self: *const UDP) bool {\n        if (!self.upstream.session_eql(self))\n            return true;\n\n        if ((self.upstream.count > 0 and self.query_count >= self.upstream.count) or\n            (self.upstream.life > 0 and g.evloop.time >= self.create_time + cc.to_u64(self.upstream.life) * 1000))\n        {\n            self.upstream.session = null;\n            return true;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "is_retire",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reply_receiver from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn reply_receiver(self: *UDP) void {\n        defer co.terminate(@frame(), @frameSize(reply_receiver));\n\n        defer self.free();\n\n        var free_rmsg: ?*RcMsg = null;\n        defer if (free_rmsg) |rmsg| rmsg.free();\n\n        while (true) {\n            const rmsg = free_rmsg orelse RcMsg.new(c.DNS_EDNS_MAXSIZE);\n            free_rmsg = null;\n\n            defer {\n                if (rmsg.is_unique())\n                    free_rmsg = rmsg\n                else\n                    rmsg.unref();\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "reply_receiver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_error from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn on_error(self: *const UDP, op: cc.ConstStr) void {\n        if (!self.fdobj.canceled)\n            log.warn(@src(), \"%s(%s) failed: (%d) %m\", .{ op, self.upstream.url, cc.errno() }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "on_error",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn init() void {\n        if (_ctx != null) return;\n\n        cc.SSL_library_init();\n\n        const ctx = cc.SSL_CTX_new();\n        _ctx = ctx;\n\n        if (g.cert_verify) {\n            const src = @src();\n            if (g.ca_certs.is_null())\n                cc.SSL_CTX_load_sys_CA_certs(ctx) orelse {\n                    log.err(src, \"failed to load system CA certs, please provide --ca-certs\", .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to new_ssl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn new_ssl(self: *TLS, fd: c_int, host: ?cc.ConstStr) ?void {\n        assert(self.ssl == null);\n\n        const ssl = cc.SSL_new(_ctx.?);\n\n        var ok = false;\n        defer if (!ok) cc.SSL_free(ssl);\n\n        cc.SSL_set_fd(ssl, fd) orelse return null;\n        cc.SSL_set_host(ssl, host, g.cert_verify) orelse return null;\n\n        ok = true;\n        self.ssl = ssl;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "new_ssl",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_close from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn on_close(self: *TLS) void {\n        const ssl = self.ssl orelse return;\n        self.ssl = null;\n\n        cc.SSL_free(ssl);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "on_close",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to co_data from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn co_data() *?*RcMsg {\n            return co.data(?*RcMsg);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "co_data",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to do_push from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn do_push(self: *MsgQueue, msg: *RcMsg, pos: enum { front, back }) void {\n            if (self.waiter) |waiter| {\n                assert(self.is_empty());\n                co_data().* = msg;\n                co.do_resume(waiter);\n                return;\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "do_push",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to push from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn push(self: *MsgQueue, msg: *RcMsg) void {\n            return self.do_push(msg, .back);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "push",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to push_front from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn push_front(self: *MsgQueue, msg: *RcMsg) void {\n            return self.do_push(msg, .front);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "push_front",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pop from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn pop(self: *MsgQueue, comptime suspending: bool) ?*RcMsg {\n            if (self.head) |node| {\n                defer g.allocator.destroy(node);\n                if (node == self.tail) {\n                    self.head = null;\n                    self.tail = null;\n                }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "pop",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to cancel_wait from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn cancel_wait(self: *const MsgQueue) void {\n            if (self.waiter) |waiter| {\n                assert(self.is_empty());\n                co_data().* = null;\n                co.do_resume(waiter);\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "cancel_wait",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn is_empty(self: *const MsgQueue) bool {\n            return self.head == null;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "is_empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clear from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn clear(self: *MsgQueue) void {\n            while (self.pop(false)) |msg|\n                msg.unref();\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "clear",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to new from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn new(upstream: *Upstream) *TCP {\n        const self = g.allocator.create(TCP) catch unreachable;\n        self.* = .{\n            .upstream = upstream,\n            .create_time = g.evloop.time,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "new",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to free from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn free(self: *TCP) void {\n        if (self.flags.freed) return;\n        self.flags.freed = true;\n\n        if (!self.is_idle())\n            self.session_node.on_idle();\n\n        if (self.upstream.session_eql(self))\n            self.upstream.session = null;\n\n        self.send_list.cancel_wait();\n\n        if (self.fdobj) |fdobj| {\n            fdobj.cancel();\n            fdobj.free();\n            self.fdobj = null;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_deadline from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn get_deadline(self: *const TCP) u64 {\n        assert(!self.is_idle());\n        return self.query_time + cc.to_u64(g.upstream_timeout) * 1000;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "get_deadline",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_idle from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn is_idle(self: *const TCP) bool {\n        return self.pending_n == 0;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "is_idle",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_retire from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn is_retire(self: *const TCP) bool {\n        if (!self.upstream.session_eql(self))\n            return true;\n\n        if ((self.upstream.count > 0 and self.query_count >= self.upstream.count) or\n            (self.upstream.life > 0 and g.evloop.time >= self.create_time + cc.to_u64(self.upstream.life) * 1000))\n        {\n            self.upstream.session = null;\n            return true;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "is_retire",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to send_query from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn send_query(self: *TCP, qmsg: *RcMsg) void {\n        if (self.is_retire()) {\n            const new_session = new(self.upstream);\n            self.upstream.session = new_session;\n\n            nosuspend new_session.send_query(qmsg);\n\n            if (self.is_idle())\n                self.free();\n\n            return;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "send_query",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pop_qmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn pop_qmsg(self: *TCP) ?*RcMsg {\n        const qmsg = self.send_list.pop(true) orelse return null;\n        self.on_send_msg(qmsg);\n        return qmsg;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "pop_qmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_send_msg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn on_send_msg(self: *TCP, qmsg: *RcMsg) void {\n        const qid = dns.get_id(qmsg.msg());\n        if (self.ack_list.fetchPut(g.allocator, qid, qmsg) catch unreachable) |old| {\n            old.value.unref();\n            self.pending_n -= 1;\n            assert(self.pending_n > 0);\n            log.warn(@src(), \"duplicated qid:%u to %s\", .{ cc.to_uint(qid), self.upstream.url }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "on_send_msg",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_recv_msg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn on_recv_msg(self: *TCP, rmsg: *const RcMsg) void {\n        const qid = dns.get_id(rmsg.msg());\n        if (self.ack_list.fetchRemove(qid)) |kv| {\n            self.pending_n -= 1;\n            kv.value.unref();\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "on_recv_msg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to stop from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn stop(self: *TCP) void {\n        if (self.flags.in_sender) {\n            self.flags.stopping = true;\n            return;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "stop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clear_ack_list from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn clear_ack_list(self: *TCP, op: enum { resend, unref }) void {\n        var it = self.ack_list.valueIterator();\n        while (it.next()) |value_ptr| {\n            const qmsg = value_ptr.*;\n            switch (op) {\n                .resend => self.send_list.push_front(qmsg),\n                .unref => qmsg.unref(),\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "clear_ack_list",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to start from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn start(self: *TCP) void {\n        assert(self.fdobj == null);\n        assert(self.pending_n > 0);\n        assert(!self.send_list.is_empty());\n        assert(self.ack_list.count() == 0);\n\n        self.create_time = g.evloop.time;\n\n        self.flags.starting = true;\n        co.start(query_sender, .{self}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to query_sender from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn query_sender(self: *TCP) void {\n        defer co.terminate(@frame(), @frameSize(query_sender));\n\n        defer self.stop();\n\n        const fd = net.new_tcp_conn_sock(self.upstream.addr.family()) orelse return;\n        self.fdobj = EvLoop.Fd.new(fd);\n\n        self.connect() orelse return;\n\n        self.flags.in_sender = true;\n        co.start(reply_receiver, .{self}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "query_sender",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reply_receiver from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn reply_receiver(self: *TCP) void {\n        defer co.terminate(@frame(), @frameSize(reply_receiver));\n\n        defer self.stop();\n\n        var free_rmsg: ?*RcMsg = null;\n        defer if (free_rmsg) |rmsg| rmsg.free();\n\n        while (true) {\n            // read the len\n            var len: u16 = undefined;\n            self.recv(std.mem.asBytes(&len)) orelse return;\n\n            // check the len\n            len = cc.ntohs(len);\n            if (len < dns.header_len()) {\n                log.warn(@src(), \"recv(%s) failed: invalid len:%u\", .{ self.upstream.url, cc.to_uint(len) }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "reply_receiver",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_error from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn on_error(self: *const TCP, op: cc.ConstStr, errmsg: ?cc.ConstStr) ?void {\n        const src = @src();\n\n        if (self.fdobj.?.canceled)\n            return null;\n\n        if (errmsg) |msg|\n            log.warn(src, \"%s(%s) failed: %s\", .{ op, self.upstream.url, msg }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "on_error",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ssl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn ssl(self: *const TCP) *c.WOLFSSL {\n        return self.tls.ssl.?;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "ssl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to connect from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn connect(self: *TCP) ?void {\n        // null means strerror(errno)\n        const errmsg: ?cc.ConstStr = e: {\n            const fdobj = self.fdobj.?;\n            g.evloop.connect(fdobj, &self.upstream.addr) orelse break :e null;\n\n            if (has_tls and self.upstream.proto == .tls) {\n                self.tls.new_ssl(fdobj.fd, self.upstream.host) orelse break :e \"unable to create ssl object\";\n\n                while (true) {\n                    var err: c_int = undefined;\n                    cc.SSL_connect(self.ssl(), &err) orelse switch (err) {\n                        c.WOLFSSL_ERROR_WANT_READ => {\n                            g.evloop.wait_readable(fdobj) orelse return null;\n                            continue;\n                        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "connect",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to send from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn send(self: *TCP, qmsg: *RcMsg) ?void {\n        // null means strerror(errno)\n        const errmsg: ?cc.ConstStr = e: {\n            const fdobj = self.fdobj.?;\n\n            if (self.upstream.proto != .tls) {\n                var iovec = [_]cc.iovec_t{\n                    .{\n                        .iov_base = std.mem.asBytes(&cc.htons(qmsg.len)),\n                        .iov_len = @sizeOf(u16),\n                    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "send",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to recv from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn recv(self: *TCP, buf: []u8) ?void {\n        // null means strerror(errno)\n        const errmsg: ?cc.ConstStr = e: {\n            const fdobj = self.fdobj.?;\n\n            if (self.upstream.proto != .tls) {\n                g.evloop.read(fdobj, buf) catch |err| switch (err) {\n                    error.eof => return null,\n                    error.errno => break :e null,\n                }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "recv",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_str from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn from_str(str: []const u8) ?Proto {\n        const map = if (has_tls) .{\n            .{ .str = \"udp://\", .proto = .udp }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "from_str",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_str from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn to_str(self: Proto) [:0]const u8 {\n        return switch (self) {\n            .udpi => \"udpi://\",\n            .tcpi => \"tcpi://\",\n            .udp => \"udp://\",\n            .tcp => \"tcp://\",\n            .tls => \"tls://\",\n            else => unreachable,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "to_str",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to require_host from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn require_host(self: Proto) bool {\n        return self == .tls;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "require_host",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to std_port from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn std_port(self: Proto) u16 {\n        return switch (self) {\n            .tls => 853,\n            else => 53,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "std_port",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_std_port from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn is_std_port(self: Proto, port: u16) bool {\n        return port == self.std_port();\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "is_std_port",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to items from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn items(self: *const Group) []Upstream {\n        return self.list.items;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "items",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn is_empty(self: *const Group) bool {\n        return self.items().len == 0;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "is_empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse_failed from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn parse_failed(msg: [:0]const u8, value: []const u8) ?void {\n        opt.print(@src(), msg, value);\n        return null;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "parse_failed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn add(self: *Group, tag: Tag, url: []const u8) ?void {\n        @setCold(true);\n\n        var rest = url;\n\n        // proto\n        const proto = b: {\n            if (std.mem.indexOf(u8, rest, \"://\")) |i| {\n                const proto = rest[0 .. i + 3];\n                rest = rest[i + 3 ..];\n                break :b Proto.from_str(proto) orelse\n                    return parse_failed(\"invalid proto\", proto);\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "add",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to do_add from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "fn do_add(\n        self: *Group,\n        tag: Tag,\n        proto: Proto,\n        host: []const u8,\n        ip: []const u8,\n        port: u16,\n        count: ParamValue,\n        life: ParamValue,\n    ) void {\n        const addr = cc.SockAddr.from_text(cc.to_cstr(ip), port);\n\n        for (self.items()) |*upstream| {\n            if (upstream.eql(proto, &addr, host)) {\n                upstream.count = count;\n                upstream.life = life;\n                return;\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "do_add",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rm_useless from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn rm_useless(self: *Group) void {\n        @setCold(true);\n\n        var has_udpi = false;\n        var has_tcpi = false;\n        for (g.bind_ports) |p| {\n            if (p.udp) has_udpi = true;\n            if (p.tcp) has_tcpi = true;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "rm_useless",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to send from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub fn send(self: *Group, qmsg: *RcMsg, udpi: bool) void {\n        const verbose_info = if (g.verbose()) .{\n            .qid = dns.get_id(qmsg.msg()),\n            .from = cc.b2s(udpi, \"udp\", \"tcp\"),\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "function",
      "name": "send",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to SessionNode from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const SessionNode = struct {\n    type: enum { udp, tcp }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "struct",
      "name": "SessionNode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UDP from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const UDP = struct {\n    session_node: SessionNode = .{ .type = .udp }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "struct",
      "name": "UDP",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TLS from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub const TLS = struct {\n    ssl: ?*c.WOLFSSL = null,\n\n    var _ctx: ?*c.WOLFSSL_CTX = null;\n\n    /// called at startup\n    pub fn init() void {\n        if (_ctx != null) return;\n\n        cc.SSL_library_init();\n\n        const ctx = cc.SSL_CTX_new();\n        _ctx = ctx;\n\n        if (g.cert_verify) {\n            const src = @src();\n            if (g.ca_certs.is_null())\n                cc.SSL_CTX_load_sys_CA_certs(ctx) orelse {\n                    log.err(src, \"failed to load system CA certs, please provide --ca-certs\", .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "struct",
      "name": "TLS",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TCP from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const TCP = struct {\n    session_node: SessionNode = .{ .type = .tcp }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "struct",
      "name": "TCP",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to MsgQueue from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const MsgQueue = struct {\n        head: ?*Msg = null,\n        tail: ?*Msg = null,\n        waiter: ?anyframe = null,\n\n        const Msg = struct {\n            msg: *RcMsg,\n            next: *Msg,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "struct",
      "name": "MsgQueue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Group from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "pub const Group = struct {\n    list: std.ArrayListUnmanaged(Upstream) = .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "struct",
      "name": "Group",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to DEFAULT_COUNT from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const DEFAULT_COUNT: ParamValue = 10;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "DEFAULT_COUNT",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to DEFAULT_LIFE from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const DEFAULT_LIFE: ParamValue = 10;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "DEFAULT_LIFE",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to dupe_host from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const dupe_host: ?cc.ConstStr = if (host.len > 0)\n        (g.allocator.dupeZ(u8, host) catch unreachable).ptr\n    else\n        null;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "dupe_host",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to rmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const rmsg: *RcMsg = if (free_rmsg) |rmsg| rmsg.realloc(len) else RcMsg.new(len);",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "rmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to errmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const errmsg: ?cc.ConstStr = e: {\n            const fdobj = self.fdobj.?;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "errmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to errmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const errmsg: ?cc.ConstStr = e: {\n            const fdobj = self.fdobj.?;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "errmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to errmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const errmsg: ?cc.ConstStr = e: {\n            const fdobj = self.fdobj.?;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "errmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to in_proto from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/Upstream.zig",
    "response": "const in_proto: Proto = if (udpi) .udpi else .tcpi;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/Upstream.zig",
      "type": "const",
      "name": "in_proto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to calc_idx from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "fn calc_idx(hashv: c_uint) usize {\n        return hashv & (_buckets.len - 1);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "calc_idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "fn get(question: []const u8, hashv: c_uint) ?*CacheMsg {\n        if (_buckets.len == 0)\n            return null;\n\n        const idx = calc_idx(hashv);\n\n        var p: *?*CacheMsg = &_buckets[idx];\n        while (p.*) |cur| : (p = &cur.next) {\n            if (cur.hashv == hashv and cc.memeql(cur.question(), question)) {\n                // move to head (easy to del it)\n                if (cur != _buckets[idx]) {\n                    p.* = cur.next;\n                    cur.next = _buckets[idx];\n                    _buckets[idx] = cur;\n                }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to del from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "fn del(cmsg: *CacheMsg) void {\n        if (_buckets.len == 0)\n            return;\n\n        const idx = calc_idx(cmsg.hashv);\n\n        var p: *?*CacheMsg = &_buckets[idx];\n        while (p.*) |cur| : (p = &cur.next) {\n            if (cur == cmsg) {\n                p.* = cur.next;\n                _nitems -= 1;\n                return;\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "del",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "fn add(cmsg: *CacheMsg) void {\n        try_resize();\n\n        const idx = calc_idx(cmsg.hashv);\n\n        cmsg.next = _buckets[idx];\n        _buckets[idx] = cmsg;\n\n        _nitems += 1;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "add",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to try_resize from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "fn try_resize() void {\n        const max_nitems = @divTrunc(_buckets.len * load_factor, 100);\n        if (_nitems < max_nitems)\n            return;\n\n        const old_len = _buckets.len;\n        const new_len = std.math.max(old_len << 1, 1 << 4);\n        _buckets = g.allocator.realloc(_buckets, new_len) catch unreachable;\n\n        // init\n        const part2 = std.mem.sliceAsBytes(_buckets.ptr[0..new_len][old_len..]);\n        @memset(part2.ptr, 0, part2.len);\n\n        var idx: usize = 0;\n        while (idx < old_len) : (idx += 1) {\n            var p: *?*CacheMsg = &_buckets[idx];\n            while (p.*) |cur| {\n                const new_idx = calc_idx(cur.hashv);\n                if (new_idx != idx) {\n                    assert(new_idx >= old_len);\n                    // remove from part 1\n                    p.* = cur.next;\n                    // add to part 2\n                    cur.next = _buckets[new_idx];\n                    _buckets[new_idx] = cur;\n                }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "try_resize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to del_nofree from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "fn del_nofree(cache_msg: *CacheMsg) void {\n    map.del(cache_msg);\n    cache_msg.node.unlink();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "del_nofree",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ttl_ok from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "fn ttl_ok(ttl: i32) bool {\n    return ttl > 0 or (g.cache_stale > 0 and -ttl <= g.cache_stale);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "ttl_ok",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "pub fn get(\n    qmsg: []const u8,\n    qnamelen: c_int,\n    p_ttl: *i32,\n    p_ttl_r: *i32,\n    p_add_ip: *bool,\n) ?[]const u8 {\n    if (!enabled())\n        return null;\n\n    const question = dns.question(qmsg, qnamelen);\n    const hashv = cc.calc_hashv(question);\n    const cache_msg = map.get(question, hashv) orelse return null;\n\n    // update ttl\n    const ttl = cache_msg.update_ttl();\n    p_ttl.* = ttl;\n    p_ttl_r.* = cache_msg.ttl_r;\n\n    // need to add ip to ipset/nftset ?\n    p_add_ip.* = if (!cache_msg.added_ip) b: {\n        cache_msg.added_ip = true;\n        break :b true;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "get",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to add from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "pub fn add(msg: []u8, qnamelen: c_int, p_ttl: *i32) bool {\n    if (!enabled())\n        return false;\n\n    if (!dns.is_good(msg))\n        return false;\n\n    if (cache_ignore.is_ignored(msg, qnamelen))\n        return false;\n\n    const ttl = dns.get_ttl(msg, qnamelen, g.cache_nodata_ttl, g.cache_min_ttl, g.cache_max_ttl) orelse return false;\n    p_ttl.* = ttl;\n\n    const cache_msg = b: {\n        const question = dns.question(msg, qnamelen);\n        const hashv = cc.calc_hashv(question);\n        if (map.get(question, hashv)) |old| {\n            // avoid duplicate add\n            const old_ttl = old.get_ttl();\n            if (std.math.absCast(ttl - old_ttl) <= 2) return false;\n            del_nofree(old);\n            break :b old.reuse(msg, qnamelen, ttl, hashv);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "add",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to load from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "pub fn load() void {\n    assert(enabled());\n\n    const src = @src();\n    const path = g.cache_db orelse return;\n\n    const mem = cc.mmap_file(path) orelse {\n        if (cc.errno() != c.ENOENT)\n            log.warn(src, \"open(%s): (%d) %m\", .{ path, cc.errno() }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "load",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dump from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache.zig",
    "response": "pub fn dump(event: enum { on_exit, on_manual }) void {\n    if (!enabled())\n        return;\n\n    const src = @src();\n\n    const path = g.cache_db orelse switch (event) {\n        .on_exit => return,\n        .on_manual => \"/tmp/chinadns@cache.db\",\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache.zig",
      "type": "function",
      "name": "dump",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache_ignore.zig",
    "response": "pub fn add(ascii_domain: []const u8) ?void {\n    var buf: [c.DNS_NAME_WIRE_MAXLEN]u8 = undefined;\n    var level: u8 = undefined;\n\n    const opt_domain_z = dns.ascii_to_wire(ascii_domain, &buf, &level);\n    if (opt_domain_z == null or level > MAX_LEVEL) {\n        opt.print(@src(), \"invalid domain\", ascii_domain);\n        return null;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache_ignore.zig",
      "type": "function",
      "name": "add",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_ignored from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cache_ignore.zig",
    "response": "pub fn is_ignored(rmsg: []const u8, qnamelen: c_int) bool {\n    if (_ignored_domains.count() == 0)\n        return false;\n\n    var domains: [8][*]const u8 = undefined;\n    var domain_end: [*]const u8 = undefined;\n\n    const n = dns.qname_domains(rmsg, qnamelen, _exist_levels, &domains, &domain_end) orelse\n        return true; // bad format\n\n    for (domains[0..n]) |domain| {\n        // const domain_len = domain_end - domain;\n        const domain_len = cc.ptrdiff_u(u8, domain_end, domain);\n        if (_ignored_domains.contains(domain[0..domain_len]))\n            return true;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cache_ignore.zig",
      "type": "function",
      "name": "is_ignored",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to b2v from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn b2v(b: bool, true_v: anytype, false_v: anytype) @TypeOf(true_v, false_v) {\n    return if (b) true_v else false_v;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "b2v",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to b2s from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn b2s(b: bool, true_v: ConstStr, false_v: ConstStr) ConstStr {\n    return if (b) true_v else false_v;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "b2s",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to remove_const from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn remove_const(ptr: anytype) RemoveConst(@TypeOf(ptr)) {\n    if (comptime isSlice(@TypeOf(ptr)))\n        return remove_const(ptr.ptr)[0..ptr.len];\n    return @intToPtr(RemoveConst(@TypeOf(ptr)), @ptrToInt(ptr));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "remove_const",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to RemoveConst from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn RemoveConst(comptime T: type) type {\n    if (isConstPtr(T)) {\n        var info = @typeInfo(T);\n        info.Pointer.is_const = false;\n        return @Type(info);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "RemoveConst",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Bytes from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn Bytes(comptime P: type, t: enum { ptr, slice }) type {\n    if (isConstPtr(P))\n        return if (t == .ptr) [*]const u8 else []const u8\n    else\n        return if (t == .ptr) [*]u8 else []u8;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "Bytes",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to Ptr from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn Ptr(comptime T: type, comptime P: type) type {\n    return if (isConstPtr(P)) *const T else *T;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "Ptr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ptrdiff from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn ptrdiff(comptime T: type, p1: [*]const T, p2: [*]const T) isize {\n    const addr1 = to_isize(@ptrToInt(p1));\n    const addr2 = to_isize(@ptrToInt(p2));\n    return @divExact(addr1 - addr2, @sizeOf(T));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "ptrdiff",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ptrdiff_u from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn ptrdiff_u(comptime T: type, p1: [*]const T, p2: [*]const T) usize {\n    return to_usize(ptrdiff(T, p1, p2));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "ptrdiff_u",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ptrcast from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn ptrcast(comptime P: type, ptr: anytype) P {\n    return @ptrCast(P, @alignCast(meta.alignment(P), ptr));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "ptrcast",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to IntCast from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn IntCast(comptime DestType: type) type {\n    return struct {\n        pub inline fn cast(integer: anytype) DestType {\n            return @intCast(DestType, integer);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "IntCast",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to calc_hashv from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn calc_hashv(mem: []const u8) c_uint {\n    return c.calc_hashv(mem.ptr, mem.len);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "calc_hashv",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to memeql from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn memeql(a: []const u8, b: []const u8) bool {\n    return a.len == b.len and c.memcmp(a.ptr, b.ptr, a.len) == 0;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "memeql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to static_buf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn static_buf(size: usize) []u8 {\n    const static = struct {\n        var buf: []u8 = &.{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "static_buf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_cstr from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn to_cstr(str: []const u8) Str {\n    return to_cstr_x(&.{str}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "to_cstr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_cstr_x from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn to_cstr_x(str_list: []const []const u8) Str {\n    var total_len: usize = 0;\n    for (str_list) |str|\n        total_len += str.len;\n\n    const buf = static_buf(total_len + 1);\n\n    var ptr = buf.ptr;\n    for (str_list) |str| {\n        @memcpy(ptr, str.ptr, str.len);\n        ptr += str.len;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "to_cstr_x",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_cstr from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn is_cstr(comptime S: type) bool {\n    return @typeInfo(StrSlice(S, false)).Pointer.sentinel != null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "is_cstr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to strslice from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn strslice(str: anytype) StrSlice(@TypeOf(str), false) {\n    const S = @TypeOf(str);\n    if (comptime isManyItemPtr(S)) {\n        comptime assert(meta.sentinel(S).? == 0);\n        return str[0..c.strlen(str) :0];\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "strslice",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to strslice_c from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn strslice_c(str: anytype) StrSlice(@TypeOf(str), true) {\n    return strslice(str);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "strslice_c",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to StrSlice from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn StrSlice(comptime S: type, comptime force_const: bool) type {\n    const info = @typeInfo(S);\n\n    if (info != .Pointer)\n        @compileError(\"expected pointer, found \" ++ @typeName(S));\n\n    if (meta.Elem(S) != u8)\n        @compileError(\"expected u8 pointer, found \" ++ @typeName(S));\n\n    const sentinel = meta.sentinel(S);\n\n    if (sentinel) |end| {\n        if (end != 0)\n            @compileError(\"expected sentinel 0, found \" ++ @typeName(S));\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "StrSlice",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to __errno_location from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn __errno_location() *c_int;\n\npub inline fn errno() c_int {\n    return __errno_location().*;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "__errno_location",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_errno from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn set_errno(err: c_int) void {\n    __errno_location().* = err;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "set_errno",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fprintf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn fprintf(file: *FILE, comptime fmt: [:0]const u8, args: anytype) void {\n    const raw = struct {\n        extern fn fprintf(file: *FILE, fmt: ConstStr, ...) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "fprintf",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to printf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn printf(comptime fmt: [:0]const u8, args: anytype) void {\n    return fprintf(stdout, fmt, args);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "printf",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to printf_err from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn printf_err(comptime fmt: [:0]const u8, args: anytype) void {\n    return fprintf(stderr, fmt, args);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "printf_err",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to snprintf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn snprintf(buffer: []u8, comptime fmt: [:0]const u8, args: anytype) [:0]u8 {\n    const raw = struct {\n        extern fn snprintf(buf: [*]u8, len: usize, fmt: ConstStr, ...) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "snprintf",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fopen from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn fopen(path: ConstStr, mode: ConstStr) ?*FILE;\n\n/// flush(file) and close(fd)\npub extern fn fclose(file: *FILE) c_int;\n\n/// return the number of bytes written \\\n/// `res < data.len` means write error\npub inline fn fwrite(file: *FILE, data: []const u8) usize {\n    const raw = struct {\n        extern fn fwrite(ptr: [*]const u8, size: usize, nitems: usize, file: *FILE) usize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "fopen",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setvbuf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn setvbuf(file: *FILE, buffer: ?[*]u8, mode: c_int, size: usize) ?void {\n    const raw = struct {\n        extern fn setvbuf(file: *FILE, buffer: ?[*]u8, mode: c_int, size: usize) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "setvbuf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to time from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn time() c.time_t {\n    const raw = struct {\n        extern fn time(t: ?*c.time_t) c.time_t;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "time",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to localtime from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn localtime(t: c.time_t) ?*c.struct_tm {\n    const raw = struct {\n        extern fn localtime(t: *const c.time_t) ?*c.struct_tm;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "localtime",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getenv from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn getenv(env_name: ConstStr) ?ConstStr;\n\npub inline fn setenv(env_name: ConstStr, value: ConstStr, is_replace: bool) ?void {\n    const raw = struct {\n        extern fn setenv(env_name: ConstStr, value: ConstStr, is_replace: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "getenv",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to exit from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn exit(status: c_int) noreturn;\npub extern fn abort() noreturn;\n\npub inline fn connect(fd: c_int, addr: *const SockAddr) ?void {\n    const raw = struct {\n        extern fn connect(fd: c_int, addr: *const anyopaque, addrlen: c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "exit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to accept4 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn accept4(fd: c_int, addr: ?*SockAddr, flags: c_int) ?c_int {\n    const raw = struct {\n        extern fn accept4(fd: c_int, addr: ?*anyopaque, addrlen: ?*c.socklen_t, flags: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "accept4",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to send from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn send(fd: c_int, data: []const u8, flags: c_int) ?usize {\n    const raw = struct {\n        extern fn send(fd: c_int, buf: [*]const u8, len: usize, flags: c_int) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "send",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to recv from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn recv(fd: c_int, buf: []u8, flags: c_int) ?usize {\n    const raw = struct {\n        extern fn recv(fd: c_int, buf: [*]u8, len: usize, flags: c_int) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "recv",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sendto from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn sendto(fd: c_int, buf: []const u8, flags: c_int, addr: *const SockAddr) ?usize {\n    const raw = struct {\n        extern fn sendto(fd: c_int, buf: [*]const u8, len: usize, flags: c_int, addr: *const anyopaque, addrlen: c.socklen_t) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "sendto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to recvfrom from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn recvfrom(fd: c_int, buf: []u8, flags: c_int, addr: ?*SockAddr) ?usize {\n    const raw = struct {\n        extern fn recvfrom(fd: c_int, buf: [*]u8, len: usize, flags: c_int, addr: ?*anyopaque, addrlen: ?*c.socklen_t) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "recvfrom",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn read(fd: c_int, buf: []u8) ?usize {\n    const raw = struct {\n        extern fn read(fd: c_int, buf: [*]u8, len: usize) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn write(fd: c_int, buf: []const u8) ?usize {\n    const raw = struct {\n        extern fn write(fd: c_int, buf: [*]const u8, len: usize) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to writev from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn writev(fd: c_int, iovec: []const iovec_t) ?usize {\n    const raw = struct {\n        extern fn writev(fd: c_int, iovec: [*]const iovec_t, iovec_n: c_int) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "writev",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pipe2 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn pipe2(fds: *[2]c_int, flags: c_int) ?void {\n    const raw = struct {\n        extern fn pipe2(fds: *[2]c_int, flags: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "pipe2",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to socket from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn socket(family: c_int, type_: c_int, protocol: c_int) ?c_int {\n    const raw = struct {\n        extern fn socket(family: c_int, type: c_int, protocol: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "socket",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to open from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn open(filename: ConstStr, flags: c_int, newfile_mode: ?c.mode_t) ?c_int {\n    const raw = struct {\n        extern fn open(file: ConstStr, oflag: c_int, ...) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "open",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_dir from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn is_dir(path: ConstStr) bool {\n    return c.is_dir(path);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "is_dir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fstat_size from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn fstat_size(fd: c_int) ?usize {\n    const sz = c.fstat_size(fd);\n    return if (sz >= 0) to_usize(sz) else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "fstat_size",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to close from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn close(fd: c_int) ?void {\n    const raw = struct {\n        extern fn close(fd: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "close",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bind from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn bind(fd: c_int, addr: *const SockAddr) ?void {\n    const raw = struct {\n        extern fn bind(fd: c_int, addr: *const anyopaque, addrlen: c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "bind",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to listen from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn listen(fd: c_int, backlog: c_int) ?void {\n    const raw = struct {\n        extern fn listen(fd: c_int, backlog: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "listen",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getsockopt from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn getsockopt(fd: c_int, level: c_int, opt: c_int, optval: *anyopaque, optlen: *c.socklen_t) ?void {\n    const raw = struct {\n        extern fn getsockopt(fd: c_int, level: c_int, opt: c_int, optval: *anyopaque, optlen: *c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "getsockopt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setsockopt from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn setsockopt(fd: c_int, level: c_int, opt: c_int, optval: *const anyopaque, optlen: c.socklen_t) ?void {\n    const raw = struct {\n        extern fn setsockopt(fd: c_int, level: c_int, opt: c_int, optval: *const anyopaque, optlen: c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "setsockopt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getsockopt_int from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn getsockopt_int(fd: c_int, level: c_int, opt: c_int) ?c_int {\n    var res: c_int = undefined;\n    var reslen: c.socklen_t = @sizeOf(c_int);\n    getsockopt(fd, level, opt, &res, &reslen) orelse return null;\n    assert(reslen == @sizeOf(c_int));\n    return res;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "getsockopt_int",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setsockopt_int from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn setsockopt_int(fd: c_int, level: c_int, opt: c_int, optval: c_int) ?void {\n    return setsockopt(fd, level, opt, &optval, @sizeOf(c_int));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "setsockopt_int",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ntohs from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn ntohs(net_v: u16) u16;\npub extern fn ntohl(net_v: u32) u32;\n\npub extern fn htons(host_v: u16) u16;\npub extern fn htonl(host_v: u32) u32;\n\npub inline fn inet_pton(family: c_int, str_ip: ConstStr, net_ip: *anyopaque) bool {\n    const raw = struct {\n        extern fn inet_pton(family: c_int, str_ip: ConstStr, net_ip: *anyopaque) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "ntohs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to inet_ntop from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn inet_ntop(family: c_int, net_ip: *const anyopaque, str_buf: *IpStrBuf) ?void {\n    const raw = struct {\n        extern fn inet_ntop(family: c_int, net_ip: *const anyopaque, str_buf: [*]u8, str_bufsz: c.socklen_t) ?ConstStr;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "inet_ntop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to epoll_create1 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn epoll_create1(flags: c_int) ?c_int {\n    const raw = struct {\n        extern fn epoll_create1(flags: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "epoll_create1",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to epoll_ctl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn epoll_ctl(epfd: c_int, op: c_int, fd: c_int, ev: ?*anyopaque) ?void {\n    const raw = struct {\n        extern fn epoll_ctl(epfd: c_int, op: c_int, fd: c_int, ev: ?*anyopaque) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "epoll_ctl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to epoll_wait from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn epoll_wait(epfd: c_int, evs: *anyopaque, n_evs: c_int, timeout: c_int) ?c_int {\n    const raw = struct {\n        extern fn epoll_wait(epfd: c_int, evs: *anyopaque, n_evs: c_int, timeout: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "epoll_wait",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to signal from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn signal(sig: c_int, handler: sighandler_t) void {\n    return c.sig_register(sig, handler);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "signal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SIG_DFL from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn SIG_DFL() sighandler_t {\n    return @ptrCast(sighandler_t, c.SIG_DEFAULT());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SIG_DFL",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SIG_IGN from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn SIG_IGN() sighandler_t {\n    return @ptrCast(sighandler_t, c.SIG_IGNORE());\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SIG_IGN",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ip_to_net from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn ip_to_net(ip: ConstStr, buf: *IpNetBuf) ?[]u8 {\n    if (inet_pton(c.AF_INET, ip, buf))\n        return buf[0..c.IPV4_LEN];\n    if (inet_pton(c.AF_INET6, ip, buf))\n        return buf[0..c.IPV6_LEN];\n    return null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "ip_to_net",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ip_family from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn ip_family(ip: ConstStr) ?c.sa_family_t {\n    var buf: IpNetBuf = undefined;\n    const net_ip = ip_to_net(ip, &buf) orelse return null;\n    return if (net_ip.len == c.IPV4_LEN) c.AF_INET else c.AF_INET6;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "ip_family",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to family from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn family(self: *const SockAddr) c.sa_family_t {\n        return self.sa.sa_family;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "family",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to len from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn len(self: *const SockAddr) c.socklen_t {\n        assert(self.is_sin() or self.is_sin6());\n        return if (self.is_sin())\n            @sizeOf(c.struct_sockaddr_in)\n        else\n            @sizeOf(c.struct_sockaddr_in6);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_sin from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn is_sin(self: *const SockAddr) bool {\n        return self.family() == c.AF_INET;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "is_sin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_sin6 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn is_sin6(self: *const SockAddr) bool {\n        return self.family() == c.AF_INET6;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "is_sin6",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eql from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn eql(self: *const SockAddr, other: *const SockAddr) bool {\n        const af = self.family();\n        return af == other.family() and switch (af) {\n            c.AF_INET => std.mem.eql(u8, std.mem.asBytes(&self.sin), std.mem.asBytes(&other.sin)),\n            c.AF_INET6 => std.mem.eql(u8, std.mem.asBytes(&self.sin6), std.mem.asBytes(&other.sin6)),\n            else => false,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_text from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn from_text(ip: ConstStr, port: u16) SockAddr {\n        var self: SockAddr = undefined;\n        @memset(std.mem.asBytes(&self), 0, @sizeOf(SockAddr));\n\n        if (ip_family(ip).? == c.AF_INET) {\n            const sin = &self.sin;\n            sin.sin_family = c.AF_INET;\n            assert(inet_pton(c.AF_INET, ip, &sin.sin_addr));\n            sin.sin_port = htons(port);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "from_text",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to to_text from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn to_text(self: *const SockAddr, ip: *IpStrBuf, port: *u16) void {\n        if (self.is_sin()) {\n            const sin = &self.sin;\n            assert(inet_ntop(c.AF_INET, &sin.sin_addr, ip) != null);\n            port.* = ntohs(sin.sin_port);\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "to_text",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to iovec_len from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn iovec_len(iovec: []const iovec_t) usize {\n    var len: usize = 0;\n    for (iovec) |*iov|\n        len += iov.iov_len;\n    return len;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "iovec_len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to iovec_dupe from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn iovec_dupe(iovec: []const iovec_t) []u8 {\n    const len = iovec_len(iovec);\n    const buffer = g.allocator.alloc(u8, len) catch unreachable;\n    var offset: usize = 0;\n    for (iovec) |*iov| {\n        @memcpy(buffer[offset..].ptr, iov.iov_base, iov.iov_len);\n        offset += iov.iov_len;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "iovec_dupe",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to iovec_skip from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn iovec_skip(iovec: *[]iovec_t, in_skip_len: usize) void {\n    var skip_len = in_skip_len;\n    while (skip_len > 0) {\n        const iov = &iovec.*[0];\n        if (skip_len >= iov.iov_len) {\n            iovec.* = iovec.*[1..];\n            skip_len -= iov.iov_len;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "iovec_skip",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to recvmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn recvmsg(fd: c_int, msg: *msghdr_t, flags: c_int) ?usize {\n    const n = c.RECVMSG(fd, @ptrCast(*c.MSGHDR, msg), flags);\n    return if (n >= 0) to_usize(n) else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "recvmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sendmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn sendmsg(fd: c_int, msg: *const msghdr_t, flags: c_int) ?usize {\n    const n = c.SENDMSG(fd, @ptrCast(*const c.MSGHDR, msg), flags);\n    return if (n >= 0) to_usize(n) else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "sendmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to recvmmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn recvmmsg(fd: c_int, msgs: []mmsghdr_t, flags: c_int) ?[]mmsghdr_t {\n    assert(msgs.len > 0);\n    const n = RECVMMSG(fd, msgs.ptr, to_uint(msgs.len), flags, null);\n    return if (n > 0) msgs[0..to_usize(n)] else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "recvmmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to sendmmsg from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn sendmmsg(fd: c_int, msgs: []mmsghdr_t, flags: c_int) ?[]mmsghdr_t {\n    assert(msgs.len > 0);\n    const n = SENDMMSG(fd, msgs.ptr, to_uint(msgs.len), flags);\n    return if (n > 0) msgs[0..to_usize(n)] else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "sendmmsg",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mmap from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn mmap(addr: ?*const anyopaque, len: usize, prot: c_int, flags: c_int, fd: c_int, offset: c.off_t) ?[]u8 {\n    const raw = struct {\n        extern fn mmap(addr: ?*const anyopaque, len: usize, prot: c_int, flags: c_int, fd: c_int, offset: c.off_t) [*]u8;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "mmap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to munmap from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn munmap(mem: []const u8) ?void {\n    const raw = struct {\n        extern fn munmap(addr: *const anyopaque, len: usize) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "munmap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mmap_file from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn mmap_file(filename: ConstStr) ?[]const u8 {\n    const fd = open(filename, c.O_RDONLY | c.O_CLOEXEC, null) orelse return null;\n    defer _ = close(fd);\n\n    const size = fstat_size(fd) orelse return null;\n    if (size == 0) return &[_]u8{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "mmap_file",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_library_init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_library_init() void {\n    assert(c.wolfSSL_Init() == c.WOLFSSL_SUCCESS);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_library_init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_error_string from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_error_string(err: c_int) ConstStr {\n    return switch (err) {\n        c.WOLFSSL_ERROR_SYSCALL => c.strerror(errno()),\n        else => c.wolfSSL_ERR_error_string(@bitCast(c_uint, err), null),\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_error_string",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_CTX_new from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_CTX_new() *c.WOLFSSL_CTX {\n    const ctx = c.wolfSSL_CTX_new(c.wolfTLS_client_method()).?;\n\n    // tls12 + tls13\n    assert(c.wolfSSL_CTX_SetMinVersion(ctx, c.WOLFSSL_TLSV1_2) == 1);\n\n    // cipher list\n    // openssl has a separate API for tls13, but wolfssl only has one\n    const chacha20 = \"TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305\";\n    const aes128gcm = \"TLS_AES_128_GCM_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\";\n    const cipher_list = if (c.has_aes()) aes128gcm ++ \":\" ++ chacha20 else chacha20 ++ \":\" ++ aes128gcm;\n    assert(c.wolfSSL_CTX_set_cipher_list(ctx, cipher_list) == 1);\n\n    // options\n    _ = c.wolfSSL_CTX_set_options(ctx, c.WOLFSSL_OP_NO_COMPRESSION | c.WOLFSSL_OP_NO_RENEGOTIATION);\n\n    return ctx;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_CTX_new",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_CTX_load_CA_certs from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_CTX_load_CA_certs(ctx: *c.WOLFSSL_CTX, path: ConstStr) ?void {\n    const ok = if (is_dir(path))\n        c.wolfSSL_CTX_load_verify_locations(ctx, null, path)\n    else // file\n        c.wolfSSL_CTX_load_verify_locations(ctx, path, null);\n    return if (ok == 1) {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_CTX_load_CA_certs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_CTX_load_sys_CA_certs from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_CTX_load_sys_CA_certs(ctx: *c.WOLFSSL_CTX) ?void {\n    return if (c.wolfSSL_CTX_load_system_CA_certs(ctx) == 1) {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_CTX_load_sys_CA_certs",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_new from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_new(ctx: *c.WOLFSSL_CTX) *c.WOLFSSL {\n    return c.wolfSSL_new(ctx).?;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_new",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_free from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_free(ssl: *c.WOLFSSL) void {\n    return c.wolfSSL_free(ssl);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_free",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_set_fd from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_set_fd(ssl: *c.WOLFSSL, fd: c_int) ?void {\n    return if (c.wolfSSL_set_fd(ssl, fd) == 1) {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_set_fd",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_set_host from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_set_host(ssl: *c.WOLFSSL, host: ?ConstStr, cert_verify: bool) ?void {\n    if (host) |name| {\n        // tls_ext: SNI (ClientHello)\n        if (c.wolfSSL_UseSNI(ssl, c.WOLFSSL_SNI_HOST_NAME, name, to_ushort(c.strlen(name))) != 1)\n            return null;\n\n        // check hostname on ssl cert validation\n        if (cert_verify and c.wolfSSL_check_domain_name(ssl, name) != 1)\n            return null;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_set_host",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_get_error from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "fn SSL_get_error(ssl: *c.WOLFSSL, res: c_int) c_int {\n    var err = c.wolfSSL_get_error(ssl, res);\n    if (err == c.SOCKET_PEER_CLOSED_E or err == c.SOCKET_ERROR_E)\n        // convert to socket error (errno)\n        err = if (errno() == 0) // TCP EOF\n            c.WOLFSSL_ERROR_ZERO_RETURN\n        else\n            c.WOLFSSL_ERROR_SYSCALL;\n    return err;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_get_error",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_connect from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_connect(ssl: *c.WOLFSSL, p_err: *c_int) ?void {\n    const res = c.wolfSSL_connect(ssl);\n    if (res == 1) {\n        return {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_connect",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_get_version from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_get_version(ssl: *const c.WOLFSSL) ConstStr {\n    return c.wolfSSL_get_version(ssl);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_get_version",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_get_cipher from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_get_cipher(ssl: *c.WOLFSSL) ConstStr {\n    return c.wolfSSL_get_cipher(ssl) orelse \"NULL\";\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_get_cipher",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_read from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_read(ssl: *c.WOLFSSL, buf: []u8, p_err: *c_int) ?usize {\n    const res = c.wolfSSL_read(ssl, buf.ptr, to_int(buf.len));\n    if (res > 0) {\n        return to_usize(res);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_read",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SSL_write from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "pub fn SSL_write(ssl: *c.WOLFSSL, buf: []const u8, p_err: *c_int) ?void {\n    const res = c.wolfSSL_write(ssl, buf.ptr, to_int(buf.len));\n    if (res > 0) {\n        return {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "function",
      "name": "SSL_write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to static from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const static = struct {\n        var buf: []u8 = &.{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "static",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn fprintf(file: *FILE, fmt: ConstStr, ...) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn snprintf(buf: [*]u8, len: usize, fmt: ConstStr, ...) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn fwrite(ptr: [*]const u8, size: usize, nitems: usize, file: *FILE) usize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn setvbuf(file: *FILE, buffer: ?[*]u8, mode: c_int, size: usize) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn time(t: ?*c.time_t) c.time_t;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn localtime(t: *const c.time_t) ?*c.struct_tm;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn setenv(env_name: ConstStr, value: ConstStr, is_replace: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn connect(fd: c_int, addr: *const anyopaque, addrlen: c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn accept4(fd: c_int, addr: ?*anyopaque, addrlen: ?*c.socklen_t, flags: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn send(fd: c_int, buf: [*]const u8, len: usize, flags: c_int) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn recv(fd: c_int, buf: [*]u8, len: usize, flags: c_int) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn sendto(fd: c_int, buf: [*]const u8, len: usize, flags: c_int, addr: *const anyopaque, addrlen: c.socklen_t) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn recvfrom(fd: c_int, buf: [*]u8, len: usize, flags: c_int, addr: ?*anyopaque, addrlen: ?*c.socklen_t) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn read(fd: c_int, buf: [*]u8, len: usize) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn write(fd: c_int, buf: [*]const u8, len: usize) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn writev(fd: c_int, iovec: [*]const iovec_t, iovec_n: c_int) isize;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn pipe2(fds: *[2]c_int, flags: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn socket(family: c_int, type: c_int, protocol: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn open(file: ConstStr, oflag: c_int, ...) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn close(fd: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn bind(fd: c_int, addr: *const anyopaque, addrlen: c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn listen(fd: c_int, backlog: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn getsockopt(fd: c_int, level: c_int, opt: c_int, optval: *anyopaque, optlen: *c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn setsockopt(fd: c_int, level: c_int, opt: c_int, optval: *const anyopaque, optlen: c.socklen_t) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn inet_pton(family: c_int, str_ip: ConstStr, net_ip: *anyopaque) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn inet_ntop(family: c_int, net_ip: *const anyopaque, str_buf: [*]u8, str_bufsz: c.socklen_t) ?ConstStr;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn epoll_create1(flags: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn epoll_ctl(epfd: c_int, op: c_int, fd: c_int, ev: ?*anyopaque) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn epoll_wait(epfd: c_int, evs: *anyopaque, n_evs: c_int, timeout: c_int) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn mmap(addr: ?*const anyopaque, len: usize, prot: c_int, flags: c_int, fd: c_int, offset: c.off_t) [*]u8;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to raw from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const raw = struct {\n        extern fn munmap(addr: *const anyopaque, len: usize) c_int;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "struct",
      "name": "raw",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to stdin from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const stdin: *FILE;\npub extern const stdout: *FILE;\npub extern const stderr: *FILE;\n\n// ==============================================================\n\npub inline fn fprintf(file: *FILE, comptime fmt: [:0]const u8, args: anytype) void {\n    const raw = struct {\n        extern fn fprintf(file: *FILE, fmt: ConstStr, ...) c_int;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "const",
      "name": "stdin",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to const_buf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const const_buf: [N]u8 = hello.*;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "const",
      "name": "const_buf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to const_buf_z from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const const_buf_z: [N:0]u8 = hello.*;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "const",
      "name": "const_buf_z",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to const_buf from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const const_buf: [N]u8 = hello.*;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "const",
      "name": "const_buf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to const_buf_z from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/cc.zig",
    "response": "const const_buf_z: [N:0]u8 = hello.*;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/cc.zig",
      "type": "const",
      "name": "const_buf_z",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to start from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig",
    "response": "pub fn start(comptime func: anytype, args: anytype) void {\n    const buf = g.allocator.alignedAlloc(u8, std.Target.stack_align, @frameSize(func)) catch unreachable;\n    _ = @asyncCall(buf, {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/co.zig",
      "type": "function",
      "name": "start",
      "difficulty": "hard"
    }
  },
  {
    "instruction": "Write a Zig function similar to do_resume from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig",
    "response": "pub fn do_resume(frame: anyframe) void {\n    resume frame;\n    check_terminated();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/co.zig",
      "type": "function",
      "name": "do_resume",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to terminate from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig",
    "response": "pub fn terminate(top_frame: anyframe, frame_size: usize) void {\n    assert(_terminated == null);\n    _terminated = top_frame;\n    _frame_size = frame_size;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/co.zig",
      "type": "function",
      "name": "terminate",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to data from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig",
    "response": "pub fn data(comptime T: type) *T {\n    comptime assert(@sizeOf(T) <= SIZE);\n    comptime assert(@alignOf(T) <= ALIGN);\n    return std.mem.bytesAsValue(T, _data[0..@sizeOf(T)]);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/co.zig",
      "type": "function",
      "name": "data",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to check_terminated from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/co.zig",
    "response": "fn check_terminated() void {\n    const top_frame = _terminated orelse return;\n    _terminated = null;\n\n    // https://github.com/ziglang/zig/issues/10622\n    const ptr = @intToPtr([*]u8, @ptrToInt(top_frame));\n    return g.allocator.free(ptr[0.._frame_size]);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/co.zig",
      "type": "function",
      "name": "check_terminated",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dnl.zig",
    "response": "fn init(tag_to_filenames: *const [c.TAG__MAX + 1]?filenames_t) void {\n    return c.dnl_init(tag_to_filenames, g.flags.gfwlist_first);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dnl.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dnl.zig",
    "response": "fn is_empty() bool {\n    return c.dnl_is_empty();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dnl.zig",
      "type": "function",
      "name": "is_empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_tag from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dnl.zig",
    "response": "fn get_tag(name: [*]const u8, namelen: c_int) Tag {\n    return if (namelen > 0 and !is_empty())\n        Tag.from_int(c.dnl_get_tag(name, namelen, g.default_tag.int()))\n    else\n        g.default_tag;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dnl.zig",
      "type": "function",
      "name": "get_tag",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ascii_namelen from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn ascii_namelen(qnamelen: c_int) c_int {\n    return c.dns_ascii_namelen(qnamelen);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "ascii_namelen",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to header_len from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn header_len() u16 {\n    return c.dns_header_len();\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "header_len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to question_len from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn question_len(qnamelen: c_int) u16 {\n    return c.dns_question_len(qnamelen);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "question_len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to question from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn question(msg: []const u8, qnamelen: c_int) []const u8 {\n    return msg[header_len() .. header_len() + question_len(qnamelen)];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "question",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_id from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn get_id(msg: []const u8) c.be16 {\n    return c.dns_get_id(msg.ptr);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "get_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_id from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn set_id(msg: []u8, id: c.be16) void {\n    return c.dns_set_id(msg.ptr, id);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "set_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_qtype from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn get_qtype(msg: []const u8, qnamelen: c_int) u16 {\n    return c.dns_get_qtype(msg.ptr, qnamelen);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "get_qtype",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_bufsz from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn get_bufsz(msg: []const u8, qnamelen: c_int) u16 {\n    return c.dns_get_bufsz(msg.ptr, cc.to_isize(msg.len), qnamelen);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "get_bufsz",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_rcode from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn get_rcode(msg: []const u8) u8 {\n    return c.dns_get_rcode(msg.ptr);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "get_rcode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_qname from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn get_qname(msg: []const u8, qnamelen: c_int) []const u8 {\n    return msg[header_len() .. header_len() + cc.to_usize(qnamelen) - 1];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "get_qname",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_tc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn is_tc(msg: []const u8) bool {\n    return c.dns_is_tc(msg.ptr);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "is_tc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is_good from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn is_good(msg: []const u8) bool {\n    return c.dns_is_good(msg.ptr);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "is_good",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to truncate from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn truncate(msg: []const u8) []u8 {\n    const res_msg = cc.static_buf(c.DNS_QMSG_MAXSIZE);\n    const len = c.dns_truncate(msg.ptr, cc.to_isize(msg.len), res_msg.ptr);\n    return res_msg[0..len];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "truncate",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to empty_reply from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn empty_reply(msg: []u8, qnamelen: c_int) []u8 {\n    const len = c.dns_empty_reply(msg.ptr, qnamelen);\n    return msg[0..len];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "empty_reply",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to check_query from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn check_query(msg: []u8, ascii_name: ?[*]u8, p_qnamelen: *c_int) bool {\n    return c.dns_check_query(msg.ptr, cc.to_isize(msg.len), ascii_name, p_qnamelen);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "check_query",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to check_reply from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn check_reply(msg: []u8, ascii_name: ?[*]u8, p_qnamelen: *c_int, p_newlen: *u16) bool {\n    return c.dns_check_reply(msg.ptr, cc.to_isize(msg.len), ascii_name, p_qnamelen, p_newlen);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "check_reply",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to from_int from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn from_int(v: c_int) TestIpResult {\n        return @intToEnum(TestIpResult, v);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "from_int",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to test_ip from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn test_ip(msg: []const u8, qnamelen: c_int, testctx: *const ipset.testctx_t) TestIpResult {\n    return TestIpResult.from_int(c.dns_test_ip(msg.ptr, cc.to_isize(msg.len), qnamelen, testctx));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "test_ip",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_ip from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn add_ip(msg: []const u8, qnamelen: c_int, addctx: *ipset.addctx_t) void {\n    return c.dns_add_ip(msg.ptr, cc.to_isize(msg.len), qnamelen, addctx);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "add_ip",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_ttl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn get_ttl(msg: []u8, qnamelen: c_int, nodata_ttl: i32, min_ttl: i32, max_ttl: i32) ?i32 {\n    const ttl = c.dns_get_ttl(msg.ptr, cc.to_isize(msg.len), qnamelen, nodata_ttl, min_ttl, max_ttl);\n    return if (ttl > 0) ttl else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "get_ttl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to update_ttl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn update_ttl(msg: []u8, qnamelen: c_int, ttl_change: i32) void {\n    return c.dns_update_ttl(msg.ptr, cc.to_isize(msg.len), qnamelen, ttl_change);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "update_ttl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to qname_domains from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn qname_domains(msg: []const u8, qnamelen: c_int, interest_levels: u8, p_domains: *[8][*]const u8, p_domain_end: *[*]const u8) ?u8 {\n    const ptr_domains = @ptrCast([*c][*c]const u8, p_domains);\n    const ptr_domain_end = @ptrCast([*c][*c]const u8, p_domain_end);\n    const n = c.dns_qname_domains(msg.ptr, qnamelen, interest_levels, ptr_domains, ptr_domain_end);\n    return if (n >= 0) cc.to_u8(n) else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "qname_domains",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ascii_to_wire from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn ascii_to_wire(ascii_name: []const u8, p_buf: *[c.DNS_NAME_WIRE_MAXLEN]u8, p_level: ?*u8) ?[]u8 {\n    const len = c.dns_ascii_to_wire(ascii_name.ptr, ascii_name.len, p_buf, p_level);\n    return if (len > 0) p_buf[0..len] else null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "ascii_to_wire",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to wire_to_ascii from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn wire_to_ascii(wire_name: []const u8, p_buf: *[c.DNS_NAME_MAXLEN:0]u8) bool {\n    return c.dns_wire_to_ascii(wire_name.ptr, cc.to_int(wire_name.len), p_buf);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "wire_to_ascii",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to make_reply from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/dns.zig",
    "response": "fn make_reply(rmsg: []u8, qmsg: []const u8, qnamelen: c_int, answer: []const u8, answer_n: u16) void {\n    return c.dns_make_reply(rmsg.ptr, qmsg.ptr, qnamelen, answer.ptr, answer.len, answer_n);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/dns.zig",
      "type": "function",
      "name": "make_reply",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to SliceIterator from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn SliceIterator(comptime T: type) type {\n    return struct {\n        slice: []const T, // ptr + len\n        pos: usize = 0, // next pos\n\n        const Self = @This();\n\n        fn init(comptime slice: []const T) Self {\n            return .{ .slice = slice }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "SliceIterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to empty from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn empty(comptime self: *const Self) bool {\n            return self.pos >= self.slice.len;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "empty",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to peek from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn peek(comptime self: *const Self) ?T {\n            if (self.empty()) return null;\n            return self.slice[self.pos];\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "peek",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to peek_force from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn peek_force(comptime self: *const Self) T {\n            if (self.empty()) unreachable;\n            return self.slice[self.pos];\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "peek_force",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to pop from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn pop(comptime self: *Self) ?T {\n            if (self.empty()) return null;\n            defer self.pos += 1;\n            return self.slice[self.pos];\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "pop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pop_force from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn pop_force(comptime self: *Self) T {\n            return self.pop().?;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "pop_force",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pop_force_void from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn pop_force_void(comptime self: *Self) void {\n            _ = self.pop_force();\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "pop_force_void",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse_flags from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn parse_flags(comptime format: *FormatIterator) void {\n    while (true) {\n        const char = format.peek() orelse return;\n        switch (char) {\n            '-', '+', ' ', '#', '0' => format.pop_force_void(),\n            else => return,\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "parse_flags",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse_width from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn parse_width(comptime format: *FormatIterator, comptime args: *ArgsIterator) void {\n    const char = format.peek() orelse return;\n    if (char == '*') {\n        // width in args\n        format.pop_force_void();\n        const arg = args.pop() orelse @compileError(\"expect a c_int for width '*'\");\n        if (arg.field_type != c_int) @compileError(\"expect a c_int for width '*', but got a \" ++ @typeName(arg.field_type));\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "parse_width",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse_precision from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn parse_precision(comptime format: *FormatIterator, comptime args: *ArgsIterator) bool {\n    const char = format.peek() orelse return false;\n\n    if (char == '.') {\n        format.pop_force_void();\n\n        // if neither a number nor * is used, the precision is taken as zero\n        const next_char = format.peek() orelse return true;\n\n        if (next_char == '*') {\n            // width in args\n            format.pop_force_void();\n            const arg = args.pop() orelse @compileError(\"expect a c_int for precision '*'\");\n            if (arg.field_type != c_int) @compileError(\"expect a c_int for precision '*', but got a \" ++ @typeName(arg.field_type));\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "parse_precision",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to desc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn desc(m: Modifier) [:0]const u8 {\n        return if (m == .none) \"\" else @tagName(m);\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "desc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse_modifier from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn parse_modifier(comptime format: *FormatIterator) Modifier {\n    const char = format.peek() orelse return .none;\n    switch (char) {\n        'h' => {\n            format.pop_force_void();\n            if (!format.empty() and format.peek_force() == 'h') {\n                format.pop_force_void();\n                return .hh;\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "parse_modifier",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse_specifier from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn parse_specifier(comptime format: *FormatIterator, comptime args: *ArgsIterator, modifier: Modifier, has_precision: bool) void {\n    const c_float_or_double = struct {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "parse_specifier",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to has_sentinel_0 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn has_sentinel_0(comptime T: type) bool {\n    const end = std.meta.sentinel(T) orelse return false;\n    return end == 0;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "has_sentinel_0",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to do_check from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "fn do_check(comptime in_format: [:0]const u8, comptime ArgsType: type) void {\n    var format = FormatIterator.init(in_format);\n\n    const typeinfo: Type = @typeInfo(ArgsType);\n\n    if (typeinfo != .Struct)\n        @compileError(\"args must be a tuple, got \" ++ @typeName(ArgsType));\n\n    const info = typeinfo.Struct;\n    if (!info.is_tuple)\n        @compileError(\"args must be a tuple, got \" ++ @typeName(ArgsType));\n\n    var args = ArgsIterator.init(info.fields);\n\n    // %[flags][width][.precision][modifier]specifier\n    while (format.pop()) |char| {\n        if (char != '%') continue;\n\n        // %% means % character\n        const next_char = format.peek() orelse @compileError(\"expect a specifier character\");\n        if (next_char == '%') {\n            format.pop_force_void();\n            continue;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "do_check",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to check from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "pub fn check(comptime format: [:0]const u8, args: anytype) void {\n    comptime do_check(format, @TypeOf(args));\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "function",
      "name": "check",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to c_float_or_double from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "const c_float_or_double = struct {}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "struct",
      "name": "c_float_or_double",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to typeinfo from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/fmtchk.zig",
    "response": "const typeinfo: Type = @typeInfo(ArgsType);",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/fmtchk.zig",
      "type": "const",
      "name": "typeinfo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BindPort from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/g.zig",
    "response": "pub const BindPort = struct {\n    port: u16,\n    tcp: bool,\n    udp: bool,\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/g.zig",
      "type": "struct",
      "name": "BindPort",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to TRUSTDNS_PACKET_MAX from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/g.zig",
    "response": "pub const TRUSTDNS_PACKET_MAX: u8 = 5;",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/g.zig",
      "type": "const",
      "name": "TRUSTDNS_PACKET_MAX",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn get(tag: Tag) *Group {\n    return &_all_groups[tag.int()];\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_upstream_group from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn get_upstream_group(tag: Tag) *Upstream.Group {\n    return &get(tag).upstream_group;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "get_upstream_group",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_ipset_addctx from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn get_ipset_addctx(tag: Tag) ?*ipset.addctx_t {\n    return get(tag).ipset_addctx;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "get_ipset_addctx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_ipset_name46 from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn get_ipset_name46(tag: Tag) *DynStr {\n    return &get(tag).ipset_name46;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "get_ipset_name46",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get_ip6_filter from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn get_ip6_filter(tag: Tag) IP6Filter {\n    return get(tag).ip6_filter;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "get_ip6_filter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_dnl from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn add_dnl(tag: Tag, filenames: []const u8) ?void {\n    const dnl_filenames = &get(tag).dnl_filenames;\n\n    var it = std.mem.split(u8, filenames, \",\");\n    while (it.next()) |path| {\n        if (path.len == 0 or path.len > c.PATH_MAX) {\n            opt.print(@src(), \"invalid path\", path);\n            return null;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "add_dnl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_upstream from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn add_upstream(tag: Tag, upstreams: []const u8) ?void {\n    if (tag.is_null())\n        return null;\n\n    const upstream_group = &get(tag).upstream_group;\n\n    var it = std.mem.split(u8, upstreams, \",\");\n    while (it.next()) |upstream|\n        upstream_group.add(tag, upstream) orelse return null;\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "add_upstream",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to set_ipset from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn set_ipset(tag: Tag, name46: []const u8) ?void {\n    if (tag.is_null())\n        return null;\n\n    get(tag).ipset_name46.set(name46);\n}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "set_ipset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_ip6_filter from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "fn add_ip6_filter(rules: ?[]const u8) ?void {\n    if (rules != null) {\n        var it = std.mem.split(u8, rules.?, \",\");\n        while (it.next()) |rule| {\n            // \"tag:xxx@ip:xxx\" | \"tag:xxx\"(ip:*) | \"ip:xxx\"(tag:*)\n            if (std.mem.startsWith(u8, rule, \"tag:\")) {\n                // \"tag:xxx@ip:xxx\" | \"tag:xxx\"(ip:*)\n                const tag_name_end = std.mem.indexOfScalar(u8, rule, '@') orelse rule.len;\n                const tag_name = cc.to_cstr(rule[4..tag_name_end]);\n                const tag = Tag.from_name(tag_name) orelse {\n                    opt.print(@src(), \"invalid tag\", rule[0..tag_name_end]);\n                    return null;\n                }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "add_ip6_filter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to on_start from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "pub fn on_start() void {\n    const src = @src();\n\n    const err: struct { tag: Tag, msg: cc.ConstStr }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "on_start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to require_ip_test from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "pub fn require_ip_test() bool {\n    for (_all_groups) |*group| {\n        if (group.ip6_filter.require_ip_test())\n            return true;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "function",
      "name": "require_ip_test",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Group from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "const Group = struct {\n    dnl_filenames: StrList = .{}",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "struct",
      "name": "Group",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to err from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/groups.zig",
    "response": "const err: struct { tag: Tag, msg: cc.ConstStr } = e: {\n        var tag_to_filenames = [_]?dnl.filenames_t{null} ** (c.TAG__MAX + 1);",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/groups.zig",
      "type": "const",
      "name": "err",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to filter_query from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/ip6_filter.zig",
    "response": "pub fn filter_query(filter: IP6Filter) bool {\n        return filter.china_ip and filter.non_china_ip;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/ip6_filter.zig",
      "type": "function",
      "name": "filter_query",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to filter_reply from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/ip6_filter.zig",
    "response": "pub fn filter_reply(filter: IP6Filter, msg: []const u8, qnamelen: c_int, in_res: ?dns.TestIpResult) bool {\n        if (filter.china_ip or filter.non_china_ip) {\n            const res = in_res orelse dns.test_ip(msg, qnamelen, g.chnroute_testctx);\n            return switch (res) {\n                .is_china_ip => filter.china_ip,\n                .non_china_ip => filter.non_china_ip,\n                else => false,\n            }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/ip6_filter.zig",
      "type": "function",
      "name": "filter_reply",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to require_ip_test from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/ip6_filter.zig",
    "response": "pub fn require_ip_test(filter: IP6Filter) bool {\n        return filter.china_ip != filter.non_china_ip;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/ip6_filter.zig",
      "type": "function",
      "name": "require_ip_test",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rule_desc from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/ip6_filter.zig",
    "response": "pub fn rule_desc(filter: IP6Filter) ?cc.ConstStr {\n        if (filter.china_ip and filter.non_china_ip)\n            return \"all_query\";\n        if (filter.china_ip)\n            return \"china_ip\";\n        if (filter.non_china_ip)\n            return \"non_china_ip\";\n        return null;\n    }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/ip6_filter.zig",
      "type": "function",
      "name": "rule_desc",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add_rule from zfl9/chinadns-ng",
    "context": "Repository: zfl9/chinadns-ng (1310 ⭐)\nFile: src/ip6_filter.zig",
    "response": "pub fn add_rule(filter: *IP6Filter, rule: ?[]const u8) ?void {\n        if (rule == null) {\n            filter.china_ip = true;\n            filter.non_china_ip = true;\n        }",
    "metadata": {
      "repo": "zfl9/chinadns-ng",
      "stars": 1310,
      "file": "src/ip6_filter.zig",
      "type": "function",
      "name": "add_rule",
      "difficulty": "easy"
    }
  }
]