[
  {
    "instruction": "Write a Zig function similar to libName from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "fn libName(b: *std.Build, name: []const u8, target: std.Target) []const u8 {\n\treturn switch(target.os.tag) {\n\t\t.windows => b.fmt(\"{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "libName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to linkLibraries from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "fn linkLibraries(b: *std.Build, exe: *std.Build.Step.Compile, useLocalDeps: bool) void {\n\tconst target = exe.root_module.resolved_target.?;\n\tconst t = target.result;\n\tconst optimize = exe.root_module.optimize.?;\n\n\texe.linkLibC();\n\texe.linkLibCpp();\n\n\tconst depsLib = b.fmt(\"cubyz_deps_{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "linkLibraries",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to makeModFeature from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "pub fn makeModFeature(step: *std.Build.Step, name: []const u8) !void {\n\tvar featureList: std.ArrayListUnmanaged(u8) = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "makeModFeature",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addModFeatureModule from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "pub fn addModFeatureModule(b: *std.Build, exe: *std.Build.Step.Compile, name: []const u8) !void {\n\tconst module = b.createModule(.{\n\t\t.root_source_file = b.path(b.fmt(\"mods/{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "addModFeatureModule",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to addModFeatures from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "fn addModFeatures(b: *std.Build, exe: *std.Build.Step.Compile) !void {\n\tconst step = try b.allocator.create(std.Build.Step);\n\tstep.* = std.Build.Step.init(.{\n\t\t.id = .custom,\n\t\t.name = \"Create Mods\",\n\t\t.owner = b,\n\t\t.makeFn = makeModFeaturesStep,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "addModFeatures",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to makeModFeaturesStep from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "pub fn makeModFeaturesStep(step: *std.Build.Step, _: std.Build.Step.MakeOptions) anyerror!void {\n\ttry makeModFeature(step, \"rotation\");\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "makeModFeaturesStep",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createLaunchConfig from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "fn createLaunchConfig() !void {\n\tstd.fs.cwd().access(\"launchConfig.zon\", .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "createLaunchConfig",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to build from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: build.zig",
    "response": "pub fn build(b: *std.Build) !void {\n\ttry createLaunchConfig();\n\n\t// Standard target options allows the person running `zig build` to choose\n\t// what target to build for. Here we do not override the defaults, which\n\t// means any target is allowed, and the default is native. Other options\n\t// for restricting supported target set are available.\n\tconst target = b.standardTargetOptions(.{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to hash from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn hash(_: HashMapKey, val: HashMapKey) u64 {\n\t\tvar hasher = std.hash.Wyhash.init(0);\n\t\tstd.hash.autoHashStrat(&hasher, val, .DeepRecursive);\n\t\treturn hasher.final();\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "hash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eql from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn eql(_: HashMapKey, val1: HashMapKey, val2: HashMapKey) bool {\n\t\tif(val1.radius != val2.radius) return false;\n\t\tif(val1.textureSlotOffset != val2.textureSlotOffset) return false;\n\t\treturn std.mem.eql(u8, val1.shellModelId, val2.shellModelId);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "fn init(blockData: u16) BranchData {\n\t\treturn .{.enabledConnections = @truncate(blockData)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isConnected from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "fn isConnected(self: @This(), neighbor: Neighbor) bool {\n\t\treturn (self.enabledConnections & Neighbor.bitMask(neighbor)) != 0;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "isConnected",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setConnection from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "fn setConnection(self: *@This(), neighbor: Neighbor, value: bool) void {\n\t\tif(value) {\n\t\t\tself.enabledConnections |= Neighbor.bitMask(neighbor);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "setConnection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn init() void {\n\tbranchModels = .initContext(main.globalAllocator.allocator, undefined);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn reset() void {\n\tbranchModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateQuad from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "fn rotateQuad(originalCorners: [4]Vec2f, pattern: Pattern, min: f32, max: f32, side: Neighbor, textureSlotOffset: u32) main.models.QuadInfo {\n\tvar corners: [4]Vec2f = originalCorners;\n\n\tswitch(pattern) {\n\t\t.dot, .cross => {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "rotateQuad",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addQuads from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "fn addQuads(pattern: Pattern, side: Neighbor, radius: f32, out: *main.List(main.models.QuadInfo), textureSlotOffset: u32) void {\n\tconst min: f32 = (8.0 - radius)/16.0;\n\tconst max: f32 = (8.0 + radius)/16.0;\n\tswitch(pattern) {\n\t\t.dot => {\n\t\t\tout.append(rotateQuad(.{\n\t\t\t\t.{min, min}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "addQuads",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getPattern from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn getPattern(data: BranchData, side: Neighbor) ?Pattern {\n\tconst posX = Neighbor.fromRelPos(side.textureX()).?;\n\tconst negX = Neighbor.fromRelPos(side.textureX()).?.reverse();\n\tconst posY = Neighbor.fromRelPos(side.textureY()).?;\n\tconst negY = Neighbor.fromRelPos(side.textureY()).?.reverse();\n\n\tconst connectedPosX = data.isConnected(posX);\n\tconst connectedNegX = data.isConnected(negX);\n\tconst connectedPosY = data.isConnected(posY);\n\tconst connectedNegY = data.isConnected(negY);\n\n\tconst count: u6 = @as(u6, @intFromBool(connectedPosX)) + @as(u6, @intFromBool(connectedNegX)) + @as(u6, @intFromBool(connectedPosY)) + @as(u6, @intFromBool(connectedNegY));\n\n\treturn switch(count) {\n\t\t0 => {\n\t\t\tif(data.isConnected(side)) {\n\t\t\t\treturn null;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "getPattern",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn createBlockModel(_: Block, modeData: *u16, zon: ZonElement) ModelIndex {\n\tvar radius = zon.get(f32, \"radius\", 4);\n\tconst radiusForComparisons = std.math.lossyCast(u16, @round(radius*65536.0/16.0));\n\tradius = @as(f32, @floatFromInt(radiusForComparisons))*16.0/65536.0;\n\tmodeData.* = radiusForComparisons;\n\tconst shellModelId = zon.get([]const u8, \"shellModel\", \"\");\n\tconst textureSlotOffset = zon.get(u32, \"textureSlotOffset\", 0);\n\tif(branchModels.get(.{.radius = radiusForComparisons, .shellModelId = shellModelId, .textureSlotOffset = textureSlotOffset}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data & 63);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\t@setEvalBranchQuota(65_536);\n\n\tcomptime var rotationTable: [4][16]u8 = undefined;\n\tcomptime for(0..16) |i| {\n\t\trotationTable[0][i] = @intCast(i << 2);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn generateData(\n\t_: *main.game.World,\n\t_: Vec3i,\n\t_: Vec3f,\n\t_: Vec3f,\n\t_: Vec3i,\n\tneighbor: ?Neighbor,\n\tcurrentBlock: *Block,\n\tneighborBlock: Block,\n\tblockPlacing: bool,\n) bool {\n\tconst canConnectToNeighbor = currentBlock.mode() == neighborBlock.mode() and currentBlock.modeData() == neighborBlock.modeData();\n\n\tif(blockPlacing or canConnectToNeighbor or !neighborBlock.replacable()) {\n\t\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\n\t\tvar currentData = BranchData.init(currentBlock.data);\n\t\t// Branch block upon placement should extend towards a block it was placed\n\t\t// on if the block is solid or also uses branch model.\n\t\tconst targetVal = ((!neighborBlock.replacable() and (!neighborBlock.viewThrough() or canConnectToNeighbor)) and (canConnectToNeighbor or neighborModel.isNeighborOccluded[neighbor.?.reverse().toInt()]));\n\t\tcurrentData.setConnection(neighbor.?, targetVal);\n\n\t\tconst result: u16 = currentData.enabledConnections;\n\t\tif(result == currentBlock.data) return false;\n\n\t\tcurrentBlock.data = result;\n\t\treturn true;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn updateData(block: *Block, neighbor: Neighbor, neighborBlock: Block) bool {\n\tconst canConnectToNeighbor = block.mode() == neighborBlock.mode() and block.modeData() == neighborBlock.modeData();\n\tvar currentData = BranchData.init(block.data);\n\n\t// Handle joining with other branches. While placed, branches extend in a\n\t// opposite direction than they were placed from, effectively connecting\n\t// to the block they were placed at.\n\tif(canConnectToNeighbor) {\n\t\tconst neighborData = BranchData.init(neighborBlock.data);\n\t\tcurrentData.setConnection(neighbor, neighborData.isConnected(neighbor.reverse()));\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "updateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to closestRay from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "fn closestRay(block: Block, relativePlayerPos: Vec3f, playerDir: Vec3f) ?u16 {\n\tvar closestIntersectionDistance: f64 = std.math.inf(f64);\n\tvar resultBitMask: ?u16 = null;\n\t{\n\t\tconst modelIndex = blocks.meshes.modelIndexStart(block);\n\t\tif(RotationMode.DefaultFunctions.rayModelIntersection(modelIndex, relativePlayerPos, playerDir)) |intersection| {\n\t\t\tclosestIntersectionDistance = intersection.distance;\n\t\t\tresultBitMask = 0;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "closestRay",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onBlockBreaking from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "pub fn onBlockBreaking(_: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f, currentData: *Block) void {\n\tif(closestRay(currentData.*, relativePlayerPos, playerDir)) |directionBitMask| {\n\t\t// If player destroys a central part of branch block, branch block is completely destroyed.\n\t\tif(directionBitMask == 0) {\n\t\t\tcurrentData.typ = 0;\n\t\t\tcurrentData.data = 0;\n\t\t\treturn;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "function",
      "name": "onBlockBreaking",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to HashMapKey from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const HashMapKey = struct {\n\tradius: u16,\n\tshellModelId: []const u8,\n\ttextureSlotOffset: u32,\n\n\tpub fn hash(_: HashMapKey, val: HashMapKey) u64 {\n\t\tvar hasher = std.hash.Wyhash.init(0);\n\t\tstd.hash.autoHashStrat(&hasher, val, .DeepRecursive);\n\t\treturn hasher.final();\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "struct",
      "name": "HashMapKey",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to angle from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const angle: f32 = @as(f32, @floatFromInt(@intFromEnum(typ)))*std.math.pi/2.0;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "angle",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to offX from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const offX: f32 = @floatFromInt(@intFromBool(@reduce(.Add, side.textureX()) < 0));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "offX",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to offY from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const offY: f32 = @floatFromInt(@intFromBool(@reduce(.Add, side.textureY()) < 0));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "offY",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to offset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const offset: Vec3f = @as(Vec3f, @floatFromInt(@abs(side.relPos())))*@as(Vec3f, @splat(if(side.isPositive()) max else min));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "offset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to res from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const res: main.models.QuadInfo = .{\n\t\t.corners = .{\n\t\t\tcorners3d[0] + offset,\n\t\t\tcorners3d[1] + offset,\n\t\t\tcorners3d[2] + offset,\n\t\t\tcorners3d[3] + offset,\n\t\t},\n\t\t.cornerUV = .{originalCorners[0], originalCorners[1], originalCorners[2], originalCorners[3]},\n\t\t.normal = @as(Vec3f, @floatFromInt(side.relPos())),\n\t\t.textureSlot = textureSlotOffset + @intFromEnum(pattern),\n\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "res",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to min from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const min: f32 = (8.0 - radius)/16.0;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "min",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to max from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const max: f32 = (8.0 + radius)/16.0;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "max",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to count from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const count: u6 = @as(u6, @intFromBool(connectedPosX)) + @as(u6, @intFromBool(connectedNegX)) + @as(u6, @intFromBool(connectedPosY)) + @as(u6, @intFromBool(connectedNegY));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "count",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to old from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const old: BranchData = .init(rotationTable[a - 1][i]);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "old",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to result from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const result: u16 = currentData.enabledConnections;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to result from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const result: u16 = currentData.enabledConnections;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to modelIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/branch.zig",
    "response": "const modelIndex: ModelIndex = blocks.meshes.modelIndexStart(block).add(directionBitMask);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/branch.zig",
      "type": "const",
      "name": "modelIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tcomptime var rotationTable: [4][64]u8 = undefined;\n\tcomptime for(0..64) |i| {\n\t\trotationTable[0][i] = @intCast(i);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn init() void {\n\trotatedModels = .init(main.globalAllocator.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn reset() void {\n\trotatedModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst modelId = zon.as([]const u8, \"cubyz:cube\");\n\tif(rotatedModels.get(modelId)) |modelIndex| return modelIndex;\n\n\tconst baseModel = main.models.getModelIndex(modelId).model();\n\t// Rotate the model:\n\tvar negXModel: ModelIndex = undefined;\n\tvar posXModel: ModelIndex = undefined;\n\tvar negYModel: ModelIndex = undefined;\n\tvar posYModel: ModelIndex = undefined;\n\tvar negZModel: ModelIndex = undefined;\n\tvar posZModel: ModelIndex = undefined;\n\tfor(1..64) |i| {\n\t\tconst carpetData: CarpetData = @bitCast(@as(u6, @intCast(i)));\n\t\tif(i & i - 1 == 0) {\n\t\t\tif(carpetData.negX) negXModel = baseModel.transformModel(rotation.rotationMatrixTransform, .{Mat4f.rotationZ(-std.math.pi/2.0).mul(Mat4f.rotationX(-std.math.pi/2.0))}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@as(u6, @truncate(block.data)) -| 1);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, relativePlayerPos: Vec3f, playerDir: Vec3f, relativeDir: Vec3i, _: ?Neighbor, currentData: *Block, neighbor: Block, _: bool) bool {\n\tif(neighbor.mode() == currentData.mode()) parallelPlacing: {\n\t\tconst bit = closestRay(.bit, neighbor, null, relativePlayerPos - @as(Vec3f, @floatFromInt(relativeDir)), playerDir);\n\t\tconst bitData: CarpetData = @bitCast(@as(u6, @truncate(bit)));\n\t\tif((bitData.negX or bitData.posX) and relativeDir[0] != 0) break :parallelPlacing;\n\t\tif((bitData.negY or bitData.posY) and relativeDir[1] != 0) break :parallelPlacing;\n\t\tif((bitData.negZ or bitData.posZ) and relativeDir[2] != 0) break :parallelPlacing;\n\t\tif(currentData.data & bit == bit) return false;\n\t\tcurrentData.data |= bit;\n\t\treturn true;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to closestRay from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "fn closestRay(comptime typ: enum {bit, intersection}, block: Block, _: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f) if(typ == .intersection) ?RayIntersectionResult else u16 {\n\tvar result: ?RayIntersectionResult = null;\n\tvar resultBit: u16 = 0;\n\tfor([_]u16{1, 2, 4, 8, 16, 32}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "closestRay",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to rayIntersection from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn rayIntersection(block: Block, item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f) ?RayIntersectionResult {\n\treturn closestRay(.intersection, block, item, relativePlayerPos, playerDir);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "rayIntersection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onBlockBreaking from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn onBlockBreaking(item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f, currentData: *Block) void {\n\tconst bit = closestRay(.bit, currentData.*, item, relativePlayerPos, playerDir);\n\tcurrentData.data &= ~bit;\n\tif(currentData.data == 0) currentData.typ = 0;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "onBlockBreaking",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub fn canBeChangedInto(oldBlock: Block, newBlock: Block, item: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) RotationMode.CanBeChangedInto {\n\treturn torch.canBeChangedInto(oldBlock, newBlock, item, shouldDropSourceBlockOnSuccess);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "function",
      "name": "canBeChangedInto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to naturalStandard from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "pub const naturalStandard: u16 = 0b10000;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "const",
      "name": "naturalStandard",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to old from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "const old: CarpetData = @bitCast(@as(u6, @intCast(rotationTable[a - 1][i])));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "const",
      "name": "old",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to new from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "const new: CarpetData = .{\n\t\t\t\t.posZ = old.posZ,\n\t\t\t\t.negZ = old.negZ,\n\t\t\t\t.posY = old.posX,\n\t\t\t\t.negY = old.negX,\n\t\t\t\t.negX = old.posY,\n\t\t\t\t.posX = old.negY,\n\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "const",
      "name": "new",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to carpetData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "const carpetData: CarpetData = @bitCast(@as(u6, @intCast(i)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "const",
      "name": "carpetData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to bitData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "const bitData: CarpetData = @bitCast(@as(u6, @truncate(bit)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "const",
      "name": "bitData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to modelIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/carpet.zig",
    "response": "const modelIndex: ModelIndex = blocks.meshes.modelIndexStart(block).add(bit - 1);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/carpet.zig",
      "type": "const",
      "name": "modelIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig",
    "response": "pub fn init() void {\n\trotatedModels = .init(main.globalAllocator.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/direction.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig",
    "response": "pub fn reset() void {\n\trotatedModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/direction.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst modelId = zon.as([]const u8, \"cubyz:cube\");\n\tif(rotatedModels.get(modelId)) |modelIndex| return modelIndex;\n\n\tconst baseModel = main.models.getModelIndex(modelId).model();\n\t// Rotate the model:\n\tconst modelIndex = baseModel.transformModel(rotation.rotationMatrixTransform, .{Mat4f.identity()}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/direction.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@min(block.data, 5));\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/direction.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tcomptime var rotationTable: [4][6]u8 = undefined;\n\tcomptime for(0..6) |i| {\n\t\trotationTable[0][i] = i;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/direction.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, neighbor: ?Neighbor, currentData: *Block, _: Block, blockPlacing: bool) bool {\n\tif(blockPlacing) {\n\t\tcurrentData.data = neighbor.?.reverse().toInt();\n\t\treturn true;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/direction.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to neighbor from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/direction.zig",
    "response": "const neighbor: Neighbor = @enumFromInt(rotationTable[a - 1][i]);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/direction.zig",
      "type": "const",
      "name": "neighbor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "pub fn init() void {\n\tfenceModels = .init(main.globalAllocator.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "pub fn reset() void {\n\tfenceModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tcomptime var rotationTable: [4][16]u8 = undefined;\n\tcomptime for(0..16) |i| {\n\t\trotationTable[0][i] = @intCast(i);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fenceTransform from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "fn fenceTransform(quad: *main.models.QuadInfo, data: FenceData) void {\n\tfor(&quad.corners, &quad.cornerUV) |*corner, *cornerUV| {\n\t\tif(!data.isConnectedNegX and corner[0] == 0) {\n\t\t\tcorner[0] = 0.5;\n\t\t\tcornerUV[0] = 0.5;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "function",
      "name": "fenceTransform",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst modelId = zon.as([]const u8, \"cubyz:cube\");\n\tif(fenceModels.get(modelId)) |modelIndex| return modelIndex;\n\n\tconst baseModel = main.models.getModelIndex(modelId).model();\n\t// Rotate the model:\n\tconst modelIndex: ModelIndex = baseModel.transformModel(fenceTransform, .{@as(FenceData, @bitCast(@as(u4, 0)))}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data & 15);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "pub fn updateData(block: *Block, neighbor: Neighbor, neighborBlock: Block) bool {\n\tconst blockBaseModelIndex = blocks.meshes.modelIndexStart(block.*);\n\tconst neighborBaseModelIndex = blocks.meshes.modelIndexStart(neighborBlock);\n\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\tconst targetVal = !neighborBlock.replacable() and !neighborBlock.transparent() and (blockBaseModelIndex == neighborBaseModelIndex or neighborModel.isNeighborOccluded[neighbor.reverse().toInt()]);\n\tvar currentData: FenceData = @bitCast(@as(u4, @truncate(block.data)));\n\tswitch(neighbor) {\n\t\t.dirNegX => {\n\t\t\tcurrentData.isConnectedNegX = targetVal;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "function",
      "name": "updateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to old from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "const old: FenceData = @bitCast(@as(u4, @intCast(rotationTable[a - 1][i])));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "const",
      "name": "old",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to new from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "const new: FenceData = .{\n\t\t\t\t.isConnectedNegY = old.isConnectedNegX,\n\t\t\t\t.isConnectedPosY = old.isConnectedPosX,\n\t\t\t\t.isConnectedPosX = old.isConnectedNegY,\n\t\t\t\t.isConnectedNegX = old.isConnectedPosY,\n\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "const",
      "name": "new",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to modelIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "const modelIndex: ModelIndex = baseModel.transformModel(fenceTransform, .{@as(FenceData, @bitCast(@as(u4, 0)))});",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "const",
      "name": "modelIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to result from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/fence.zig",
    "response": "const result: u16 = @as(u4, @bitCast(currentData));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/fence.zig",
      "type": "const",
      "name": "result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/hanging.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst topModelIndex = main.models.getModelIndex(zon.get([]const u8, \"top\", \"cubyz:cube\"));\n\tconst bottomModelIndex = main.models.getModelIndex(zon.get([]const u8, \"bottom\", \"cubyz:cube\"));\n\n\tconst modelIndex = topModelIndex.model().transformModel(transform, .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/hanging.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/hanging.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data%2);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/hanging.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/hanging.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, neighbor: ?Neighbor, currentData: *Block, neighborBlock: Block, blockPlacing: bool) bool {\n\tconst sameBlock = neighborBlock.typ == currentData.typ;\n\tif(blockPlacing) {\n\t\tif(neighbor != Neighbor.dirUp) return false;\n\t\tif(!sameBlock) {\n\t\t\tconst neighborModel = neighborBlock.mode().model(neighborBlock).model();\n\t\t\tconst support = !neighborBlock.replacable() and neighborModel.neighborFacingQuads[Neighbor.dirDown.toInt()].len != 0;\n\t\t\tif(!support) return false;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/hanging.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/hanging.zig",
    "response": "pub fn updateData(block: *Block, neighbor: Neighbor, neighborBlock: Block) bool {\n\tif(neighbor != .dirDown) return false;\n\n\tconst newData: u16 = if(neighborBlock.typ == block.typ) 0 else 1;\n\n\tif(newData == block.data) return false;\n\tblock.data = newData;\n\treturn true;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/hanging.zig",
      "type": "function",
      "name": "updateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to newData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/hanging.zig",
    "response": "const newData: u16 = if(neighborBlock.typ == block.typ) 0 else 1;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/hanging.zig",
      "type": "const",
      "name": "newData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromBranchDirection from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "fn fromBranchDirection(dir: DirectionWithSign) DirectionWithoutSign {\n\t\treturn switch(dir) {\n\t\t\t.negYDir => .y,\n\t\t\t.posXDir => .x,\n\t\t\t.posYDir => .y,\n\t\t\t.negXDir => .x,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "function",
      "name": "fromBranchDirection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateQuad from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "fn rotateQuad(pattern: Pattern, side: Neighbor) main.models.QuadInfo {\n\tconst originalCorners: [4]Vec2f = .{\n\t\t.{0, 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "function",
      "name": "rotateQuad",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getPattern from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "fn getPattern(data: LogData, side: Neighbor) Pattern {\n\tif(data.isConnected(side)) {\n\t\treturn .cut;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "function",
      "name": "getPattern",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, _: ZonElement) ModelIndex {\n\tif(modelIndex) |idx| return idx;\n\n\tfor(0..64) |i| {\n\t\tvar quads = main.List(main.models.QuadInfo).init(main.stackAllocator);\n\t\tdefer quads.deinit();\n\n\t\tconst data = LogData.init(@intCast(i));\n\n\t\tfor(Neighbor.iterable) |neighbor| {\n\t\t\tconst pattern = getPattern(data, neighbor);\n\n\t\t\tquads.append(rotateQuad(pattern, neighbor));\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data & 63);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "pub fn generateData(\n\t_: *main.game.World,\n\tpos: Vec3i,\n\t_: Vec3f,\n\t_: Vec3f,\n\t_: Vec3i,\n\tneighbor: ?Neighbor,\n\tcurrentBlock: *Block,\n\tneighborBlock: Block,\n\tblockPlacing: bool,\n) bool {\n\tconst canConnectToNeighbor = currentBlock.mode() == neighborBlock.mode();\n\n\tif(blockPlacing or canConnectToNeighbor or !neighborBlock.replacable()) {\n\t\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\n\t\tvar currentData = LogData.init(currentBlock.data);\n\t\t// Log block upon placement should extend towards a block it was placed\n\t\t// on if the block is solid or also uses log model.\n\t\tconst targetVal = ((!neighborBlock.replacable() and (!neighborBlock.viewThrough() or canConnectToNeighbor)) and (canConnectToNeighbor or neighborModel.isNeighborOccluded[neighbor.?.reverse().toInt()]));\n\t\tcurrentData.setConnection(neighbor.?, targetVal);\n\n\t\tfor(Neighbor.iterable) |side| {\n\t\t\tif(side == neighbor.?) {\n\t\t\t\tcontinue;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "pub fn updateData(block: *Block, neighbor: Neighbor, neighborBlock: Block) bool {\n\tconst canConnectToNeighbor = block.mode() == neighborBlock.mode();\n\tvar currentData = LogData.init(block.data);\n\n\t// Handle joining with other logs. While placed, logs extend in a\n\t// opposite direction than they were placed from, effectively connecting\n\t// to the block they were placed at.\n\tif(canConnectToNeighbor) {\n\t\tconst neighborData = LogData.init(neighborBlock.data);\n\t\tcurrentData.setConnection(neighbor, neighborData.isConnected(neighbor.reverse()));\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "function",
      "name": "updateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to originalCorners from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "const originalCorners: [4]Vec2f = .{\n\t\t.{0, 0},\n\t\t.{0, 1},\n\t\t.{1, 0},\n\t\t.{1, 1},\n\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "const",
      "name": "originalCorners",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to angle from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "const angle: f32 = -@as(f32, @floatFromInt(@intFromEnum(dir)))*std.math.pi/2.0;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "const",
      "name": "angle",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to offX from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "const offX: f32 = @floatFromInt(@intFromBool(@reduce(.Add, side.textureX()) < 0));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "const",
      "name": "offX",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to offY from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "const offY: f32 = @floatFromInt(@intFromBool(@reduce(.Add, side.textureY()) < 0));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "const",
      "name": "offY",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to offset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "const offset: Vec3f = @floatFromInt(@intFromBool(side.relPos() == Vec3i{1, 1, 1}));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "const",
      "name": "offset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to res from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "const res: main.models.QuadInfo = .{\n\t\t.corners = .{\n\t\t\tcorners3d[0] + offset,\n\t\t\tcorners3d[1] + offset,\n\t\t\tcorners3d[2] + offset,\n\t\t\tcorners3d[3] + offset,\n\t\t},\n\t\t.cornerUV = .{corners[0], corners[1], corners[2], corners[3]},\n\t\t.normal = @as(Vec3f, @floatFromInt(side.relPos())),\n\t\t.textureSlot = @intFromEnum(pattern),\n\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "const",
      "name": "res",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to result from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/log.zig",
    "response": "const result: u16 = currentData.enabledConnections;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/log.zig",
      "type": "const",
      "name": "result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/ore.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst modelId = zon.as([]const u8, \"cubyz:cube\");\n\tif(!std.mem.eql(u8, modelId, \"cubyz:cube\")) {\n\t\tstd.log.err(\"Ores can only be use on cube models, found '{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/ore.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/ore.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, _: ?Neighbor, _: *Block, _: Block, _: bool) bool {\n\treturn false;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/ore.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to modifyBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/ore.zig",
    "response": "pub fn modifyBlock(block: *Block, newBlockType: u16) bool {\n\tif(block.transparent() or block.viewThrough()) return false;\n\tif(!main.blocks.meshes.modelIndexStart(block.*).model().allNeighborsOccluded) return false;\n\tif(block.data != 0) return false;\n\tblock.data = block.typ;\n\tblock.typ = newBlockType;\n\treturn true;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/ore.zig",
      "type": "function",
      "name": "modifyBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/ore.zig",
    "response": "pub fn canBeChangedInto(oldBlock: Block, newBlock: Block, _: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) RotationMode.CanBeChangedInto {\n\tif(oldBlock == newBlock) return .no;\n\tif(oldBlock.transparent() or oldBlock.viewThrough()) return .no;\n\tif(!main.blocks.meshes.modelIndexStart(oldBlock).model().allNeighborsOccluded) return .no;\n\tif(oldBlock.data != 0) return .no;\n\tif(newBlock.data != oldBlock.typ) return .no;\n\tshouldDropSourceBlockOnSuccess.* = false;\n\treturn .{.yes_costsItems = 1}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/ore.zig",
      "type": "function",
      "name": "canBeChangedInto",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to onBlockBreaking from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/ore.zig",
    "response": "pub fn onBlockBreaking(_: ?main.items.Item, _: Vec3f, _: Vec3f, currentData: *Block) void {\n\tcurrentData.typ = currentData.data;\n\tcurrentData.data = 0;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/ore.zig",
      "type": "function",
      "name": "onBlockBreaking",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "pub fn init() void {\n\trotatedModels = .init(main.globalAllocator.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "pub fn reset() void {\n\trotatedModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst modelId = zon.as([]const u8, \"cubyz:cube\");\n\tif(rotatedModels.get(modelId)) |modelIndex| return modelIndex;\n\n\tconst baseModel = main.models.getModelIndex(modelId).model();\n\t// Rotate the model:\n\tconst modelIndex: ModelIndex = baseModel.transformModel(rotation.rotationMatrixTransform, .{Mat4f.rotationZ(std.math.pi/2.0)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@min(block.data, 3));\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tcomptime var rotationTable: [4][4]u8 = undefined;\n\tcomptime for(0..4) |i| {\n\t\trotationTable[0][i] = i;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, playerDir: Vec3f, _: Vec3i, _: ?Neighbor, currentData: *Block, _: Block, blockPlacing: bool) bool {\n\tif(blockPlacing) {\n\t\tif(@abs(playerDir[0]) > @abs(playerDir[1])) {\n\t\t\tconst dir: Neighbor = if(playerDir[0] < 0) .dirNegX else .dirPosX;\n\t\t\tcurrentData.data = dir.toInt() - 2;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to modelIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "const modelIndex: ModelIndex = baseModel.transformModel(rotation.rotationMatrixTransform, .{Mat4f.rotationZ(std.math.pi/2.0)});",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "const",
      "name": "modelIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to neighbor from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "const neighbor: Neighbor = @enumFromInt(rotationTable[a - 1][i] + 2);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "const",
      "name": "neighbor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to dir from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "const dir: Neighbor = if(playerDir[0] < 0) .dirNegX else .dirPosX;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "const",
      "name": "dir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to dir from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/planar.zig",
    "response": "const dir: Neighbor = if(playerDir[1] < 0) .dirNegY else .dirPosY;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/planar.zig",
      "type": "const",
      "name": "dir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub fn init() void {\n\trotatedModels = .init(main.globalAllocator.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub fn reset() void {\n\trotatedModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst floorModelId: []const u8 = zon.get([]const u8, \"floor\", \"cubyz:cube\");\n\tconst sideModelId: []const u8 = zon.get([]const u8, \"side\", \"cubyz:cube\");\n\tconst ceilingModelId: []const u8 = zon.get([]const u8, \"ceiling\", \"cubyz:cube\");\n\tconst key: []const u8 = std.mem.concat(main.stackAllocator.allocator, u8, &.{floorModelId, sideModelId, ceilingModelId}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@min(centerRotations*2 + sideRotations, block.data));\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tconst rotationTable: [4][2*centerRotations + sideRotations]u8 = .{\n\t\t.{\n\t\t\t0,  1,  2,  3,  4,  5,  6,  7,\n\t\t\t8,  9,  10, 11, 12, 13, 14, 15,\n\t\t\t16, 17, 18, 19,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getRotationFromDir from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "fn getRotationFromDir(dir: Vec3f) u16 {\n\tconst x = dir[0];\n\tconst y = dir[1];\n\tvar data: u3 = 0;\n\tif(@abs(x) > @abs(y)) {\n\t\tif(x < 0) {\n\t\t\tdata = 0;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "getRotationFromDir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, playerDir: Vec3f, relativeDir: Vec3i, neighbor: ?Neighbor, currentData: *Block, _: Block, blockPlacing: bool) bool {\n\tif(neighbor == null) return false;\n\tif(!blockPlacing) return false;\n\tcurrentData.data = switch(Neighbor.fromRelPos(relativeDir) orelse unreachable) {\n\t\t.dirNegX => 2*centerRotations,\n\t\t.dirNegY => 2*centerRotations + 1,\n\t\t.dirPosX => 2*centerRotations + 2,\n\t\t.dirPosY => 2*centerRotations + 3,\n\t\t.dirUp => centerRotations + getRotationFromDir(playerDir),\n\t\t.dirDown => getRotationFromDir(playerDir),\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub fn updateData(block: *Block, neighbor: Neighbor, _: Block) bool {\n\tconst shouldBeBroken = switch(neighbor) {\n\t\t.dirNegX => block.data == 2*centerRotations,\n\t\t.dirNegY => block.data == 2*centerRotations + 1,\n\t\t.dirPosX => block.data == 2*centerRotations + 2,\n\t\t.dirPosY => block.data == 2*centerRotations + 3,\n\t\t.dirDown => block.data < centerRotations,\n\t\t.dirUp => block.data >= centerRotations and block.data < 2*centerRotations,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "function",
      "name": "updateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to naturalStandard from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "pub const naturalStandard: u16 = 0;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "const",
      "name": "naturalStandard",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to floorModelId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "const floorModelId: []const u8 = zon.get([]const u8, \"floor\", \"cubyz:cube\");",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "const",
      "name": "floorModelId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sideModelId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "const sideModelId: []const u8 = zon.get([]const u8, \"side\", \"cubyz:cube\");",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "const",
      "name": "sideModelId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ceilingModelId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "const ceilingModelId: []const u8 = zon.get([]const u8, \"ceiling\", \"cubyz:cube\");",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "const",
      "name": "ceilingModelId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to key from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "const key: []const u8 = std.mem.concat(main.stackAllocator.allocator, u8, &.{floorModelId, sideModelId, ceilingModelId}) catch unreachable;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "const",
      "name": "key",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to rotationTable from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/sign.zig",
    "response": "const rotationTable: [4][2*centerRotations + sideRotations]u8 = .{\n\t\t.{\n\t\t\t0,  1,  2,  3,  4,  5,  6,  7,\n\t\t\t8,  9,  10, 11, 12, 13, 14, 15,\n\t\t\t16, 17, 18, 19,\n\t\t},\n\t\t.{\n\t\t\t2,  3,  4,  5,  6,  7,  0, 1,\n\t\t\t10, 11, 12, 13, 14, 15, 8, 9,\n\t\t\t17, 18, 19, 16,\n\t\t},\n\t\t.{\n\t\t\t4,  5,  6,  7,  0, 1, 2,  3,\n\t\t\t12, 13, 14, 15, 8, 9, 10, 11,\n\t\t\t18, 19, 16, 17,\n\t\t},\n\t\t.{\n\t\t\t6,  7,  0,  1,  2,  3,  4,  5,\n\t\t\t14, 15, 8,  9,  10, 11, 12, 13,\n\t\t\t19, 16, 17, 18,\n\t\t},\n\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/sign.zig",
      "type": "const",
      "name": "rotationTable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to subBlockMask from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "fn subBlockMask(x: u1, y: u1, z: u1) u8 {\n\treturn @as(u8, 1) << ((@as(u3, x)*2 + @as(u3, y))*2 + z);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "subBlockMask",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasSubBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "fn hasSubBlock(stairData: u8, x: u1, y: u1, z: u1) bool {\n\treturn stairData & subBlockMask(x, y, z) == 0;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "hasSubBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\t@setEvalBranchQuota(65_536);\n\n\tcomptime var rotationTable: [4][256]u8 = undefined;\n\tcomptime for(0..4) |a| {\n\t\tfor(0..256) |old| {\n\t\t\tvar new: u8 = 0b11_11_11_11;\n\n\t\t\tfor(0..2) |i| for(0..2) |j| for(0..2) |k| {\n\t\t\t\tconst sin: f32 = @sin((std.math.pi/2.0)*@as(f32, @floatFromInt(a)));\n\t\t\t\tconst cos: f32 = @cos((std.math.pi/2.0)*@as(f32, @floatFromInt(a)));\n\n\t\t\t\tconst x: f32 = (@as(f32, @floatFromInt(i)) - 0.5)*2.0;\n\t\t\t\tconst y: f32 = (@as(f32, @floatFromInt(j)) - 0.5)*2.0;\n\n\t\t\t\tconst rX = @intFromBool(x*cos - y*sin > 0);\n\t\t\t\tconst rY = @intFromBool(x*sin + y*cos > 0);\n\n\t\t\t\tif(hasSubBlock(@intCast(old), @intCast(i), @intCast(j), @intCast(k))) {\n\t\t\t\t\tnew &= ~subBlockMask(rX, rY, @intCast(k));\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to mergeFaces from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "fn mergeFaces(faceVisible: [2][2]bool, mem: []GreedyFaceInfo) []GreedyFaceInfo {\n\tvar faces: usize = 0;\n\tif(faceVisible[0][0]) {\n\t\tif(faceVisible[0][1]) {\n\t\t\tif(faceVisible[1][0] and faceVisible[1][1]) {\n\t\t\t\t// One big face:\n\t\t\t\tmem[faces] = .{.min = .{0, 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "mergeFaces",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, _: ZonElement) ModelIndex {\n\tif(modelIndex) |idx| return idx;\n\tfor(0..256) |i| {\n\t\tvar quads = main.List(main.models.QuadInfo).init(main.stackAllocator);\n\t\tdefer quads.deinit();\n\t\tfor(Neighbor.iterable) |neighbor| {\n\t\t\tconst xComponent = @abs(neighbor.textureX());\n\t\t\tconst yComponent = @abs(neighbor.textureY());\n\t\t\tconst normal = Vec3i{neighbor.relX(), neighbor.relY(), neighbor.relZ()}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(block.data & 255);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, _: ?Neighbor, currentData: *Block, _: Block, blockPlacing: bool) bool {\n\tif(blockPlacing) {\n\t\tcurrentData.data = 0;\n\t\treturn true;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to closestRay from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "fn closestRay(comptime typ: enum {bit, intersection}, block: Block, relativePlayerPos: Vec3f, playerDir: Vec3f) if(typ == .intersection) ?RayIntersectionResult else u16 {\n\tvar result: ?RayIntersectionResult = null;\n\tvar resultBit: u16 = 0;\n\tfor([_]u16{1, 2, 4, 8, 16, 32, 64, 128}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "closestRay",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to rayIntersection from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "pub fn rayIntersection(block: Block, item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f) ?RayIntersectionResult {\n\tif(item) |_item| {\n\t\tswitch(_item) {\n\t\t\t.baseItem => |baseItem| {\n\t\t\t\tif(std.mem.eql(u8, baseItem.id(), \"cubyz:chisel\")) { // Select only one eighth of a block\n\t\t\t\t\treturn closestRay(.intersection, block, relativePlayerPos, playerDir);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "rayIntersection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onBlockBreaking from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "pub fn onBlockBreaking(item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f, currentData: *Block) void {\n\tif(item) |_item| {\n\t\tswitch(_item) {\n\t\t\t.baseItem => |baseItem| {\n\t\t\t\tif(std.mem.eql(u8, baseItem.id(), \"cubyz:chisel\")) { // Break only one eigth of a block\n\t\t\t\t\tcurrentData.data |= closestRay(.bit, currentData.*, relativePlayerPos, playerDir);\n\t\t\t\t\tif(currentData.data == 255) currentData.* = .{.typ = 0, .data = 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "onBlockBreaking",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "pub fn canBeChangedInto(oldBlock: Block, newBlock: Block, item: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) RotationMode.CanBeChangedInto {\n\tif(oldBlock.typ != newBlock.typ) return RotationMode.DefaultFunctions.canBeChangedInto(oldBlock, newBlock, item, shouldDropSourceBlockOnSuccess);\n\tif(oldBlock.data == newBlock.data) return .no;\n\tif(item.item != null and item.item.? == .baseItem and std.mem.eql(u8, item.item.?.baseItem.id(), \"cubyz:chisel\")) {\n\t\treturn .yes; // TODO: Durability change, after making the chisel a proper tool.\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "function",
      "name": "canBeChangedInto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to GreedyFaceInfo from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const GreedyFaceInfo = struct {min: Vec2f, max: Vec2f}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "struct",
      "name": "GreedyFaceInfo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sin from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const sin: f32 = @sin((std.math.pi/2.0)*@as(f32, @floatFromInt(a)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "sin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cos from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const cos: f32 = @cos((std.math.pi/2.0)*@as(f32, @floatFromInt(a)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "cos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to x from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const x: f32 = (@as(f32, @floatFromInt(i)) - 0.5)*2.0;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "x",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to y from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const y: f32 = (@as(f32, @floatFromInt(j)) - 0.5)*2.0;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "y",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to zMap from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const zMap: [2]@Vector(3, u32) = if(@reduce(.Add, normal) > 0) .{@splat(0), @splat(1)} else .{@splat(1), @splat(0)};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "zMap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to xSplat from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const xSplat: @TypeOf(xComponent) = @splat(@intCast(x));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "xSplat",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ySplat from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const ySplat: @TypeOf(xComponent) = @splat(@intCast(y));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "ySplat",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to zValue from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const zValue: Vec3f = @floatFromInt(zComponent*zMap[1]);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "zValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cornerModelIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/stairs.zig",
    "response": "const cornerModelIndex: ModelIndex = blocks.meshes.modelIndexStart(block).add(255 ^ bit);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/stairs.zig",
      "type": "const",
      "name": "cornerModelIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "pub fn init() void {\n\trotatedModels = .init(main.globalAllocator.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "pub fn reset() void {\n\trotatedModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to transform from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "fn transform(quad: *main.models.QuadInfo, data: u16) void {\n\tquad.textureSlot = data%16;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "transform",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "pub fn createBlockModel(block: Block, modeData: *u16, zon: ZonElement) ModelIndex {\n\tconst modelId = zon.get([]const u8, \"model\", \"cubyz:cube\");\n\tconst stateCount = zon.get(u16, \"states\", 2);\n\tconst blockId = block.id();\n\tif(stateCount <= 1) {\n\t\tstd.log.err(\"Block '{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@min(block.data, block.modeData() - 1));\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, _: Vec3i, _: ?Neighbor, currentData: *Block, _: Block, blockPlacing: bool) bool {\n\tif(blockPlacing) {\n\t\tcurrentData.data = 0;\n\t\treturn true;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onBlockBreaking from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "pub fn onBlockBreaking(_: ?main.items.Item, _: Vec3f, _: Vec3f, currentData: *Block) void {\n\tif(currentData.data == 0) {\n\t\tcurrentData.* = .{.typ = 0, .data = 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "onBlockBreaking",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isItemBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "fn isItemBlock(block: Block, item: main.items.ItemStack) bool {\n\treturn item.item != null and item.item.? == .baseItem and item.item.?.baseItem.block() == block.typ;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "isItemBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/texture_pile.zig",
    "response": "pub fn canBeChangedInto(oldBlock: Block, newBlock: Block, item: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) RotationMode.CanBeChangedInto {\n\tswitch(RotationMode.DefaultFunctions.canBeChangedInto(oldBlock, newBlock, item, shouldDropSourceBlockOnSuccess)) {\n\t\t.no, .yes_costsDurability, .yes_dropsItems => return .no,\n\t\t.yes_costsItems => |r| return .{.yes_costsItems = r}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/texture_pile.zig",
      "type": "function",
      "name": "canBeChangedInto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn init() void {\n\trotatedModels = .init(main.globalAllocator.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn reset() void {\n\trotatedModels.clearRetainingCapacity();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createBlockModel from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn createBlockModel(_: Block, _: *u16, zon: ZonElement) ModelIndex {\n\tconst baseModelId: []const u8 = zon.get([]const u8, \"base\", \"cubyz:cube\");\n\tconst sideModelId: []const u8 = zon.get([]const u8, \"side\", \"cubyz:cube\");\n\tconst key: []const u8 = std.mem.concat(main.stackAllocator.allocator, u8, &.{baseModelId, sideModelId}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "createBlockModel",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn model(block: Block) ModelIndex {\n\treturn blocks.meshes.modelIndexStart(block).add(@as(u5, @truncate(block.data)) -| 1);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn rotateZ(data: u16, angle: Degrees) u16 {\n\tcomptime var rotationTable: [4][32]u8 = undefined;\n\tcomptime for(0..32) |i| {\n\t\trotationTable[0][i] = @intCast(i);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn generateData(_: *main.game.World, _: Vec3i, _: Vec3f, _: Vec3f, relativeDir: Vec3i, neighbor: ?Neighbor, currentData: *Block, neighborBlock: Block, _: bool) bool {\n\tif(neighbor == null) return false;\n\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\tconst neighborSupport = !neighborBlock.replacable() and neighborModel.neighborFacingQuads[neighbor.?.reverse().toInt()].len != 0;\n\tif(!neighborSupport) return false;\n\tvar data: TorchData = @bitCast(@as(u5, @truncate(currentData.data)));\n\tif(relativeDir[0] == 1) data.posX = true;\n\tif(relativeDir[0] == -1) data.negX = true;\n\tif(relativeDir[1] == 1) data.posY = true;\n\tif(relativeDir[1] == -1) data.negY = true;\n\tif(relativeDir[2] == -1) data.center = true;\n\tif(@as(u5, @bitCast(data)) != currentData.data) {\n\t\tcurrentData.data = @as(u5, @bitCast(data));\n\t\treturn true;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "generateData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn updateData(block: *Block, neighbor: Neighbor, neighborBlock: Block) bool {\n\tconst neighborModel = blocks.meshes.model(neighborBlock).model();\n\tconst neighborSupport = !neighborBlock.replacable() and neighborModel.neighborFacingQuads[neighbor.reverse().toInt()].len != 0;\n\tvar currentData: TorchData = @bitCast(@as(u5, @truncate(block.data)));\n\tswitch(neighbor) {\n\t\t.dirNegX => {\n\t\t\tcurrentData.negX = currentData.negX and neighborSupport;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "updateData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to closestRay from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "fn closestRay(comptime typ: enum {bit, intersection}, block: Block, _: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f) if(typ == .intersection) ?RayIntersectionResult else u16 {\n\tvar result: ?RayIntersectionResult = null;\n\tvar resultBit: u16 = 0;\n\tfor([_]u16{1, 2, 4, 8, 16}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "closestRay",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to rayIntersection from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn rayIntersection(block: Block, item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f) ?RayIntersectionResult {\n\treturn closestRay(.intersection, block, item, relativePlayerPos, playerDir);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "rayIntersection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onBlockBreaking from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn onBlockBreaking(item: ?main.items.Item, relativePlayerPos: Vec3f, playerDir: Vec3f, currentData: *Block) void {\n\tconst bit = closestRay(.bit, currentData.*, item, relativePlayerPos, playerDir);\n\tcurrentData.data &= ~bit;\n\tif(currentData.data == 0) currentData.typ = 0;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "onBlockBreaking",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub fn canBeChangedInto(oldBlock: Block, newBlock: Block, item: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) RotationMode.CanBeChangedInto {\n\tswitch(RotationMode.DefaultFunctions.canBeChangedInto(oldBlock, newBlock, item, shouldDropSourceBlockOnSuccess)) {\n\t\t.no, .yes_costsDurability, .yes_dropsItems => return .no,\n\t\t.yes, .yes_costsItems => {\n\t\t\tconst torchAmountChange = @as(i32, @popCount(newBlock.data)) - if(oldBlock.typ == newBlock.typ) @as(i32, @popCount(oldBlock.data)) else 0;\n\t\t\tif(torchAmountChange <= 0) {\n\t\t\t\treturn .{.yes_dropsItems = @intCast(-torchAmountChange)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "function",
      "name": "canBeChangedInto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to naturalStandard from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "pub const naturalStandard: u16 = 1;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "naturalStandard",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to baseModelId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const baseModelId: []const u8 = zon.get([]const u8, \"base\", \"cubyz:cube\");",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "baseModelId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sideModelId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const sideModelId: []const u8 = zon.get([]const u8, \"side\", \"cubyz:cube\");",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "sideModelId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to key from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const key: []const u8 = std.mem.concat(main.stackAllocator.allocator, u8, &.{baseModelId, sideModelId}) catch unreachable;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "key",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to torchData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const torchData: TorchData = @bitCast(@as(u5, @intCast(i)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "torchData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to old from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const old: TorchData = @bitCast(@as(u5, @intCast(rotationTable[a - 1][i])));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "old",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to new from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const new: TorchData = .{\n\t\t\t\t.center = old.center,\n\t\t\t\t.negY = old.negX,\n\t\t\t\t.posY = old.posX,\n\t\t\t\t.posX = old.negY,\n\t\t\t\t.negX = old.posY,\n\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "new",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to result from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const result: u16 = @as(u5, @bitCast(currentData));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to modelIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: mods/cubyz/rotation/torch.zig",
    "response": "const modelIndex: ModelIndex = blocks.meshes.modelIndexStart(block).add(bit - 1);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "mods/cubyz/rotation/torch.zig",
      "type": "const",
      "name": "modelIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn init() void {\n\t\t\tcommands = main.utils.CircularBufferQueue(Command).init(main.globalAllocator, 256);\n\t\t\tfreeIdList = .init(main.globalAllocator);\n\t\t\tserverToClientMap = .init(main.globalAllocator.allocator);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn deinit() void {\n\t\t\treset();\n\t\t\tcommands.deinit();\n\t\t\tfreeIdList.deinit();\n\t\t\tserverToClientMap.deinit();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn reset() void {\n\t\t\tmutex.lock();\n\t\t\twhile(commands.popFront()) |cmd| {\n\t\t\t\tvar reader = utils.BinaryReader.init(&.{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to executeCommand from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn executeCommand(payload: Command.Payload) void {\n\t\t\tvar cmd: Command = .{\n\t\t\t\t.payload = payload,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "executeCommand",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nextId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn nextId() InventoryId {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tif(freeIdList.popOrNull()) |id| {\n\t\t\t\treturn id;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "nextId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to freeId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn freeId(id: InventoryId) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tfreeIdList.append(id);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "freeId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mapServerId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn mapServerId(serverId: InventoryId, inventory: Inventory) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tserverToClientMap.put(serverId, inventory) catch unreachable;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "mapServerId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unmapServerId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn unmapServerId(serverId: InventoryId, clientId: InventoryId) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tstd.debug.assert(serverToClientMap.fetchRemove(serverId).?.value.id == clientId);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "unmapServerId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn getInventory(serverId: InventoryId) ?Inventory {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\treturn serverToClientMap.get(serverId);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to receiveConfirmation from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn receiveConfirmation(reader: *utils.BinaryReader) !void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\ttry commands.popFront().?.finalize(main.globalAllocator, .client, reader);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "receiveConfirmation",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to receiveFailure from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn receiveFailure() void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tvar tempData = main.List(Command).init(main.stackAllocator);\n\t\t\tdefer tempData.deinit();\n\t\t\twhile(commands.popBack()) |_cmd| {\n\t\t\t\tvar cmd = _cmd;\n\t\t\t\tcmd.undo();\n\t\t\t\ttempData.append(cmd);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "receiveFailure",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to receiveSyncOperation from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn receiveSyncOperation(reader: *utils.BinaryReader) !void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tvar tempData = main.List(Command).init(main.stackAllocator);\n\t\t\tdefer tempData.deinit();\n\t\t\twhile(commands.popBack()) |_cmd| {\n\t\t\t\tvar cmd = _cmd;\n\t\t\t\tcmd.undo();\n\t\t\t\ttempData.append(cmd);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "receiveSyncOperation",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setGamemode from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn setGamemode(gamemode: Gamemode) void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tmain.game.Player.setGamemode(gamemode);\n\t\t\tvar tempData = main.List(Command).init(main.stackAllocator);\n\t\t\tdefer tempData.deinit();\n\t\t\twhile(commands.popBack()) |_cmd| {\n\t\t\t\tvar cmd = _cmd;\n\t\t\t\tcmd.undo();\n\t\t\t\ttempData.append(cmd);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "setGamemode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn init(len: usize, typ: Inventory.Type, source: Source, managed: Managed, callbacks: Callbacks) ServerInventory {\n\t\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\t\treturn .{\n\t\t\t\t\t.inv = Inventory._init(main.globalAllocator, len, typ, source, .server, callbacks),\n\t\t\t\t\t.users = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deinit(self: *ServerInventory) void {\n\t\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\t\twhile(self.users.items.len != 0) {\n\t\t\t\t\tself.removeUser(self.users.items[0].user, self.users.items[0].cliendId);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addUser from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn addUser(self: *ServerInventory, user: *main.server.User, clientId: InventoryId) void {\n\t\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\t\tself.users.append(main.globalAllocator, .{.user = user, .cliendId = clientId}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "addUser",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to removeUser from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn removeUser(self: *ServerInventory, user: *main.server.User, clientId: InventoryId) void {\n\t\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\t\tvar index: usize = undefined;\n\t\t\t\tfor(self.users.items, 0..) |userData, i| {\n\t\t\t\t\tif(userData.user == user) {\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "removeUser",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn init() void {\n\t\t\tinventories = .initCapacity(main.globalAllocator, 256);\n\t\t\tfreeIdList = .init(main.globalAllocator);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn deinit() void {\n\t\t\tfor(inventories.items) |inv| {\n\t\t\t\tif(inv.source != .alreadyFreed) {\n\t\t\t\t\tstd.log.err(\"Leaked inventory with source {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to disconnectUser from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn disconnectUser(user: *main.server.User) void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\twhile(true) {\n\t\t\t\t// Reinitializing the iterator in the loop to allow for removal:\n\t\t\t\tvar iter = user.inventoryClientToServerIdMap.keyIterator();\n\t\t\t\tconst clientId = iter.next() orelse break;\n\t\t\t\tcloseInventory(user, clientId.*) catch unreachable;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "disconnectUser",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to nextId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn nextId() InventoryId {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tif(freeIdList.popOrNull()) |id| {\n\t\t\t\treturn id;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "nextId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to freeId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn freeId(id: InventoryId) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tfreeIdList.append(id);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "freeId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to executeCommand from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn executeCommand(payload: Command.Payload, source: ?*main.server.User) void {\n\t\t\tvar command = Command{\n\t\t\t\t.payload = payload,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "executeCommand",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to receiveCommand from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn receiveCommand(source: *main.server.User, reader: *utils.BinaryReader) !void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tconst typ = try reader.readEnum(Command.PayloadType);\n\t\t\t@setEvalBranchQuota(100000);\n\t\t\tconst payload: Command.Payload = switch(typ) {\n\t\t\t\tinline else => |_typ| @unionInit(Command.Payload, @tagName(_typ), try @FieldType(Command.Payload, @tagName(_typ)).deserialize(reader, .server, source)),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "receiveCommand",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createExternallyManagedInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn createExternallyManagedInventory(len: usize, typ: Inventory.Type, source: Source, data: *BinaryReader, callbacks: Callbacks) InventoryId {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tconst inventory = ServerInventory.init(len, typ, source, .externallyManaged, callbacks);\n\t\t\tinventories.items[@intFromEnum(inventory.inv.id)] = inventory;\n\t\t\tinventory.inv.fromBytes(data);\n\t\t\treturn inventory.inv.id;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "createExternallyManagedInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to destroyExternallyManagedInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn destroyExternallyManagedInventory(invId: InventoryId) void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tstd.debug.assert(inventories.items[@intFromEnum(invId)].managed == .externallyManaged);\n\t\t\tinventories.items[@intFromEnum(invId)].deinit();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "destroyExternallyManagedInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to destroyAndDropExternallyManagedInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn destroyAndDropExternallyManagedInventory(invId: InventoryId, pos: Vec3i) void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tstd.debug.assert(inventories.items[@intFromEnum(invId)].managed == .externallyManaged);\n\t\t\tconst inv = &inventories.items[@intFromEnum(invId)];\n\t\t\tfor(inv.inv._items) |*itemStack| {\n\t\t\t\tif(itemStack.amount == 0) continue;\n\t\t\t\tmain.server.world.?.drop(\n\t\t\t\t\titemStack.*,\n\t\t\t\t\t@as(Vec3d, @floatFromInt(pos)) + main.random.nextDoubleVector(3, &main.seed),\n\t\t\t\t\tmain.random.nextFloatVectorSigned(3, &main.seed),\n\t\t\t\t\t0.1,\n\t\t\t\t);\n\t\t\t\titemStack.* = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "destroyAndDropExternallyManagedInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn createInventory(user: *main.server.User, clientId: InventoryId, len: usize, typ: Inventory.Type, source: Source) !void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tswitch(source) {\n\t\t\t\t.recipe, .blockInventory, .playerInventory, .hand => {\n\t\t\t\t\tswitch(source) {\n\t\t\t\t\t\t.playerInventory, .hand => |id| {\n\t\t\t\t\t\t\tif(id != user.id) {\n\t\t\t\t\t\t\t\tstd.log.err(\"Player {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "createInventory",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to closeInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn closeInventory(user: *main.server.User, clientId: InventoryId) !void {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tconst serverId = user.inventoryClientToServerIdMap.get(clientId) orelse return error.InventoryNotFound;\n\t\t\tinventories.items[@intFromEnum(serverId)].removeUser(user, clientId);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "closeInventory",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn getInventory(user: *main.server.User, clientId: InventoryId) ?Inventory {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tconst serverId = user.inventoryClientToServerIdMap.get(clientId) orelse return null;\n\t\t\treturn inventories.items[@intFromEnum(serverId)].inv;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getInventoryFromSource from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn getInventoryFromSource(source: Source) ?Inventory {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tfor(inventories.items) |inv| {\n\t\t\t\tif(std.meta.eql(inv.source, source)) {\n\t\t\t\t\treturn inv.inv;\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getInventoryFromSource",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getInventoryFromId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn getInventoryFromId(serverId: InventoryId) Inventory {\n\t\t\treturn inventories.items[@intFromEnum(serverId)].inv;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getInventoryFromId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clearPlayerInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn clearPlayerInventory(user: *main.server.User) void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tvar inventoryIdIterator = user.inventoryClientToServerIdMap.valueIterator();\n\t\t\twhile(inventoryIdIterator.next()) |inventoryId| {\n\t\t\t\tif(inventories.items[@intFromEnum(inventoryId.*)].source == .playerInventory) {\n\t\t\t\t\texecuteCommand(.{.clear = .{.inv = inventories.items[@intFromEnum(inventoryId.*)].inv}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "clearPlayerInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tryCollectingToPlayerInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn tryCollectingToPlayerInventory(user: *main.server.User, itemStack: *ItemStack) void {\n\t\t\tif(itemStack.item == null) return;\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tvar inventoryIdIterator = user.inventoryClientToServerIdMap.valueIterator();\n\t\t\touter: while(inventoryIdIterator.next()) |inventoryId| {\n\t\t\t\tif(inventories.items[@intFromEnum(inventoryId.*)].source == .playerInventory) {\n\t\t\t\t\tconst inv = inventories.items[@intFromEnum(inventoryId.*)].inv;\n\t\t\t\t\tfor(inv._items, 0..) |invStack, slot| {\n\t\t\t\t\t\tif(std.meta.eql(invStack.item, itemStack.item)) {\n\t\t\t\t\t\t\tconst amount = @min(itemStack.item.?.stackSize() - invStack.amount, itemStack.amount);\n\t\t\t\t\t\t\tif(amount == 0) continue;\n\t\t\t\t\t\t\texecuteCommand(.{.fillFromCreative = .{.dest = .{.inv = inv, .slot = @intCast(slot)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "tryCollectingToPlayerInventory",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setGamemode from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn setGamemode(user: *main.server.User, gamemode: Gamemode) void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\t\t\tuser.gamemode.store(gamemode, .monotonic);\n\t\t\tmain.network.Protocols.genericUpdate.sendGamemode(user.conn, gamemode);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "setGamemode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addHealth from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn addHealth(health: f32, cause: main.game.DamageType, side: Side, userId: u32) void {\n\t\tif(side == .client) {\n\t\t\tSync.ClientSide.executeCommand(.{.addHealth = .{.target = userId, .health = health, .cause = cause}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "addHealth",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn getInventory(id: InventoryId, side: Side, user: ?*main.server.User) ?Inventory {\n\t\treturn switch(side) {\n\t\t\t.client => ClientSide.getInventory(id),\n\t\t\t.server => ServerSide.getInventory(user.?, id),\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setGamemode from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn setGamemode(user: ?*main.server.User, gamemode: Gamemode) void {\n\t\tif(user == null) {\n\t\t\tClientSide.setGamemode(gamemode);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "setGamemode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to ref from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn ref(self: InventoryAndSlot) *ItemStack {\n\t\t\treturn &self.inv._items[self.slot];\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "ref",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to write from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn write(self: InventoryAndSlot, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeEnum(InventoryId, self.inv.id);\n\t\t\twriter.writeInt(u32, self.slot);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "write",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn read(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !InventoryAndSlot {\n\t\t\tconst id = try reader.readEnum(InventoryId);\n\t\t\tconst result: InventoryAndSlot = .{\n\t\t\t\t.inv = Sync.getInventory(id, side, user) orelse return error.InventoryNotFound,\n\t\t\t\t.slot = try reader.readInt(u32),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "read",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to executeFromData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn executeFromData(reader: *utils.BinaryReader) !void {\n\t\t\tswitch(try deserialize(reader)) {\n\t\t\t\t.create => |create| {\n\t\t\t\t\tif(create.item) |item| {\n\t\t\t\t\t\tcreate.inv.ref().item = item;\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "executeFromData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getUsers from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn getUsers(self: SyncOperation, allocator: NeverFailingAllocator) []*main.server.User {\n\t\t\tswitch(self) {\n\t\t\t\tinline .create, .delete, .useDurability => |data| {\n\t\t\t\t\tconst users = Sync.ServerSide.inventories.items[@intFromEnum(data.inv.inv.id)].users.items;\n\t\t\t\t\tconst result = allocator.alloc(*main.server.User, users.len);\n\t\t\t\t\tfor(0..users.len) |i| {\n\t\t\t\t\t\tresult[i] = users[i].user;\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getUsers",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to ignoreSource from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn ignoreSource(self: SyncOperation) bool {\n\t\t\treturn switch(self) {\n\t\t\t\t.create, .delete, .useDurability, .health, .energy => true,\n\t\t\t\t.kill => false,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "ignoreSource",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader) !SyncOperation {\n\t\t\tconst typ = try reader.readEnum(SyncOperationType);\n\n\t\t\tswitch(typ) {\n\t\t\t\t.create => {\n\t\t\t\t\tvar out: SyncOperation = .{.create = .{\n\t\t\t\t\t\t.inv = try InventoryAndSlot.read(reader, .client, null),\n\t\t\t\t\t\t.amount = try reader.readInt(u16),\n\t\t\t\t\t\t.item = null,\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn serialize(self: SyncOperation, allocator: NeverFailingAllocator) []const u8 {\n\t\t\tvar writer = utils.BinaryWriter.initCapacity(allocator, 13);\n\t\t\twriter.writeEnum(SyncOperationType, self);\n\t\t\tswitch(self) {\n\t\t\t\t.create => |create| {\n\t\t\t\t\tcreate.inv.write(&writer);\n\t\t\t\t\twriter.writeInt(u16, create.amount);\n\t\t\t\t\tif(create.item) |item| {\n\t\t\t\t\t\tconst zon = ZonElement.initObject(main.stackAllocator);\n\t\t\t\t\t\tdefer zon.deinit(main.stackAllocator);\n\t\t\t\t\t\titem.insertIntoZon(main.stackAllocator, zon);\n\t\t\t\t\t\tconst string = zon.toStringEfficient(main.stackAllocator, &.{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serializePayload from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serializePayload(self: *Command, allocator: NeverFailingAllocator) []const u8 {\n\t\tvar writer = utils.BinaryWriter.init(allocator);\n\t\tdefer writer.deinit();\n\t\tswitch(self.payload) {\n\t\t\tinline else => |payload| {\n\t\t\t\tpayload.serialize(&writer);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serializePayload",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to do from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn do(self: *Command, allocator: NeverFailingAllocator, side: Side, user: ?*main.server.User, gamemode: main.game.Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "do",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to undo from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn undo(self: *Command) void {\n\t\t// Iterating in reverse order!\n\t\twhile(self.baseOperations.popOrNull()) |step| {\n\t\t\tswitch(step) {\n\t\t\t\t.move => |info| {\n\t\t\t\t\tif(info.amount == 0) continue;\n\t\t\t\t\tstd.debug.assert(std.meta.eql(info.source.ref().item, info.dest.ref().item) or info.source.ref().item == null);\n\t\t\t\t\tinfo.source.ref().item = info.dest.ref().item;\n\t\t\t\t\tinfo.source.ref().amount += info.amount;\n\t\t\t\t\tinfo.dest.ref().amount -= info.amount;\n\t\t\t\t\tif(info.dest.ref().amount == 0) {\n\t\t\t\t\t\tinfo.dest.ref().item = null;\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "undo",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to finalize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn finalize(self: Command, allocator: NeverFailingAllocator, side: Side, reader: *utils.BinaryReader) !void {\n\t\tfor(self.baseOperations.items) |step| {\n\t\t\tswitch(step) {\n\t\t\t\t.move, .swap, .create, .addHealth, .addEnergy => {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "finalize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to confirmationData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn confirmationData(self: *Command, allocator: NeverFailingAllocator) []const u8 {\n\t\tswitch(self.payload) {\n\t\t\tinline else => |payload| {\n\t\t\t\tif(@hasDecl(@TypeOf(payload), \"confirmationData\")) {\n\t\t\t\t\treturn payload.confirmationData(allocator);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "confirmationData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to executeAddOperation from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn executeAddOperation(self: *Command, allocator: NeverFailingAllocator, side: Side, inv: InventoryAndSlot, amount: u16, item: ?Item) void {\n\t\tif(amount == 0) return;\n\t\tif(item == null) return;\n\t\tif(side == .server) {\n\t\t\tself.syncOperations.append(allocator, .{.create = .{\n\t\t\t\t.inv = inv,\n\t\t\t\t.amount = amount,\n\t\t\t\t.item = if(inv.ref().amount == 0) item else null,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "executeAddOperation",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to executeRemoveOperation from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn executeRemoveOperation(self: *Command, allocator: NeverFailingAllocator, side: Side, inv: InventoryAndSlot, amount: u16) void {\n\t\tif(amount == 0) return;\n\t\tif(side == .server) {\n\t\t\tself.syncOperations.append(allocator, .{.delete = .{\n\t\t\t\t.inv = inv,\n\t\t\t\t.amount = amount,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "executeRemoveOperation",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to executeDurabilityUseOperation from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn executeDurabilityUseOperation(self: *Command, allocator: NeverFailingAllocator, side: Side, inv: InventoryAndSlot, durability: u31) void {\n\t\tif(durability == 0) return;\n\t\tif(side == .server) {\n\t\t\tself.syncOperations.append(allocator, .{.useDurability = .{\n\t\t\t\t.inv = inv,\n\t\t\t\t.durability = durability,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "executeDurabilityUseOperation",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to executeBaseOperation from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn executeBaseOperation(self: *Command, allocator: NeverFailingAllocator, _op: BaseOperation, side: Side) void { // MARK: executeBaseOperation()\n\t\tvar op = _op;\n\t\tswitch(op) {\n\t\t\t.move => |info| {\n\t\t\t\tself.executeAddOperation(allocator, side, info.dest, info.amount, info.source.ref().item);\n\t\t\t\tself.executeRemoveOperation(allocator, side, info.source, info.amount);\n\t\t\t\tinfo.source.inv.update();\n\t\t\t\tinfo.dest.inv.update();\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "executeBaseOperation",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to removeToolCraftingIngredients from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn removeToolCraftingIngredients(self: *Command, allocator: NeverFailingAllocator, inv: Inventory, side: Side) void {\n\t\tstd.debug.assert(inv.type == .workbench);\n\t\tfor(0..25) |i| {\n\t\t\tif(inv._items[i].amount != 0) {\n\t\t\t\tself.executeBaseOperation(allocator, .{.delete = .{\n\t\t\t\t\t.source = .{.inv = inv, .slot = @intCast(i)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "removeToolCraftingIngredients",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canPutIntoWorkbench from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn canPutIntoWorkbench(source: InventoryAndSlot) bool {\n\t\tif(source.ref().item) |item| {\n\t\t\tif(item != .baseItem) return false;\n\t\t\treturn item.baseItem.material() != null;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "canPutIntoWorkbench",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tryCraftingTo from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn tryCraftingTo(self: *Command, allocator: NeverFailingAllocator, dest: Inventory, source: InventoryAndSlot, side: Side, user: ?*main.server.User) void { // MARK: tryCraftingTo()\n\t\tstd.debug.assert(source.inv.type == .crafting);\n\t\tstd.debug.assert(dest.type == .normal);\n\t\tif(source.slot != source.inv._items.len - 1) return;\n\t\tif(!dest.canHold(source.ref().*)) return;\n\t\tif(source.ref().item == null) return; // Can happen if the we didn't receive the inventory information from the server yet.\n\n\t\tconst playerInventory: Inventory = switch(side) {\n\t\t\t.client => main.game.Player.inventory,\n\t\t\t.server => blk: {\n\t\t\t\tif(user) |_user| {\n\t\t\t\t\tvar it = _user.inventoryClientToServerIdMap.valueIterator();\n\t\t\t\t\twhile(it.next()) |serverId| {\n\t\t\t\t\t\tconst serverInventory = &Sync.ServerSide.inventories.items[@intFromEnum(serverId.*)];\n\t\t\t\t\t\tif(serverInventory.source == .playerInventory)\n\t\t\t\t\t\t\tbreak :blk serverInventory.inv;\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "tryCraftingTo",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(_: Open, _: NeverFailingAllocator, _: *Command, _: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to finalize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn finalize(self: Open, side: Side, reader: *utils.BinaryReader) !void {\n\t\t\tif(side != .client) return;\n\t\t\tif(reader.remaining.len != 0) {\n\t\t\t\tconst serverId = try reader.readEnum(InventoryId);\n\t\t\t\tSync.ClientSide.mapServerId(serverId, self.inv);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "finalize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to confirmationData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn confirmationData(self: Open, allocator: NeverFailingAllocator) []const u8 {\n\t\t\tvar writer = utils.BinaryWriter.initCapacity(allocator, 4);\n\t\t\twriter.writeEnum(InventoryId, self.inv.id);\n\t\t\treturn writer.data.toOwnedSlice();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "confirmationData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: Open, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeEnum(InventoryId, self.inv.id);\n\t\t\twriter.writeInt(usize, self.inv._items.len);\n\t\t\twriter.writeEnum(TypeEnum, self.inv.type);\n\t\t\twriter.writeEnum(SourceType, self.source);\n\t\t\tswitch(self.source) {\n\t\t\t\t.playerInventory, .hand => |val| {\n\t\t\t\t\twriter.writeInt(u32, val);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !Open {\n\t\t\tif(side != .server or user == null) return error.Invalid;\n\t\t\tconst id = try reader.readEnum(InventoryId);\n\t\t\tconst len = try reader.readInt(u64);\n\t\t\tconst typeEnum = try reader.readEnum(TypeEnum);\n\t\t\tconst sourceType = try reader.readEnum(SourceType);\n\t\t\tconst source: Source = switch(sourceType) {\n\t\t\t\t.playerInventory => .{.playerInventory = try reader.readInt(u32)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(_: Close, _: NeverFailingAllocator, _: *Command, _: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to finalize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn finalize(self: Close, side: Side, reader: *utils.BinaryReader) !void {\n\t\t\tif(side != .client) return;\n\t\t\tself.inv._deinit(self.allocator, .client);\n\t\t\tif(reader.remaining.len != 0) {\n\t\t\t\tconst serverId = try reader.readEnum(InventoryId);\n\t\t\t\tSync.ClientSide.unmapServerId(serverId, self.inv.id);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "finalize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: Close, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeEnum(InventoryId, self.inv.id);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !Close {\n\t\t\tif(side != .server or user == null) return error.Invalid;\n\t\t\tconst id = try reader.readEnum(InventoryId);\n\t\t\ttry Sync.ServerSide.closeInventory(user.?, id);\n\t\t\treturn undefined;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(self: DepositOrSwap, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, gamemode: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: DepositOrSwap, writer: *utils.BinaryWriter) void {\n\t\t\tself.dest.write(writer);\n\t\t\tself.source.write(writer);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !DepositOrSwap {\n\t\t\treturn .{\n\t\t\t\t.dest = try InventoryAndSlot.read(reader, side, user),\n\t\t\t\t.source = try InventoryAndSlot.read(reader, side, user),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(self: Deposit, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: Deposit, writer: *utils.BinaryWriter) void {\n\t\t\tself.dest.write(writer);\n\t\t\tself.source.write(writer);\n\t\t\twriter.writeInt(u16, self.amount);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !Deposit {\n\t\t\treturn .{\n\t\t\t\t.dest = try InventoryAndSlot.read(reader, side, user),\n\t\t\t\t.source = try InventoryAndSlot.read(reader, side, user),\n\t\t\t\t.amount = try reader.readInt(u16),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(self: TakeHalf, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, gamemode: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: TakeHalf, writer: *utils.BinaryWriter) void {\n\t\t\tself.dest.write(writer);\n\t\t\tself.source.write(writer);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !TakeHalf {\n\t\t\treturn .{\n\t\t\t\t.dest = try InventoryAndSlot.read(reader, side, user),\n\t\t\t\t.source = try InventoryAndSlot.read(reader, side, user),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(self: Drop, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: Drop, writer: *utils.BinaryWriter) void {\n\t\t\tself.source.write(writer);\n\t\t\tif(self.desiredAmount != 0xffff) {\n\t\t\t\twriter.writeInt(u16, self.desiredAmount);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !Drop {\n\t\t\treturn .{\n\t\t\t\t.source = try InventoryAndSlot.read(reader, side, user),\n\t\t\t\t.desiredAmount = reader.readInt(u16) catch 0xffff,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(self: FillFromCreative, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, mode: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: FillFromCreative, writer: *utils.BinaryWriter) void {\n\t\t\tself.dest.write(writer);\n\t\t\twriter.writeInt(u16, self.amount);\n\t\t\tif(self.item) |item| {\n\t\t\t\tconst zon = ZonElement.initObject(main.stackAllocator);\n\t\t\t\tdefer zon.deinit(main.stackAllocator);\n\t\t\t\titem.insertIntoZon(main.stackAllocator, zon);\n\t\t\t\tconst string = zon.toStringEfficient(main.stackAllocator, &.{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !FillFromCreative {\n\t\t\tconst dest = try InventoryAndSlot.read(reader, side, user);\n\t\t\tconst amount = try reader.readInt(u16);\n\t\t\tvar item: ?Item = null;\n\t\t\tif(reader.remaining.len != 0) {\n\t\t\t\tconst zon = ZonElement.parseFromString(main.stackAllocator, null, reader.remaining);\n\t\t\t\tdefer zon.deinit(main.stackAllocator);\n\t\t\t\titem = try Item.init(zon);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn run(self: DepositOrDrop, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: DepositOrDrop, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeEnum(InventoryId, self.dest.id);\n\t\t\twriter.writeEnum(InventoryId, self.source.id);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !DepositOrDrop {\n\t\t\tconst destId = try reader.readEnum(InventoryId);\n\t\t\tconst sourceId = try reader.readEnum(InventoryId);\n\t\t\treturn .{\n\t\t\t\t.dest = Sync.getInventory(destId, side, user) orelse return error.InventoryNotFound,\n\t\t\t\t.source = Sync.getInventory(sourceId, side, user) orelse return error.InventoryNotFound,\n\t\t\t\t.dropLocation = (user orelse return error.Invalid).player.pos,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(self: DepositToAny, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: DepositToAny, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeEnum(InventoryId, self.dest.id);\n\t\t\tself.source.write(writer);\n\t\t\twriter.writeInt(u16, self.amount);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !DepositToAny {\n\t\t\tconst destId = try reader.readEnum(InventoryId);\n\t\t\treturn .{\n\t\t\t\t.dest = Sync.getInventory(destId, side, user) orelse return error.InventoryNotFound,\n\t\t\t\t.source = try InventoryAndSlot.read(reader, side, user),\n\t\t\t\t.amount = try reader.readInt(u16),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn run(self: Clear, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: Clear, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeEnum(InventoryId, self.inv.id);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !Clear {\n\t\t\tconst invId = try reader.readEnum(InventoryId);\n\t\t\treturn .{\n\t\t\t\t.inv = Sync.getInventory(invId, side, user) orelse return error.InventoryNotFound,\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to drop from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn drop(self: BlockDropLocation, pos: Vec3i, newBlock: Block, _drop: main.blocks.BlockDrop) void {\n\t\t\t\tif(newBlock.collide()) {\n\t\t\t\t\tself.dropOutside(pos, _drop);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "drop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dropInside from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn dropInside(self: BlockDropLocation, pos: Vec3i, _drop: main.blocks.BlockDrop) void {\n\t\t\t\tfor(_drop.items) |itemStack| {\n\t\t\t\t\tmain.server.world.?.drop(itemStack.clone(), self.insidePos(pos), self.dropDir(), self.dropVelocity());\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "dropInside",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to insidePos from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn insidePos(self: BlockDropLocation, _pos: Vec3i) Vec3d {\n\t\t\t\tconst pos: Vec3d = @floatFromInt(_pos);\n\t\t\t\treturn pos + self.randomOffset();\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "insidePos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to randomOffset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn randomOffset(self: BlockDropLocation) Vec3f {\n\t\t\t\tconst max = @min(@as(Vec3f, @splat(1.0)) - itemHitBoxMarginVec, @max(itemHitBoxMarginVec, self.max - itemHitBoxMarginVec));\n\t\t\t\tconst min = @min(max, @max(itemHitBoxMarginVec, self.min + itemHitBoxMarginVec));\n\t\t\t\tconst center = (max + min)*half;\n\t\t\t\tconst width = (max - min)*half;\n\t\t\t\treturn center + width*main.random.nextFloatVectorSigned(3, &main.seed)*half;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "randomOffset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dropOutside from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn dropOutside(self: BlockDropLocation, pos: Vec3i, _drop: main.blocks.BlockDrop) void {\n\t\t\t\tfor(_drop.items) |itemStack| {\n\t\t\t\t\tmain.server.world.?.drop(itemStack.clone(), self.outsidePos(pos), self.dropDir(), self.dropVelocity());\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "dropOutside",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to outsidePos from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn outsidePos(self: BlockDropLocation, _pos: Vec3i) Vec3d {\n\t\t\t\tconst pos: Vec3d = @floatFromInt(_pos);\n\t\t\t\treturn pos + self.randomOffset()*self.minor() + self.directionOffset()*self.major() + self.direction()*itemHitBoxMarginVec;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "outsidePos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to directionOffset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn directionOffset(self: BlockDropLocation) Vec3d {\n\t\t\t\treturn half + self.direction()*half;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "directionOffset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to direction from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn direction(self: BlockDropLocation) Vec3d {\n\t\t\t\treturn @floatFromInt(self.dir.relPos());\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "direction",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to major from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn major(self: BlockDropLocation) Vec3d {\n\t\t\t\treturn @floatFromInt(@abs(self.dir.relPos()));\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "major",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to minor from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn minor(self: BlockDropLocation) Vec3d {\n\t\t\t\treturn @floatFromInt(self.dir.orthogonalComponents());\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "minor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dropDir from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn dropDir(self: BlockDropLocation) Vec3f {\n\t\t\t\tconst randomnessVec: Vec3f = main.random.nextFloatVectorSigned(3, &main.seed)*@as(Vec3f, @splat(0.25));\n\t\t\t\tconst directionVec: Vec3f = @as(Vec3f, @floatCast(self.direction())) + randomnessVec;\n\t\t\t\tconst z: f32 = directionVec[2];\n\t\t\t\treturn vec.normalize(Vec3f{\n\t\t\t\t\tdirectionVec[0],\n\t\t\t\t\tdirectionVec[1],\n\t\t\t\t\tif(z < -0.5) 0 else if(z < 0.0) (z + 0.5)*4.0 else z + 2.0,\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "dropDir",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dropVelocity from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn dropVelocity(self: BlockDropLocation) f32 {\n\t\t\t\tconst velocity = 3.5 + main.random.nextFloatSigned(&main.seed)*0.5;\n\t\t\t\tif(self.direction()[2] < -0.5) return velocity*0.333;\n\t\t\t\treturn velocity;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "dropVelocity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn run(self: UpdateBlock, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, gamemode: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: UpdateBlock, writer: *utils.BinaryWriter) void {\n\t\t\tself.source.write(writer);\n\t\t\twriter.writeVec(Vec3i, self.pos);\n\t\t\twriter.writeEnum(Neighbor, self.dropLocation.dir);\n\t\t\twriter.writeVec(Vec3f, self.dropLocation.min);\n\t\t\twriter.writeVec(Vec3f, self.dropLocation.max);\n\t\t\twriter.writeInt(u32, @as(u32, @bitCast(self.oldBlock)));\n\t\t\twriter.writeInt(u32, @as(u32, @bitCast(self.newBlock)));\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, side: Side, user: ?*main.server.User) !UpdateBlock {\n\t\t\treturn .{\n\t\t\t\t.source = try InventoryAndSlot.read(reader, side, user),\n\t\t\t\t.pos = try reader.readVec(Vec3i),\n\t\t\t\t.dropLocation = .{\n\t\t\t\t\t.dir = try reader.readEnum(Neighbor),\n\t\t\t\t\t.min = try reader.readVec(Vec3f),\n\t\t\t\t\t.max = try reader.readVec(Vec3f),\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn run(self: AddHealth, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to serialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn serialize(self: AddHealth, writer: *utils.BinaryWriter) void {\n\t\t\twriter.writeInt(u32, self.target);\n\t\t\twriter.writeInt(u32, @bitCast(self.health));\n\t\t\twriter.writeEnum(main.game.DamageType, self.cause);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "serialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deserialize from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn deserialize(reader: *utils.BinaryReader, _: Side, user: ?*main.server.User) !AddHealth {\n\t\t\tconst result: AddHealth = .{\n\t\t\t\t.target = try reader.readInt(u32),\n\t\t\t\t.health = @bitCast(try reader.readInt(u32)),\n\t\t\t\t.cause = try reader.readEnum(main.game.DamageType),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deserialize",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to shouldDepositToUserOnClose from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn shouldDepositToUserOnClose(self: Type) bool {\n\t\treturn self == .workbench;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "shouldDepositToUserOnClose",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn init(allocator: NeverFailingAllocator, _size: usize, _type: Type, source: Source, callbacks: Callbacks) Inventory {\n\tconst self = _init(allocator, _size, _type, source, .client, callbacks);\n\tSync.ClientSide.executeCommand(.{.open = .{.inv = self, .source = source}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to _init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn _init(allocator: NeverFailingAllocator, _size: usize, _type: Type, source: Source, side: Side, callbacks: Callbacks) Inventory {\n\tif(_type == .workbench) std.debug.assert(_size == 26);\n\tconst self = Inventory{\n\t\t.type = _type,\n\t\t._items = allocator.alloc(ItemStack, _size),\n\t\t.id = switch(side) {\n\t\t\t.client => Sync.ClientSide.nextId(),\n\t\t\t.server => Sync.ServerSide.nextId(),\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "_init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn deinit(self: Inventory, allocator: NeverFailingAllocator) void {\n\tif(main.game.world.?.connected) {\n\t\tSync.ClientSide.executeCommand(.{.close = .{.inv = self, .allocator = allocator}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to _deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn _deinit(self: Inventory, allocator: NeverFailingAllocator, side: Side) void {\n\tswitch(side) {\n\t\t.client => Sync.ClientSide.freeId(self.id),\n\t\t.server => Sync.ServerSide.freeId(self.id),\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "_deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to update from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "fn update(self: Inventory) void {\n\tdefer if(self.callbacks.onUpdateCallback) |cb| cb(self.source);\n\tif(self.type == .workbench) {\n\t\tself._items[self._items.len - 1].deinit();\n\t\tself._items[self._items.len - 1] = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "update",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to depositOrSwap from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn depositOrSwap(dest: Inventory, destSlot: u32, carried: Inventory) void {\n\tSync.ClientSide.executeCommand(.{.depositOrSwap = .{.dest = .{.inv = dest, .slot = destSlot}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "depositOrSwap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deposit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn deposit(dest: Inventory, destSlot: u32, carried: Inventory, amount: u16) void {\n\tSync.ClientSide.executeCommand(.{.deposit = .{.dest = .{.inv = dest, .slot = destSlot}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "deposit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to takeHalf from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn takeHalf(source: Inventory, sourceSlot: u32, carried: Inventory) void {\n\tSync.ClientSide.executeCommand(.{.takeHalf = .{.dest = .{.inv = carried, .slot = 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "takeHalf",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to distribute from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn distribute(carried: Inventory, destinationInventories: []const Inventory, destinationSlots: []const u32) void {\n\tconst amount = carried._items[0].amount/destinationInventories.len;\n\tif(amount == 0) return;\n\tfor(0..destinationInventories.len) |i| {\n\t\tdestinationInventories[i].deposit(destinationSlots[i], carried, @intCast(amount));\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "distribute",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to depositOrDrop from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn depositOrDrop(dest: Inventory, source: Inventory) void {\n\tSync.ClientSide.executeCommand(.{.depositOrDrop = .{.dest = dest, .source = source, .dropLocation = undefined}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "depositOrDrop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to depositToAny from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn depositToAny(source: Inventory, sourceSlot: u32, dest: Inventory, amount: u16) void {\n\tSync.ClientSide.executeCommand(.{.depositToAny = .{.dest = dest, .source = .{.inv = source, .slot = sourceSlot}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "depositToAny",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dropStack from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn dropStack(source: Inventory, sourceSlot: u32) void {\n\tSync.ClientSide.executeCommand(.{.drop = .{.source = .{.inv = source, .slot = sourceSlot}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "dropStack",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to dropOne from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn dropOne(source: Inventory, sourceSlot: u32) void {\n\tSync.ClientSide.executeCommand(.{.drop = .{.source = .{.inv = source, .slot = sourceSlot}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "dropOne",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fillFromCreative from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn fillFromCreative(dest: Inventory, destSlot: u32, item: ?Item) void {\n\tSync.ClientSide.executeCommand(.{.fillFromCreative = .{.dest = .{.inv = dest, .slot = destSlot}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "fillFromCreative",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fillAmountFromCreative from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn fillAmountFromCreative(dest: Inventory, destSlot: u32, item: ?Item, amount: u16) void {\n\tSync.ClientSide.executeCommand(.{.fillFromCreative = .{.dest = .{.inv = dest, .slot = destSlot}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "fillAmountFromCreative",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to placeBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn placeBlock(self: Inventory, slot: u32) void {\n\tmain.renderer.MeshSelection.placeBlock(self, slot);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "placeBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to breakBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn breakBlock(self: Inventory, slot: u32, deltaTime: f64) void {\n\tmain.renderer.MeshSelection.breakBlock(self, slot, deltaTime);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "breakBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to size from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn size(self: Inventory) usize {\n\treturn self._items.len;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "size",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getItem from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn getItem(self: Inventory, slot: usize) ?Item {\n\treturn self._items[slot].item;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getItem",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getStack from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn getStack(self: Inventory, slot: usize) ItemStack {\n\treturn self._items[slot];\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getStack",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getAmount from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn getAmount(self: Inventory, slot: usize) u16 {\n\treturn self._items[slot].amount;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "getAmount",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canHold from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn canHold(self: Inventory, sourceStack: ItemStack) bool {\n\tif(sourceStack.amount == 0) return true;\n\n\tvar remainingAmount = sourceStack.amount;\n\tfor(self._items) |*destStack| {\n\t\tif(std.meta.eql(destStack.item, sourceStack.item) or destStack.item == null) {\n\t\t\tconst amount = @min(sourceStack.item.?.stackSize() - destStack.amount, remainingAmount);\n\t\t\tremainingAmount -= amount;\n\t\t\tif(remainingAmount == 0) return true;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "canHold",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toBytes from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn toBytes(self: Inventory, writer: *BinaryWriter) void {\n\twriter.writeVarInt(u32, @intCast(self._items.len));\n\tfor(self._items) |stack| {\n\t\tstack.toBytes(writer);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "toBytes",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromBytes from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub fn fromBytes(self: Inventory, reader: *BinaryReader) void {\n\tvar remainingCount = reader.readVarInt(u32) catch 0;\n\tfor(self._items) |*stack| {\n\t\tif(remainingCount == 0) {\n\t\t\tstack.* = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "function",
      "name": "fromBytes",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Callbacks from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub const Callbacks = struct {\n\tonUpdateCallback: ?*const fn(Source) void = null,\n\tonFirstOpenCallback: ?*const fn(Source) void = null,\n\tonLastCloseCallback: ?*const fn(Source) void = null,\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Callbacks",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Sync from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub const Sync = struct { // MARK: Sync\n\n\tpub const ClientSide = struct {\n\t\tpub var mutex: std.Thread.Mutex = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Sync",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ServerSide from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub const ServerSide = struct { // MARK: ServerSide\n\t\tconst ServerInventory = struct {\n\t\t\tinv: Inventory,\n\t\t\tusers: main.ListUnmanaged(struct {user: *main.server.User, cliendId: InventoryId}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "ServerSide",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Command from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "pub const Command = struct { // MARK: Command\n\tpub const PayloadType = enum(u8) {\n\t\topen = 0,\n\t\tclose = 1,\n\t\tdepositOrSwap = 2,\n\t\tdeposit = 3,\n\t\ttakeHalf = 4,\n\t\tdrop = 5,\n\t\tfillFromCreative = 6,\n\t\tdepositOrDrop = 7,\n\t\tdepositToAny = 11,\n\t\tclear = 8,\n\t\tupdateBlock = 9,\n\t\taddHealth = 10,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Command",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to InventoryAndSlot from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const InventoryAndSlot = struct {\n\t\tinv: Inventory,\n\t\tslot: u32,\n\n\t\tfn ref(self: InventoryAndSlot) *ItemStack {\n\t\t\treturn &self.inv._items[self.slot];\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "InventoryAndSlot",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Open from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const Open = struct { // MARK: Open\n\t\tinv: Inventory,\n\t\tsource: Source,\n\n\t\tfn run(_: Open, _: NeverFailingAllocator, _: *Command, _: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Open",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Close from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const Close = struct { // MARK: Close\n\t\tinv: Inventory,\n\t\tallocator: NeverFailingAllocator,\n\n\t\tfn run(_: Close, _: NeverFailingAllocator, _: *Command, _: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Close",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DepositOrSwap from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const DepositOrSwap = struct { // MARK: DepositOrSwap\n\t\tdest: InventoryAndSlot,\n\t\tsource: InventoryAndSlot,\n\n\t\tfn run(self: DepositOrSwap, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, gamemode: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "DepositOrSwap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Deposit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const Deposit = struct { // MARK: Deposit\n\t\tdest: InventoryAndSlot,\n\t\tsource: InventoryAndSlot,\n\t\tamount: u16,\n\n\t\tfn run(self: Deposit, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Deposit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TakeHalf from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const TakeHalf = struct { // MARK: TakeHalf\n\t\tdest: InventoryAndSlot,\n\t\tsource: InventoryAndSlot,\n\n\t\tfn run(self: TakeHalf, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, gamemode: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "TakeHalf",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Drop from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const Drop = struct { // MARK: Drop\n\t\tsource: InventoryAndSlot,\n\t\tdesiredAmount: u16 = 0xffff,\n\n\t\tfn run(self: Drop, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Drop",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to FillFromCreative from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const FillFromCreative = struct { // MARK: FillFromCreative\n\t\tdest: InventoryAndSlot,\n\t\titem: ?Item,\n\t\tamount: u16 = 0,\n\n\t\tfn run(self: FillFromCreative, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, mode: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "FillFromCreative",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DepositOrDrop from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const DepositOrDrop = struct { // MARK: DepositOrDrop\n\t\tdest: Inventory,\n\t\tsource: Inventory,\n\t\tdropLocation: Vec3d,\n\n\t\tpub fn run(self: DepositOrDrop, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "DepositOrDrop",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to DepositToAny from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const DepositToAny = struct { // MARK: DepositToAny\n\t\tdest: Inventory,\n\t\tsource: InventoryAndSlot,\n\t\tamount: u16,\n\n\t\tfn run(self: DepositToAny, allocator: NeverFailingAllocator, cmd: *Command, side: Side, user: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "DepositToAny",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Clear from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const Clear = struct { // MARK: Clear\n\t\tinv: Inventory,\n\n\t\tpub fn run(self: Clear, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "Clear",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UpdateBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const UpdateBlock = struct { // MARK: UpdateBlock\n\t\tsource: InventoryAndSlot,\n\t\tpos: Vec3i,\n\t\tdropLocation: BlockDropLocation,\n\t\toldBlock: Block,\n\t\tnewBlock: Block,\n\n\t\tconst half = @as(Vec3f, @splat(0.5));\n\t\tconst itemHitBoxMargin: f32 = @floatCast(main.itemdrop.ItemDropManager.radius);\n\t\tconst itemHitBoxMarginVec: Vec3f = @splat(itemHitBoxMargin);\n\n\t\tconst BlockDropLocation = struct {\n\t\t\tdir: Neighbor,\n\t\t\tmin: Vec3f,\n\t\t\tmax: Vec3f,\n\n\t\t\tpub fn drop(self: BlockDropLocation, pos: Vec3i, newBlock: Block, _drop: main.blocks.BlockDrop) void {\n\t\t\t\tif(newBlock.collide()) {\n\t\t\t\t\tself.dropOutside(pos, _drop);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "UpdateBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AddHealth from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const AddHealth = struct { // MARK: AddHealth\n\t\ttarget: u32,\n\t\thealth: f32,\n\t\tcause: main.game.DamageType,\n\n\t\tpub fn run(self: AddHealth, allocator: NeverFailingAllocator, cmd: *Command, side: Side, _: ?*main.server.User, _: Gamemode) error{serverFailure}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "struct",
      "name": "AddHealth",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to payload from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const payload: Command.Payload = switch(typ) {\n\t\t\t\tinline else => |_typ| @unionInit(Command.Payload, @tagName(_typ), try @FieldType(Command.Payload, @tagName(_typ)).deserialize(reader, .server, source)),\n\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "payload",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to result from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const result: InventoryAndSlot = .{\n\t\t\t\t.inv = Sync.getInventory(id, side, user) orelse return error.InventoryNotFound,\n\t\t\t\t.slot = try reader.readInt(u32),\n\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to out from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const out: SyncOperation = .{.delete = .{\n\t\t\t\t\t\t.inv = try InventoryAndSlot.read(reader, .client, null),\n\t\t\t\t\t\t.amount = try reader.readInt(u16),\n\t\t\t\t\t}};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "out",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to out from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const out: SyncOperation = .{.useDurability = .{\n\t\t\t\t\t\t.inv = try InventoryAndSlot.read(reader, .client, null),\n\t\t\t\t\t\t.durability = try reader.readInt(u32),\n\t\t\t\t\t}};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "out",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to playerInventory from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const playerInventory: Inventory = switch(side) {\n\t\t\t.client => main.game.Player.inventory,\n\t\t\t.server => blk: {\n\t\t\t\tif(user) |_user| {\n\t\t\t\t\tvar it = _user.inventoryClientToServerIdMap.valueIterator();",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "playerInventory",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to source from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const source: Source = switch(sourceType) {\n\t\t\t\t.playerInventory => .{.playerInventory = try reader.readInt(u32)},\n\t\t\t\t.hand => .{.hand = try reader.readInt(u32)},\n\t\t\t\t.recipe => .{\n\t\t\t\t\t.recipe = blk: {\n\t\t\t\t\t\tvar itemList = main.List(struct {amount: u16, item: BaseItemIndex}).initCapacity(main.stackAllocator, len);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "source",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to typ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const typ: Type = switch(typeEnum) {\n\t\t\t\tinline .normal, .creative, .crafting => |tag| tag,\n\t\t\t\t.workbench => .{.workbench = ToolTypeIndex.fromId(reader.remaining) orelse return error.Invalid},\n\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "typ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to temp from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const temp: Inventory = .{\n\t\t\t\t\t.type = .normal,\n\t\t\t\t\t._items = &_items,\n\t\t\t\t\t.id = undefined,\n\t\t\t\t\t.source = undefined,\n\t\t\t\t\t.callbacks = .{},\n\t\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "temp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to itemHitBoxMargin from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const itemHitBoxMargin: f32 = @floatCast(main.itemdrop.ItemDropManager.radius);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "itemHitBoxMargin",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to itemHitBoxMarginVec from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const itemHitBoxMarginVec: Vec3f = @splat(itemHitBoxMargin);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "itemHitBoxMarginVec",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to pos from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const pos: Vec3d = @floatFromInt(_pos);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "pos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to pos from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const pos: Vec3d = @floatFromInt(_pos);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "pos",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to randomnessVec from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const randomnessVec: Vec3f = main.random.nextFloatVectorSigned(3, &main.seed)*@as(Vec3f, @splat(0.25));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "randomnessVec",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to directionVec from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const directionVec: Vec3f = @as(Vec3f, @floatCast(self.direction())) + randomnessVec;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "directionVec",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to z from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const z: f32 = directionVec[2];",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "z",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to result from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/Inventory.zig",
    "response": "const result: AddHealth = .{\n\t\t\t\t.target = try reader.readInt(u32),\n\t\t\t\t.health = @bitCast(try reader.readInt(u32)),\n\t\t\t\t.cause = try reader.readEnum(main.game.DamageType),\n\t\t\t};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/Inventory.zig",
      "type": "const",
      "name": "result",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn deinit(self: *Assets, allocator: NeverFailingAllocator) void {\n\t\tself.blocks.deinit(allocator.allocator);\n\t\tself.blockMigrations.deinit(allocator.allocator);\n\t\tself.items.deinit(allocator.allocator);\n\t\tself.itemMigrations.deinit(allocator.allocator);\n\t\tself.tools.deinit(allocator.allocator);\n\t\tself.biomes.deinit(allocator.allocator);\n\t\tself.biomeMigrations.deinit(allocator.allocator);\n\t\tself.recipes.deinit(allocator.allocator);\n\t\tself.models.deinit(allocator.allocator);\n\t\tself.structureBuildingBlocks.deinit(allocator.allocator);\n\t\tself.blueprints.deinit(allocator.allocator);\n\t\tself.particles.deinit(allocator.allocator);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clone from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn clone(self: Assets, allocator: NeverFailingAllocator) Assets {\n\t\treturn .{\n\t\t\t.blocks = self.blocks.clone(allocator.allocator) catch unreachable,\n\t\t\t.blockMigrations = self.blockMigrations.clone(allocator.allocator) catch unreachable,\n\t\t\t.items = self.items.clone(allocator.allocator) catch unreachable,\n\t\t\t.itemMigrations = self.itemMigrations.clone(allocator.allocator) catch unreachable,\n\t\t\t.tools = self.tools.clone(allocator.allocator) catch unreachable,\n\t\t\t.biomes = self.biomes.clone(allocator.allocator) catch unreachable,\n\t\t\t.biomeMigrations = self.biomeMigrations.clone(allocator.allocator) catch unreachable,\n\t\t\t.recipes = self.recipes.clone(allocator.allocator) catch unreachable,\n\t\t\t.models = self.models.clone(allocator.allocator) catch unreachable,\n\t\t\t.structureBuildingBlocks = self.structureBuildingBlocks.clone(allocator.allocator) catch unreachable,\n\t\t\t.blueprints = self.blueprints.clone(allocator.allocator) catch unreachable,\n\t\t\t.particles = self.particles.clone(allocator.allocator) catch unreachable,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "clone",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn read(self: *Assets, allocator: NeverFailingAllocator, assetDir: main.files.Dir, assetPath: []const u8) void {\n\t\tconst addons = Addon.discoverAll(main.stackAllocator, assetDir, assetPath);\n\t\tdefer addons.deinit(main.stackAllocator);\n\t\tdefer for(addons.items) |*addon| addon.deinit(main.stackAllocator);\n\n\t\tfor(addons.items) |addon| {\n\t\t\taddon.readAllZon(allocator, \"blocks\", true, &self.blocks, &self.blockMigrations);\n\t\t\taddon.readAllZon(allocator, \"items\", true, &self.items, &self.itemMigrations);\n\t\t\taddon.readAllZon(allocator, \"tools\", true, &self.tools, null);\n\t\t\taddon.readAllZon(allocator, \"biomes\", true, &self.biomes, &self.biomeMigrations);\n\t\t\taddon.readAllZon(allocator, \"recipes\", false, &self.recipes, null);\n\t\t\taddon.readAllZon(allocator, \"sbb\", true, &self.structureBuildingBlocks, null);\n\t\t\taddon.readAllBlueprints(allocator, \"sbb\", &self.blueprints);\n\t\t\taddon.readAllModels(allocator, &self.models);\n\t\t\taddon.readAllZon(allocator, \"particles\", true, &self.particles, null);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "read",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to log from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn log(self: *Assets, typ: enum {common, world}) void {\n\t\tstd.log.info(\n\t\t\t\"Finished {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "log",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to discoverAll from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn discoverAll(allocator: NeverFailingAllocator, assetDir: main.files.Dir, path: []const u8) main.ListUnmanaged(Addon) {\n\t\t\tvar addons: main.ListUnmanaged(Addon) = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "discoverAll",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn deinit(self: *Addon, allocator: NeverFailingAllocator) void {\n\t\t\tself.dir.close();\n\t\t\tallocator.free(self.name);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn init(self: *Defaults, allocator: NeverFailingAllocator) void {\n\t\t\t\tself.localArena = .init(allocator);\n\t\t\t\tself.localAllocator = self.localArena.allocator();\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn deinit(self: *Defaults) void {\n\t\t\t\tself.localArena.deinit();\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn get(self: *Defaults, dir: main.files.Dir, dirPath: []const u8) ZonElement {\n\t\t\t\tconst result = self.defaults.getOrPut(self.localAllocator.allocator, dirPath) catch unreachable;\n\n\t\t\t\tif(!result.found_existing) {\n\t\t\t\t\tresult.key_ptr.* = self.localAllocator.dupe(u8, dirPath);\n\t\t\t\t\tconst default: ZonElement = self.read(dir) catch |err| blk: {\n\t\t\t\t\t\tstd.log.err(\"Failed to read default file: {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "get",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to read from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn read(self: *Defaults, dir: main.files.Dir) !ZonElement {\n\t\t\t\tif(dir.readToZon(self.localAllocator, \"_defaults.zig.zon\")) |zon| {\n\t\t\t\t\treturn zon;\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "read",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to readAllZon from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn readAllZon(addon: Addon, allocator: NeverFailingAllocator, assetType: []const u8, hasDefaults: bool, output: *ZonHashMap, migrations: ?*AddonNameToZonMap) void {\n\t\t\tvar assetsDirectory = addon.dir.openIterableDir(assetType) catch |err| {\n\t\t\t\tif(err != error.FileNotFound) {\n\t\t\t\t\tstd.log.err(\"Could not open addon directory {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "readAllZon",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to readAllBlueprints from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn readAllBlueprints(addon: Addon, allocator: NeverFailingAllocator, subPath: []const u8, output: *BytesHashMap) void {\n\t\t\tvar assetsDirectory = addon.dir.openIterableDir(subPath) catch |err| {\n\t\t\t\tif(err != error.FileNotFound) {\n\t\t\t\t\tstd.log.err(\"Could not open addon directory {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "readAllBlueprints",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to readAllModels from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn readAllModels(addon: Addon, allocator: NeverFailingAllocator, output: *BytesHashMap) void {\n\t\t\tconst subPath = \"models\";\n\t\t\tvar assetsDirectory = addon.dir.openIterableDir(subPath) catch |err| {\n\t\t\t\tif(err != error.FileNotFound) {\n\t\t\t\t\tstd.log.err(\"Could not open addon directory {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "readAllModels",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to createAssetStringID from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn createAssetStringID(\n\texternalAllocator: NeverFailingAllocator,\n\taddonName: []const u8,\n\trelativeFilePath: []const u8,\n) []u8 {\n\tconst baseNameEndIndex = if(std.ascii.endsWithIgnoreCase(relativeFilePath, \".zig.zon\")) relativeFilePath.len - \".zig.zon\".len else std.mem.lastIndexOfScalar(u8, relativeFilePath, '.') orelse relativeFilePath.len;\n\tconst pathNoExtension: []const u8 = relativeFilePath[0..baseNameEndIndex];\n\n\tconst assetId: []u8 = externalAllocator.alloc(u8, addonName.len + 1 + pathNoExtension.len);\n\n\t@memcpy(assetId[0..addonName.len], addonName);\n\tassetId[addonName.len] = ':';\n\n\t// Convert from windows to unix style separators.\n\tfor(0..pathNoExtension.len) |i| {\n\t\tif(pathNoExtension[i] == '\\\\') {\n\t\t\tassetId[addonName.len + 1 + i] = '/';\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "createAssetStringID",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn init() void {\n\tbiomes_zig.init();\n\tblocks_zig.init();\n\tmigrations_zig.init();\n\n\tcommonAssetArena = main.globalAllocator.createArena();\n\n\tcommon = .init();\n\tcommon.read(commonAssetArena, main.files.cwd(), \"assets/\");\n\tcommon.log(.common);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerItem from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn registerItem(assetFolder: []const u8, id: []const u8, zon: ZonElement) !void {\n\tvar split = std.mem.splitScalar(u8, id, ':');\n\tconst mod = split.first();\n\tvar texturePath: []const u8 = &.{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "registerItem",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerTool from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn registerTool(assetFolder: []const u8, id: []const u8, zon: ZonElement) void {\n\titems_zig.registerTool(assetFolder, id, zon);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "registerTool",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn registerBlock(assetFolder: []const u8, id: []const u8, zon: ZonElement) !void {\n\tif(zon == .null) std.log.err(\"Missing block: {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "registerBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to assignBlockItem from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn assignBlockItem(stringId: []const u8) !void {\n\tconst block = blocks_zig.getTypeById(stringId);\n\t// TODO: This must be gone in PixelGuys/Cubyz#1205\n\tconst index = items_zig.BaseItemIndex.fromId(stringId) orelse unreachable;\n\tconst item = &items_zig.itemList[@intFromEnum(index)];\n\titem.block = block;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "assignBlockItem",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerBiome from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn registerBiome(numericId: u32, stringId: []const u8, zon: ZonElement) void {\n\tif(zon == .null) std.log.err(\"Missing biome: {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "registerBiome",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerRecipesFromZon from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn registerRecipesFromZon(zon: ZonElement) void {\n\titems_zig.registerRecipes(zon);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "registerRecipesFromZon",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn init(allocator: NeverFailingAllocator, zon: ZonElement, firstElement: ?[]const u8) !*Palette {\n\t\tconst self = switch(zon) {\n\t\t\t.object => try loadFromZonLegacy(allocator, zon),\n\t\t\t.array, .null => try loadFromZon(allocator, zon),\n\t\t\telse => return error.InvalidPaletteFormat,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to loadFromZon from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn loadFromZon(allocator: NeverFailingAllocator, zon: ZonElement) !*Palette {\n\t\tconst items = zon.toSlice();\n\n\t\tconst self = allocator.create(Palette);\n\t\tself.* = Palette{\n\t\t\t.palette = .initCapacity(allocator, items.len),\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "loadFromZon",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to loadFromZonLegacy from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "fn loadFromZonLegacy(allocator: NeverFailingAllocator, zon: ZonElement) !*Palette {\n\t\t// Using zon.object.count() here has the implication that array can not be sparse.\n\t\tconst paletteLength = zon.object.count();\n\t\tconst translationPalette = main.stackAllocator.alloc(?[]const u8, paletteLength);\n\t\tdefer main.stackAllocator.free(translationPalette);\n\n\t\t@memset(translationPalette, null);\n\n\t\tvar iterator = zon.object.iterator();\n\t\twhile(iterator.next()) |entry| {\n\t\t\tconst numericId = entry.value_ptr.as(?usize, null) orelse return error.InvalidPaletteFormat;\n\t\t\tconst name = entry.key_ptr.*;\n\n\t\t\tif(numericId >= translationPalette.len) {\n\t\t\t\tstd.log.err(\"ID {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "loadFromZonLegacy",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn deinit(self: *Palette) void {\n\t\tfor(self.palette.items) |item| {\n\t\t\tself.palette.allocator.free(item);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to add from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn add(self: *Palette, id: []const u8) void {\n\t\tself.palette.append(self.palette.allocator.dupe(u8, id));\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "add",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to storeToZon from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn storeToZon(self: *Palette, allocator: NeverFailingAllocator) ZonElement {\n\t\tconst zon = ZonElement.initArray(allocator);\n\n\t\tzon.array.ensureCapacity(self.palette.items.len);\n\n\t\tfor(self.palette.items) |item| {\n\t\t\tzon.append(item);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "storeToZon",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to size from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn size(self: *Palette) usize {\n\t\treturn self.palette.items.len;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "size",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to replaceEntry from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn replaceEntry(self: *Palette, entryIndex: usize, newEntry: []const u8) void {\n\t\tself.palette.allocator.free(self.palette.items[entryIndex]);\n\t\tself.palette.items[entryIndex] = self.palette.allocator.dupe(u8, newEntry);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "replaceEntry",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to loadWorldAssets from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn loadWorldAssets(assetFolder: []const u8, blockPalette: *Palette, itemPalette: *Palette, toolPalette: *Palette, biomePalette: *Palette) !void { // MARK: loadWorldAssets()\n\tif(loadedAssets) return; // The assets already got loaded by the server.\n\tloadedAssets = true;\n\n\tconst worldArena = main.stackAllocator.createArena();\n\tdefer main.stackAllocator.destroyArena(worldArena);\n\n\tvar worldAssets = common.clone(worldArena);\n\tworldAssets.read(worldArena, main.files.cubyzDir(), assetFolder);\n\n\terrdefer unloadAssets();\n\n\tmigrations_zig.registerAll(.block, &worldAssets.blockMigrations);\n\tmigrations_zig.apply(.block, blockPalette);\n\n\tmigrations_zig.registerAll(.item, &worldAssets.itemMigrations);\n\tmigrations_zig.apply(.item, itemPalette);\n\n\tmigrations_zig.registerAll(.biome, &worldAssets.biomeMigrations);\n\tmigrations_zig.apply(.biome, biomePalette);\n\n\t// models:\n\tvar modelIterator = worldAssets.models.iterator();\n\twhile(modelIterator.next()) |entry| {\n\t\t_ = main.models.registerModel(entry.key_ptr.*, entry.value_ptr.*);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "loadWorldAssets",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to unloadAssets from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn unloadAssets() void { // MARK: unloadAssets()\n\tif(!loadedAssets) return;\n\tloadedAssets = false;\n\n\tsbb.reset();\n\tblocks_zig.reset();\n\titems_zig.reset();\n\tmigrations_zig.reset();\n\tbiomes_zig.reset();\n\tmigrations_zig.reset();\n\tmain.models.reset();\n\tmain.rotation.reset();\n\tmain.Tag.resetTags();\n\n\t// Remove paths from asset hot reloading:\n\tvar dir = main.files.cwd().openIterableDir(\"assets\") catch |err| {\n\t\tstd.log.err(\"Can't open asset path {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "unloadAssets",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub fn deinit() void {\n\tmain.globalAllocator.destroyArena(commonAssetArena);\n\tbiomes_zig.deinit();\n\tblocks_zig.deinit();\n\tmigrations_zig.deinit();\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Assets from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub const Assets = struct {\n\tpub const ZonHashMap = std.StringHashMapUnmanaged(ZonElement);\n\tpub const BytesHashMap = std.StringHashMapUnmanaged([]const u8);\n\tpub const AddonNameToZonMap = std.StringHashMapUnmanaged(ZonElement);\n\n\tblocks: ZonHashMap,\n\tblockMigrations: AddonNameToZonMap,\n\titems: ZonHashMap,\n\titemMigrations: ZonHashMap,\n\ttools: ZonHashMap,\n\tbiomes: ZonHashMap,\n\tbiomeMigrations: AddonNameToZonMap,\n\trecipes: ZonHashMap,\n\tmodels: BytesHashMap,\n\tstructureBuildingBlocks: ZonHashMap,\n\tblueprints: BytesHashMap,\n\tparticles: ZonHashMap,\n\n\tfn init() Assets {\n\t\treturn .{\n\t\t\t.blocks = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "struct",
      "name": "Assets",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Addon from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "const Addon = struct {\n\t\tname: []const u8,\n\t\tdir: files.Dir,\n\n\t\tfn discoverAll(allocator: NeverFailingAllocator, assetDir: main.files.Dir, path: []const u8) main.ListUnmanaged(Addon) {\n\t\t\tvar addons: main.ListUnmanaged(Addon) = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "struct",
      "name": "Addon",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Defaults from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "const Defaults = struct {\n\t\t\tlocalArena: NeverFailingArenaAllocator = undefined,\n\t\t\tlocalAllocator: NeverFailingAllocator = undefined,\n\t\t\tdefaults: std.StringHashMapUnmanaged(ZonElement) = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "struct",
      "name": "Defaults",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Palette from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "pub const Palette = struct { // MARK: Palette\n\tpalette: main.List([]const u8),\n\n\tpub fn init(allocator: NeverFailingAllocator, zon: ZonElement, firstElement: ?[]const u8) !*Palette {\n\t\tconst self = switch(zon) {\n\t\t\t.object => try loadFromZonLegacy(allocator, zon),\n\t\t\t.array, .null => try loadFromZon(allocator, zon),\n\t\t\telse => return error.InvalidPaletteFormat,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "struct",
      "name": "Palette",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to default from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "const default: ZonElement = self.read(dir) catch |err| blk: {\n\t\t\t\t\t\tstd.log.err(\"Failed to read default file: {s}\", .{@errorName(err)});",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "const",
      "name": "default",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to pathNoExtension from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "const pathNoExtension: []const u8 = relativeFilePath[0..baseNameEndIndex];",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "const",
      "name": "pathNoExtension",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to assetId from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/assets.zig",
    "response": "const assetId: []u8 = externalAllocator.alloc(u8, addonName.len + 1 + pathNoExtension.len);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/assets.zig",
      "type": "const",
      "name": "assetId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to handleError from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn handleError(miniaudioError: c.ma_result) !void {\n\tif(miniaudioError != c.MA_SUCCESS) {\n\t\tstd.log.err(\"miniaudio error: {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "handleError",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to open_vorbis_file_by_id from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn open_vorbis_file_by_id(id: []const u8) ?*c.stb_vorbis {\n\t\tconst colonIndex = std.mem.indexOfScalar(u8, id, ':') orelse {\n\t\t\tstd.log.err(\"Invalid music id: {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "open_vorbis_file_by_id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn init(musicId: []const u8) *AudioData {\n\t\tconst self = main.globalAllocator.create(AudioData);\n\t\tself.* = .{.musicId = main.globalAllocator.dupe(u8, musicId)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn deinit(self: *const AudioData) void {\n\t\tmain.globalAllocator.free(self.data);\n\t\tmain.globalAllocator.free(self.musicId);\n\t\tmain.globalAllocator.destroy(self);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to hashCode from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn hashCode(self: *const AudioData) u32 {\n\t\tvar result: u32 = 0;\n\t\tfor(self.musicId) |char| {\n\t\t\tresult = result + char;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "hashCode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to equals from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn equals(self: *const AudioData, _other: ?*const AudioData) bool {\n\t\tif(_other) |other| {\n\t\t\treturn std.mem.eql(u8, self.musicId, other.musicId);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "equals",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to findMusic from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn findMusic(musicId: []const u8) ?[]f32 {\n\t{\n\t\ttaskMutex.lock();\n\t\tdefer taskMutex.unlock();\n\t\tif(musicCache.find(AudioData{.musicId = musicId}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "findMusic",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to schedule from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn schedule(musicId: []const u8) void {\n\t\tconst task = main.globalAllocator.create(MusicLoadTask);\n\t\ttask.* = MusicLoadTask{\n\t\t\t.musicId = main.globalAllocator.dupe(u8, musicId),\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "schedule",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getPriority from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn getPriority(_: *MusicLoadTask) f32 {\n\t\treturn std.math.floatMax(f32);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "getPriority",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isStillNeeded from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn isStillNeeded(_: *MusicLoadTask) bool {\n\t\treturn true;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "isStillNeeded",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn run(self: *MusicLoadTask) void {\n\t\tdefer self.clean();\n\t\tconst data = AudioData.init(self.musicId);\n\t\tconst hasOld = musicCache.addToCache(data, data.hashCode());\n\t\tif(hasOld) |old| {\n\t\t\told.deinit();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "run",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clean from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn clean(self: *MusicLoadTask) void {\n\t\ttaskMutex.lock();\n\t\tvar index: usize = 0;\n\t\twhile(index < activeTasks.items.len) : (index += 1) {\n\t\t\tif(activeTasks.items[index].ptr == self.musicId.ptr) break;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "clean",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn deinit() void {\n\thandleError(c.ma_device_stop(&device)) catch {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn init(musicBuffer: []const f32) void {\n\t\tbuffer = musicBuffer;\n\t\tanimationAmplitude = 0;\n\t\tanimationVelocity = 0;\n\t\tanimationDecaying = false;\n\t\tanimationProgress = 0;\n\t\tinterpolationPolynomial = utils.unitIntervalSpline(f32, animationAmplitude, animationVelocity, 1, 0);\n\t\tpos = 0;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to evaluatePolynomial from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn evaluatePolynomial() void {\n\t\tconst t = animationProgress;\n\t\tconst t2 = t*t;\n\t\tconst t3 = t2*t;\n\t\tconst a = interpolationPolynomial;\n\t\tanimationAmplitude = a[0] + a[1]*t + a[2]*t2 + a[3]*t3; // value\n\t\tanimationVelocity = a[1] + 2*a[2]*t + 3*a[3]*t2;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "evaluatePolynomial",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setMusic from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "pub fn setMusic(music: []const u8) void {\n\tmutex.lock();\n\tdefer mutex.unlock();\n\tif(std.mem.eql(u8, music, preferredMusic)) return;\n\tmain.globalAllocator.free(preferredMusic);\n\tpreferredMusic = main.globalAllocator.dupe(u8, music);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "setMusic",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to addMusic from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn addMusic(buffer: []f32) void {\n\tmutex.lock();\n\tdefer mutex.unlock();\n\tif(!std.mem.eql(u8, preferredMusic, activeMusicId)) {\n\t\tif(activeMusicId.len == 0) {\n\t\t\tif(findMusic(preferredMusic)) |musicBuffer| {\n\t\t\t\tcurrentMusic.init(musicBuffer);\n\t\t\t\tmain.globalAllocator.free(activeMusicId);\n\t\t\t\tactiveMusicId = main.globalAllocator.dupe(u8, preferredMusic);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "addMusic",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to miniaudioCallback from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "fn miniaudioCallback(\n\tmaDevice: ?*anyopaque,\n\toutput: ?*anyopaque,\n\tinput: ?*const anyopaque,\n\tframeCount: u32,\n) callconv(.c) void {\n\t_ = input;\n\t_ = maDevice;\n\tconst valuesPerBuffer = 2*frameCount; // Stereo\n\tconst buffer = @as([*]f32, @ptrCast(@alignCast(output)))[0..valuesPerBuffer];\n\t@memset(buffer, 0);\n\taddMusic(buffer);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "function",
      "name": "miniaudioCallback",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AudioData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "const AudioData = struct {\n\tmusicId: []const u8,\n\tdata: []f32 = &.{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "struct",
      "name": "AudioData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to MusicLoadTask from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "const MusicLoadTask = struct {\n\tmusicId: []const u8,\n\n\tconst vtable = utils.ThreadPool.VTable{\n\t\t.getPriority = main.utils.castFunctionSelfToAnyopaque(getPriority),\n\t\t.isStillNeeded = main.utils.castFunctionSelfToAnyopaque(isStillNeeded),\n\t\t.run = main.utils.castFunctionSelfToAnyopaque(run),\n\t\t.clean = main.utils.castFunctionSelfToAnyopaque(clean),\n\t\t.taskType = .misc,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "struct",
      "name": "MusicLoadTask",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to currentMusic from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "const currentMusic = struct {\n\tvar buffer: []const f32 = undefined;\n\tvar animationAmplitude: f32 = undefined;\n\tvar animationVelocity: f32 = undefined;\n\tvar animationDecaying: bool = undefined;\n\tvar animationProgress: f32 = undefined;\n\tvar interpolationPolynomial: [4]f32 = undefined;\n\tvar pos: u32 = undefined;\n\n\tfn init(musicBuffer: []const f32) void {\n\t\tbuffer = musicBuffer;\n\t\tanimationAmplitude = 0;\n\t\tanimationVelocity = 0;\n\t\tanimationDecaying = false;\n\t\tanimationProgress = 0;\n\t\tinterpolationPolynomial = utils.unitIntervalSpline(f32, animationAmplitude, animationVelocity, 1, 0);\n\t\tpos = 0;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "struct",
      "name": "currentMusic",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ogg_info from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "const ogg_info: c.stb_vorbis_info = c.stb_vorbis_get_info(ogg_stream);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "const",
      "name": "ogg_info",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to newSamples from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "const newSamples: usize = @intFromFloat(@as(f32, @floatFromInt(tempData.len/2))/stepWidth);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "const",
      "name": "newSamples",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to firstSample from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/audio.zig",
    "response": "const firstSample: usize = @intFromFloat(@floor(samplePosition));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/audio.zig",
      "type": "const",
      "name": "firstSample",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn init(comptime BlockEntityTypeT: type) BlockEntityType {\n\t\tBlockEntityTypeT.init();\n\t\tvar class = BlockEntityType{\n\t\t\t.id = BlockEntityTypeT.id,\n\t\t\t.vtable = undefined,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onLoadClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onLoadClient(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk, reader: *BinaryReader) BinaryReader.AllErrors!void {\n\t\treturn self.vtable.onLoadClient(pos, chunk, reader);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onLoadClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onUnloadClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onUnloadClient(self: *BlockEntityType, dataIndex: BlockEntityIndex) void {\n\t\treturn self.vtable.onUnloadClient(dataIndex);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onUnloadClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onLoadServer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onLoadServer(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk, reader: *BinaryReader) BinaryReader.AllErrors!void {\n\t\treturn self.vtable.onLoadServer(pos, chunk, reader);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onLoadServer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onUnloadServer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onUnloadServer(self: *BlockEntityType, dataIndex: BlockEntityIndex) void {\n\t\treturn self.vtable.onUnloadServer(dataIndex);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onUnloadServer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onStoreServerToDisk from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onStoreServerToDisk(self: *BlockEntityType, dataIndex: BlockEntityIndex, writer: *BinaryWriter) void {\n\t\treturn self.vtable.onStoreServerToDisk(dataIndex, writer);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onStoreServerToDisk",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onStoreServerToClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onStoreServerToClient(self: *BlockEntityType, dataIndex: BlockEntityIndex, writer: *BinaryWriter) void {\n\t\treturn self.vtable.onStoreServerToClient(dataIndex, writer);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onStoreServerToClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onInteract from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onInteract(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk) EventStatus {\n\t\treturn self.vtable.onInteract(pos, chunk);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onInteract",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateClientData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn updateClientData(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void {\n\t\treturn try self.vtable.updateClientData(pos, chunk, event);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "updateClientData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateServerData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn updateServerData(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void {\n\t\treturn try self.vtable.updateServerData(pos, chunk, event);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "updateServerData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getServerToClientData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn getServerToClientData(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void {\n\t\treturn self.vtable.getServerToClientData(pos, chunk, writer);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getServerToClientData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getClientToServerData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn getClientToServerData(self: *BlockEntityType, pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void {\n\t\treturn self.vtable.getClientToServerData(pos, chunk, writer);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getClientToServerData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to BlockEntityDataStorage from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn BlockEntityDataStorage(T: type) type {\n\treturn struct {\n\t\tpub const DataT = T;\n\t\tvar freeIndexList: main.ListUnmanaged(BlockEntityIndex) = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "BlockEntityDataStorage",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn deinit() void {\n\t\t\tstorage.deinit(main.globalAllocator);\n\t\t\tfreeIndexList.deinit(main.globalAllocator);\n\t\t\tnextIndex = @enumFromInt(0);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn reset() void {\n\t\t\tstorage.clear();\n\t\t\tfreeIndexList.clearRetainingCapacity();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to createEntry from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn createEntry(pos: Vec3i, chunk: *Chunk) BlockEntityIndex {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tconst dataIndex: BlockEntityIndex = freeIndexList.popOrNull() orelse blk: {\n\t\t\t\tdefer nextIndex = @enumFromInt(@intFromEnum(nextIndex) + 1);\n\t\t\t\tbreak :blk nextIndex;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "createEntry",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to add from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn add(pos: Vec3i, value: DataT, chunk: *Chunk) void {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\n\t\t\tconst dataIndex = createEntry(pos, chunk);\n\t\t\tstorage.set(main.globalAllocator, dataIndex, value);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "add",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to removeAtIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn removeAtIndex(dataIndex: BlockEntityIndex) ?DataT {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tfreeIndexList.append(main.globalAllocator, dataIndex);\n\t\t\treturn storage.fetchRemove(dataIndex) catch null;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "removeAtIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to remove from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn remove(pos: Vec3i, chunk: *Chunk) ?DataT {\n\t\t\tmutex.lock();\n\t\t\tdefer mutex.unlock();\n\n\t\t\tconst blockIndex = chunk.getLocalBlockIndex(pos);\n\n\t\t\tchunk.blockPosToEntityDataMapMutex.lock();\n\t\t\tconst entityNullable = chunk.blockPosToEntityDataMap.fetchRemove(blockIndex);\n\t\t\tchunk.blockPosToEntityDataMapMutex.unlock();\n\n\t\t\tconst entry = entityNullable orelse return null;\n\n\t\t\tconst dataIndex = entry.value;\n\t\t\treturn removeAtIndex(dataIndex);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "remove",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getByIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn getByIndex(dataIndex: BlockEntityIndex) ?*DataT {\n\t\t\tmain.utils.assertLocked(&mutex);\n\n\t\t\treturn storage.get(dataIndex);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getByIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn get(pos: Vec3i, chunk: *Chunk) ?*DataT {\n\t\t\tmain.utils.assertLocked(&mutex);\n\n\t\t\tconst blockIndex = chunk.getLocalBlockIndex(pos);\n\n\t\t\tchunk.blockPosToEntityDataMapMutex.lock();\n\t\t\tdefer chunk.blockPosToEntityDataMapMutex.unlock();\n\n\t\t\tconst dataIndex = chunk.blockPosToEntityDataMap.get(blockIndex) orelse return null;\n\t\t\treturn storage.get(dataIndex);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getOrPut from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn getOrPut(pos: Vec3i, chunk: *Chunk) GetOrPutResult {\n\t\t\tmain.utils.assertLocked(&mutex);\n\t\t\tif(get(pos, chunk)) |result| return .{.valuePtr = result, .foundExisting = true}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getOrPut",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn deinit() void {\n\t\t\tStorageServer.deinit();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn reset() void {\n\t\t\tStorageServer.reset();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onInventoryUpdateCallback from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn onInventoryUpdateCallback(source: main.items.Inventory.Source) void {\n\t\t\tconst pos = source.blockInventory;\n\t\t\tconst simChunk = main.server.world.?.getSimulationChunkAndIncreaseRefCount(pos[0], pos[1], pos[2]) orelse return;\n\t\t\tdefer simChunk.decreaseRefCount();\n\t\t\tconst ch = simChunk.getChunk() orelse return;\n\t\t\tch.mutex.lock();\n\t\t\tdefer ch.mutex.unlock();\n\t\t\tch.setChanged();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onInventoryUpdateCallback",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onLoadClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onLoadClient(_: Vec3i, _: *Chunk, _: *BinaryReader) BinaryReader.AllErrors!void {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onLoadClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onLoadServer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onLoadServer(pos: Vec3i, chunk: *Chunk, reader: *BinaryReader) BinaryReader.AllErrors!void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tdefer StorageServer.mutex.unlock();\n\n\t\t\tconst data = StorageServer.getOrPut(pos, chunk);\n\t\t\tstd.debug.assert(!data.foundExisting);\n\t\t\tdata.valuePtr.invId = main.items.Inventory.Sync.ServerSide.createExternallyManagedInventory(inventorySize, .normal, .{.blockInventory = pos}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onLoadServer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onUnloadServer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onUnloadServer(dataIndex: BlockEntityIndex) void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tconst data = StorageServer.removeAtIndex(dataIndex) orelse unreachable;\n\t\t\tStorageServer.mutex.unlock();\n\t\t\tmain.items.Inventory.Sync.ServerSide.destroyExternallyManagedInventory(data.invId);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onUnloadServer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onStoreServerToDisk from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onStoreServerToDisk(dataIndex: BlockEntityIndex, writer: *BinaryWriter) void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tdefer StorageServer.mutex.unlock();\n\t\t\tconst data = StorageServer.getByIndex(dataIndex) orelse return;\n\n\t\t\tconst inv = main.items.Inventory.Sync.ServerSide.getInventoryFromId(data.invId);\n\t\t\tvar isEmpty: bool = true;\n\t\t\tfor(inv._items) |item| {\n\t\t\t\tif(item.amount != 0) isEmpty = false;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onStoreServerToDisk",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onStoreServerToClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onStoreServerToClient(_: BlockEntityIndex, _: *BinaryWriter) void {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onStoreServerToClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onInteract from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onInteract(pos: Vec3i, _: *Chunk) EventStatus {\n\t\t\tif(main.KeyBoard.key(\"shift\").pressed) return .ignored;\n\n\t\t\tmain.network.Protocols.blockEntityUpdate.sendClientDataUpdateToServer(main.game.world.?.conn, pos);\n\n\t\t\tconst inventory = main.items.Inventory.init(main.globalAllocator, inventorySize, .normal, .{.blockInventory = pos}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onInteract",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateClientData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn updateClientData(_: Vec3i, _: *Chunk, _: UpdateEvent) BinaryReader.AllErrors!void {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "updateClientData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateServerData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn updateServerData(pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void {\n\t\t\tswitch(event) {\n\t\t\t\t.remove => {\n\t\t\t\t\tconst chest = StorageServer.remove(pos, chunk) orelse return;\n\t\t\t\t\tmain.items.Inventory.Sync.ServerSide.destroyAndDropExternallyManagedInventory(chest.invId, pos);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "updateServerData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getServerToClientData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn getServerToClientData(_: Vec3i, _: *Chunk, _: *BinaryWriter) void {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getServerToClientData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getClientToServerData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn getClientToServerData(_: Vec3i, _: *Chunk, _: *BinaryWriter) void {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getClientToServerData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to renderAll from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn renderAll(_: Mat4f, _: Vec3f, _: Vec3d) void {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "renderAll",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "fn deinit(self: @This()) void {\n\t\t\t\tmain.globalAllocator.free(self.text);\n\t\t\t\tif(self.renderedTexture) |texture| {\n\t\t\t\t\ttextureDeinitLock.lock();\n\t\t\t\t\tdefer textureDeinitLock.unlock();\n\t\t\t\t\ttextureDeinitList.append(texture);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn init() void {\n\t\t\tStorageServer.init();\n\t\t\tStorageClient.init();\n\t\t\ttextureDeinitList = .init(main.globalAllocator);\n\n\t\t\tpipeline = graphics.Pipeline.init(\n\t\t\t\t\"assets/cubyz/shaders/block_entity/sign.vert\",\n\t\t\t\t\"assets/cubyz/shaders/block_entity/sign.frag\",\n\t\t\t\t\"\",\n\t\t\t\t&uniforms,\n\t\t\t\t.{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn deinit() void {\n\t\t\twhile(textureDeinitList.popOrNull()) |texture| {\n\t\t\t\ttexture.deinit();\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn reset() void {\n\t\t\tStorageServer.reset();\n\t\t\tStorageClient.reset();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onUnloadClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onUnloadClient(dataIndex: BlockEntityIndex) void {\n\t\t\tStorageClient.mutex.lock();\n\t\t\tdefer StorageClient.mutex.unlock();\n\t\t\tconst entry = StorageClient.removeAtIndex(dataIndex) orelse unreachable;\n\t\t\tentry.deinit();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onUnloadClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onUnloadServer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onUnloadServer(dataIndex: BlockEntityIndex) void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tdefer StorageServer.mutex.unlock();\n\t\t\tconst entry = StorageServer.removeAtIndex(dataIndex) orelse unreachable;\n\t\t\tmain.globalAllocator.free(entry.text);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onUnloadServer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to onInteract from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onInteract(pos: Vec3i, chunk: *Chunk) EventStatus {\n\t\t\tif(main.KeyBoard.key(\"shift\").pressed) return .ignored;\n\n\t\t\tStorageClient.mutex.lock();\n\t\t\tdefer StorageClient.mutex.unlock();\n\t\t\tconst data = StorageClient.get(pos, chunk);\n\t\t\tmain.gui.windowlist.sign_editor.openFromSignData(pos, if(data) |_data| _data.text else \"\");\n\n\t\t\treturn .handled;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onInteract",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onLoadClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onLoadClient(pos: Vec3i, chunk: *Chunk, reader: *BinaryReader) BinaryReader.AllErrors!void {\n\t\t\treturn updateClientData(pos, chunk, .{.update = reader}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onLoadClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateClientData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn updateClientData(pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void {\n\t\t\tif(event == .remove or event.update.remaining.len == 0) {\n\t\t\t\tconst entry = StorageClient.remove(pos, chunk) orelse return;\n\t\t\t\tentry.deinit();\n\t\t\t\treturn;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "updateClientData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onLoadServer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onLoadServer(pos: Vec3i, chunk: *Chunk, reader: *BinaryReader) BinaryReader.AllErrors!void {\n\t\t\treturn updateServerData(pos, chunk, .{.update = reader}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onLoadServer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateServerData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn updateServerData(pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void {\n\t\t\tif(event == .remove or event.update.remaining.len == 0) {\n\t\t\t\tconst entry = StorageServer.remove(pos, chunk) orelse return;\n\t\t\t\tmain.globalAllocator.free(entry.text);\n\t\t\t\treturn;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "updateServerData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to onStoreServerToDisk from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn onStoreServerToDisk(dataIndex: BlockEntityIndex, writer: *BinaryWriter) void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tdefer StorageServer.mutex.unlock();\n\n\t\t\tconst data = StorageServer.getByIndex(dataIndex) orelse return;\n\t\t\twriter.writeSlice(data.text);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "onStoreServerToDisk",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getServerToClientData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn getServerToClientData(pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void {\n\t\t\tStorageServer.mutex.lock();\n\t\t\tdefer StorageServer.mutex.unlock();\n\n\t\t\tconst data = StorageServer.get(pos, chunk) orelse return;\n\t\t\twriter.writeSlice(data.text);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getServerToClientData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getClientToServerData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn getClientToServerData(pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void {\n\t\t\tStorageClient.mutex.lock();\n\t\t\tdefer StorageClient.mutex.unlock();\n\n\t\t\tconst data = StorageClient.get(pos, chunk) orelse return;\n\t\t\twriter.writeSlice(data.text);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getClientToServerData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to updateTextFromClient from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn updateTextFromClient(pos: Vec3i, newText: []const u8) void {\n\t\t\t{\n\t\t\t\tconst mesh = main.renderer.mesh_storage.getMesh(.initFromWorldPos(pos, 1)) orelse return;\n\t\t\t\tmesh.mutex.lock();\n\t\t\t\tdefer mesh.mutex.unlock();\n\t\t\t\tconst index = mesh.chunk.getLocalBlockIndex(pos);\n\t\t\t\tconst block = mesh.chunk.data.getValue(index);\n\t\t\t\tconst blockEntity = block.blockEntity() orelse return;\n\t\t\t\tif(!std.mem.eql(u8, blockEntity.id, id)) return;\n\n\t\t\t\tStorageClient.mutex.lock();\n\t\t\t\tdefer StorageClient.mutex.unlock();\n\n\t\t\t\tconst data = StorageClient.getOrPut(pos, mesh.chunk);\n\t\t\t\tif(data.foundExisting) {\n\t\t\t\t\tdata.valuePtr.deinit();\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "updateTextFromClient",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to renderAll from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn renderAll(projectionMatrix: Mat4f, ambientLight: Vec3f, playerPos: Vec3d) void {\n\t\t\tvar oldFramebufferBinding: c_int = undefined;\n\t\t\tc.glGetIntegerv(c.GL_DRAW_FRAMEBUFFER_BINDING, &oldFramebufferBinding);\n\n\t\t\tStorageClient.mutex.lock();\n\t\t\tdefer StorageClient.mutex.unlock();\n\n\t\t\tfor(StorageClient.storage.dense.items) |*signData| {\n\t\t\t\tif(signData.renderedTexture != null) continue;\n\n\t\t\t\tc.glViewport(0, 0, textureWidth, textureHeight);\n\t\t\t\tdefer c.glViewport(0, 0, main.Window.width, main.Window.height);\n\n\t\t\t\tvar finalFrameBuffer: graphics.FrameBuffer = undefined;\n\t\t\t\tfinalFrameBuffer.init(false, c.GL_NEAREST, c.GL_REPEAT);\n\t\t\t\tfinalFrameBuffer.updateSize(textureWidth, textureHeight, c.GL_RGBA8);\n\t\t\t\tfinalFrameBuffer.bind();\n\t\t\t\tfinalFrameBuffer.clear(.{0, 0, 0, 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "renderAll",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn init() void {\n\tinline for(@typeInfo(BlockEntityTypes).@\"struct\".decls) |declaration| {\n\t\tconst class = BlockEntityType.init(@field(BlockEntityTypes, declaration.name));\n\t\tblockyEntityTypes.putNoClobber(main.globalAllocator.allocator, class.id, class) catch unreachable;\n\t\tstd.log.debug(\"Registered BlockEntityType '{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "init",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn reset() void {\n\tinline for(@typeInfo(BlockEntityTypes).@\"struct\".decls) |declaration| {\n\t\t@field(BlockEntityTypes, declaration.name).reset();\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn deinit() void {\n\tinline for(@typeInfo(BlockEntityTypes).@\"struct\".decls) |declaration| {\n\t\t@field(BlockEntityTypes, declaration.name).deinit();\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getByID from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn getByID(_id: ?[]const u8) ?*BlockEntityType {\n\tconst id = _id orelse return null;\n\tif(blockyEntityTypes.getPtr(id)) |cls| return cls;\n\tstd.log.err(\"BlockEntityType with id '{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "getByID",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to renderAll from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub fn renderAll(projectionMatrix: Mat4f, ambientLight: Vec3f, playerPos: Vec3d) void {\n\tinline for(@typeInfo(BlockEntityTypes).@\"struct\".decls) |declaration| {\n\t\t@field(BlockEntityTypes, declaration.name).renderAll(projectionMatrix, ambientLight, playerPos);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "function",
      "name": "renderAll",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BlockEntityType from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub const BlockEntityType = struct {\n\tid: []const u8,\n\tvtable: VTable,\n\n\tconst VTable = struct {\n\t\tonLoadClient: *const fn(pos: Vec3i, chunk: *Chunk, reader: *BinaryReader) BinaryReader.AllErrors!void,\n\t\tonUnloadClient: *const fn(dataIndex: BlockEntityIndex) void,\n\t\tonLoadServer: *const fn(pos: Vec3i, chunk: *Chunk, reader: *BinaryReader) BinaryReader.AllErrors!void,\n\t\tonUnloadServer: *const fn(dataIndex: BlockEntityIndex) void,\n\t\tonStoreServerToDisk: *const fn(dataIndex: BlockEntityIndex, writer: *BinaryWriter) void,\n\t\tonStoreServerToClient: *const fn(dataIndex: BlockEntityIndex, writer: *BinaryWriter) void,\n\t\tonInteract: *const fn(pos: Vec3i, chunk: *Chunk) EventStatus,\n\t\tupdateClientData: *const fn(pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void,\n\t\tupdateServerData: *const fn(pos: Vec3i, chunk: *Chunk, event: UpdateEvent) BinaryReader.AllErrors!void,\n\t\tgetServerToClientData: *const fn(pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void,\n\t\tgetClientToServerData: *const fn(pos: Vec3i, chunk: *Chunk, writer: *BinaryWriter) void,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "struct",
      "name": "BlockEntityType",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to GetOrPutResult from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub const GetOrPutResult = struct {\n\t\t\tvaluePtr: *DataT,\n\t\t\tfoundExisting: bool,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "struct",
      "name": "GetOrPutResult",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BlockEntityTypes from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub const BlockEntityTypes = struct {\n\tpub const Chest = struct {\n\t\tconst inventorySize = 20;\n\t\tconst StorageServer = BlockEntityDataStorage(struct {\n\t\t\tinvId: main.items.Inventory.InventoryId,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "struct",
      "name": "BlockEntityTypes",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Sign from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "pub const Sign = struct {\n\t\tconst StorageServer = BlockEntityDataStorage(struct {\n\t\t\ttext: []const u8,\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "struct",
      "name": "Sign",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to dataIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "const dataIndex: BlockEntityIndex = freeIndexList.popOrNull() orelse blk: {\n\t\t\t\tdefer nextIndex = @enumFromInt(@intFromEnum(nextIndex) + 1);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "const",
      "name": "dataIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to light from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/block_entity.zig",
    "response": "const light: [4]u32 = main.renderer.chunk_meshing.PrimitiveMesh.getLight(mesh, signData.blockPos -% Vec3i{mesh.pos.wx, mesh.pos.wy, mesh.pos.wz}, 0, quad);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/block_entity.zig",
      "type": "const",
      "name": "light",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to register from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn register(_: []const u8, id: []const u8, zon: ZonElement) u16 {\n\t_id[size] = arena.dupe(u8, id);\n\treverseIndices.put(_id[size], @intCast(size)) catch unreachable;\n\n\t_mode[size] = rotation.getByID(zon.get([]const u8, \"rotation\", \"cubyz:no_rotation\"));\n\t_blockHealth[size] = zon.get(f32, \"blockHealth\", 1);\n\t_blockResistance[size] = zon.get(f32, \"blockResistance\", 0);\n\n\t_blockTags[size] = Tag.loadTagsFromZon(arena, zon.getChild(\"tags\"));\n\tif(_blockTags[size].len == 0) std.log.err(\"Block {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "register",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerBlockDrop from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn registerBlockDrop(typ: u16, zon: ZonElement) void {\n\tconst drops = zon.getChild(\"drops\").toSlice();\n\t_blockDrops[typ] = arena.alloc(BlockDrop, drops.len);\n\n\tfor(drops, 0..) |blockDrop, i| {\n\t\t_blockDrops[typ][i].chance = blockDrop.get(f32, \"chance\", 1);\n\t\tconst itemZons = blockDrop.getChild(\"items\").toSlice();\n\t\tvar resultItems = main.List(items.ItemStack).initCapacity(main.stackAllocator, itemZons.len);\n\t\tdefer resultItems.deinit();\n\n\t\tfor(itemZons) |itemZon| {\n\t\t\tvar string = itemZon.as([]const u8, \"auto\");\n\t\t\tstring = std.mem.trim(u8, string, \" \");\n\t\t\tvar iterator = std.mem.splitScalar(u8, string, ' ');\n\t\t\tvar name = iterator.first();\n\t\t\tvar amount: u16 = 1;\n\t\t\twhile(iterator.next()) |next| {\n\t\t\t\tif(next.len == 0) continue; // skip multiple spaces.\n\t\t\t\tamount = std.fmt.parseInt(u16, name, 0) catch 1;\n\t\t\t\tname = next;\n\t\t\t\tbreak;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "registerBlockDrop",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerLodReplacement from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn registerLodReplacement(typ: u16, zon: ZonElement) void {\n\tif(zon.get(?[]const u8, \"lodReplacement\", null)) |replacement| {\n\t\t_lodReplacement[typ] = getTypeById(replacement);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "registerLodReplacement",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerOpaqueVariant from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn registerOpaqueVariant(typ: u16, zon: ZonElement) void {\n\tif(zon.get(?[]const u8, \"opaqueVariant\", null)) |replacement| {\n\t\t_opaqueVariant[typ] = getTypeById(replacement);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "registerOpaqueVariant",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to finishBlocks from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn finishBlocks(zonElements: Assets.ZonHashMap) void {\n\tvar i: u16 = 0;\n\twhile(i < size) : (i += 1) {\n\t\tregisterBlockDrop(i, zonElements.get(_id[i]) orelse continue);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "finishBlocks",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn reset() void {\n\tsize = 0;\n\tores.clearAndFree();\n\tmeshes.reset();\n\t_ = arenaAllocator.reset(.free_all);\n\treverseIndices = .init(arena.allocator);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getTypeById from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn getTypeById(id: []const u8) u16 {\n\tif(reverseIndices.get(id)) |result| {\n\t\treturn result;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "getTypeById",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseBlockData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn parseBlockData(fullBlockId: []const u8, data: []const u8) ?u16 {\n\tif(std.mem.containsAtLeastScalar(u8, data, 1, ':')) {\n\t\tconst oreChild = parseBlock(data);\n\t\tif(oreChild.data != 0) {\n\t\t\tstd.log.warn(\"Error while parsing ore block data of '{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "parseBlockData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn parseBlock(data: []const u8) Block {\n\tvar id: []const u8 = data;\n\tvar blockData: ?u16 = null;\n\tif(std.mem.indexOfScalarPos(u8, data, 1 + (std.mem.indexOfScalar(u8, data, ':') orelse 0), ':')) |pos| {\n\t\tid = data[0..pos];\n\t\tblockData = parseBlockData(data, data[pos + 1 ..]);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "parseBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getBlockById from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn getBlockById(idAndData: []const u8) !u16 {\n\tconst addonNameSeparatorIndex = std.mem.indexOfScalar(u8, idAndData, ':') orelse return error.MissingAddonNameSeparator;\n\tconst blockIdEndIndex = std.mem.indexOfScalarPos(u8, idAndData, 1 + addonNameSeparatorIndex, ':') orelse idAndData.len;\n\tconst id = idAndData[0..blockIdEndIndex];\n\treturn reverseIndices.get(id) orelse return error.NotFound;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "getBlockById",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getBlockData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn getBlockData(idLikeString: []const u8) !?u16 {\n\tconst addonNameSeparatorIndex = std.mem.indexOfScalar(u8, idLikeString, ':') orelse return error.MissingAddonNameSeparator;\n\tconst blockIdEndIndex = std.mem.indexOfScalarPos(u8, idLikeString, 1 + addonNameSeparatorIndex, ':') orelse return null;\n\tconst dataString = idLikeString[blockIdEndIndex + 1 ..];\n\tif(dataString.len == 0) return error.EmptyDataString;\n\treturn std.fmt.parseInt(u16, dataString, 0) catch return error.InvalidData;\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "getBlockData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasRegistered from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn hasRegistered(id: []const u8) bool {\n\treturn reverseIndices.contains(id);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "hasRegistered",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to toInt from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn toInt(self: Block) u32 {\n\t\treturn @as(u32, self.typ) | @as(u32, self.data) << 16;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "toInt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fromInt from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn fromInt(self: u32) Block {\n\t\treturn Block{.typ = @truncate(self), .data = @intCast(self >> 16)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "fromInt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to transparent from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn transparent(self: Block) bool {\n\t\treturn _transparent[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "transparent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to collide from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn collide(self: Block) bool {\n\t\treturn _collide[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "collide",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to id from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn id(self: Block) []u8 {\n\t\treturn _id[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "id",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockHealth from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn blockHealth(self: Block) f32 {\n\t\treturn _blockHealth[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "blockHealth",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockResistance from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn blockResistance(self: Block) f32 {\n\t\treturn _blockResistance[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "blockResistance",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to replacable from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn replacable(self: Block) bool {\n\t\treturn _replacable[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "replacable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to selectable from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn selectable(self: Block) bool {\n\t\treturn _selectable[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "selectable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockDrops from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn blockDrops(self: Block) []BlockDrop {\n\t\treturn _blockDrops[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "blockDrops",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to degradable from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn degradable(self: Block) bool {\n\t\treturn _degradable[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "degradable",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to viewThrough from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn viewThrough(self: Block) bool {\n\t\treturn _viewThrough[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "viewThrough",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to alwaysViewThrough from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn alwaysViewThrough(self: Block) bool {\n\t\treturn _alwaysViewThrough[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "alwaysViewThrough",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasBackFace from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn hasBackFace(self: Block) bool {\n\t\treturn _hasBackFace[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "hasBackFace",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockTags from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn blockTags(self: Block) []const Tag {\n\t\treturn _blockTags[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "blockTags",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasTag from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn hasTag(self: Block, tag: Tag) bool {\n\t\treturn std.mem.containsAtLeastScalar(Tag, self.blockTags(), 1, tag);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "hasTag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to light from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn light(self: Block) u32 {\n\t\treturn _light[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "light",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to absorption from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn absorption(self: Block) u32 {\n\t\treturn _absorption[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "absorption",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gui from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn gui(self: Block) []u8 {\n\t\treturn _gui[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "gui",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mode from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn mode(self: Block) *RotationMode {\n\t\treturn _mode[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "mode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to modeData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn modeData(self: Block) u16 {\n\t\treturn _modeData[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "modeData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn rotateZ(self: Block, angle: Degrees) Block {\n\t\treturn .{.typ = self.typ, .data = self.mode().rotateZ(self.data, angle)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to lodReplacement from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn lodReplacement(self: Block) u16 {\n\t\treturn _lodReplacement[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "lodReplacement",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to opaqueVariant from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn opaqueVariant(self: Block) u16 {\n\t\treturn _opaqueVariant[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "opaqueVariant",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to friction from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn friction(self: Block) f32 {\n\t\treturn _friction[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "friction",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to bounciness from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn bounciness(self: Block) f32 {\n\t\treturn _bounciness[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "bounciness",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to density from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn density(self: Block) f32 {\n\t\treturn _density[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "density",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to terminalVelocity from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn terminalVelocity(self: Block) f32 {\n\t\treturn _terminalVelocity[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "terminalVelocity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to mobility from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn mobility(self: Block) f32 {\n\t\treturn _mobility[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "mobility",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to allowOres from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn allowOres(self: Block) bool {\n\t\treturn _allowOres[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "allowOres",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tickEvent from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn tickEvent(self: Block) ?TickEvent {\n\t\treturn _tickEvent[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "tickEvent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to touchFunction from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn touchFunction(self: Block) ?*const TouchFunction {\n\t\treturn _touchFunction[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "touchFunction",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockEntity from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn blockEntity(self: Block) ?*BlockEntityType {\n\t\treturn _blockEntity[self.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "blockEntity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to canBeChangedInto from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn canBeChangedInto(self: Block, newBlock: Block, item: main.items.ItemStack, shouldDropSourceBlockOnSuccess: *bool) main.rotation.RotationMode.CanBeChangedInto {\n\t\treturn newBlock.mode().canBeChangedInto(self, newBlock, item, shouldDropSourceBlockOnSuccess);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "canBeChangedInto",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to replaceWithCobble from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn replaceWithCobble(block: Block, _chunk: *chunk.ServerChunk, x: i32, y: i32, z: i32) void {\n\t\tstd.log.debug(\"Replace with cobblestone at ({d}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "replaceWithCobble",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to loadFromZon from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn loadFromZon(zon: ZonElement) ?TickEvent {\n\t\tconst functionName = zon.get(?[]const u8, \"name\", null) orelse return null;\n\n\t\tconst function = tickFunctions.getFunctionPointer(functionName) orelse {\n\t\t\tstd.log.err(\"Could not find TickFunction {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "loadFromZon",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to tryRandomTick from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn tryRandomTick(self: *const TickEvent, block: Block, _chunk: *chunk.ServerChunk, x: i32, y: i32, z: i32) void {\n\t\tif(self.chance >= 1.0 or main.random.nextFloat(&main.seed) < self.chance) {\n\t\t\tself.function(block, _chunk, x, y, z);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "tryRandomTick",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn init() void {\n\t\tanimationComputePipeline = graphics.ComputePipeline.init(\"assets/cubyz/shaders/animation_pre_processing.comp\", \"\", &animationUniforms);\n\t\tblockTextureArray = .init();\n\t\temissionTextureArray = .init();\n\t\treflectivityAndAbsorptionTextureArray = .init();\n\t\tditherTexture = .initFromMipmapFiles(\"assets/cubyz/blocks/textures/dither/\", 64, 0.5);\n\t\ttextureIDs = .init(main.globalAllocator);\n\t\tanimation = .init(main.globalAllocator);\n\t\tblockTextures = .init(main.globalAllocator);\n\t\temissionTextures = .init(main.globalAllocator);\n\t\treflectivityTextures = .init(main.globalAllocator);\n\t\tabsorptionTextures = .init(main.globalAllocator);\n\t\ttextureFogData = .init(main.globalAllocator);\n\t\ttextureOcclusionData = .init(main.globalAllocator);\n\t\tarenaAllocatorForWorld = .init(main.globalAllocator);\n\t\tarenaForWorld = arenaAllocatorForWorld.allocator();\n\t\tblockBreakingTextures = .init(main.globalAllocator);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn deinit() void {\n\t\tif(animationSSBO) |ssbo| {\n\t\t\tssbo.deinit();\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn reset() void {\n\t\tmeshes.size = 0;\n\t\tloadedMeshes = 0;\n\t\ttextureIDs.clearRetainingCapacity();\n\t\tanimation.clearRetainingCapacity();\n\t\tblockTextures.clearRetainingCapacity();\n\t\temissionTextures.clearRetainingCapacity();\n\t\treflectivityTextures.clearRetainingCapacity();\n\t\tabsorptionTextures.clearRetainingCapacity();\n\t\ttextureFogData.clearRetainingCapacity();\n\t\ttextureOcclusionData.clearRetainingCapacity();\n\t\tblockBreakingTextures.clearRetainingCapacity();\n\t\t_ = arenaAllocatorForWorld.reset(.free_all);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to model from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn model(block: Block) ModelIndex {\n\t\treturn block.mode().model(block);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to modelIndexStart from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn modelIndexStart(block: Block) ModelIndex {\n\t\treturn _modelIndex[block.typ];\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "modelIndexStart",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fogDensity from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn fogDensity(block: Block) f32 {\n\t\treturn textureFogData.items[animation.items[textureIndices[block.typ][0]].startFrame].fogDensity;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "fogDensity",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fogColor from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn fogColor(block: Block) u32 {\n\t\treturn textureFogData.items[animation.items[textureIndices[block.typ][0]].startFrame].fogColor;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "fogColor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasFog from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn hasFog(block: Block) bool {\n\t\treturn fogDensity(block) != 0.0;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "hasFog",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to textureIndex from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn textureIndex(block: Block, orientation: usize) u16 {\n\t\tif(orientation < 16) {\n\t\t\treturn textureIndices[block.typ][orientation];\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "textureIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to extendedPath from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn extendedPath(_allocator: main.heap.NeverFailingAllocator, path: []const u8, ending: []const u8) []const u8 {\n\t\treturn std.fmt.allocPrint(_allocator.allocator, \"{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "extendedPath",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to readTextureFile from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn readTextureFile(_path: []const u8, ending: []const u8, default: Image) Image {\n\t\tconst path = extendedPath(main.stackAllocator, _path, ending);\n\t\tdefer main.stackAllocator.free(path);\n\t\treturn Image.readFromFile(arenaForWorld, path) catch default;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "readTextureFile",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to extractAnimationSlice from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn extractAnimationSlice(image: Image, frame: usize, frames: usize) Image {\n\t\tif(image.height < frames) return image;\n\t\tvar startHeight = image.height/frames*frame;\n\t\tif(image.height%frames > frame) startHeight += frame else startHeight += image.height%frames;\n\t\tvar endHeight = image.height/frames*(frame + 1);\n\t\tif(image.height%frames > frame + 1) endHeight += frame + 1 else endHeight += image.height%frames;\n\t\tvar result = image;\n\t\tresult.height = @intCast(endHeight - startHeight);\n\t\tresult.imageData = result.imageData[startHeight*image.width .. endHeight*image.width];\n\t\treturn result;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "extractAnimationSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to readTextureData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "fn readTextureData(_path: []const u8) void {\n\t\tconst path = _path[0 .. _path.len - \".png\".len];\n\t\tconst textureInfoPath = extendedPath(main.stackAllocator, path, \".zig.zon\");\n\t\tdefer main.stackAllocator.free(textureInfoPath);\n\t\tconst textureInfoZon = main.files.cwd().readToZon(main.stackAllocator, textureInfoPath) catch .null;\n\t\tdefer textureInfoZon.deinit(main.stackAllocator);\n\t\tconst animationFrames = textureInfoZon.get(u32, \"frames\", 1);\n\t\tconst animationTime = textureInfoZon.get(u32, \"time\", 1);\n\t\tanimation.append(.{.startFrame = @intCast(blockTextures.items.len), .frames = animationFrames, .time = animationTime}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "readTextureData",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to readTexture from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn readTexture(_textureId: ?[]const u8, assetFolder: []const u8) !u16 {\n\t\tconst textureId = _textureId orelse return error.NotFound;\n\t\tvar result: u16 = undefined;\n\t\tvar splitter = std.mem.splitScalar(u8, textureId, ':');\n\t\tconst mod = splitter.first();\n\t\tconst id = splitter.rest();\n\t\tvar path = try std.fmt.allocPrint(main.stackAllocator.allocator, \"{s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "readTexture",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to getTextureIndices from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn getTextureIndices(zon: ZonElement, assetFolder: []const u8, textureIndicesRef: *[16]u16) void {\n\t\tconst defaultIndex = readTexture(zon.get(?[]const u8, \"texture\", null), assetFolder) catch 0;\n\t\tinline for(textureIndicesRef, 0..) |*ref, i| {\n\t\t\tvar textureId = zon.get(?[]const u8, std.fmt.comptimePrint(\"texture{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "getTextureIndices",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to register from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn register(assetFolder: []const u8, _: []const u8, zon: ZonElement) void {\n\t\t_modelIndex[meshes.size] = _mode[meshes.size].createBlockModel(.{.typ = @intCast(meshes.size), .data = 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "register",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerBlockBreakingAnimation from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn registerBlockBreakingAnimation(assetFolder: []const u8) void {\n\t\tvar i: usize = 0;\n\t\twhile(true) : (i += 1) {\n\t\t\tconst path1 = std.fmt.allocPrint(main.stackAllocator.allocator, \"assets/cubyz/blocks/textures/breaking/{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "registerBlockBreakingAnimation",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to preProcessAnimationData from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn preProcessAnimationData(time: u32) void {\n\t\tanimationComputePipeline.bind();\n\t\tgraphics.c.glUniform1ui(animationUniforms.time, time);\n\t\tgraphics.c.glUniform1ui(animationUniforms.size, @intCast(animation.items.len));\n\t\tgraphics.c.glDispatchCompute(@intCast(@divFloor(animation.items.len + 63, 64)), 1, 1); // TODO: Replace with @divCeil once available\n\t\tgraphics.c.glMemoryBarrier(graphics.c.GL_SHADER_STORAGE_BARRIER_BIT);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "preProcessAnimationData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reloadTextures from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn reloadTextures(_: usize) void {\n\t\tblockTextures.clearRetainingCapacity();\n\t\temissionTextures.clearRetainingCapacity();\n\t\treflectivityTextures.clearRetainingCapacity();\n\t\tabsorptionTextures.clearRetainingCapacity();\n\t\ttextureFogData.clearAndFree();\n\t\ttextureOcclusionData.clearAndFree();\n\t\tfor(textureIDs.items) |path| {\n\t\t\treadTextureData(path);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "reloadTextures",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to generateTextureArray from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub fn generateTextureArray() void {\n\t\tconst c = graphics.c;\n\t\tblockTextureArray.generate(blockTextures.items, true, true);\n\t\tc.glTexParameterf(c.GL_TEXTURE_2D_ARRAY, c.GL_TEXTURE_MAX_ANISOTROPY, @floatFromInt(main.settings.anisotropicFiltering));\n\t\temissionTextureArray.generate(emissionTextures.items, true, false);\n\t\tc.glTexParameterf(c.GL_TEXTURE_2D_ARRAY, c.GL_TEXTURE_MAX_ANISOTROPY, @floatFromInt(main.settings.anisotropicFiltering));\n\t\tconst reflectivityAndAbsorptionTextures = main.stackAllocator.alloc(Image, reflectivityTextures.items.len);\n\t\tdefer main.stackAllocator.free(reflectivityAndAbsorptionTextures);\n\t\tdefer for(reflectivityAndAbsorptionTextures) |texture| {\n\t\t\ttexture.deinit(main.stackAllocator);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "function",
      "name": "generateTextureArray",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to BlockDrop from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub const BlockDrop = struct {\n\titems: []const items.ItemStack,\n\tchance: f32,\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "struct",
      "name": "BlockDrop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Ore from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub const Ore = struct {\n\t/// average size of a vein in blocks\n\tsize: f32,\n\t/// average density of a vein\n\tdensity: f32,\n\t/// average veins per chunk\n\tveins: f32,\n\t/// maximum height this ore can be generated\n\tmaxHeight: i32,\n\tminHeight: i32,\n\n\tblockType: u16,\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "struct",
      "name": "Ore",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TickFunctions from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub const TickFunctions = struct {\n\tpub fn replaceWithCobble(block: Block, _chunk: *chunk.ServerChunk, x: i32, y: i32, z: i32) void {\n\t\tstd.log.debug(\"Replace with cobblestone at ({d}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "struct",
      "name": "TickFunctions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TickEvent from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub const TickEvent = struct {\n\tfunction: *const TickFunction,\n\tchance: f32,\n\n\tpub fn loadFromZon(zon: ZonElement) ?TickEvent {\n\t\tconst functionName = zon.get(?[]const u8, \"name\", null) orelse return null;\n\n\t\tconst function = tickFunctions.getFunctionPointer(functionName) orelse {\n\t\t\tstd.log.err(\"Could not find TickFunction {s}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "struct",
      "name": "TickEvent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TouchFunctions from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub const TouchFunctions = struct {}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "struct",
      "name": "TouchFunctions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to meshes from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub const meshes = struct { // MARK: meshes\n\tconst AnimationData = extern struct {\n\t\tstartFrame: u32,\n\t\tframes: u32,\n\t\ttime: u32,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "struct",
      "name": "meshes",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to maxBlockCount from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "pub const maxBlockCount: usize = 65536;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "const",
      "name": "maxBlockCount",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to black from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "const black: Color = Color{.r = 0, .g = 0, .b = 0, .a = 255};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "const",
      "name": "black",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to magenta from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blocks.zig",
    "response": "const magenta: Color = Color{.r = 255, .g = 0, .b = 255, .a = 255};",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blocks.zig",
      "type": "const",
      "name": "magenta",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn init(allocator: NeverFailingAllocator) Blueprint {\n\t\treturn .{.blocks = .init(allocator, 0, 0, 0)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn deinit(self: Blueprint, allocator: NeverFailingAllocator) void {\n\t\tself.blocks.deinit(allocator);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to clone from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn clone(self: Blueprint, allocator: NeverFailingAllocator) Blueprint {\n\t\treturn .{.blocks = self.blocks.clone(allocator)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "clone",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to rotateZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn rotateZ(self: Blueprint, allocator: NeverFailingAllocator, angle: Degrees) Blueprint {\n\t\tvar new = Blueprint{\n\t\t\t.blocks = switch(angle) {\n\t\t\t\t.@\"0\", .@\"180\" => .init(allocator, self.blocks.width, self.blocks.depth, self.blocks.height),\n\t\t\t\t.@\"90\", .@\"270\" => .init(allocator, self.blocks.depth, self.blocks.width, self.blocks.height),\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "rotateZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to capture from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn capture(allocator: NeverFailingAllocator, pos1: Vec3i, pos2: Vec3i) CaptureResult {\n\t\tconst startX = @min(pos1[0], pos2[0]);\n\t\tconst startY = @min(pos1[1], pos2[1]);\n\t\tconst startZ = @min(pos1[2], pos2[2]);\n\n\t\tconst endX = @max(pos1[0], pos2[0]);\n\t\tconst endY = @max(pos1[1], pos2[1]);\n\t\tconst endZ = @max(pos1[2], pos2[2]);\n\n\t\tconst sizeX: u32 = @intCast(endX - startX + 1);\n\t\tconst sizeY: u32 = @intCast(endY - startY + 1);\n\t\tconst sizeZ: u32 = @intCast(endZ - startZ + 1);\n\n\t\tconst self = Blueprint{.blocks = .init(allocator, sizeX, sizeY, sizeZ)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "capture",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to pasteInGeneration from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn pasteInGeneration(self: Blueprint, pos: Vec3i, chunk: *ServerChunk, mode: PasteMode) void {\n\t\tswitch(mode) {\n\t\t\tinline else => |comptimeMode| _pasteInGeneration(self, pos, chunk, comptimeMode),\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "pasteInGeneration",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to _pasteInGeneration from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn _pasteInGeneration(self: Blueprint, pos: Vec3i, chunk: *ServerChunk, comptime mode: PasteMode) void {\n\t\tconst indexEndX: i32 = @min(@as(i32, chunk.super.width) - pos[0], @as(i32, @intCast(self.blocks.width)));\n\t\tconst indexEndY: i32 = @min(@as(i32, chunk.super.width) - pos[1], @as(i32, @intCast(self.blocks.depth)));\n\t\tconst indexEndZ: i32 = @min(@as(i32, chunk.super.width) - pos[2], @as(i32, @intCast(self.blocks.height)));\n\n\t\tvar indexX: u31 = @max(0, -pos[0]);\n\t\twhile(indexX < indexEndX) : (indexX += chunk.super.pos.voxelSize) {\n\t\t\tvar indexY: u31 = @max(0, -pos[1]);\n\t\t\twhile(indexY < indexEndY) : (indexY += chunk.super.pos.voxelSize) {\n\t\t\t\tvar indexZ: u31 = @max(0, -pos[2]);\n\t\t\t\twhile(indexZ < indexEndZ) : (indexZ += chunk.super.pos.voxelSize) {\n\t\t\t\t\tconst block = self.blocks.get(indexX, indexY, indexZ);\n\n\t\t\t\t\tif(block.typ == voidType) continue;\n\n\t\t\t\t\tconst chunkX = indexX + pos[0];\n\t\t\t\t\tconst chunkY = indexY + pos[1];\n\t\t\t\t\tconst chunkZ = indexZ + pos[2];\n\t\t\t\t\tswitch(mode) {\n\t\t\t\t\t\t.all => chunk.updateBlockInGeneration(chunkX, chunkY, chunkZ, block),\n\t\t\t\t\t\t.degradable => chunk.updateBlockIfDegradable(chunkX, chunkY, chunkZ, block),\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "_pasteInGeneration",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to paste from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn paste(self: Blueprint, pos: Vec3i, flags: PasteFlags) void {\n\t\tmain.items.Inventory.Sync.ServerSide.mutex.lock();\n\t\tdefer main.items.Inventory.Sync.ServerSide.mutex.unlock();\n\t\tconst startX = pos[0];\n\t\tconst startY = pos[1];\n\t\tconst startZ = pos[2];\n\n\t\tfor(0..self.blocks.width) |x| {\n\t\t\tconst worldX = startX +% @as(i32, @intCast(x));\n\n\t\t\tfor(0..self.blocks.depth) |y| {\n\t\t\t\tconst worldY = startY +% @as(i32, @intCast(y));\n\n\t\t\t\tfor(0..self.blocks.height) |z| {\n\t\t\t\t\tconst worldZ = startZ +% @as(i32, @intCast(z));\n\n\t\t\t\t\tconst block = self.blocks.get(x, y, z);\n\t\t\t\t\tif(block.typ != voidType or flags.preserveVoid)\n\t\t\t\t\t\t_ = main.server.world.?.updateBlock(worldX, worldY, worldZ, block);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "paste",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to load from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn load(allocator: NeverFailingAllocator, inputBuffer: []const u8) !Blueprint {\n\t\tvar compressedReader = BinaryReader.init(inputBuffer);\n\t\tconst version = try compressedReader.readInt(u16);\n\n\t\tif(version > blueprintVersion) {\n\t\t\tstd.log.err(\"Blueprint version {d}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "load",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to store from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn store(self: Blueprint, allocator: NeverFailingAllocator) []u8 {\n\t\tvar gameIdToBlueprintId = self.makeGameIdToBlueprintIdMap(main.stackAllocator);\n\t\tdefer gameIdToBlueprintId.deinit();\n\t\tstd.debug.assert(gameIdToBlueprintId.count() != 0);\n\n\t\tvar uncompressedWriter = BinaryWriter.init(main.stackAllocator);\n\t\tdefer uncompressedWriter.deinit();\n\n\t\tconst blockPaletteSizeBytes = storeBlockPalette(gameIdToBlueprintId, &uncompressedWriter);\n\n\t\tfor(self.blocks.mem) |block| {\n\t\t\tconst blueprintBlock: BlockStorageType = Block.toInt(.{.typ = gameIdToBlueprintId.get(block.typ).?, .data = block.data}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "store",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to makeBlueprintIdToGameIdMap from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn makeBlueprintIdToGameIdMap(allocator: NeverFailingAllocator, palette: [][]const u8) []u16 {\n\t\tvar blueprintIdToGameIdMap = allocator.alloc(u16, palette.len);\n\n\t\tfor(palette, 0..) |blockName, blueprintBlockId| {\n\t\t\tconst gameBlockId = main.blocks.parseBlock(blockName).typ;\n\t\t\tblueprintIdToGameIdMap[blueprintBlockId] = gameBlockId;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "makeBlueprintIdToGameIdMap",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to makeGameIdToBlueprintIdMap from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn makeGameIdToBlueprintIdMap(self: Blueprint, allocator: NeverFailingAllocator) GameIdToBlueprintIdMapType {\n\t\tvar gameIdToBlueprintId: GameIdToBlueprintIdMapType = .init(allocator.allocator);\n\n\t\tfor(self.blocks.mem) |block| {\n\t\t\tconst result = gameIdToBlueprintId.getOrPut(block.typ) catch unreachable;\n\t\t\tif(!result.found_existing) {\n\t\t\t\tresult.value_ptr.* = @intCast(gameIdToBlueprintId.count() - 1);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "makeGameIdToBlueprintIdMap",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to loadBlockPalette from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn loadBlockPalette(allocator: NeverFailingAllocator, paletteBlockCount: usize, reader: *BinaryReader) ![][]const u8 {\n\t\tvar palette = allocator.alloc([]const u8, paletteBlockCount);\n\n\t\tfor(0..@intCast(paletteBlockCount)) |index| {\n\t\t\tconst blockNameSize = try reader.readInt(BlockIdSizeType);\n\t\t\tconst blockName = try reader.readSlice(blockNameSize);\n\t\t\tpalette[index] = blockName;\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "loadBlockPalette",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to storeBlockPalette from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn storeBlockPalette(map: GameIdToBlueprintIdMapType, writer: *BinaryWriter) usize {\n\t\tvar blockPalette = main.stackAllocator.alloc([]const u8, map.count());\n\t\tdefer main.stackAllocator.free(blockPalette);\n\n\t\tvar iterator = map.iterator();\n\t\twhile(iterator.next()) |entry| {\n\t\t\tconst block = Block{.typ = entry.key_ptr.*, .data = 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "storeBlockPalette",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to decompressBuffer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn decompressBuffer(self: Blueprint, data: []const u8, blockPaletteSizeBytes: usize, compression: BlueprintCompression) ![]u8 {\n\t\tconst blockArraySizeBytes = self.blocks.width*self.blocks.depth*self.blocks.height*@sizeOf(BlockStorageType);\n\t\tconst decompressedDataSizeBytes = blockPaletteSizeBytes + blockArraySizeBytes;\n\n\t\tconst decompressedData = main.stackAllocator.alloc(u8, decompressedDataSizeBytes);\n\n\t\tswitch(compression) {\n\t\t\t.deflate => {\n\t\t\t\tconst sizeAfterDecompression = try Compression.inflateTo(decompressedData, data);\n\t\t\t\tstd.debug.assert(sizeAfterDecompression == decompressedDataSizeBytes);\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "decompressBuffer",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to compressOutputBuffer from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn compressOutputBuffer(_: Blueprint, allocator: NeverFailingAllocator, decompressedData: []u8) struct {mode: BlueprintCompression, data: []u8}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "compressOutputBuffer",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to replace from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn replace(self: *Blueprint, whitelist: ?Mask, blacklist: ?Mask, newBlocks: Pattern) void {\n\t\tfor(0..self.blocks.width) |x| {\n\t\t\tfor(0..self.blocks.depth) |y| {\n\t\t\t\tfor(0..self.blocks.height) |z| {\n\t\t\t\t\tconst current = self.blocks.get(x, y, z);\n\t\t\t\t\tif(whitelist) |m| if(!m.match(current)) continue;\n\t\t\t\t\tif(blacklist) |m| if(m.match(current)) continue;\n\t\t\t\t\tself.blocks.set(x, y, z, newBlocks.blocks.sample(&main.seed).block);\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "replace",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initFromString from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn initFromString(allocator: NeverFailingAllocator, source: []const u8) !@This() {\n\t\tvar specifiers = std.mem.splitScalar(u8, source, expressionSeparator);\n\t\tvar totalWeight: f32 = 0;\n\n\t\tvar weightedEntries: ListUnmanaged(struct {block: Block, weight: f32}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "initFromString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn deinit(self: @This(), allocator: NeverFailingAllocator) void {\n\t\tself.blocks.deinit(allocator);\n\t\tallocator.free(self.blocks.items);\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initFromString from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn initFromString(specifier: []const u8) !Inner {\n\t\t\t\treturn switch(specifier[0]) {\n\t\t\t\t\ttag => .{.blockTag = Tag.get(specifier[1..]) orelse return error.TagNotFound}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "initFromString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to match from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn match(self: Inner, block: Block) bool {\n\t\t\t\treturn switch(self) {\n\t\t\t\t\t.block => |desired| block.typ == desired.typ and block.data == desired.data,\n\t\t\t\t\t.blockType => |desired| block.typ == desired,\n\t\t\t\t\t.blockTag => |desired| block.hasTag(desired),\n\t\t\t\t\t.blockProperty => |blockProperty| switch(blockProperty) {\n\t\t\t\t\t\tinline else => |prop| @field(Block, @tagName(prop))(block),\n\t\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "match",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initFromString from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn initFromString(specifier: []const u8) !Entry {\n\t\t\tconst isInverse = specifier[0] == '!';\n\t\t\tconst entry = try Inner.initFromString(specifier[if(isInverse) 1 else 0..]);\n\t\t\treturn .{.inner = entry, .isInverse = isInverse}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "initFromString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to match from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn match(self: Entry, block: Block) bool {\n\t\t\tconst isMatch = self.inner.match(block);\n\t\t\tif(self.isInverse) {\n\t\t\t\treturn !isMatch;\n\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "match",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to initFromString from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn initFromString(allocator: NeverFailingAllocator, source: []const u8) !@This() {\n\t\tvar result: @This() = .{.entries = .{}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "initFromString",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn deinit(self: @This(), allocator: NeverFailingAllocator) void {\n\t\tfor(self.entries.items) |andStorage| {\n\t\t\tandStorage.deinit(allocator);\n\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to match from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn match(self: @This(), block: Block) bool {\n\t\tfor(self.entries.items) |andedExpressions| {\n\t\t\tconst status = blk: {\n\t\t\t\tfor(andedExpressions.items) |expression| {\n\t\t\t\t\tif(!expression.match(block)) break :blk false;\n\t\t\t\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "match",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseBlockLike from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn parseBlockLike(block: []const u8) error{DataParsingFailed, IdParsingFailed}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "parseBlockLike",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to defaultParseBlockLike from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "fn defaultParseBlockLike(_: []const u8) !Mask.Entry.Inner {\n\t\tunreachable;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "defaultParseBlockLike",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to registerVoidBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn registerVoidBlock(block: Block) void {\n\tvoidType = block.typ;\n\tstd.debug.assert(voidType != 0);\n}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "registerVoidBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getVoidBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub fn getVoidBlock() Block {\n\treturn Block{.typ = voidType.?, .data = 0}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "function",
      "name": "getVoidBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Blueprint from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub const Blueprint = struct {\n\tblocks: Array3D(Block),\n\n\tpub fn init(allocator: NeverFailingAllocator) Blueprint {\n\t\treturn .{.blocks = .init(allocator, 0, 0, 0)}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "struct",
      "name": "Blueprint",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to PasteFlags from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub const PasteFlags = struct {\n\t\tpreserveVoid: bool = false,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "struct",
      "name": "PasteFlags",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Pattern from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub const Pattern = struct {\n\tconst weightSeparator = '%';\n\tconst expressionSeparator = ',';\n\n\tblocks: AliasTable(Entry),\n\n\tconst Entry = struct {\n\t\tblock: Block,\n\t\tchance: f32,\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "struct",
      "name": "Pattern",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Mask from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "pub const Mask = struct {\n\tconst AndList = ListUnmanaged(Entry);\n\tconst OrList = ListUnmanaged(AndList);\n\n\tentries: OrList,\n\n\tconst or_ = '|';\n\tconst and_ = '&';\n\tconst inverse = '!';\n\tconst tag = '$';\n\tconst property = '@';\n\n\tconst Entry = struct {\n\t\tinner: Inner,\n\t\tisInverse: bool,\n\n\t\tconst Inner = union(enum) {\n\t\t\tblock: Block,\n\t\t\tblockType: u16,\n\t\t\tblockTag: Tag,\n\t\t\tblockProperty: Property,\n\n\t\t\tconst Property = blk: {\n\t\t\t\tvar tempFields: [@typeInfo(Block).@\"struct\".decls.len]std.builtin.Type.EnumField = undefined;\n\t\t\t\tvar count = 0;\n\n\t\t\t\tfor(std.meta.declarations(Block)) |decl| {\n\t\t\t\t\tconst declInfo = @typeInfo(@TypeOf(@field(Block, decl.name)));\n\t\t\t\t\tif(declInfo != .@\"fn\") continue;\n\t\t\t\t\tif(declInfo.@\"fn\".return_type != bool) continue;\n\t\t\t\t\tif(declInfo.@\"fn\".params.len != 1) continue;\n\n\t\t\t\t\ttempFields[count] = .{.name = decl.name, .value = count}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "struct",
      "name": "Mask",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Test from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const Test = struct {\n\tvar parseBlockLikeTest: *const @TypeOf(parseBlockLike) = &defaultParseBlockLike;\n\n\tfn defaultParseBlockLike(_: []const u8) !Mask.Entry.Inner {\n\t\tunreachable;\n\t}",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "struct",
      "name": "Test",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to sizeX from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const sizeX: u32 = @intCast(endX - startX + 1);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "sizeX",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sizeY from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const sizeY: u32 = @intCast(endY - startY + 1);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "sizeY",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to sizeZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const sizeZ: u32 = @intCast(endZ - startZ + 1);",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "sizeZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to indexEndX from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const indexEndX: i32 = @min(@as(i32, chunk.super.width) - pos[0], @as(i32, @intCast(self.blocks.width)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "indexEndX",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to indexEndY from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const indexEndY: i32 = @min(@as(i32, chunk.super.width) - pos[1], @as(i32, @intCast(self.blocks.depth)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "indexEndY",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to indexEndZ from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const indexEndZ: i32 = @min(@as(i32, chunk.super.width) - pos[2], @as(i32, @intCast(self.blocks.height)));",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "indexEndZ",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to blueprintBlock from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const blueprintBlock: BlockStorageType = Block.toInt(.{.typ = gameIdToBlueprintId.get(block.typ).?, .data = block.data});",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "blueprintBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to compressionMode from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const compressionMode: BlueprintCompression = .deflate;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "compressionMode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to outFields from PixelGuys/Cubyz",
    "context": "Repository: PixelGuys/Cubyz (2757 ⭐)\nFile: src/blueprint.zig",
    "response": "const outFields: [count]std.builtin.Type.EnumField = tempFields[0..count].*;",
    "metadata": {
      "repo": "PixelGuys/Cubyz",
      "stars": 2757,
      "file": "src/blueprint.zig",
      "type": "const",
      "name": "outFields",
      "difficulty": "easy"
    }
  }
]