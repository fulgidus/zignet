[
  {
    "instruction": "Write a Zig function similar to build from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "pub fn build(b: *std.Build) !void {\n    const target = b.standardTargetOptions(.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "build",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupGeneratorStep from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn setupGeneratorStep(b: *std.Build, target: std.Build.ResolvedTarget) void {\n    const gen = b.step(\"generator\", \"Build generator executable for reproing fuzz cases\");\n    const supergen = b.addExecutable(.{\n        .name = \"generator\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/generator.zig\"),\n            .target = target,\n            .optimize = .ReleaseSafe,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "setupGeneratorStep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupCheckStep from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn setupCheckStep(\n    b: *std.Build,\n    target: std.Build.ResolvedTarget,\n    optimize: std.builtin.OptimizeMode,\n    options: *std.Build.Step.Options,\n    superhtml: *std.Build.Module,\n    folders: *std.Build.Dependency,\n    lsp: *std.Build.Dependency,\n) *std.Build.Step {\n    const check = b.step(\"check\", \"Check if the SuperHTML CLI compiles\");\n    const super_cli_check = b.addExecutable(.{\n        .name = \"superhtml\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/main.zig\"),\n            .target = target,\n            .optimize = optimize,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "setupCheckStep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupTestStep from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn setupTestStep(\n    b: *std.Build,\n    superhtml: *std.Build.Module,\n    check: *std.Build.Step,\n) void {\n    const test_step = b.step(\"test\", \"Run unit tests\");\n    test_step.dependOn(check);\n\n    const unit_tests = b.addTest(.{\n        .root_module = superhtml,\n        .filters = b.args orelse &.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "setupTestStep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupCliTool from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn setupCliTool(\n    b: *std.Build,\n    target: std.Build.ResolvedTarget,\n    optimize: std.builtin.OptimizeMode,\n    options: *std.Build.Step.Options,\n    superhtml: *std.Build.Module,\n    folders: *std.Build.Dependency,\n    lsp: *std.Build.Dependency,\n) void {\n    const super_cli = b.addExecutable(.{\n        .name = \"superhtml\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/main.zig\"),\n            .target = target,\n            .optimize = optimize,\n            .single_threaded = true,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "setupCliTool",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupWasmStep from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn setupWasmStep(\n    b: *std.Build,\n    optimize: std.builtin.OptimizeMode,\n    options: *std.Build.Step.Options,\n    superhtml: *std.Build.Module,\n    lsp: *std.Build.Dependency,\n) void {\n    const wasm = b.step(\"wasm\", \"Generate a WASM build of the SuperHTML LSP for VSCode\");\n    const super_wasm_lsp = b.addExecutable(.{\n        .name = \"superhtml\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/wasm.zig\"),\n            .target = b.resolveTargetQuery(.{\n                .cpu_arch = .wasm32,\n                .os_tag = .wasi,\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "setupWasmStep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupFetchLanguageSubtagRegistryStep from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn setupFetchLanguageSubtagRegistryStep(\n    b: *std.Build,\n    target: std.Build.ResolvedTarget,\n) void {\n    const step = b.step(\n        \"fetch-language-subtag-registry\",\n        \"Fetch the IANA language subtag registry\",\n    );\n    const fetcher = b.addExecutable(.{\n        .name = \"language-subtag-fetcher\",\n        .root_module = b.createModule(.{\n            .root_source_file = b.path(\"src/html/language_tag/fetch.zig\"),\n            .target = target,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "setupFetchLanguageSubtagRegistryStep",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupReleaseStep from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn setupReleaseStep(\n    b: *std.Build,\n    options: *std.Build.Step.Options,\n    superhtml: *std.Build.Module,\n    folders: *std.Build.Dependency,\n    lsp: *std.Build.Dependency,\n    release_step: *std.Build.Step,\n) void {\n    const targets: []const std.Target.Query = &.{\n        .{ .cpu_arch = .aarch64, .os_tag = .macos }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "setupReleaseStep",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to string from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "pub fn string(v: Version) []const u8 {\n        return switch (v) {\n            .tag, .commit => |tc| tc,\n            .unknown => \"unknown\",\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "string",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getGitVersion from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "fn getGitVersion(b: *std.Build) Version {\n    const git_path = b.findProgram(&.{\"git\"}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "function",
      "name": "getGitVersion",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to targets from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: build.zig",
    "response": "const targets: []const std.Target.Query = &.{\n        .{ .cpu_arch = .aarch64, .os_tag = .macos },\n        .{ .cpu_arch = .aarch64, .os_tag = .linux },\n        .{ .cpu_arch = .x86_64, .os_tag = .macos },\n        .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .musl },\n        .{ .cpu_arch = .x86_64, .os_tag = .windows },\n        .{ .cpu_arch = .aarch64, .os_tag = .windows },\n    };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "build.zig",
      "type": "const",
      "name": "targets",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to message from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn message(k: @This()) []const u8 {\n            return switch (k) {\n                else => @tagName(k),\n                .scripty => |s| s.errorMessage(),\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "message",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn format(k: @This(), w: *Writer) !void {\n            try w.print(\"{s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "format",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to elem from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn elem(node: Node, html_ast: html.Ast) HtmlNode {\n        return html_ast.nodes[node.elem_idx];\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "elem",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to idAttr from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn idAttr(node: Node) ?html.Tokenizer.Attr {\n        std.debug.assert(switch (node.kind) {\n            .block, .super_block, .element => true,\n            else => false,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "idAttr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to blockId from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn blockId(node: Node) html.Tokenizer.Attr.Value {\n        std.debug.assert(node.kind == .block);\n        return node.id_template_parentid.?.value.?;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "blockId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to templateAttr from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn templateAttr(node: Node) html.Tokenizer.Attr {\n        std.debug.assert(switch (node.kind) {\n            .extend => true,\n            else => false,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "templateAttr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to templateValue from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn templateValue(node: Node) html.Tokenizer.Attr.Value {\n        return node.templateAttr().value.?;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "templateValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to debugName from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn debugName(node: Node, src: []const u8) []const u8 {\n        return node.elem.startTag().name().string(src);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "debugName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to superBlock from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn superBlock(node: Node, src: []const u8, html_ast: html.Ast) Block {\n        std.debug.assert(node.kind == .super);\n        const id_value = node.id_template_parentid.?.value.?;\n        const elem_idx = node.elem(html_ast).parent_idx;\n        const par = html_ast.nodes[elem_idx];\n\n        const it = par.startTagIterator(src, html_ast.language);\n\n        return .{\n            .parent_tag_name = it.name_span,\n            .id_value = id_value,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "superBlock",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to debug from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn debug(\n        node: *const Node,\n        src: []const u8,\n        html_ast: html.Ast,\n        ast: Ast,\n    ) void {\n        std.debug.print(\"\\n\\n-- DEBUG --\\n\", .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "debug",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to debugWriter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn debugWriter(\n        node: *const Node,\n        src: []const u8,\n        html_ast: html.Ast,\n        ast: Ast,\n        w: *Writer,\n    ) void {\n        node.debugInternal(src, html_ast, ast, w, 0) catch unreachable;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "debugWriter",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to hasId from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn hasId(node: Node) ?html.Tokenizer.Attr {\n        switch (node.kind) {\n            .block, .super_block, .element => return node.idAttr(),\n            else => return null,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "hasId",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to debugInternal from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn debugInternal(\n        node: Node,\n        src: []const u8,\n        html_ast: html.Ast,\n        ast: Ast,\n        w: *Writer,\n        lvl: usize,\n    ) !void {\n        for (0..lvl) |_| try w.print(\"    \", .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "debugInternal",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to at from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn at(ast: Ast, idx: u32) ?Node {\n    if (idx == 0) return null;\n    return ast.nodes[idx];\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "at",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to child from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn child(ast: Ast, n: Node) ?Node {\n    return ast.at(n.first_child_idx);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "child",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn next(ast: Ast, n: Node) ?Node {\n    return ast.at(n.next_idx);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parent from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn parent(ast: Ast, n: Node) Node {\n    std.debug.assert(n.kind != .root);\n    return ast.nodes[n.parent_idx];\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "parent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to cursor from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn cursor(ast: Ast, idx: u32) Cursor {\n    return Cursor.init(ast, idx);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "cursor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to childrenCount from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn childrenCount(ast: Ast, node: Node) usize {\n    var count: usize = 0;\n    var maybe_child = ast.child(node);\n    while (maybe_child) |ch| : (maybe_child = ast.next(ch)) count += 1;\n    return count;\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "childrenCount",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn deinit(ast: *const Ast, gpa: Allocator) void {\n    var mut_ast = ast.*;\n    mut_ast.interface.deinit(gpa);\n    mut_ast.blocks.deinit(gpa);\n    gpa.free(ast.nodes);\n    gpa.free(ast.errors);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn init(\n    gpa: Allocator,\n    html_ast: html.Ast,\n    src: []const u8,\n) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to root from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn root(ast: Ast) Node {\n    return ast.nodes[0];\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "root",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn deinit(p: *Parser, gpa: Allocator) void {\n        p.nodes.deinit(gpa);\n        p.errors.deinit(gpa);\n        p.interface.deinit(gpa);\n        p.blocks.deinit(gpa);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to at from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn at(p: Parser, idx: u32) ?Node {\n        if (idx == 0) return null;\n        return p.nodes.items[idx];\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "at",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parent from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn parent(p: Parser, node: Node) ?Node {\n        return p.at(node.parent_idx);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "parent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to child from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn child(p: Parser, node: Node) ?Node {\n        return p.at(node.first_child_idx);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "child",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn next(p: Parser, node: Node) ?Node {\n        return p.at(node.next_idx);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to buildNode from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn buildNode(\n        p: *Parser,\n        gpa: Allocator,\n        elem_idx: u32,\n        depth: u32,\n        seen_non_comment_elems: bool,\n    ) !?*Node {\n        const elem = p.html.nodes[elem_idx];\n\n        const block_mode = p.extends_idx != 0;\n        var tmp_result: Node = .{\n            .elem_idx = elem_idx,\n            .depth = depth,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "buildNode",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to validate from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn validate(p: *Parser, gpa: Allocator) !void {\n        var ast: Ast = undefined;\n        ast.nodes = p.nodes.items;\n        var c = ast.cursor(0);\n        while (c.next()) |ev| {\n            if (ev.dir == .exit) continue;\n            const node = ev.node;\n            switch (node.kind) {\n                .root => unreachable,\n                .ctx => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "validate",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateScripty from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn validateScripty(p: *Parser, gpa: Allocator, attr_value: Span) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "validateScripty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to printInterfaceAsHtml from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn printInterfaceAsHtml(\n    ast: Ast,\n    html_ast: html.Ast,\n    path: ?[]const u8,\n    out: *Writer,\n) !void {\n    if (path) |p| {\n        try out.print(\"<extend template=\\\"{s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "printInterfaceAsHtml",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to printErrors from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn printErrors(\n    ast: Ast,\n    src: []const u8,\n    path: ?[]const u8,\n    w: *Writer,\n) !void {\n    for (ast.errors) |err| {\n        const range = err.main_location.range(src);\n        try w.print(\"{s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "printErrors",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to interfaceFormatter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn interfaceFormatter(\n    ast: Ast,\n    html_ast: html.Ast,\n    path: ?[]const u8,\n) Formatter {\n    return .{ .ast = ast, .html = html_ast, .path = path }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "interfaceFormatter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn format(f: Formatter, out_stream: *Writer) !void {\n        try f.ast.printInterfaceAsHtml(f.html, f.path, out_stream);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "format",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to is from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn is(str1: []const u8, str2: []const u8) bool {\n    return std.ascii.eqlIgnoreCase(str1, str2);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "is",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to assert from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "fn assert(loc: std.builtin.SourceLocation, condition: bool) void {\n//     if (!condition) {\n//         std.debug.print(\"assertion error in {s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "assert",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn init(ast: Ast, idx: u32) Cursor {\n        return .{\n            .ast = ast,\n            .start_idx = idx,\n            .cur = .{\n                .node = ast.nodes[idx],\n                .idx = idx,\n                .dir = .enter,\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to move from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn move(c: *Cursor, idx: u32) void {\n        c.cur = .{\n            .node = c.ast.nodes[idx],\n            .idx = idx,\n            .dir = .enter,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "move",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to current from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn current(c: Cursor) ?Event {\n        return c.cur;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "current",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub fn next(c: *Cursor) ?Event {\n        const cur = c.cur orelse return null;\n        switch (cur.dir) {\n            .enter => {\n                const ch = c.ast.child(cur.node) orelse {\n                    c.cur.?.dir = .exit;\n                    return c.cur;\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Error from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "const Error = struct {\n    kind: union(enum) {\n        bad_attr,\n        else_must_be_first_attr,\n        missing_attribute_value,\n        loop_no_value,\n        block_cannot_be_inlined,\n        block_missing_id,\n        already_branching,\n        id_under_loop,\n        extend_without_template_attr,\n        top_level_super,\n        super_wants_no_attributes,\n        block_with_scripted_id,\n        super_parent_element_missing_id,\n        template_interface_id_collision,\n        missing_template_value,\n        unexpected_extend,\n        unscripted_attr,\n        two_supers_one_id,\n        super_under_branching,\n\n        one_branching_attribute_per_element,\n        ctx_attrs_must_be_scripted,\n        else_with_value,\n        no_ifs_after_loop,\n        text_and_html_are_mutually_exclusive,\n        text_and_html_require_an_empty_element,\n        duplicate_block: Span,\n        scripty: scripty.Parser.Node.Tag,\n\n        pub fn message(k: @This()) []const u8 {\n            return switch (k) {\n                else => @tagName(k),\n                .scripty => |s| s.errorMessage(),\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "struct",
      "name": "Error",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Node from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub const Node = struct {\n    kind: Kind = .element,\n    elem_idx: u32,\n    depth: u32,\n    parent_idx: u32 = 0,\n    first_child_idx: u32 = 0,\n    next_idx: u32 = 0,\n\n    id_template_parentid: ?html.Tokenizer.Attr = null,\n    html_text: ?html.Tokenizer.Attr = null,\n    if_loop: ?html.Tokenizer.Attr = null,\n\n    const Kind = enum {\n        root,\n        extend,\n        super,\n        ctx,\n        block,\n        super_block,\n        element,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "struct",
      "name": "Node",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Block from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub const Block = struct {\n        parent_tag_name: Span,\n        id_value: html.Tokenizer.Attr.Value,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "struct",
      "name": "Block",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Parser from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "const Parser = struct {\n    src: []const u8,\n    html: html.Ast,\n    nodes: std.ArrayListUnmanaged(Node) = .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "struct",
      "name": "Parser",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Formatter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "const Formatter = struct {\n    ast: Ast,\n    html: html.Ast,\n    path: ?[]const u8,\n\n    pub fn format(f: Formatter, out_stream: *Writer) !void {\n        try f.ast.printInterfaceAsHtml(f.html, f.path, out_stream);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "struct",
      "name": "Formatter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Cursor from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "pub const Cursor = struct {\n    cur: ?Event = null,\n    ast: Ast,\n    start_idx: u32,\n\n    pub const Event = struct {\n        dir: Dir,\n        node: Node,\n        idx: u32,\n        pub const Dir = enum { enter, exit }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "struct",
      "name": "Cursor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to new_node_idx from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "const new_node_idx: u32 = @intCast(p.nodes.items.len - 1);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "const",
      "name": "new_node_idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cex from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "const cex: usize = 3;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "const",
      "name": "cex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cex from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/Ast.zig",
    "response": "const cex: usize = 2;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/Ast.zig",
      "type": "const",
      "name": "cex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "pub fn run(gpa: std.mem.Allocator, args: []const []const u8) !noreturn {\n    const cmd = Command.parse(args);\n    var any_error = false;\n    switch (cmd.mode) {\n        .stdin => {\n            var fr = std.fs.File.stdin().reader(&.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkDir from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "fn checkDir(\n    gpa: std.mem.Allocator,\n    arena_impl: *std.heap.ArenaAllocator,\n    path: []const u8,\n    any_error: *bool,\n    syntax_only: bool,\n) !void {\n    var dir = try std.fs.cwd().openDir(path, .{ .iterate = true }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "checkDir",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkFile from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "fn checkFile(\n    arena_impl: *std.heap.ArenaAllocator,\n    base_dir: std.fs.Dir,\n    sub_path: []const u8,\n    full_path: []const u8,\n    any_error: *bool,\n    syntax_only: bool,\n) !void {\n    _ = any_error;\n    defer _ = arena_impl.reset(.retain_capacity);\n    const arena = arena_impl.allocator();\n\n    const in_bytes = if (builtin.zig_version.minor == 15) try base_dir.readFileAllocOptions(\n        arena,\n        sub_path,\n        super.max_size,\n        null,\n        .of(u8),\n        0,\n    ) else try base_dir.readFileAllocOptions(\n        sub_path,\n        arena,\n        .limited(super.max_size),\n        .of(u8),\n        0,\n    );\n\n    const file_type: FileType = blk: {\n        const ext = std.fs.path.extension(sub_path);\n        if (std.mem.eql(u8, ext, \".html\") or\n            std.mem.eql(u8, ext, \".htm\"))\n        {\n            break :blk .html;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "checkFile",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkHtml from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "pub fn checkHtml(\n    arena: std.mem.Allocator,\n    path: ?[]const u8,\n    code: [:0]const u8,\n    syntax_only: bool,\n) !void {\n    const ast = try super.html.Ast.init(arena, code, .html, syntax_only);\n    if (ast.errors.len > 0) {\n        var stderr = std.fs.File.stderr().writer(&.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "checkHtml",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkSuper from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "fn checkSuper(\n    arena: std.mem.Allocator,\n    path: ?[]const u8,\n    code: [:0]const u8,\n    syntax_only: bool,\n) !void {\n    const html = try super.html.Ast.init(arena, code, .superhtml, syntax_only);\n    if (html.errors.len > 0) {\n        var stderr = std.fs.File.stderr().writer(&.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "checkSuper",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to oom from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "fn oom() noreturn {\n    std.debug.print(\"Out of memory\\n\", .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "oom",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "fn parse(args: []const []const u8) Command {\n        var mode: ?Mode = null;\n        var syntax_only: ?bool = null;\n\n        var idx: usize = 0;\n        while (idx < args.len) : (idx += 1) {\n            const arg = args[idx];\n            if (std.mem.eql(u8, arg, \"--help\") or\n                std.mem.eql(u8, arg, \"-h\"))\n            {\n                fatalHelp();\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "parse",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fatalHelp from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "fn fatalHelp() noreturn {\n        std.debug.print(\n            \\\\Usage: superhtml check PATH [PATH...] [OPTIONS]\n            \\\\\n            \\\\   Checks documents for errors. If PATH is a directory, it will\n            \\\\   be searched recursively for HTML and SuperHTML files.\n            \\\\   If any syntax or validation error is found, the program will\n            \\\\   exit with a non-zero exit code.\n            \\\\     \n            \\\\   Detected extensions:     \n            \\\\        HTML          .html, .htm \n            \\\\        SuperHTML     .shtml \n            \\\\\n            \\\\Options:\n            \\\\\n            \\\\   --stdin          Validate a HTML document coming from stdin.\n            \\\\                    Mutually exclusive with other input arguments.\n            \\\\   --stdin-super    Same as --stdin but for SuperHTML files.\n            \\\\   --syntax-only    Disable HTML element and attribute validation.\n            \\\\   --help, -h       Print this help and exit.\n            \\\\\n        , .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "function",
      "name": "fatalHelp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Command from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "const Command = struct {\n    mode: Mode,\n    syntax_only: bool,\n\n    const Mode = union(enum) {\n        stdin,\n        stdin_super,\n        paths: []const []const u8,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "struct",
      "name": "Command",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to file_type from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/check.zig",
    "response": "const file_type: FileType = blk: {\n        const ext = std.fs.path.extension(sub_path);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/check.zig",
      "type": "const",
      "name": "file_type",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "pub fn run(gpa: Allocator, args: []const []const u8) !noreturn {\n    // Prints html errors found in the document\n    var stderr_writer = std.fs.File.stderr().writerStreaming(&buferr);\n    const stderr = &stderr_writer.interface;\n\n    // Prints file paths of files that were modified on disk\n    var stdout_writer = std.fs.File.stdout().writerStreaming(&bufout);\n    const stdout = &stdout_writer.interface;\n\n    const cmd = Command.parse(args);\n    switch (cmd.mode) {\n        .stdin => |lang| {\n            var fr = std.fs.File.stdin().reader(&.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to formatDir from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "fn formatDir(\n    gpa: std.mem.Allocator,\n    arena_impl: *std.heap.ArenaAllocator,\n    stdout: *Writer,\n    stderr: *Writer,\n    check: bool,\n    path: []const u8,\n    syntax_only: bool,\n) !void {\n    var dir = try std.fs.cwd().openDir(path, .{ .iterate = true }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "function",
      "name": "formatDir",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to formatFile from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "fn formatFile(\n    arena_impl: *std.heap.ArenaAllocator,\n    stdout: *Writer,\n    stderr: *Writer,\n    check: bool,\n    base_dir: std.fs.Dir,\n    sub_path: []const u8,\n    full_path: []const u8,\n    syntax_only: bool,\n) !void {\n    defer _ = arena_impl.reset(.retain_capacity);\n    const arena = arena_impl.allocator();\n\n    const in_bytes = if (builtin.zig_version.minor == 15) try base_dir.readFileAllocOptions(\n        arena,\n        sub_path,\n        super.max_size,\n        null,\n        .of(u8),\n        0,\n    ) else try base_dir.readFileAllocOptions(\n        sub_path,\n        arena,\n        .limited(super.max_size),\n        .of(u8),\n        0,\n    );\n\n    const language: super.Language = blk: {\n        const ext = std.fs.path.extension(sub_path);\n        if (std.mem.eql(u8, ext, \".html\") or\n            std.mem.eql(u8, ext, \".htm\"))\n        {\n            break :blk .html;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "function",
      "name": "formatFile",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to fmt from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "pub fn fmt(\n    arena: std.mem.Allocator,\n    stderr: *Writer,\n    path: ?[]const u8,\n    src: [:0]const u8,\n    language: super.Language,\n    syntax_only: bool,\n) !?[]const u8 {\n    const html_ast = try super.html.Ast.init(arena, src, language, syntax_only);\n    if (html_ast.errors.len > 0) {\n        try html_ast.printErrors(src, path, stderr);\n        if (html_ast.has_syntax_errors) {\n            syntax_errors = true;\n            return null;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "function",
      "name": "fmt",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to oom from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "fn oom() noreturn {\n    std.debug.print(\"Out of memory\\n\", .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "function",
      "name": "oom",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "fn parse(args: []const []const u8) Command {\n        var check: bool = false;\n        var mode: ?Mode = null;\n        var syntax_only: ?bool = null;\n\n        var idx: usize = 0;\n        while (idx < args.len) : (idx += 1) {\n            const arg = args[idx];\n            if (std.mem.eql(u8, arg, \"--help\") or\n                std.mem.eql(u8, arg, \"-h\"))\n            {\n                fatalHelp();\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "function",
      "name": "parse",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fatalHelp from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "fn fatalHelp() noreturn {\n        std.debug.print(\n            \\\\Usage: superhtml fmt PATH [PATH...] [OPTIONS]\n            \\\\\n            \\\\   Formats input paths inplace. If PATH is a directory, it will\n            \\\\   be searched recursively for HTML and SuperHTML files.\n            \\\\   HTML errors will be printed to stderr but will only cause a\n            \\\\   non-zero exit code if they prevent formatting (i.e. syntax\n            \\\\   errors).\n            \\\\     \n            \\\\   Detected extensions:     \n            \\\\        HTML          .html, .htm \n            \\\\        SuperHTML     .shtml \n            \\\\\n            \\\\Options:\n            \\\\\n            \\\\   --stdin          Format bytes from stdin and output to stdout.\n            \\\\                    Mutually exclusive with other input arguments.\n            \\\\   --stdin-super    Same as --stdin but for SuperHTML files.\n            \\\\   --check          List non-conforming files to stdout and exit \n            \\\\                    with an error if the list is not empty.\n            \\\\                    Does not modify files on disk.\n            \\\\   --syntax-only    Disable HTML element and attribute validation.\n            \\\\   --help, -h       Prints this help and exits.\n            \\\\\n        , .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "function",
      "name": "fatalHelp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Command from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "const Command = struct {\n    check: bool,\n    mode: Mode,\n    syntax_only: bool,\n\n    const Mode = union(enum) {\n        stdin: super.Language,\n        paths: []const []const u8,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "struct",
      "name": "Command",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to language from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/fmt.zig",
    "response": "const language: super.Language = blk: {\n        const ext = std.fs.path.extension(sub_path);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/fmt.zig",
      "type": "const",
      "name": "language",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to logFn from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/logging.zig",
    "response": "pub fn logFn(\n    comptime level: std.log.Level,\n    comptime scope: @Type(.enum_literal),\n    comptime format: []const u8,\n    args: anytype,\n) void {\n    // if (builtin.mode == .Debug) switch (scope) {\n    if (true) switch (scope) {\n        .root, .element, .super_lsp, .@\"html/ast\" => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/logging.zig",
      "type": "function",
      "name": "logFn",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setup from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/logging.zig",
    "response": "pub fn setup(gpa: std.mem.Allocator) void {\n    std.debug.lockStdErr();\n    defer std.debug.unlockStdErr();\n\n    setupInternal(gpa) catch {\n        log_file = null;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/logging.zig",
      "type": "function",
      "name": "setup",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to setupInternal from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/logging.zig",
    "response": "fn setupInternal(gpa: std.mem.Allocator) !void {\n    var cache_base = try folders.open(gpa, .cache, .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/logging.zig",
      "type": "function",
      "name": "setupInternal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to scopes from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/logging.zig",
    "response": "const scopes: [len]@Type(.EnumLiteral) = undefined;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/logging.zig",
      "type": "const",
      "name": "scopes",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to run from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "pub fn run(gpa: std.mem.Allocator, args: []const []const u8) !noreturn {\n    log.debug(\"SuperHTML Langauge Server Started!\", .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "run",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "fn deinit(self: *Handler) void {\n    var file_it = self.files.valueIterator();\n    while (file_it.next()) |file| file.deinit(self.gpa);\n    self.files.deinit(self.gpa);\n    self.* = undefined;\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to windowNotification from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "fn windowNotification(\n    self: *Handler,\n    lvl: types.MessageType,\n    comptime fmt: []const u8,\n    args: anytype,\n) !void {\n    const txt = try std.fmt.allocPrint(self.gpa, fmt, args);\n\n    try self.transport.writeNotification(\n        self.gpa,\n        \"window/showMessage\",\n        types.ShowMessageParams,\n        .{ .type = lvl, .message = txt }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "windowNotification",
      "difficulty": "hard"
    }
  },
  {
    "instruction": "Write a Zig function similar to initialize from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "pub fn initialize(\n    self: *Handler,\n    _: std.mem.Allocator,\n    request: types.InitializeParams,\n) types.InitializeResult {\n    if (request.clientInfo) |clientInfo| {\n        log.info(\"client is '{s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "initialize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to onResponse from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "pub fn onResponse(\n    _: *Handler,\n    _: std.mem.Allocator,\n    response: lsp.JsonRPCMessage.Response,\n) void {\n    log.warn(\"received unexpected response from client with id '{?}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "onResponse",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getRange from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "pub fn getRange(span: super.Span, src: []const u8) types.Range {\n    const r = span.range(src);\n    return .{\n        .start = .{ .line = r.start.row, .character = r.start.col }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "getRange",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to findNode from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "pub fn findNode(doc: *const Document, offset: u32) u32 {\n    if (doc.html.nodes.len < 2) return 0;\n    var cur_idx: u32 = 1;\n    while (cur_idx != 0) {\n        const n = doc.html.nodes[cur_idx];\n        if (!n.kind.isElement()) cur_idx = 0;\n        if (n.open.start <= offset and n.open.end > offset) {\n            break;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "findNode",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to tagRanges from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "pub fn tagRanges(\n    self: *Handler,\n    arena: std.mem.Allocator,\n    position: types.TextDocumentPositionParams,\n) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "tagRanges",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parse from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "fn parse(args: []const []const u8) Command {\n        if (args.len == 0) return .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "parse",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fatalHelp from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "fn fatalHelp() noreturn {\n    const msg =\n        \\\\Usage: superhtml lsp [--syntax-only]\n        \\\\\n        \\\\The --syntax-only flag disables HTML element and attribute validation. \n    ;\n\n    std.debug.print(msg, .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "function",
      "name": "fatalHelp",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Command from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "const Command = struct {\n    syntax_only: bool = false,\n\n    fn parse(args: []const []const u8) Command {\n        if (args.len == 0) return .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "struct",
      "name": "Command",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to range from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "const range: offsets.Range = .{\n        .start = .{ .line = 0, .character = 0 },\n        .end = offsets.indexToPosition(doc.src, doc.src.len, self.offset_encoding),\n    };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "const",
      "name": "range",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to edits_len from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "const edits_len: usize = if (err.node_idx != 0) blk: {\n                const node = doc.html.nodes[err.node_idx];",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "const",
      "name": "edits_len",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to node_idx from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp.zig",
    "response": "const node_idx: u32 = for (doc.html.errors) |err| {\n        // Find erroneous end tags in the error list but also any other error that\n        // has a node associated that happens to match our offset.\n        const span = err.main_location;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp.zig",
      "type": "const",
      "name": "node_idx",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp/Document.zig",
    "response": "pub fn deinit(doc: *Document, gpa: std.mem.Allocator) void {\n    doc.html.deinit(gpa);\n    if (doc.super_ast) |s| s.deinit(gpa);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp/Document.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp/Document.zig",
    "response": "pub fn init(\n    gpa: std.mem.Allocator,\n    src: []const u8,\n    language: super.Language,\n    validate: bool,\n) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp/Document.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to loadFile from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/cli/lsp/logic.zig",
    "response": "pub fn loadFile(\n    self: *Handler,\n    arena: std.mem.Allocator,\n    new_text: []const u8,\n    uri: []const u8,\n    language: super.Language,\n) !void {\n    errdefer @panic(\"error while loading document!\");\n\n    var res: lsp.types.PublishDiagnosticsParams = .{\n        .uri = uri,\n        .diagnostics = &.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/cli/lsp/logic.zig",
      "type": "function",
      "name": "loadFile",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn render(\n                    self: Simple,\n                    ast: Ast,\n                    src: []const u8,\n                    w: *Writer,\n                ) !void {\n                    if (self.element_name) |element_name| {\n                        switch (element_name) {\n                            .name => |name| _ = try w.write(name.slice(src)),\n                            .all => _ = try w.write(\"*\"),\n                        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn render(\n                selector: Selector,\n                ast: Ast,\n                src: []const u8,\n                w: *Writer,\n            ) !void {\n                switch (selector) {\n                    inline else => |sel| try sel.render(ast, src, w),\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn render(\n                declaration: Declaration,\n                src: []const u8,\n                w: *Writer,\n            ) !void {\n                _ = try w.write(declaration.property.slice(src));\n                _ = try w.write(\": \");\n                try renderValue(declaration.value.slice(src), w);\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn render(\n            style: Style,\n            ast: Ast,\n            src: []const u8,\n            w: *Writer,\n            depth: usize,\n        ) !void {\n            for (0..depth) |_| _ = try w.write(\"    \");\n            for (ast.selectors[style.selectors.start..style.selectors.end], 0..) |selector, i| {\n                if (i != 0) {\n                    _ = try w.write(\", \");\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to renderMediaQuery from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn renderMediaQuery(\n            query: []const u8,\n            w: *Writer,\n        ) !void {\n            var query_tokenizer: Tokenizer = .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "renderMediaQuery",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn render(\n            media: Media,\n            ast: Ast,\n            src: []const u8,\n            w: *Writer,\n            depth: usize,\n        ) !void {\n            for (0..depth) |_| _ = try w.write(\"    \");\n\n            _ = try w.write(\"@media \");\n\n            for (ast.media_queries[media.queries.start..media.queries.end], 0..) |query, i| {\n                if (i != 0) {\n                    _ = try w.write(\", \");\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn render(\n        rule: Rule,\n        ast: Ast,\n        src: []const u8,\n        w: *Writer,\n        depth: usize,\n    ) anyerror!void {\n        switch (rule.type) {\n            .style => |style| try style.render(ast, src, w, depth),\n            .media => |media| try media.render(ast, src, w, depth),\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reconsume from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn reconsume(self: *State, token: Tokenizer.Token) void {\n        std.debug.assert(self.reconsumed == null);\n\n        self.reconsumed = token;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "reconsume",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to peek from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn peek(self: *State) !?Tokenizer.Token {\n        const token = try self.consume();\n        if (token) |tok| self.reconsume(tok);\n\n        return token;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "peek",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn format(f: Formatter, w: *Writer) !void {\n        try f.ast.render(f.src, w);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "format",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to formatter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn formatter(self: Ast, src: []const u8) Formatter {\n    return .{\n        .ast = self,\n        .src = src,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "formatter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn render(ast: Ast, src: []const u8, w: *Writer) !void {\n    var first = true;\n    var rule = ast.rules[ast.first_rule orelse return];\n    while (true) {\n        if (!first) {\n            _ = try w.write(\"\\n\\n\");\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to renderValue from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn renderValue(value: []const u8, w: *Writer) !void {\n    var value_tokenizer: Tokenizer = .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "renderValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn init(allocator: std.mem.Allocator, src: []const u8) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseMediaRule from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn parseMediaRule(s: *State) !Rule.Media {\n    const keyword = try s.consume();\n    std.debug.assert(keyword != null);\n    std.debug.assert(keyword.? == .at_keyword);\n    std.debug.assert(std.ascii.eqlIgnoreCase(keyword.?.at_keyword.slice(s.src), \"@media\"));\n\n    var first_query: ?u32 = null;\n    var current_query: ?Span = null;\n    var paren_depth: usize = 0;\n    while (true) {\n        if (try s.consume()) |token| {\n            if ((token == .comma or token == .open_curly) and paren_depth == 0) {\n                if (current_query) |q| {\n                    try s.media_queries.append(s.allocator, q);\n\n                    if (first_query == null) {\n                        first_query = @intCast(s.media_queries.items.len - 1);\n                    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "parseMediaRule",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseStyleRule from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn parseStyleRule(s: *State) !Rule.Style {\n    try s.selectors.append(s.allocator, try parseSelector(s));\n    const sel_start = s.selectors.items.len - 1;\n\n    while (true) {\n        if (try s.consume()) |token| {\n            if (token == .comma) {\n                if (try s.peek() != null and (try s.peek()).? == .open_curly) break;\n\n                try s.selectors.append(s.allocator, try parseSelector(s));\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "parseStyleRule",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseSelector from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn parseSelector(s: *State) !Rule.Style.Selector {\n    // TODO: Support other selectors\n\n    return .{\n        .simple = try parseSimpleSelector(s),\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "parseSelector",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseSimpleSelector from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn parseSimpleSelector(s: *State) !Rule.Style.Selector.Simple {\n    var element_name: ?Rule.Style.Selector.Simple.ElementName = null;\n\n    const spec_start = s.specifiers.items.len;\n\n    if (try s.consume()) |token| {\n        switch (token) {\n            .ident => |ident| element_name = .{ .name = ident }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "parseSimpleSelector",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseDeclarationValue from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "fn parseDeclarationValue(s: *State) !Span {\n    var start: ?u32 = null;\n    var end: u32 = undefined;\n\n    while (try s.peek()) |token| {\n        switch (token) {\n            .semicolon, .close_curly => break,\n            else => {\n                std.debug.assert(try s.consume() != null);\n                if (start == null) {\n                    start = token.span().start;\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "parseDeclarationValue",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub fn deinit(self: Ast, allocator: std.mem.Allocator) void {\n    allocator.free(self.errors);\n    allocator.free(self.rules);\n    allocator.free(self.selectors);\n    allocator.free(self.declarations);\n    allocator.free(self.specifiers);\n    allocator.free(self.media_queries);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Rule from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub const Rule = struct {\n    type: union(enum) {\n        style: Style,\n        media: Media,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "struct",
      "name": "Rule",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Style from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub const Style = struct {\n        selectors: Span,\n        declarations: Span,\n        multiline_decl: bool,\n\n        pub const Selector = union(enum) {\n            simple: Simple,\n\n            pub const Simple = struct {\n                element_name: ?ElementName,\n                specifiers: Span,\n\n                pub const ElementName = union(enum) {\n                    name: Span,\n                    all,\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "struct",
      "name": "Style",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Declaration from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub const Declaration = struct {\n            property: Span,\n            value: Span,\n\n            pub fn render(\n                declaration: Declaration,\n                src: []const u8,\n                w: *Writer,\n            ) !void {\n                _ = try w.write(declaration.property.slice(src));\n                _ = try w.write(\": \");\n                try renderValue(declaration.value.slice(src), w);\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "struct",
      "name": "Declaration",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Media from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub const Media = struct {\n        queries: Span,\n        first_rule: ?u32,\n\n        fn renderMediaQuery(\n            query: []const u8,\n            w: *Writer,\n        ) !void {\n            var query_tokenizer: Tokenizer = .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "struct",
      "name": "Media",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Error from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "pub const Error = struct {\n    tag: Tag,\n    loc: Span,\n\n    pub const Tag = union(enum) {\n        token: Tokenizer.Error,\n        ast: enum {\n            invalid_at_rule,\n            expected_open_curly,\n            expected_close_curly,\n            expected_media_query,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "struct",
      "name": "Error",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to State from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "const State = struct {\n    allocator: std.mem.Allocator,\n    tokenizer: Tokenizer,\n    src: []const u8,\n    reconsumed: ?Tokenizer.Token,\n    errors: std.ArrayListUnmanaged(Error),\n    rules: std.ArrayListUnmanaged(Rule),\n    selectors: std.ArrayListUnmanaged(Rule.Style.Selector),\n    declarations: std.ArrayListUnmanaged(Rule.Style.Declaration),\n    specifiers: std.ArrayListUnmanaged(Rule.Style.Selector.Simple.Specifier),\n    media_queries: std.ArrayListUnmanaged(Span),\n\n    fn consume(self: *State) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "struct",
      "name": "State",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Formatter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Ast.zig",
    "response": "const Formatter = struct {\n    ast: Ast,\n    src: []const u8,\n\n    pub fn format(f: Formatter, w: *Writer) !void {\n        try f.ast.render(f.src, w);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Ast.zig",
      "type": "struct",
      "name": "Formatter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to span from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "pub fn span(self: Token) Span {\n        return switch (self) {\n            .ident,\n            .function,\n            .at_keyword,\n            .hash,\n            .string,\n            .bad_string,\n            .url,\n            .bad_url,\n            .number,\n            .percentage,\n            => |s| s,\n            .dimension,\n            => |d| .{ .start = d.number.start, .end = d.unit.end }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to consume from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn consume(self: *Tokenizer, src: []const u8) bool {\n    if (self.idx == src.len) {\n        return false;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "consume",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reconsume from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn reconsume(self: *Tokenizer, src: []const u8) void {\n    self.idx -= 1;\n    if (self.idx == 0) {\n        self.current = undefined;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "reconsume",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to peek from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn peek(self: *Tokenizer, src: []const u8) ?u8 {\n    if (self.idx >= src.len) {\n        return null;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "peek",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isIdentStartChar from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn isIdentStartChar(char: u8) bool {\n    return switch (char) {\n        'A'...'Z', 'a'...'z', 0x80...0xff, '_' => true,\n        else => false,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "isIdentStartChar",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isIdentChar from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn isIdentChar(char: u8) bool {\n    return switch (char) {\n        '0'...'9', '-' => true,\n        else => isIdentStartChar(char),\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "isIdentChar",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to wouldStartIdent from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn wouldStartIdent(self: *Tokenizer, src: []const u8) bool {\n    const char0 = if (self.idx >= src.len) ' ' else src[self.idx];\n    const char1 = if (self.idx + 1 >= src.len) ' ' else src[self.idx + 1];\n    const char2 = if (self.idx + 2 >= src.len) ' ' else src[self.idx + 2];\n\n    _ = char2;\n\n    return switch (char0) {\n        '-' => isIdentStartChar(char1) or char1 == '-',\n        else => isIdentStartChar(char0),\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "wouldStartIdent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to wouldStartNumber from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn wouldStartNumber(self: *Tokenizer, src: []const u8) bool {\n    if (self.peek(src)) |first| {\n        switch (first) {\n            '+', '-' => {\n                std.debug.assert(self.consume(src));\n                defer self.reconsume(src);\n\n                if (self.peek(src)) |second| {\n                    switch (second) {\n                        '0'...'9' => return true,\n                        '.' => {\n                            std.debug.assert(self.consume(src));\n                            defer self.reconsume(src);\n\n                            if (self.peek(src)) |third| {\n                                switch (third) {\n                                    '0'...'9' => return true,\n                                    else => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "wouldStartNumber",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "pub fn next(self: *Tokenizer, src: []const u8) ?Token {\n    if (self.consume(src)) {\n        switch (self.current) {\n            '\\n', '\\t', ' ' => {\n                while (true) {\n                    if (self.peek(src)) |c| switch (c) {\n                        '\\n', '\\t', ' ' => std.debug.assert(self.consume(src)),\n                        else => break,\n                    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to identSequence from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn identSequence(self: *Tokenizer, src: []const u8) Span {\n    const start = self.idx;\n\n    while (true) {\n        if (self.consume(src)) {\n            if (!isIdentChar(self.current)) {\n                self.reconsume(src);\n                break;\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "identSequence",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to identLike from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn identLike(self: *Tokenizer, src: []const u8) Token {\n    const span = self.identSequence(src);\n\n    if (std.ascii.eqlIgnoreCase(span.slice(src), \"url\") and\n        self.peek(src) != null and self.peek(src).? == '(')\n    {\n        @panic(\"TODO\");\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "identLike",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to numeric from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn numeric(self: *Tokenizer, src: []const u8) Token {\n    const start = self.idx;\n\n    if (self.peek(src)) |c| {\n        if (c == '+' or c == '-') {\n            std.debug.assert(self.consume(src));\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "numeric",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to string from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "fn string(self: *Tokenizer, src: []const u8) Token {\n    const ending = self.current;\n    const start = self.idx - 1;\n\n    while (true) {\n        if (self.consume(src)) {\n            switch (self.current) {\n                '\\n' => {\n                    return .{\n                        .err = .{\n                            .tag = .truncated_string,\n                            .span = .{ .start = start, .end = self.idx - 1 }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "function",
      "name": "string",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Dimension from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/css/Tokenizer.zig",
    "response": "pub const Dimension = struct {\n        number: Span,\n        unit: Span,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/css/Tokenizer.zig",
      "type": "struct",
      "name": "Dimension",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to report from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/errors.zig",
    "response": "pub fn report(\n    writer: *Writer,\n    template_name: []const u8,\n    template_path: []const u8,\n    bad_node: Span,\n    src: []const u8,\n    error_code: []const u8,\n    comptime title: []const u8,\n    comptime msg: []const u8,\n) Fatal {\n    try header(writer, title, msg);\n    try diagnostic(\n        writer,\n        template_name,\n        template_path,\n        true,\n        error_code,\n        bad_node,\n        src,\n    );\n    return error.Fatal;\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/errors.zig",
      "type": "function",
      "name": "report",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to diagnostic from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/errors.zig",
    "response": "pub fn diagnostic(\n    writer: *Writer,\n    template_name: []const u8,\n    template_path: []const u8,\n    bracket_line: bool,\n    note_line: []const u8,\n    span: Span,\n    src: []const u8,\n) error{ErrIO}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/errors.zig",
      "type": "function",
      "name": "diagnostic",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to header from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/errors.zig",
    "response": "pub fn header(\n    writer: *Writer,\n    comptime title: []const u8,\n    comptime msg: []const u8,\n) error{ErrIO}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/errors.zig",
      "type": "function",
      "name": "header",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fatal from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/errors.zig",
    "response": "pub fn fatal(\n    writer: *Writer,\n    comptime fmt: []const u8,\n    args: anytype,\n) Fatal {\n    writer.print(fmt, args) catch return error.ErrIO;\n    return error.ErrIO;\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/errors.zig",
      "type": "function",
      "name": "fatal",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to main from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator.zig",
    "response": "pub fn main() !void {\n    const gpa = std.heap.smp_allocator;\n\n    const args = try std.process.argsAlloc(gpa);\n    defer std.process.argsFree(gpa, args);\n\n    var bufout: [4096]u8 = undefined;\n    var out = std.fs.File.stdout().writer(&bufout);\n\n    if (args.len > 2) @panic(\"wrong number of arguments\");\n    if (args.len == 1) {\n        var bufin: [4096]u8 = undefined;\n        var in = std.fs.File.stdin().reader(&bufin);\n        try html.generate(gpa, &in.interface, &out.interface);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/generator.zig",
      "type": "function",
      "name": "main",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to apply from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator/html.zig",
    "response": "fn apply(\n        op: Op,\n        gpa: Allocator,\n        stack: *std.ArrayList([]const u8),\n        input: *Reader,\n        w: *Writer,\n    ) !void {\n        const tags = Element.elements.keys();\n\n        switch (op) {\n            .add_newline => try w.writeAll(\"\\n\"),\n            .up => {\n                if (stack.pop()) |tag| {\n                    try w.print(\"</{s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/generator/html.zig",
      "type": "function",
      "name": "apply",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to renderAttr from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator/html.zig",
    "response": "fn renderAttr(\n    gpa: Allocator,\n    named_model: Attribute.Named,\n    has_value: bool,\n    input: *Reader,\n    w: *Writer,\n) !void {\n    _ = gpa;\n    try w.print(\" {s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/generator/html.zig",
      "type": "function",
      "name": "renderAttr",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to generate from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator/html.zig",
    "response": "pub fn generate(gpa: Allocator, input: *Reader, w: *Writer) !void {\n    var stack: std.ArrayList([]const u8) = .empty;\n    defer stack.deinit(gpa);\n\n    var newlines: usize = 0;\n    while (true) {\n        const op: Op = @enumFromInt((input.takeByte() catch return) % 8);\n        if (op == .add_newline) newlines += 1;\n        if (newlines > 10) return error.Skip;\n        op.apply(gpa, &stack, input, w) catch |err| switch (err) {\n            error.Done => return,\n            else => return err,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/generator/html.zig",
      "type": "function",
      "name": "generate",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to case from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator/html.zig",
    "response": "const case: []const []const u8 = &.{\n                    \"anonymous\", \"use-credentials\", \"arst\",\n                };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/generator/html.zig",
      "type": "const",
      "name": "case",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to case from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator/html.zig",
    "response": "const case: []const []const u8 = &.{\n                    \"0\", \"1\", \"2\", \"-1\", \"100\", \"-99\", \"101\", \"-101\", \"-102\",\n                };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/generator/html.zig",
      "type": "const",
      "name": "case",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to op from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/generator/html.zig",
    "response": "const op: Op = @enumFromInt((input.takeByte() catch return) % 8);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/generator/html.zig",
      "type": "const",
      "name": "op",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isElement from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn isElement(k: Kind) bool {\n        return @intFromEnum(k) > @intFromEnum(Kind.text);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "isElement",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isVoid from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn isVoid(k: Kind) bool {\n        return switch (k) {\n            .root,\n            .doctype,\n            .comment,\n            .text,\n            => unreachable,\n            // shtml\n            .extend,\n            .super,\n            // html\n            .area,\n            .base,\n            .br,\n            .col,\n            .embed,\n            .hr,\n            .img,\n            .input,\n            .link,\n            .meta,\n            .source,\n            .track,\n            .wbr,\n            => true,\n            else => false,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "isVoid",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isClosed from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn isClosed(n: Node) bool {\n        return switch (n.kind) {\n            .root => unreachable,\n            .doctype, .text, .comment => true,\n            else => if (n.kind.isVoid() or n.self_closing) true else n.close.start > 0,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "isClosed",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to direction from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn direction(n: Node) Direction {\n        switch (n.kind) {\n            .root => {\n                std.debug.assert(n.first_child_idx == 0);\n                return .in;\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "direction",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn next(ti: *TagIterator, src: []const u8) ?Tokenizer.Attr {\n            while (ti.tokenizer.next(src[0..ti.end])) |maybe_attr| switch (maybe_attr) {\n                .attr => |attr| return attr,\n                else => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to startTagIterator from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn startTagIterator(n: Node, src: []const u8, language: Language) TagIterator {\n        const zone = tracy.trace(@src());\n        defer zone.end();\n\n        var t: Tokenizer = .{\n            .language = language,\n            .idx = n.open.start,\n            .return_attrs = true,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "startTagIterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to span from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn span(n: Node, src: []const u8) Span {\n        if (n.kind.isElement()) {\n            return n.startTagIterator(src, .html).name_span;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to stop from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn stop(n: Node, nodes: []const Node) u32 {\n        var cur = n;\n        const result = while (true) {\n            if (cur.next_idx != 0) break cur.next_idx;\n            if (cur.parent_idx == 0) break nodes.len;\n            cur = nodes[cur.parent_idx];\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "stop",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to debug from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn debug(n: Node, src: []const u8) void {\n        std.debug.print(\"{s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "debug",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to fmt from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn fmt(tag: Tag, src: []const u8) Tag.Formatter {\n            return .{ .tag = tag, .src = src }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "fmt",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn format(tf: Tag.Formatter, w: *std.Io.Writer) !void {\n                return switch (tf.tag) {\n                    .token => |terr| try w.print(\"syntax error: {t}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "format",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to cursor from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn cursor(ast: Ast, idx: u32) Cursor {\n    return .{ .ast = ast, .idx = idx, .dir = .in }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "cursor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to printErrors from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn printErrors(\n    ast: Ast,\n    src: []const u8,\n    path: ?[]const u8,\n    w: *Writer,\n) !void {\n    for (ast.errors) |err| {\n        const range = err.main_location.range(src);\n        try w.print(\"{s}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "printErrors",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to printSourceLine from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "fn printSourceLine(src: []const u8, span: Span, w: *Writer) !void {\n    // test.html:3:7: invalid attribute for this element\n    //         <div foo bar baz>\n    //              ^^^\n\n    // If the error starts on a newline (eg `foo=\"bar\\n`), we want to consider\n    // it ast part of the previous line.\n    var idx = span.start -| 1;\n    var spaces_left: u32 = 0;\n    const line_start = while (idx > 0) : (idx -= 1) switch (src[idx]) {\n        '\\n' => break idx + 1,\n        ' ', '\\t', ('\\n' + 1)...'\\r' => spaces_left += 1,\n        else => spaces_left = 0,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "printSourceLine",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn deinit(ast: Ast, gpa: Allocator) void {\n    gpa.free(ast.nodes);\n    gpa.free(ast.errors);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn init(\n    gpa: Allocator,\n    src: []const u8,\n    language: Language,\n    syntax_only: bool,\n) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to render from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn render(ast: Ast, src: []const u8, w: *Writer) !void {\n    assert(!ast.has_syntax_errors);\n\n    if (ast.nodes.len < 2) return;\n\n    var indentation: u32 = 0;\n    var current = ast.nodes[1];\n    var direction: enum { enter, exit }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "render",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateNesting from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn validateNesting(\n    gpa: Allocator,\n    nodes: []const Node,\n    seen_attrs: *std.StringHashMapUnmanaged(Span),\n    seen_ids_stack: *std.ArrayList(std.StringHashMapUnmanaged(Span)),\n    errors: *std.ArrayListUnmanaged(Error),\n    src: []const u8,\n    language: Language,\n) !void {\n    if (language != .html) return;\n\n    var node_idx: u32 = 0;\n    while (node_idx < nodes.len) {\n        log.debug(\"validating {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "validateNesting",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to completions from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn completions(\n    ast: Ast,\n    arena: Allocator,\n    src: []const u8,\n    offset: u32,\n) ![]const Completion {\n    for (ast.errors) |err| {\n        if (err.tag != .token or\n            offset < err.main_location.start or\n            offset > err.main_location.end) continue;\n\n        var idx = offset;\n        while (idx > 0) {\n            idx -= 1;\n            switch (src[idx]) {\n                '<', '/' => break,\n                ' ', '\\n', '\\t', '\\r' => continue,\n                else => return &.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "completions",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to description from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn description(ast: *const Ast, src: []const u8, offset: u32) ?[]const u8 {\n    const node_idx = ast.findNodeTagsIdx(offset);\n    if (node_idx == 0) return null;\n    const n = ast.nodes[node_idx];\n\n    if (!n.kind.isElement() or n.kind == .___) return null;\n\n    if (n.open.end > offset) {\n        var it = n.startTagIterator(src, ast.language);\n        if (offset < it.name_span.end and offset >= it.name_span.start) {\n            // element name\n            const e = Element.all.get(n.kind);\n            return e.desc;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "description",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to findNodeTagsIdx from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn findNodeTagsIdx(ast: *const Ast, offset: u32) u32 {\n    if (ast.nodes.len < 2) return 0;\n    var cur_idx: u32 = 1;\n    while (cur_idx != 0) {\n        const n = ast.nodes[cur_idx];\n        if (!n.kind.isElement()) cur_idx = 0;\n\n        if (n.open.start <= offset and n.open.end > offset) {\n            break;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "findNodeTagsIdx",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to transparentAncestorRule from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn transparentAncestorRule(\n//     nodes: []const Node,\n//     src: []const u8,\n//     language: Language,\n//     parent_idx: u32,\n// ) ?struct {\n//     tag: tags.RuleEnum,\n//     span: Span,\n//     idx: u32,\n// }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "transparentAncestorRule",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to at from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "fn at(ast: Ast, idx: u32) ?Node {\n    if (idx == 0) return null;\n    return ast.nodes[idx];\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "at",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parent from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn parent(ast: Ast, n: Node) ?Node {\n    if (n.parent_idx == 0) return null;\n    return ast.nodes[n.parent_idx];\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "parent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nextSibling from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn nextSibling(ast: Ast, n: Node) ?Node {\n    return ast.at(n.next_idx);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "nextSibling",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to lastChild from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn lastChild(ast: Ast, n: Node) ?Node {\n    _ = ast;\n    _ = n;\n    @panic(\"TODO\");\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "lastChild",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to child from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn child(ast: Ast, n: Node) ?Node {\n    return ast.at(n.first_child_idx);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "child",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to formatter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn formatter(ast: Ast, src: []const u8) Formatter {\n    return .{ .ast = ast, .src = src }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "formatter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to format from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn format(f: Formatter, w: *Writer) !void {\n        try f.ast.render(f.src, w);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "format",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to debug from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn debug(ast: Ast, src: []const u8) void {\n    var c = ast.cursor(0);\n    var last_depth: u32 = 0;\n    std.debug.print(\" \\n node count: {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "debug",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to debugNodes from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "fn debugNodes(nodes: []const Node, src: []const u8) void {\n    const ast = Ast{\n        .language = .html,\n        .nodes = nodes,\n        .errors = &.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "debugNodes",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to reset from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn reset(c: *Cursor, n: Node) void {\n        _ = c;\n        _ = n;\n        @panic(\"TODO\");\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "reset",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to node from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn node(c: Cursor) Node {\n        return c.ast.nodes[c.idx];\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "node",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub fn next(c: *Cursor) ?Node {\n        if (c.idx == 0 and c.dir == .out) return null;\n\n        var n = c.node();\n        if (c.ast.child(n)) |ch| {\n            c.idx = n.first_child_idx;\n            c.dir = .in;\n            c.depth += 1;\n            return ch;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to testOne from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "fn testOne(ctx: @This(), input: []const u8) anyerror!void {\n            _ = ctx.arena.reset(.retain_capacity);\n            const gpa = ctx.arena.allocator();\n\n            var in: Reader = .fixed(input);\n            var out: Writer.Allocating = .init(gpa);\n            generator.generate(gpa, &in, &out.writer) catch |err| {\n                if (err == error.Skip) return;\n                return err;\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "function",
      "name": "testOne",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Node from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub const Node = struct {\n    /// Span covering start_tag, diamond brackets included\n    open: Span,\n    /// Span covering end_tag, diamond brackets included\n    /// Unset status is represented by .start = 0\n    /// not set for doctype, element_void and element_self_closing\n    close: Span = .{ .start = 0, .end = 0 }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "Node",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to TagIterator from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub const TagIterator = struct {\n        end: u32,\n        name_span: Span,\n        tokenizer: Tokenizer,\n\n        pub fn next(ti: *TagIterator, src: []const u8) ?Tokenizer.Attr {\n            while (ti.tokenizer.next(src[0..ti.end])) |maybe_attr| switch (maybe_attr) {\n                .attr => |attr| return attr,\n                else => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "TagIterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Error from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub const Error = struct {\n    tag: union(enum) {\n        token: Tokenizer.TokenError,\n        unsupported_doctype,\n        invalid_attr,\n        invalid_attr_nesting: struct {\n            kind: Kind,\n            reason: []const u8 = \"\",\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "Error",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Formatter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const Formatter = struct {\n            tag: Tag,\n            src: []const u8,\n            pub fn format(tf: Tag.Formatter, w: *std.Io.Writer) !void {\n                return switch (tf.tag) {\n                    .token => |terr| try w.print(\"syntax error: {t}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "Formatter",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Completion from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub const Completion = struct {\n    label: []const u8,\n    desc: []const u8,\n    value: ?[]const u8 = null,\n    // This value is used by the lsp to know how to interpret\n    // the value field of this list of suggestions.\n    kind: enum { attribute, element_open, element_close }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "Completion",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Formatter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const Formatter = struct {\n    ast: Ast,\n    src: []const u8,\n\n    pub fn format(f: Formatter, w: *Writer) !void {\n        try f.ast.render(f.src, w);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "Formatter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Cursor from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "pub const Cursor = struct {\n    ast: Ast,\n    idx: u32,\n    depth: u32 = 0,\n    dir: enum { in, next, out }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "Cursor",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Context from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const Context = struct {\n        arena: *std.heap.ArenaAllocator,\n        out: *Writer,\n        fn testOne(ctx: @This(), input: []const u8) anyerror!void {\n            _ = ctx.arena.reset(.retain_capacity);\n            const gpa = ctx.arena.allocator();\n\n            var in: Reader = .fixed(input);\n            var out: Writer.Allocating = .init(gpa);\n            generator.generate(gpa, &in, &out.writer) catch |err| {\n                if (err == error.Skip) return;\n                return err;\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "struct",
      "name": "Context",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to kind from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const kind: Ast.Kind = if (std.ascii.eqlIgnoreCase(\"ctx\", name))\n                                    .ctx\n                                else if (std.ascii.eqlIgnoreCase(\"super\", name))\n                                    .super\n                                else if (std.ascii.eqlIgnoreCase(\"extend\", name))\n                                    .extend\n                                else\n                                    kinds.get(name) orelse .___;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "const",
      "name": "kind",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to cur_name from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const cur_name: Span = blk: {\n                                        var temp_tok: Tokenizer = .{\n                                            .language = language,\n                                            .return_attrs = true,\n                                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "const",
      "name": "cur_name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to maybe_name from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const maybe_name: ?[]const u8 = if (dt.name) |name|\n                        name.slice(tag)\n                    else\n                        null;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "const",
      "name": "maybe_name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to maybe_extra from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const maybe_extra: ?[]const u8 = if (dt.extra.start > 0)\n                        dt.extra.slice(tag)\n                    else\n                        null;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "const",
      "name": "maybe_extra",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to element from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const element: Element = elements.get(n.kind);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "const",
      "name": "element",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to ast from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Ast.zig",
    "response": "const ast: Ast = try .init(gpa, out.written(), .html, false);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Ast.zig",
      "type": "const",
      "name": "ast",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to hash from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn hash(self: @This(), s: []const u8) u64 {\n        _ = self;\n        var h = std.hash.Wyhash.init(0);\n        for (s) |byte| h.update((&std.ascii.toLower(byte))[0..1]);\n        return h.final();\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "hash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to eql from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn eql(self: @This(), a: []const u8, b: []const u8) bool {\n        _ = self;\n        return std.ascii.eqlIgnoreCase(a, b);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "eql",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to comptimeIndex from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "fn comptimeIndex(list: *const List, comptime name: []const u8) usize {\n            return comptime list.set.getIndex(name) orelse @compileError(\n                \"unable to find '\" ++ name ++ \"'\",\n            );\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "comptimeIndex",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "fn init(extra: Extra, count: Count, cpls: []const Ast.Completion) @This() {\n            assert(cpls.len > 0);\n            return .{\n                .count = count,\n                .extra = extra,\n                .set = blk: {\n                    @setEvalBranchQuota(4000);\n                    var kvs: []const struct { []const u8, u32 }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to match from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn match(\n            list: List,\n            gpa: Allocator,\n            errors: *std.ArrayList(Ast.Error),\n            node_idx: u32,\n            offset: u32,\n            item: []const u8,\n        ) !Match {\n            assert(list.extra != .manual);\n\n            if (list.set.getIndex(item)) |idx| {\n                return .{ .list = @intCast(idx) }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "match",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to validate from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn validate(\n        rule: Rule,\n        gpa: Allocator,\n        errors: *std.ArrayListUnmanaged(Ast.Error),\n        src: []const u8,\n        node_idx: u32,\n        attr: Tokenizer.Attr,\n    ) !void {\n        rule: switch (rule) {\n            .manual => unreachable,\n            .any => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "validate",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateMime from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn validateMime(\n    gpa: Allocator,\n    errors: *std.ArrayListUnmanaged(Ast.Error),\n    src: []const u8,\n    node_idx: u32,\n    attr: Tokenizer.Attr,\n) !void {\n    // https://mimesniff.spec.whatwg.org/#parsing-a-mime-type\n    const raw_value = attr.value orelse return errors.append(gpa, .{\n        .tag = .missing_attr_value,\n        .main_location = attr.name,\n        .node_idx = node_idx,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "validateMime",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateMimeChars from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn validateMimeChars(bytes: []const u8) ?Rule.ValueRejection {\n    for (bytes, 0..) |c, idx| switch (c) {\n        // zig fmt: off\n        '!', '#', '$', '%', '&', '\\'', '*',\n        '+', '-', '.', '^', '_', '`', '|', '~',\n        'a'...'z', '0'...'9', 'A'...'Z' => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "validateMimeChars",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn init(\n        errors: *std.ArrayListUnmanaged(Ast.Error),\n        seen_attrs: *std.StringHashMapUnmanaged(Span),\n        seen_ids: *std.StringHashMapUnmanaged(Span),\n        lang: Language,\n        tag: Span,\n        src: []const u8,\n        node_idx: u32,\n    ) ValidatingIterator {\n        seen_attrs.clearRetainingCapacity();\n        var result: ValidatingIterator = .{\n            .it = .{\n                .language = lang,\n                .idx = tag.start,\n                .return_attrs = true,\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn next(\n        vait: *ValidatingIterator,\n        gpa: Allocator,\n        src: []const u8,\n    ) !?Tokenizer.Attr {\n        while (vait.it.next(src[0..vait.end])) |maybe_attr| {\n            switch (maybe_attr) {\n                else => unreachable,\n                .tag_name => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to completions from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn completions(\n    arena: Allocator,\n    src: []const u8,\n    stt: *Ast.Node.TagIterator,\n    element_tag: Ast.Kind,\n    offset: u32,\n) ![]const Ast.Completion {\n    assert(element_tag.isElement());\n\n    const elem_attrs = element_attrs.get(element_tag);\n    const total_count = global.list.len + elem_attrs.list.len;\n\n    var seen: std.DynamicBitSetUnmanaged = try .initEmpty(arena, total_count);\n    var seen_count: u32 = 0;\n    while (stt.next(src)) |attr| {\n        log.debug(\"completions attr: {any}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "completions",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to init from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn init(list: []const Named) AttributeSet {\n        @setEvalBranchQuota(4000);\n        var kvs: [list.len]struct { []const u8, u32 }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "init",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to get from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn get(as: AttributeSet, name: []const u8) ?Attribute {\n        return as.list[as.map.get(name) orelse return null].model;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "get",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to index from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn index(as: AttributeSet, name: []const u8) ?u32 {\n        return as.map.get(name) orelse return null;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "index",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to has from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn has(as: AttributeSet, name: []const u8) bool {\n        return as.map.has(name);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "has",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to comptimeIndex from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "fn comptimeIndex(as: AttributeSet, name: []const u8) u32 {\n        @setEvalBranchQuota(4000);\n        inline for (as.list, 0..) |named, idx| {\n            if (named.name.ptr == name.ptr) return idx;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "comptimeIndex",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isData from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn isData(name: []const u8) bool {\n    if (name.len < \"data-*\".len) return false;\n    const data = std.ascii.eqlIgnoreCase(\"data-\", name[0..\"data-\".len]);\n    // TODO: remove this hack once aria attributes are implemented\n    const aria = std.ascii.eqlIgnoreCase(\"aria-\", name[0..\"aria-\".len]);\n    return data or aria;\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "isData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to custom from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "fn custom(\n                    gpa: Allocator,\n                    errors: *std.ArrayListUnmanaged(Ast.Error),\n                    src: []const u8,\n                    node_idx: u32,\n                    attr: Tokenizer.Attr,\n                ) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "custom",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to accesskey from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn accesskey(\n    gpa: Allocator,\n    errors: *std.ArrayListUnmanaged(Ast.Error),\n    src: []const u8,\n    node_idx: u32,\n    attr: Tokenizer.Attr,\n) !void {\n    const value = attr.value orelse {\n        return errors.append(gpa, .{\n            .tag = .missing_attr_value,\n            .main_location = attr.name,\n            .node_idx = node_idx,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "accesskey",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to checkNavigableName from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "fn checkNavigableName(value: []const u8) ?Attribute.Rule.ValueRejection {\n    if (value.len == 0) return .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "checkNavigableName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to parseUri from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub fn parseUri(src: []const u8) !std.Uri {\n    const end = for (src, 0..) |byte, i| {\n        if (!isSchemeChar(byte)) break i;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "parseUri",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isSchemeChar from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "fn isSchemeChar(c: u8) bool {\n    return switch (c) {\n        'A'...'Z', 'a'...'z', '0'...'9', '+', '-', '.' => true,\n        else => false,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "function",
      "name": "isSchemeChar",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to StringIgnoreCaseContext from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const StringIgnoreCaseContext = struct {\n    pub fn hash(self: @This(), s: []const u8) u64 {\n        _ = self;\n        var h = std.hash.Wyhash.init(0);\n        for (s) |byte| h.update((&std.ascii.toLower(byte))[0..1]);\n        return h.final();\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "struct",
      "name": "StringIgnoreCaseContext",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ValueRejection from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const ValueRejection = struct {\n        reason: []const u8 = \"\",\n        offset: ?u32 = null,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "struct",
      "name": "ValueRejection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to List from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const List = struct {\n        /// Used for searching\n        set: Set,\n        completions: []const Ast.Completion,\n        extra: Extra,\n        count: Count = .one,\n\n        pub const Count = enum { one, many, many_unique, many_unique_comma }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "struct",
      "name": "List",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to ValidatingIterator from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const ValidatingIterator = struct {\n    it: Tokenizer,\n    errors: *std.ArrayListUnmanaged(Ast.Error),\n    seen_attrs: *std.StringHashMapUnmanaged(Span),\n    seen_ids: *std.StringHashMapUnmanaged(Span),\n    end: u32,\n    node_idx: u32,\n    name: Span = undefined,\n\n    /// On initalization will call seen_attrs.clearRetainingCapacity()\n    pub fn init(\n        errors: *std.ArrayListUnmanaged(Ast.Error),\n        seen_attrs: *std.StringHashMapUnmanaged(Span),\n        seen_ids: *std.StringHashMapUnmanaged(Span),\n        lang: Language,\n        tag: Span,\n        src: []const u8,\n        node_idx: u32,\n    ) ValidatingIterator {\n        seen_attrs.clearRetainingCapacity();\n        var result: ValidatingIterator = .{\n            .it = .{\n                .language = lang,\n                .idx = tag.start,\n                .return_attrs = true,\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "struct",
      "name": "ValidatingIterator",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Named from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const Named = struct { name: []const u8, model: Attribute }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "struct",
      "name": "Named",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AttributeSet from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const AttributeSet = struct {\n    list: []const Named,\n    map: Map,\n\n    pub fn init(list: []const Named) AttributeSet {\n        @setEvalBranchQuota(4000);\n        var kvs: [list.len]struct { []const u8, u32 }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "struct",
      "name": "AttributeSet",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to common from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const common = struct {\n    pub const fetchpriority: Attribute = .{\n        .desc = \"Provides a hint of the relative priority to use when fetching a resource of a particular type.\",\n        .rule = .{\n            .list = .init(.none, .one, &.{\n                .{\n                    .label = \"high\",\n                    .desc = \"Fetch the resource at a high priority relative to other resources of the same type.\",\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "struct",
      "name": "common",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to span from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "const span: Span = .{\n                        .start = @intCast(value.span.start + it.index - c.len),\n                        .end = @intCast(value.span.start + it.index),\n                    };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "const",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to spaces from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "const spaces: u32 = blk: {\n        const raw = raw_value.span.slice(src);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "const",
      "name": "spaces",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to empty_set from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "const empty_set: *const AttributeSet = &.{\n    .list = &.{},\n    .map = .initComptime(.{}),\n};",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "const",
      "name": "empty_set",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to span from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "const span: Span = .{\n            .start = @intCast(it.index - tok.len + value.span.start),\n            .end = @intCast(it.index + value.span.start),\n        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "const",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to download from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Attribute.zig",
    "response": "pub const download: Attribute = .{\n        .rule = .any,\n        .desc =\n        \\\\Causes the browser to treat the linked URL as a\n        \\\\download. Can be used with or without a filename value.\n        \\\\\n        \\\\- [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/a#download)\n        \\\\- [HTML Spec](https://html.spec.whatwg.org/multipage/links.html#attr-hyperlink-download)\n        ,\n    };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Attribute.zig",
      "type": "const",
      "name": "download",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to empty from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn empty(e: Extra) bool {\n        const int: Tag = @bitCast(e);\n        return int == 0;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to overlaps from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn overlaps(lhs: Extra, rhs: Extra) bool {\n        const l: Tag = @bitCast(lhs);\n        const r: Tag = @bitCast(rhs);\n        return (l & r) != 0;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "overlaps",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intersect from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn intersect(lhs: Extra, rhs: Extra) Extra {\n        const l: Tag = @bitCast(lhs);\n        const r: Tag = @bitCast(rhs);\n        return @bitCast(l & r);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "intersect",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to empty from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn empty(cs: Categories) bool {\n        const int: Tag = @bitCast(cs);\n        return int == 0;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "empty",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to overlaps from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn overlaps(lhs: Categories, rhs: Categories) bool {\n        const l: Tag = @bitCast(lhs);\n        const r: Tag = @bitCast(rhs);\n        return (l & r) != 0;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "overlaps",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to intersect from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn intersect(lhs: Categories, rhs: Categories) Categories {\n        const l: Tag = @bitCast(lhs);\n        const r: Tag = @bitCast(rhs);\n        return @bitCast(l & r);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "intersect",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to merge from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn merge(lhs: Categories, rhs: Categories) Categories {\n        const l: Tag = @bitCast(lhs);\n        const r: Tag = @bitCast(rhs);\n        return @bitCast(l | r);\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "merge",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to has from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn has(cs: Categories, cat: std.meta.FieldEnum(Categories)) bool {\n        return switch (cat) {\n            inline else => |f| @field(cs, @tagName(f)),\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "has",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to modelRejects from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn modelRejects(\n    parent_element: *const Element,\n    nodes: []const Ast.Node,\n    src: []const u8,\n    parent_node: Ast.Node,\n    parent_span: Span,\n    descendant_element: *const Element,\n    descendant_rt_model: Model,\n) ?Rejection {\n    log.debug(\"========== modelRejects {t}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "modelRejects",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateContent from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn validateContent(\n    parent_element: *const Element,\n    gpa: Allocator,\n    nodes: []const Ast.Node,\n    seen_attrs: *std.StringHashMapUnmanaged(Span),\n    seen_ids: *std.StringHashMapUnmanaged(Span),\n    errors: *std.ArrayListUnmanaged(Ast.Error),\n    src: []const u8,\n    parent_idx: u32,\n) !void {\n    content: switch (parent_element.content) {\n        .anything => {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "validateContent",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateAttrs from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn validateAttrs(\n    element: *const Element,\n    gpa: Allocator,\n    lang: Language,\n    errors: *std.ArrayListUnmanaged(Error),\n    seen_attrs: *std.StringHashMapUnmanaged(Span),\n    seen_ids: *std.StringHashMapUnmanaged(Span),\n    nodes: []const Ast.Node,\n    parent_idx: u32,\n    src: []const u8,\n    tag: Span,\n    node_idx: u32,\n) error{OutOfMemory}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "validateAttrs",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to completions from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "fn completions(\n    element: *const Element,\n    arena: Allocator,\n    ast: Ast,\n    src: []const u8,\n    node_idx: u32,\n    offset: u32,\n    mode: CompletionMode,\n) ![]const Ast.Completion {\n    switch (mode) {\n        .attrs => {\n            var stt = ast.nodes[node_idx].startTagIterator(src, ast.language);\n            return Attribute.completions(\n                arena,\n                src,\n                &stt,\n                element.tag,\n                offset,\n            );\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "completions",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to simpleCompletions from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub fn simpleCompletions(\n    arena: Allocator,\n    prefix: []const Ast.Kind,\n    parent_content: Categories,\n    parent_reject: Categories,\n    simple: Simple,\n) ![]const Ast.Completion {\n    var list: std.ArrayListUnmanaged(Ast.Completion) = .empty;\n    try list.ensureTotalCapacity(\n        arena,\n        all.values.len - @intFromEnum(Kind.___),\n    );\n\n    for (prefix) |p| list.appendAssumeCapacity(all_completions.get(p));\n\n    const start: usize = @intFromEnum(Kind.___) + 1;\n    outer: for (all.values[start..], start..) |e, idx| {\n        const child_kind: Kind = @enumFromInt(idx);\n\n        for (prefix) |p| {\n            if (p == child_kind) continue :outer;\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "function",
      "name": "simpleCompletions",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Simple from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const Simple = struct {\n    // Allowed tags that are not part of the allowed categories.\n    extra_children: []const Kind = &.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "struct",
      "name": "Simple",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Reasons from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const Reasons = struct {\n    categories: Reasons.Categories = .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "struct",
      "name": "Reasons",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Categories from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const Categories = struct {\n        // metadata: []const u8 = \"\",\n        flow: Reason = .{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "struct",
      "name": "Categories",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Reason from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const Reason = struct {\n        reject: []const u8 = \"\",\n        accept: []const u8 = \"\",\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "struct",
      "name": "Reason",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Model from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const Model = struct {\n    categories: Categories,\n    content: Categories,\n    extra: Extra = .none,\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "struct",
      "name": "Model",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Rejection from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const Rejection = struct {\n    reason: []const u8,\n    span: Span,\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "struct",
      "name": "Rejection",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to KV from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const KV = struct { []const u8, Ast.Kind }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "struct",
      "name": "KV",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to none from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const none: Extra = .{};",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "none",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to int from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const int: Tag = @bitCast(e);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "int",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to l from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const l: Tag = @bitCast(lhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "l",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to r from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const r: Tag = @bitCast(rhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "r",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to l from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const l: Tag = @bitCast(lhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "l",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to r from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const r: Tag = @bitCast(rhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "r",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to none from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const none: Categories = .{};",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "none",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to all from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const all: Categories = .{\n        .metadata = true,\n        .flow = true,\n        .phrasing = true,\n        .text = true,\n        .sectioning = true,\n        .heading = true,\n        .interactive = true,\n        // .embedded = true,\n    };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "all",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to transparent from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const transparent: Categories = .all;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "transparent",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to int from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const int: Tag = @bitCast(cs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "int",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to l from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const l: Tag = @bitCast(lhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "l",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to r from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const r: Tag = @bitCast(rhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "r",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to l from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const l: Tag = @bitCast(lhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "l",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to r from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const r: Tag = @bitCast(rhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "r",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to l from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const l: Tag = @bitCast(lhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "l",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to r from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const r: Tag = @bitCast(rhs);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "r",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const start: usize = @intFromEnum(Kind.___) + 1;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to anything from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const anything: [all_elems.len]Ast.Completion = comptime a: {\n                    //     var anything: [all_elems.len]Ast.Completion = undefined;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "anything",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to has_slash from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const has_slash: u32 = @intFromBool(src[offset -| 1] == '/');",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "has_slash",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to has_closing_bracket from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const has_closing_bracket: u32 = while (idx < src.len) : (idx += 1) {\n                        switch (src[idx]) {\n                            else => {},\n                            '\\n' => break 0,\n                            '>' => break 1,\n                        }\n                    } else 1;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "has_closing_bracket",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to start from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const start: usize = @intFromEnum(Kind.___) + 1;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "start",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to child_kind from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "const child_kind: Kind = @enumFromInt(idx);",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "child_kind",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to elements from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Element.zig",
    "response": "pub const elements: KindMap = blk: {\n    const fields = std.meta.fields(Ast.Kind)[8..];",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Element.zig",
      "type": "const",
      "name": "elements",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to span from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn span(attr: Attr) Span {\n        if (attr.value) |v| {\n            const quote: u32 = if (v.quote == .none) 0 else 1;\n            return .{\n                .start = attr.name.start,\n                .end = v.span.end + quote,\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "span",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to deinit from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn deinit(\n                self: UnescapedSlice,\n                allocator: std.mem.Allocator,\n            ) void {\n                if (self.must_free) allocator.free(self.slice);\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "deinit",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to unescape from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn unescape(\n            value: Value,\n            gpa: std.mem.Allocator,\n            src: []const u8,\n        ) !UnescapedSlice {\n            _ = gpa;\n            // TODO: ask squeek to please implement this for real\n            return .{ .slice = value.span.slice(src) }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "unescape",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig function similar to isVoid from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn isVoid(st: @This(), src: []const u8, language: Language) bool {\n            std.debug.assert(st.name.end != 0);\n\n            if (language == .xml) return false;\n            if (language == .superhtml) {\n                if (super_void_tag_names.has(st.name.slice(src))) {\n                    return true;\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "isVoid",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getReturnState from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn getReturnState(self: CharacterReferenceState) State {\n            switch (self.return_state) {\n                .rcdata => |start| return .{\n                    .rcdata = start,\n                }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "getReturnState",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to consume from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn consume(self: *Tokenizer, src: []const u8) bool {\n    if (self.idx == src.len) {\n        return false;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "consume",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to getName from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn getName(tokenizer: *Tokenizer, tag_src: []const u8) ?Span {\n    std.debug.assert(tokenizer.return_attrs);\n    return while (tokenizer.next(tag_src)) |maybe_name| {\n        switch (maybe_name) {\n            .tag_name => |n| break n,\n            .tag => break null,\n            else => continue,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "getName",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn next(self: *Tokenizer, src: []const u8) ?Token {\n    if (self.deferred_token) |t| {\n        const token_copy = t;\n        self.deferred_token = null;\n        return token_copy;\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "next",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to next2 from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn next2(self: *Tokenizer, src: []const u8) ?struct {\n    token: Token,\n    deferred: ?Token = null,\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "next2",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gotoScriptData from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn gotoScriptData(self: *Tokenizer) void {\n    self.state = .{ .script_data = self.idx }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "gotoScriptData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gotoRcData from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn gotoRcData(self: *Tokenizer, tag_name: []const u8) void {\n    self.state = .{ .rcdata = self.idx }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "gotoRcData",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gotoRawText from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn gotoRawText(self: *Tokenizer, tag_name: []const u8) void {\n    self.state = .{ .rawtext = self.idx }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "gotoRawText",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to gotoPlainText from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub fn gotoPlainText(self: *Tokenizer) void {\n    self.state = .{ .plaintext = self.idx }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "gotoPlainText",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nextCharsAre from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn nextCharsAre(self: Tokenizer, needle: []const u8, src: []const u8) bool {\n    return std.mem.startsWith(u8, src[self.idx..], needle);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "nextCharsAre",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to nextCharsAreIgnoreCase from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn nextCharsAreIgnoreCase(self: Tokenizer, needle: []const u8, src: []const u8) bool {\n    return std.ascii.startsWithIgnoreCase(src[self.idx..], needle);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "nextCharsAreIgnoreCase",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isAsciiAlphaLower from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn isAsciiAlphaLower(c: u8) bool {\n    return (c >= 'a' and c <= 'z');\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "isAsciiAlphaLower",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isAsciiAlphaUpper from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn isAsciiAlphaUpper(c: u8) bool {\n    return (c >= 'A' and c <= 'Z');\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "isAsciiAlphaUpper",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isAsciiAlpha from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn isAsciiAlpha(c: u8) bool {\n    return isAsciiAlphaLower(c) or isAsciiAlphaUpper(c);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "isAsciiAlpha",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isNonCharacter from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn isNonCharacter(c: u21) bool {\n    return switch (c) {\n        // zig fmt: off\n        '\\u{FDD0}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "isNonCharacter",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isControl from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn isControl(c: u8) bool {\n    // A control is a C0 control or a code point in the range U+007F DELETE to U+009F APPLICATION PROGRAM COMMAND, inclusive.\n    // A C0 control is a code point in the range U+0000 NULL to U+001F INFORMATION SEPARATOR ONE, inclusive.\n    return (c >= 0 and c <= 0x1F) or (c >= 0x7F and c <= 0x9F);\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "isControl",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to isAsciiWhitespace from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn isAsciiWhitespace(c: u8) bool {\n    return switch (c) {\n        // ASCII whitespace is U+0009 TAB, U+000A LF, U+000C FF, U+000D CR, or U+0020 SPACE.\n        '\\t', '\\n', form_feed, '\\r', ' ' => true,\n        else => false,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "isAsciiWhitespace",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to trimmedText from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn trimmedText(start: u32, end: u32, src: []const u8) ?Span {\n    var text_span: Span = .{ .start = start, .end = end }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "trimmedText",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to testTokenizeWithState from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn testTokenizeWithState(tokenizer: *Tokenizer, src: []const u8, expected_tokens: []const Token) !void {\n    for (expected_tokens, 0..) |expected_token, i| {\n        const t = tokenizer.next(src);\n        std.testing.expectEqual(expected_token, t) catch |e| {\n            std.debug.print(\"unexpected token at index {}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "testTokenizeWithState",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to testTokenize from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn testTokenize(src: []const u8, expected_tokens: []const Token) !void {\n    var tokenizer: Tokenizer = .{ .language = .html }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "testTokenize",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to testOne from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "fn testOne(_: @This(), input: []const u8) anyerror!void {\n            var t: Tokenizer = .{ .language = .html }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "function",
      "name": "testOne",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Attr from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub const Attr = struct {\n    name: Span,\n    value: ?Value,\n\n    pub fn span(attr: Attr) Span {\n        if (attr.value) |v| {\n            const quote: u32 = if (v.quote == .none) 0 else 1;\n            return .{\n                .start = attr.name.start,\n                .end = v.span.end + quote,\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "Attr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Value from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub const Value = struct {\n        quote: enum { none, single, double }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "Value",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to UnescapedSlice from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub const UnescapedSlice = struct {\n            must_free: bool = false,\n            slice: []const u8 = &.{}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "UnescapedSlice",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Doctype from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub const Doctype = struct {\n        span: Span,\n        name: ?Span,\n        extra: Span = .{ .start = 0, .end = 0 }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "Doctype",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "pub const Tag = struct {\n        span: Span,\n        name: Span,\n        attr_count: u32 = 0,\n        kind: enum {\n            start,\n            start_self,\n            end,\n            end_self,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "Tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Data from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const Data = struct {\n    data_start: u32,\n    tag_start: u32,\n    name_start: u32 = 0,\n}",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "Data",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AttributeValueState from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const AttributeValueState = struct {\n        tag: Token.Tag,\n        quote: enum { double, single }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "AttributeValueState",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to AttributeValueUnquotedState from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const AttributeValueUnquotedState = struct {\n        tag: Token.Tag,\n        name: Span,\n        value_start: u32,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "AttributeValueUnquotedState",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to CharacterReferenceState from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const CharacterReferenceState = struct {\n        ampersand: u32,\n        return_state: union(enum) {\n            text: u32,\n            rcdata: u32,\n            attribute_value: AttributeValueState,\n            attribute_value_unquoted: AttributeValueUnquotedState,\n        }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "CharacterReferenceState",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to NumericCharacterReferenceState from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const NumericCharacterReferenceState = struct {\n        code: u21,\n        ref: CharacterReferenceState,\n    }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "NumericCharacterReferenceState",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig struct similar to Context from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const Context = struct {\n        fn testOne(_: @This(), input: []const u8) anyerror!void {\n            var t: Tokenizer = .{ .language = .html }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "struct",
      "name": "Context",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to quote from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const quote: u32 = if (v.quote == .none) 0 else 1;",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "quote",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to err from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const err: Token = .{\n                                .parse_error = .{\n                                    .tag = .end_tag_with_trailing_solidus,\n                                    .span = .{\n                                        .start = self.idx - 1,\n                                        .end = self.idx,\n                                    },\n                                },\n                            };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "err",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = self.idx,\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to err from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const err: Token = .{\n                                .parse_error = .{\n                                    .tag = .end_tag_with_trailing_solidus,\n                                    .span = .{\n                                        .start = self.idx - 1,\n                                        .end = self.idx,\n                                    },\n                                },\n                            };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "err",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = self.idx,\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to err from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const err: Token = .{\n                                .parse_error = .{\n                                    .tag = .end_tag_with_trailing_solidus,\n                                    .span = .{\n                                        .start = self.idx - 1,\n                                        .end = self.idx,\n                                    },\n                                },\n                            };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "err",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = self.idx,\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = 0, // not yet known\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to err from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const err: Token = .{\n                                .parse_error = .{\n                                    .tag = .end_tag_with_trailing_solidus,\n                                    .span = .{\n                                        .start = self.idx - 1,\n                                        .end = self.idx,\n                                    },\n                                },\n                            };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "err",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to tag from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const tag: Token.Tag = .{\n                            .kind = .end,\n                            .span = .{\n                                .start = state.tag_start,\n                                .end = self.idx,\n                            },\n                            .name = .{\n                                .start = state.name_start,\n                                .end = self.idx - 1,\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "tag",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to name from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const name: Span = .{\n                            .start = state.name_start,\n                            .end = self.idx - 1,\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to name from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const name: Span = .{\n                            .start = state.name_start,\n                            .end = self.idx - 1,\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "name",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to t from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const t: Token = .{\n                            .parse_error = .{\n                                .tag = .missing_attribute_value,\n                                .span = .{\n                                    .start = state.equal_sign,\n                                    .end = state.equal_sign + 1,\n                                },\n                            },\n                        };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "t",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig const similar to attr from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/Tokenizer.zig",
    "response": "const attr: Token = .{\n                                .attr = .{\n                                    .name = state.attribute_name,\n                                    .value = null,\n                                },\n                            };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/Tokenizer.zig",
      "type": "const",
      "name": "attr",
      "difficulty": "easy"
    }
  },
  {
    "instruction": "Write a Zig function similar to validateAttrs from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/elements/a.zig",
    "response": "pub fn validateAttrs(\n    gpa: Allocator,\n    errors: *std.ArrayListUnmanaged(Ast.Error),\n    src: []const u8,\n    nodes: []const Ast.Node,\n    parent_idx: u32,\n    node_idx: u32,\n    vait: *Attribute.ValidatingIterator,\n) !Model {\n    var seen_attrs: [attributes.list.len]?Span = undefined;\n    @memset(&seen_attrs, null);\n\n    var has_itemprop: ?Span = null;\n    while (try vait.next(gpa, src)) |attr| {\n        const name = attr.name.slice(src);\n        const attr_model = blk: {\n            if (attributes.index(name)) |idx| {\n                seen_attrs[idx] = attr.name;\n                break :blk attributes.list[idx].model;\n            }",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/elements/a.zig",
      "type": "function",
      "name": "validateAttrs",
      "difficulty": "medium"
    }
  },
  {
    "instruction": "Write a Zig const similar to categories from kristoff-it/superhtml",
    "context": "Repository: kristoff-it/superhtml (1127 ⭐)\nFile: src/html/elements/a.zig",
    "response": "const categories: Categories = .{\n        .flow = true,\n        .phrasing = true,\n        .interactive = has_href,\n    };",
    "metadata": {
      "repo": "kristoff-it/superhtml",
      "stars": 1127,
      "file": "src/html/elements/a.zig",
      "type": "const",
      "name": "categories",
      "difficulty": "easy"
    }
  }
]